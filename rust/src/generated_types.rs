#![allow(non_snake_case, non_camel_case_types, unused_variables)]

use jni_sys::{JNIEnv, jvalue, jobject, jclass, jmethodID};
use std::ffi::CString;

#[derive(Debug)]
pub struct asset_Asset {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl asset_Asset {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    asset_Asset {
      env: env,
      object: object
    }
  }

  pub fn get_owner(&self) -> plugin_PluginContainer {
    let ret = java_method!(self.env, self.object, "getOwner", "()Lorg/spongepowered/api/plugin/PluginContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/asset/Asset#getOwner was null") }
    plugin_PluginContainer { env: self.env, object: ret }
  }

  pub fn get_url(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getUrl", "()Ljava/net/URL;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/asset/Asset#getUrl was null") }
    ret
  }

  pub fn copy_to_file(&self, param_1: jobject) {
    java_method!(self.env, self.object, "copyToFile", "(Ljava/nio/file/Path;)V", CallVoidMethodA, param_1);
  }

  pub fn read_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "readString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/asset/Asset#readString was null") }
    ret
  }

  pub fn read_string_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "readString", "(Ljava/nio/charset/Charset;)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/asset/Asset#readString was null") }
    ret
  }

  pub fn read_lines(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "readLines", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/asset/Asset#readLines was null") }
    ret
  }

  pub fn read_lines_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "readLines", "(Ljava/nio/charset/Charset;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/asset/Asset#readLines was null") }
    ret
  }

  pub fn read_bytes(&self) -> &[i8] {
    unimplemented!();
  }
}

#[derive(Debug)]
pub struct asset_AssetManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl asset_AssetManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    asset_AssetManager {
      env: env,
      object: object
    }
  }

  pub fn get_asset(&self, param_1: jobject, param_2: jobject) -> Option<asset_Asset> {
    let ret = java_method!(self.env, self.object, "getAsset", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/asset/AssetManager#getAsset was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(asset_Asset { env: self.env, object: unwrapped }) }
  }

  pub fn get_asset_1(&self, param_1: jobject) -> Option<asset_Asset> {
    let ret = java_method!(self.env, self.object, "getAsset", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/asset/AssetManager#getAsset was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(asset_Asset { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct block_BlockSnapshot_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_BlockSnapshot_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_BlockSnapshot_Builder {
      env: env,
      object: object
    }
  }

  pub fn world(&self, param_1: world_storage_WorldProperties) -> block_BlockSnapshot_Builder {
    let ret = java_method!(self.env, self.object, "world", "(Lorg/spongepowered/api/world/storage/WorldProperties;)Lorg/spongepowered/api/block/BlockSnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot$Builder#world was null") }
    block_BlockSnapshot_Builder { env: self.env, object: ret }
  }

  pub fn block_state(&self, param_1: block_BlockState) -> block_BlockSnapshot_Builder {
    let ret = java_method!(self.env, self.object, "blockState", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/block/BlockSnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot$Builder#blockState was null") }
    block_BlockSnapshot_Builder { env: self.env, object: ret }
  }

  pub fn position(&self, param_1: jobject) -> block_BlockSnapshot_Builder {
    let ret = java_method!(self.env, self.object, "position", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/block/BlockSnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot$Builder#position was null") }
    block_BlockSnapshot_Builder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: world_Location) -> block_BlockSnapshot_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/block/BlockSnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot$Builder#from was null") }
    block_BlockSnapshot_Builder { env: self.env, object: ret }
  }

  pub fn creator(&self, param_1: jobject) -> block_BlockSnapshot_Builder {
    let ret = java_method!(self.env, self.object, "creator", "(Ljava/util/UUID;)Lorg/spongepowered/api/block/BlockSnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot$Builder#creator was null") }
    block_BlockSnapshot_Builder { env: self.env, object: ret }
  }

  pub fn notifier(&self, param_1: jobject) -> block_BlockSnapshot_Builder {
    let ret = java_method!(self.env, self.object, "notifier", "(Ljava/util/UUID;)Lorg/spongepowered/api/block/BlockSnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot$Builder#notifier was null") }
    block_BlockSnapshot_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_BlockSnapshot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_BlockSnapshot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_BlockSnapshot {
      env: env,
      object: object
    }
  }

  pub fn builder() -> block_BlockSnapshot_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/block/BlockSnapshot$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot#builder was null") }
    block_BlockSnapshot_Builder { env: self.env, object: ret }
  }

  pub fn get_state(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getState", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot#getState was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn get_extended_state(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getExtendedState", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot#getExtendedState was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn with_state(&self, param_1: block_BlockState) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "withState", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot#withState was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

  pub fn with_container(&self, param_1: data_DataContainer) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "withContainer", "(Lorg/spongepowered/api/data/DataContainer;)Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot#withContainer was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

  pub fn restore(&self, param_1: bool, param_2: world_BlockChangeFlag) -> bool {
    java_method!(self.env, self.object, "restore", "(ZLorg/spongepowered/api/world/BlockChangeFlag;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn get_creator(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCreator", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot#getCreator was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_notifier(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getNotifier", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockSnapshot#getNotifier was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct block_BlockState_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_BlockState_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_BlockState_Builder {
      env: env,
      object: object
    }
  }

  pub fn block_type(&self, param_1: block_BlockType) -> block_BlockState_Builder {
    let ret = java_method!(self.env, self.object, "blockType", "(Lorg/spongepowered/api/block/BlockType;)Lorg/spongepowered/api/block/BlockState$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState$Builder#blockType was null") }
    block_BlockState_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_BlockState {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_BlockState {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_BlockState {
      env: env,
      object: object
    }
  }

  pub fn builder() -> block_BlockState_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/block/BlockState$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#builder was null") }
    block_BlockState_Builder { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> block_BlockType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/block/BlockType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#getType was null") }
    block_BlockType { env: self.env, object: ret }
  }

  pub fn with_extended_properties(&self, param_1: world_Location) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "withExtendedProperties", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/block/BlockState;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#withExtendedProperties was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn cycle_value(&self, param_1: data_key_Key) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "cycleValue", "(Lorg/spongepowered/api/data/key/Key;)Lorg/spongepowered/api/block/BlockState;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#cycleValue was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn snapshot_for(&self, param_1: world_Location) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "snapshotFor", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#snapshotFor was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

  pub fn get_trait_value(&self, param_1: block_trait_BlockTrait) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getTraitValue", "(Lorg/spongepowered/api/block/trait/BlockTrait;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#getTraitValue was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_trait(&self, param_1: jobject) -> Option<block_trait_BlockTrait> {
    let ret = java_method!(self.env, self.object, "getTrait", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#getTrait was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(block_trait_BlockTrait { env: self.env, object: unwrapped }) }
  }

  pub fn with_trait(&self, param_1: block_trait_BlockTrait, param_2: jobject) -> Option<block_BlockState> {
    let ret = java_method!(self.env, self.object, "withTrait", "(Lorg/spongepowered/api/block/trait/BlockTrait;Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#withTrait was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(block_BlockState { env: self.env, object: unwrapped }) }
  }

  pub fn get_traits(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTraits", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#getTraits was null") }
    ret
  }

  pub fn get_trait_values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTraitValues", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#getTraitValues was null") }
    ret
  }

  pub fn get_trait_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTraitMap", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockState#getTraitMap was null") }
    ret
  }

}

#[derive(Debug)]
pub struct block_BlockType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_BlockType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_BlockType {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockType#getName was null") }
    ret
  }

  pub fn get_default_state(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getDefaultState", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockType#getDefaultState was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn get_item(&self) -> Option<item_ItemType> {
    let ret = java_method!(self.env, self.object, "getItem", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockType#getItem was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_ItemType { env: self.env, object: unwrapped }) }
  }

  pub fn get_tick_randomly(&self) -> bool {
    java_method!(self.env, self.object, "getTickRandomly", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_tick_randomly(&self, param_1: bool) {
    java_method!(self.env, self.object, "setTickRandomly", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_traits(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTraits", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockType#getTraits was null") }
    ret
  }

  pub fn get_trait(&self, param_1: jobject) -> Option<block_trait_BlockTrait> {
    let ret = java_method!(self.env, self.object, "getTrait", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/block/BlockType#getTrait was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(block_trait_BlockTrait { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct block_BlockTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_BlockTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_BlockTypes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct block_ScheduledBlockUpdate {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_ScheduledBlockUpdate {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_ScheduledBlockUpdate {
      env: env,
      object: object
    }
  }

  pub fn get_ticks(&self) -> i32 {
    java_method!(self.env, self.object, "getTicks", "()I", CallIntMethod)
  }

  pub fn set_ticks(&self, param_1: i32) {
    java_method!(self.env, self.object, "setTicks", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_priority(&self) -> i32 {
    java_method!(self.env, self.object, "getPriority", "()I", CallIntMethod)
  }

  pub fn set_priority(&self, param_1: i32) {
    java_method!(self.env, self.object, "setPriority", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct block_tileentity_Banner {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_Banner {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_Banner {
      env: env,
      object: object
    }
  }

  pub fn get_banner_data(&self) -> data_manipulator_mutable_tileentity_BannerData {
    let ret = java_method!(self.env, self.object, "getBannerData", "()Lorg/spongepowered/api/data/manipulator/mutable/tileentity/BannerData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/Banner#getBannerData was null") }
    data_manipulator_mutable_tileentity_BannerData { env: self.env, object: ret }
  }

  pub fn base_color(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "baseColor", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/Banner#baseColor was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn patterns_list(&self) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "patternsList", "()Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/Banner#patternsList was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_tileentity_carrier_Beacon {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_carrier_Beacon {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_carrier_Beacon {
      env: env,
      object: object
    }
  }

  pub fn get_completed_levels(&self) -> i32 {
    java_method!(self.env, self.object, "getCompletedLevels", "()I", CallIntMethod)
  }

  pub fn get_beacon_data(&self) -> data_manipulator_mutable_tileentity_BeaconData {
    let ret = java_method!(self.env, self.object, "getBeaconData", "()Lorg/spongepowered/api/data/manipulator/mutable/tileentity/BeaconData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/Beacon#getBeaconData was null") }
    data_manipulator_mutable_tileentity_BeaconData { env: self.env, object: ret }
  }

  pub fn primary_effect(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "primaryEffect", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/Beacon#primaryEffect was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn secondary_effect(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "secondaryEffect", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/Beacon#secondaryEffect was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_tileentity_carrier_BrewingStand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_carrier_BrewingStand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_carrier_BrewingStand {
      env: env,
      object: object
    }
  }

  pub fn brew(&self) -> bool {
    java_method!(self.env, self.object, "brew", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct block_tileentity_carrier_Chest {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_carrier_Chest {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_carrier_Chest {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_carrier_Dispenser {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_carrier_Dispenser {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_carrier_Dispenser {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_carrier_Dropper {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_carrier_Dropper {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_carrier_Dropper {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_carrier_Furnace {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_carrier_Furnace {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_carrier_Furnace {
      env: env,
      object: object
    }
  }

  pub fn smelt(&self) -> bool {
    java_method!(self.env, self.object, "smelt", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_furnace_data(&self) -> data_manipulator_mutable_tileentity_FurnaceData {
    let ret = java_method!(self.env, self.object, "getFurnaceData", "()Lorg/spongepowered/api/data/manipulator/mutable/tileentity/FurnaceData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/Furnace#getFurnaceData was null") }
    data_manipulator_mutable_tileentity_FurnaceData { env: self.env, object: ret }
  }

  pub fn passed_burn_time(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "passedBurnTime", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/Furnace#passedBurnTime was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_burn_time(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxBurnTime", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/Furnace#maxBurnTime was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn passed_cook_time(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "passedCookTime", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/Furnace#passedCookTime was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_cook_time(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxCookTime", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/Furnace#maxCookTime was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_tileentity_carrier_Hopper {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_carrier_Hopper {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_carrier_Hopper {
      env: env,
      object: object
    }
  }

  pub fn transfer_item(&self) {
    java_method!(self.env, self.object, "transferItem", "()V", CallVoidMethod);
  }

}


#[derive(Debug)]
pub struct block_tileentity_carrier_TileEntityCarrier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_carrier_TileEntityCarrier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_carrier_TileEntityCarrier {
      env: env,
      object: object
    }
  }

  pub fn get_inventory(&self) -> item_inventory_type_TileEntityInventory {
    let ret = java_method!(self.env, self.object, "getInventory", "()Lorg/spongepowered/api/item/inventory/type/TileEntityInventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/TileEntityCarrier#getInventory was null") }
    item_inventory_type_TileEntityInventory { env: self.env, object: ret }
  }

  pub fn get_inventory_1(&self) -> item_inventory_type_CarriedInventory {
    let ret = java_method!(self.env, self.object, "getInventory", "()Lorg/spongepowered/api/item/inventory/type/CarriedInventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/carrier/TileEntityCarrier#getInventory was null") }
    item_inventory_type_CarriedInventory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_tileentity_CommandBlock {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_CommandBlock {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_CommandBlock {
      env: env,
      object: object
    }
  }

  pub fn execute(&self) {
    java_method!(self.env, self.object, "execute", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct block_tileentity_Comparator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_Comparator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_Comparator {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_DaylightDetector {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_DaylightDetector {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_DaylightDetector {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_EnchantmentTable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_EnchantmentTable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_EnchantmentTable {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_EnderChest {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_EnderChest {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_EnderChest {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_EndPortal {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_EndPortal {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_EndPortal {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_FlowerPot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_FlowerPot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_FlowerPot {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_Jukebox {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_Jukebox {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_Jukebox {
      env: env,
      object: object
    }
  }

  pub fn play_record(&self) {
    java_method!(self.env, self.object, "playRecord", "()V", CallVoidMethod);
  }

  pub fn eject_record(&self) {
    java_method!(self.env, self.object, "ejectRecord", "()V", CallVoidMethod);
  }

  pub fn insert_record(&self, param_1: item_inventory_ItemStack) {
    java_method!(self.env, self.object, "insertRecord", "(Lorg/spongepowered/api/item/inventory/ItemStack;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct block_tileentity_MobSpawner {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_MobSpawner {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_MobSpawner {
      env: env,
      object: object
    }
  }

  pub fn spawn_entity_batch_immediately(&self, param_1: bool) {
    java_method!(self.env, self.object, "spawnEntityBatchImmediately", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_mob_spawner_data(&self) -> data_manipulator_mutable_MobSpawnerData {
    let ret = java_method!(self.env, self.object, "getMobSpawnerData", "()Lorg/spongepowered/api/data/manipulator/mutable/MobSpawnerData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#getMobSpawnerData was null") }
    data_manipulator_mutable_MobSpawnerData { env: self.env, object: ret }
  }

  pub fn remaining_delay(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "remainingDelay", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#remainingDelay was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn minimum_spawn_delay(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "minimumSpawnDelay", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#minimumSpawnDelay was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn maximum_spawn_delay(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maximumSpawnDelay", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#maximumSpawnDelay was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn spawn_count(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "spawnCount", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#spawnCount was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn maximum_nearby_entities(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maximumNearbyEntities", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#maximumNearbyEntities was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn required_player_range(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "requiredPlayerRange", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#requiredPlayerRange was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn spawn_range(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "spawnRange", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#spawnRange was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn next_entity_to_spawn(&self) -> data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue {
    let ret = java_method!(self.env, self.object, "nextEntityToSpawn", "()Lorg/spongepowered/api/data/manipulator/mutable/MobSpawnerData$NextEntityToSpawnValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#nextEntityToSpawn was null") }
    data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue { env: self.env, object: ret }
  }

  pub fn possible_entities_to_spawn(&self) -> data_value_mutable_WeightedCollectionValue {
    let ret = java_method!(self.env, self.object, "possibleEntitiesToSpawn", "()Lorg/spongepowered/api/data/value/mutable/WeightedCollectionValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/MobSpawner#possibleEntitiesToSpawn was null") }
    data_value_mutable_WeightedCollectionValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_tileentity_Note {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_Note {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_Note {
      env: env,
      object: object
    }
  }

  pub fn play_note(&self) {
    java_method!(self.env, self.object, "playNote", "()V", CallVoidMethod);
  }

  pub fn get_note_data(&self) -> data_manipulator_mutable_tileentity_NoteData {
    let ret = java_method!(self.env, self.object, "getNoteData", "()Lorg/spongepowered/api/data/manipulator/mutable/tileentity/NoteData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/Note#getNoteData was null") }
    data_manipulator_mutable_tileentity_NoteData { env: self.env, object: ret }
  }

  pub fn note(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "note", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/Note#note was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct block_tileentity_Piston {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_Piston {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_Piston {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_tileentity_Sign {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_Sign {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_Sign {
      env: env,
      object: object
    }
  }

  pub fn get_sign_data(&self) -> data_manipulator_mutable_tileentity_SignData {
    let ret = java_method!(self.env, self.object, "getSignData", "()Lorg/spongepowered/api/data/manipulator/mutable/tileentity/SignData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/Sign#getSignData was null") }
    data_manipulator_mutable_tileentity_SignData { env: self.env, object: ret }
  }

  pub fn lines(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "lines", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/Sign#lines was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_tileentity_Skull {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_Skull {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_Skull {
      env: env,
      object: object
    }
  }

  pub fn get_skull_data(&self) -> data_manipulator_mutable_SkullData {
    let ret = java_method!(self.env, self.object, "getSkullData", "()Lorg/spongepowered/api/data/manipulator/mutable/SkullData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/Skull#getSkullData was null") }
    data_manipulator_mutable_SkullData { env: self.env, object: ret }
  }

  pub fn skull_type(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "skullType", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/Skull#skullType was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_tileentity_TileEntity {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_TileEntity {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_TileEntity {
      env: env,
      object: object
    }
  }

  pub fn is_valid(&self) -> bool {
    java_method!(self.env, self.object, "isValid", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_valid(&self, param_1: bool) {
    java_method!(self.env, self.object, "setValid", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_type(&self) -> block_tileentity_TileEntityType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/block/tileentity/TileEntityType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/TileEntity#getType was null") }
    block_tileentity_TileEntityType { env: self.env, object: ret }
  }

  pub fn get_block(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getBlock", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/TileEntity#getBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct block_tileentity_TileEntityType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_TileEntityType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_TileEntityType {
      env: env,
      object: object
    }
  }

  pub fn get_tile_entity_type(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTileEntityType", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/tileentity/TileEntityType#getTileEntityType was null") }
    ret
  }

}

#[derive(Debug)]
pub struct block_tileentity_TileEntityTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_tileentity_TileEntityTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_tileentity_TileEntityTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_trait_BlockTrait {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_trait_BlockTrait {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_trait_BlockTrait {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/trait/BlockTrait#getName was null") }
    ret
  }

  pub fn get_possible_values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPossibleValues", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/trait/BlockTrait#getPossibleValues was null") }
    ret
  }

  pub fn get_value_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValueClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/trait/BlockTrait#getValueClass was null") }
    ret
  }

  pub fn get_predicate(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPredicate", "()Ljava/util/function/Predicate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/block/trait/BlockTrait#getPredicate was null") }
    ret
  }

}

#[derive(Debug)]
pub struct block_trait_BooleanTrait {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_trait_BooleanTrait {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_trait_BooleanTrait {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_trait_BooleanTraits {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_trait_BooleanTraits {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_trait_BooleanTraits {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_trait_EnumTrait {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_trait_EnumTrait {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_trait_EnumTrait {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_trait_EnumTraits {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_trait_EnumTraits {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_trait_EnumTraits {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_trait_IntegerTrait {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_trait_IntegerTrait {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_trait_IntegerTrait {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct block_trait_IntegerTraits {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl block_trait_IntegerTraits {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    block_trait_IntegerTraits {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct boss_BossBar {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl boss_BossBar {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    boss_BossBar {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getName", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#getName was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn set_name(&self, param_1: text_Text) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setName", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#setName was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn get_percent(&self) -> f32 {
    java_method!(self.env, self.object, "getPercent", "()F", CallFloatMethod)
  }

  pub fn set_percent(&self, param_1: f32) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setPercent", "(F)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#setPercent was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn get_color(&self) -> boss_BossBarColor {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/boss/BossBarColor;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#getColor was null") }
    boss_BossBarColor { env: self.env, object: ret }
  }

  pub fn set_color(&self, param_1: boss_BossBarColor) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setColor", "(Lorg/spongepowered/api/boss/BossBarColor;)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#setColor was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn get_overlay(&self) -> boss_BossBarOverlay {
    let ret = java_method!(self.env, self.object, "getOverlay", "()Lorg/spongepowered/api/boss/BossBarOverlay;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#getOverlay was null") }
    boss_BossBarOverlay { env: self.env, object: ret }
  }

  pub fn set_overlay(&self, param_1: boss_BossBarOverlay) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setOverlay", "(Lorg/spongepowered/api/boss/BossBarOverlay;)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#setOverlay was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn should_darken_sky(&self) -> bool {
    java_method!(self.env, self.object, "shouldDarkenSky", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_darken_sky(&self, param_1: bool) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setDarkenSky", "(Z)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#setDarkenSky was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn should_play_end_boss_music(&self) -> bool {
    java_method!(self.env, self.object, "shouldPlayEndBossMusic", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_play_end_boss_music(&self, param_1: bool) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setPlayEndBossMusic", "(Z)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#setPlayEndBossMusic was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn should_create_fog(&self) -> bool {
    java_method!(self.env, self.object, "shouldCreateFog", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_create_fog(&self, param_1: bool) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setCreateFog", "(Z)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/BossBar#setCreateFog was null") }
    boss_BossBar { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct boss_BossBarColor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl boss_BossBarColor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    boss_BossBarColor {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct boss_BossBarColors {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl boss_BossBarColors {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    boss_BossBarColors {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct boss_BossBarOverlay {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl boss_BossBarOverlay {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    boss_BossBarOverlay {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct boss_BossBarOverlays {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl boss_BossBarOverlays {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    boss_BossBarOverlays {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct boss_ServerBossBar_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl boss_ServerBossBar_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    boss_ServerBossBar_Builder {
      env: env,
      object: object
    }
  }

  pub fn name(&self, param_1: text_Text) -> boss_ServerBossBar_Builder {
    let ret = java_method!(self.env, self.object, "name", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/boss/ServerBossBar$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar$Builder#name was null") }
    boss_ServerBossBar_Builder { env: self.env, object: ret }
  }

  pub fn percent(&self, param_1: f32) -> boss_ServerBossBar_Builder {
    let ret = java_method!(self.env, self.object, "percent", "(F)Lorg/spongepowered/api/boss/ServerBossBar$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar$Builder#percent was null") }
    boss_ServerBossBar_Builder { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: boss_BossBarColor) -> boss_ServerBossBar_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/boss/BossBarColor;)Lorg/spongepowered/api/boss/ServerBossBar$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar$Builder#color was null") }
    boss_ServerBossBar_Builder { env: self.env, object: ret }
  }

  pub fn overlay(&self, param_1: boss_BossBarOverlay) -> boss_ServerBossBar_Builder {
    let ret = java_method!(self.env, self.object, "overlay", "(Lorg/spongepowered/api/boss/BossBarOverlay;)Lorg/spongepowered/api/boss/ServerBossBar$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar$Builder#overlay was null") }
    boss_ServerBossBar_Builder { env: self.env, object: ret }
  }

  pub fn darken_sky(&self, param_1: bool) -> boss_ServerBossBar_Builder {
    let ret = java_method!(self.env, self.object, "darkenSky", "(Z)Lorg/spongepowered/api/boss/ServerBossBar$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar$Builder#darkenSky was null") }
    boss_ServerBossBar_Builder { env: self.env, object: ret }
  }

  pub fn play_end_boss_music(&self, param_1: bool) -> boss_ServerBossBar_Builder {
    let ret = java_method!(self.env, self.object, "playEndBossMusic", "(Z)Lorg/spongepowered/api/boss/ServerBossBar$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar$Builder#playEndBossMusic was null") }
    boss_ServerBossBar_Builder { env: self.env, object: ret }
  }

  pub fn create_fog(&self, param_1: bool) -> boss_ServerBossBar_Builder {
    let ret = java_method!(self.env, self.object, "createFog", "(Z)Lorg/spongepowered/api/boss/ServerBossBar$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar$Builder#createFog was null") }
    boss_ServerBossBar_Builder { env: self.env, object: ret }
  }

  pub fn visible(&self, param_1: bool) -> boss_ServerBossBar_Builder {
    let ret = java_method!(self.env, self.object, "visible", "(Z)Lorg/spongepowered/api/boss/ServerBossBar$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar$Builder#visible was null") }
    boss_ServerBossBar_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar$Builder#build was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct boss_ServerBossBar {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl boss_ServerBossBar {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    boss_ServerBossBar {
      env: env,
      object: object
    }
  }

  pub fn builder() -> boss_ServerBossBar_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/boss/ServerBossBar$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#builder was null") }
    boss_ServerBossBar_Builder { env: self.env, object: ret }
  }

  pub fn set_name(&self, param_1: text_Text) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "setName", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setName was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn set_percent(&self, param_1: f32) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "setPercent", "(F)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setPercent was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn set_color(&self, param_1: boss_BossBarColor) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "setColor", "(Lorg/spongepowered/api/boss/BossBarColor;)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setColor was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn set_overlay(&self, param_1: boss_BossBarOverlay) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "setOverlay", "(Lorg/spongepowered/api/boss/BossBarOverlay;)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setOverlay was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn set_darken_sky(&self, param_1: bool) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "setDarkenSky", "(Z)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setDarkenSky was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn set_play_end_boss_music(&self, param_1: bool) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "setPlayEndBossMusic", "(Z)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setPlayEndBossMusic was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn set_create_fog(&self, param_1: bool) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "setCreateFog", "(Z)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setCreateFog was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn is_visible(&self) -> bool {
    java_method!(self.env, self.object, "isVisible", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_visible(&self, param_1: bool) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "setVisible", "(Z)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setVisible was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn get_players(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPlayers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#getPlayers was null") }
    ret
  }

  pub fn add_player(&self, param_1: entity_living_player_Player) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "addPlayer", "(Lorg/spongepowered/api/entity/living/player/Player;)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#addPlayer was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn remove_player(&self, param_1: entity_living_player_Player) -> boss_ServerBossBar {
    let ret = java_method!(self.env, self.object, "removePlayer", "(Lorg/spongepowered/api/entity/living/player/Player;)Lorg/spongepowered/api/boss/ServerBossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#removePlayer was null") }
    boss_ServerBossBar { env: self.env, object: ret }
  }

  pub fn set_create_fog_1(&self, param_1: bool) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setCreateFog", "(Z)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setCreateFog was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn set_play_end_boss_music_1(&self, param_1: bool) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setPlayEndBossMusic", "(Z)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setPlayEndBossMusic was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn set_darken_sky_1(&self, param_1: bool) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setDarkenSky", "(Z)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setDarkenSky was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn set_overlay_1(&self, param_1: boss_BossBarOverlay) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setOverlay", "(Lorg/spongepowered/api/boss/BossBarOverlay;)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setOverlay was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn set_color_1(&self, param_1: boss_BossBarColor) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setColor", "(Lorg/spongepowered/api/boss/BossBarColor;)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setColor was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn set_percent_1(&self, param_1: f32) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setPercent", "(F)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setPercent was null") }
    boss_BossBar { env: self.env, object: ret }
  }

  pub fn set_name_1(&self, param_1: text_Text) -> boss_BossBar {
    let ret = java_method!(self.env, self.object, "setName", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/boss/BossBar;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/boss/ServerBossBar#setName was null") }
    boss_BossBar { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct CatalogType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl CatalogType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    CatalogType {
      env: env,
      object: object
    }
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/CatalogType#getId was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/CatalogType#getName was null") }
    ret
  }

}

#[derive(Debug)]
pub struct CatalogTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl CatalogTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    CatalogTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct command_args_ArgumentParseException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_ArgumentParseException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_ArgumentParseException {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: text_Text, param_2: jobject, param_3: i32) -> command_args_ArgumentParseException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Ljava/lang/String;I)Lorg/spongepowered/api/command/args/ArgumentParseException", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ArgumentParseException#<init> was null") }
    command_args_ArgumentParseException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: text_Text, param_2: jobject, param_3: jobject, param_4: i32) -> command_args_ArgumentParseException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Throwable;Ljava/lang/String;I)Lorg/spongepowered/api/command/args/ArgumentParseException", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ArgumentParseException#<init> was null") }
    command_args_ArgumentParseException { env: self.env, object: ret }
  }

  pub fn get_text(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getText", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ArgumentParseException#getText was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_annotated_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAnnotatedPosition", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ArgumentParseException#getAnnotatedPosition was null") }
    ret
  }

  pub fn get_position(&self) -> i32 {
    java_method!(self.env, self.object, "getPosition", "()I", CallIntMethod)
  }

  pub fn get_source_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSourceString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ArgumentParseException#getSourceString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_ArgUtils {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_ArgUtils {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_ArgUtils {
      env: env,
      object: object
    }
  }

  pub fn text_to_arg_key(param_1: text_Text) -> jobject {
    let ret = java_method!(self.env, "textToArgKey", "(Lorg/spongepowered/api/text/Text;)Ljava/lang/String;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ArgUtils#textToArgKey was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_ChildCommandElementExecutor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_ChildCommandElementExecutor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_ChildCommandElementExecutor {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: command_spec_CommandExecutor) -> command_args_ChildCommandElementExecutor {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/command/spec/CommandExecutor;)Lorg/spongepowered/api/command/args/ChildCommandElementExecutor", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ChildCommandElementExecutor#<init> was null") }
    command_args_ChildCommandElementExecutor { env: self.env, object: ret }
  }

  pub fn register(&self, param_1: command_CommandCallable, param_2: jobject) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "register", "(Lorg/spongepowered/api/command/CommandCallable;Ljava/util/List;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ChildCommandElementExecutor#register was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn register_1(&self, param_1: command_CommandCallable, param_2: &[jobject]) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "register", "(Lorg/spongepowered/api/command/CommandCallable;[Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ChildCommandElementExecutor#register was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ChildCommandElementExecutor#complete was null") }
    ret
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn execute(&self, param_1: command_CommandSource, param_2: command_args_CommandContext) -> command_CommandResult {
    let ret = java_method!(self.env, self.object, "execute", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandContext;)Lorg/spongepowered/api/command/CommandResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ChildCommandElementExecutor#execute was null") }
    command_CommandResult { env: self.env, object: ret }
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/ChildCommandElementExecutor#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_CommandArgs {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_CommandArgs {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_CommandArgs {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject) -> command_args_CommandArgs {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/util/List;)Lorg/spongepowered/api/command/args/CommandArgs", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandArgs#<init> was null") }
    command_args_CommandArgs { env: self.env, object: ret }
  }

  pub fn has_next(&self) -> bool {
    java_method!(self.env, self.object, "hasNext", "()Z", CallBooleanMethod) == 1
  }

  pub fn peek(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "peek", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandArgs#peek was null") }
    ret
  }

  pub fn next(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "next", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandArgs#next was null") }
    ret
  }

  pub fn next_if_present(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "nextIfPresent", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandArgs#nextIfPresent was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn create_error(&self, param_1: text_Text) -> command_args_ArgumentParseException {
    let ret = java_method!(self.env, self.object, "createError", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/ArgumentParseException;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandArgs#createError was null") }
    command_args_ArgumentParseException { env: self.env, object: ret }
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandArgs#getAll was null") }
    ret
  }

  pub fn get_state(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getState", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandArgs#getState was null") }
    ret
  }

  pub fn set_state(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setState", "(Ljava/lang/Object;)V", CallVoidMethodA, param_1);
  }

  pub fn get_raw(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRaw", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandArgs#getRaw was null") }
    ret
  }

  pub fn insert_arg(&self, param_1: jobject) {
    java_method!(self.env, self.object, "insertArg", "(Ljava/lang/String;)V", CallVoidMethodA, param_1);
  }

  pub fn remove_args(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "removeArgs", "(Ljava/lang/Object;Ljava/lang/Object;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_raw_position(&self) -> i32 {
    java_method!(self.env, self.object, "getRawPosition", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct command_args_CommandContext {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_CommandContext {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_CommandContext {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> command_args_CommandContext {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/command/args/CommandContext", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandContext#<init> was null") }
    command_args_CommandContext { env: self.env, object: ret }
  }

  pub fn get_all(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "(Ljava/lang/String;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandContext#getAll was null") }
    ret
  }

  pub fn get_all_1(&self, param_1: text_Text) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "(Lorg/spongepowered/api/text/Text;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandContext#getAll was null") }
    ret
  }

  pub fn get_one(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOne", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandContext#getOne was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_one_1(&self, param_1: text_Text) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOne", "(Lorg/spongepowered/api/text/Text;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandContext#getOne was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn put_arg(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "putArg", "(Ljava/lang/String;Ljava/lang/Object;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn put_arg_1(&self, param_1: text_Text, param_2: jobject) {
    java_method!(self.env, self.object, "putArg", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Object;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn check_permission(&self, param_1: command_CommandSource, param_2: jobject) {
    java_method!(self.env, self.object, "checkPermission", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn has_any(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "hasAny", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn has_any_1(&self, param_1: text_Text) -> bool {
    java_method!(self.env, self.object, "hasAny", "(Lorg/spongepowered/api/text/Text;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct command_args_CommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_CommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_CommandElement {
      env: env,
      object: object
    }
  }

  pub fn get_key(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getKey", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandElement#getKey was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_untranslated_key(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getUntranslatedKey", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandElement#getUntranslatedKey was null") }
    ret
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandElement#complete was null") }
    ret
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_CommandFlags_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_CommandFlags_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_CommandFlags_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct command_args_CommandFlags_Builder_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_CommandFlags_Builder_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_CommandFlags_Builder_1 {
      env: env,
      object: object
    }
  }

  pub fn apply(&self, param_1: jobject) -> command_args_CommandElement {
    let ret = java_method!(self.env, self.object, "apply", "(Ljava/lang/String;)Lorg/spongepowered/api/command/args/CommandElement;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder$1#apply was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn apply_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "apply", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder$1#apply was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_CommandFlags_Builder_2 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_CommandFlags_Builder_2 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_CommandFlags_Builder_2 {
      env: env,
      object: object
    }
  }

  pub fn apply(&self, param_1: jobject) -> command_args_CommandElement {
    let ret = java_method!(self.env, self.object, "apply", "(Ljava/lang/String;)Lorg/spongepowered/api/command/args/CommandElement;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder$2#apply was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn apply_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "apply", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder$2#apply was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_CommandFlags_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_CommandFlags_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_CommandFlags_Builder {
      env: env,
      object: object
    }
  }

  pub fn flag(&self, param_1: &[jobject]) -> command_args_CommandFlags_Builder {
    let ret = java_method!(self.env, self.object, "flag", "([Ljava/lang/String;)Lorg/spongepowered/api/command/args/CommandFlags$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder#flag was null") }
    command_args_CommandFlags_Builder { env: self.env, object: ret }
  }

  pub fn permission_flag(&self, param_1: jobject, param_2: &[jobject]) -> command_args_CommandFlags_Builder {
    let ret = java_method!(self.env, self.object, "permissionFlag", "(Ljava/lang/String;[Ljava/lang/String;)Lorg/spongepowered/api/command/args/CommandFlags$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder#permissionFlag was null") }
    command_args_CommandFlags_Builder { env: self.env, object: ret }
  }

  pub fn value_flag(&self, param_1: command_args_CommandElement, param_2: &[jobject]) -> command_args_CommandFlags_Builder {
    let ret = java_method!(self.env, self.object, "valueFlag", "(Lorg/spongepowered/api/command/args/CommandElement;[Ljava/lang/String;)Lorg/spongepowered/api/command/args/CommandFlags$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder#valueFlag was null") }
    command_args_CommandFlags_Builder { env: self.env, object: ret }
  }

  pub fn set_accepts_arbitrary_long_flags(&self, param_1: bool) -> command_args_CommandFlags_Builder {
    let ret = java_method!(self.env, self.object, "setAcceptsArbitraryLongFlags", "(Z)Lorg/spongepowered/api/command/args/CommandFlags$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder#setAcceptsArbitraryLongFlags was null") }
    command_args_CommandFlags_Builder { env: self.env, object: ret }
  }

  pub fn set_unknown_long_flag_behavior(&self, param_1: command_args_CommandFlags_UnknownFlagBehavior) -> command_args_CommandFlags_Builder {
    let ret = java_method!(self.env, self.object, "setUnknownLongFlagBehavior", "(Lorg/spongepowered/api/command/args/CommandFlags$UnknownFlagBehavior;)Lorg/spongepowered/api/command/args/CommandFlags$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder#setUnknownLongFlagBehavior was null") }
    command_args_CommandFlags_Builder { env: self.env, object: ret }
  }

  pub fn set_unknown_short_flag_behavior(&self, param_1: command_args_CommandFlags_UnknownFlagBehavior) -> command_args_CommandFlags_Builder {
    let ret = java_method!(self.env, self.object, "setUnknownShortFlagBehavior", "(Lorg/spongepowered/api/command/args/CommandFlags$UnknownFlagBehavior;)Lorg/spongepowered/api/command/args/CommandFlags$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder#setUnknownShortFlagBehavior was null") }
    command_args_CommandFlags_Builder { env: self.env, object: ret }
  }

  pub fn set_anchor_flags(&self, param_1: bool) -> command_args_CommandFlags_Builder {
    let ret = java_method!(self.env, self.object, "setAnchorFlags", "(Z)Lorg/spongepowered/api/command/args/CommandFlags$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder#setAnchorFlags was null") }
    command_args_CommandFlags_Builder { env: self.env, object: ret }
  }

  pub fn build_with(&self, param_1: command_args_CommandElement) -> command_args_CommandElement {
    let ret = java_method!(self.env, self.object, "buildWith", "(Lorg/spongepowered/api/command/args/CommandElement;)Lorg/spongepowered/api/command/args/CommandElement;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$Builder#buildWith was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_CommandFlags_UnknownFlagBehavior {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_CommandFlags_UnknownFlagBehavior {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_CommandFlags_UnknownFlagBehavior {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[command_args_CommandFlags_UnknownFlagBehavior] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> command_args_CommandFlags_UnknownFlagBehavior {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/command/args/CommandFlags$UnknownFlagBehavior;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags$UnknownFlagBehavior#valueOf was null") }
    command_args_CommandFlags_UnknownFlagBehavior { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_CommandFlags {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_CommandFlags {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_CommandFlags {
      env: env,
      object: object
    }
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/CommandFlags#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_AllOfCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_AllOfCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_AllOfCommandElement {
      env: env,
      object: object
    }
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$AllOfCommandElement#complete was null") }
    ret
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$AllOfCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_CatalogedTypeCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_CatalogedTypeCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_CatalogedTypeCommandElement {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_ChoicesCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_ChoicesCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_ChoicesCommandElement {
      env: env,
      object: object
    }
  }

  pub fn parse_value(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs) -> jobject {
    let ret = java_method!(self.env, self.object, "parseValue", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$ChoicesCommandElement#parseValue was null") }
    ret
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$ChoicesCommandElement#complete was null") }
    ret
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$ChoicesCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_EntityCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_EntityCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_EntityCommandElement {
      env: env,
      object: object
    }
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$EntityCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_EnumValueElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_EnumValueElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_EnumValueElement {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_FirstParsingCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_FirstParsingCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_FirstParsingCommandElement {
      env: env,
      object: object
    }
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$FirstParsingCommandElement#complete was null") }
    ret
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$FirstParsingCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_KeyElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_KeyElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_KeyElement {
      env: env,
      object: object
    }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$KeyElement#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_LiteralCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_LiteralCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_LiteralCommandElement {
      env: env,
      object: object
    }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$LiteralCommandElement#complete was null") }
    ret
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$LiteralCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_LocationCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_LocationCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_LocationCommandElement {
      env: env,
      object: object
    }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$LocationCommandElement#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_MarkTrueCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_MarkTrueCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_MarkTrueCommandElement {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> command_args_GenericArguments_MarkTrueCommandElement {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/command/args/GenericArguments$MarkTrueCommandElement", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$MarkTrueCommandElement#<init> was null") }
    command_args_GenericArguments_MarkTrueCommandElement { env: self.env, object: ret }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$MarkTrueCommandElement#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_NumericElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_NumericElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_NumericElement {
      env: env,
      object: object
    }
  }

  pub fn parse_value(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs) -> jobject {
    let ret = java_method!(self.env, self.object, "parseValue", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$NumericElement#parseValue was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_OnlyOneCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_OnlyOneCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_OnlyOneCommandElement {
      env: env,
      object: object
    }
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$OnlyOneCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$OnlyOneCommandElement#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_OptionalCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_OptionalCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_OptionalCommandElement {
      env: env,
      object: object
    }
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$OptionalCommandElement#complete was null") }
    ret
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$OptionalCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_PermissionCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_PermissionCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_PermissionCommandElement {
      env: env,
      object: object
    }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$PermissionCommandElement#complete was null") }
    ret
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$PermissionCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_PlayerCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_PlayerCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_PlayerCommandElement {
      env: env,
      object: object
    }
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$PlayerCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_PluginCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_PluginCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_PluginCommandElement {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_RemainingJoinedStringsCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_RemainingJoinedStringsCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_RemainingJoinedStringsCommandElement {
      env: env,
      object: object
    }
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$RemainingJoinedStringsCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_RepeatedCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_RepeatedCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_RepeatedCommandElement {
      env: env,
      object: object
    }
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$RepeatedCommandElement#complete was null") }
    ret
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$RepeatedCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_SequenceCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_SequenceCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_SequenceCommandElement {
      env: env,
      object: object
    }
  }

  pub fn parse(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "parse", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$SequenceCommandElement#complete was null") }
    ret
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$SequenceCommandElement#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_StringElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_StringElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_StringElement {
      env: env,
      object: object
    }
  }

  pub fn parse_value(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs) -> jobject {
    let ret = java_method!(self.env, self.object, "parseValue", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$StringElement#parseValue was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_UserCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_UserCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_UserCommandElement {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_Vector3dCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_Vector3dCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_Vector3dCommandElement {
      env: env,
      object: object
    }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$Vector3dCommandElement#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments_WorldPropertiesCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments_WorldPropertiesCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments_WorldPropertiesCommandElement {
      env: env,
      object: object
    }
  }

  pub fn parse_value(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs) -> jobject {
    let ret = java_method!(self.env, self.object, "parseValue", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$WorldPropertiesCommandElement#parseValue was null") }
    ret
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments$WorldPropertiesCommandElement#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_GenericArguments {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_GenericArguments {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_GenericArguments {
      env: env,
      object: object
    }
  }

  pub fn none() -> command_args_CommandElement {
    let ret = java_method!(self.env, "none", "()Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#none was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn player_or_source(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "playerOrSource", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#playerOrSource was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn player(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "player", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#player was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn user(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "user", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#user was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn user_or_source(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "userOrSource", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#userOrSource was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn world(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "world", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#world was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn dimension(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "dimension", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#dimension was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn vector_3d(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "vector3d", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#vector3d was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn location(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "location", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#location was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn cataloged_element(param_1: text_Text, param_2: jobject) -> command_args_CommandElement {
    let ret = java_method!(self.env, "catalogedElement", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Class;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#catalogedElement was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn plugin(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "plugin", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#plugin was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn flags() -> command_args_CommandFlags_Builder {
    let ret = java_method!(self.env, "flags", "()Lorg/spongepowered/api/command/args/CommandFlags$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#flags was null") }
    command_args_CommandFlags_Builder { env: self.env, object: ret }
  }

  pub fn seq(param_1: &[command_args_CommandElement]) -> command_args_CommandElement {
    let ret = java_method!(self.env, "seq", "([Lorg/spongepowered/api/command/args/CommandElement;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#seq was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn choices(param_1: text_Text, param_2: jobject) -> command_args_CommandElement {
    let ret = java_method!(self.env, "choices", "(Lorg/spongepowered/api/text/Text;Ljava/util/Map;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#choices was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn choices_1(param_1: text_Text, param_2: jobject, param_3: bool) -> command_args_CommandElement {
    let ret = java_method!(self.env, "choices", "(Lorg/spongepowered/api/text/Text;Ljava/util/Map;Z)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#choices was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn choices_2(param_1: text_Text, param_2: jobject, param_3: jobject) -> command_args_CommandElement {
    let ret = java_method!(self.env, "choices", "(Lorg/spongepowered/api/text/Text;Ljava/util/function/Supplier;Ljava/util/function/Function;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#choices was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn choices_3(param_1: text_Text, param_2: jobject, param_3: jobject, param_4: bool) -> command_args_CommandElement {
    let ret = java_method!(self.env, "choices", "(Lorg/spongepowered/api/text/Text;Ljava/util/function/Supplier;Ljava/util/function/Function;Z)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#choices was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn first_parsing(param_1: &[command_args_CommandElement]) -> command_args_CommandElement {
    let ret = java_method!(self.env, "firstParsing", "([Lorg/spongepowered/api/command/args/CommandElement;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#firstParsing was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn optional(param_1: command_args_CommandElement) -> command_args_CommandElement {
    let ret = java_method!(self.env, "optional", "(Lorg/spongepowered/api/command/args/CommandElement;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#optional was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn optional_1(param_1: command_args_CommandElement, param_2: jobject) -> command_args_CommandElement {
    let ret = java_method!(self.env, "optional", "(Lorg/spongepowered/api/command/args/CommandElement;Ljava/lang/Object;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#optional was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn optional_weak(param_1: command_args_CommandElement) -> command_args_CommandElement {
    let ret = java_method!(self.env, "optionalWeak", "(Lorg/spongepowered/api/command/args/CommandElement;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#optionalWeak was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn optional_weak_1(param_1: command_args_CommandElement, param_2: jobject) -> command_args_CommandElement {
    let ret = java_method!(self.env, "optionalWeak", "(Lorg/spongepowered/api/command/args/CommandElement;Ljava/lang/Object;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#optionalWeak was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn repeated(param_1: command_args_CommandElement, param_2: i32) -> command_args_CommandElement {
    let ret = java_method!(self.env, "repeated", "(Lorg/spongepowered/api/command/args/CommandElement;I)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#repeated was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn all_of(param_1: command_args_CommandElement) -> command_args_CommandElement {
    let ret = java_method!(self.env, "allOf", "(Lorg/spongepowered/api/command/args/CommandElement;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#allOf was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn string(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "string", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#string was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn integer(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "integer", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#integer was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn long_num(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "longNum", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#longNum was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn double_num(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "doubleNum", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#doubleNum was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn bool(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "bool", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#bool was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn enum_value(param_1: text_Text, param_2: jobject) -> command_args_CommandElement {
    let ret = java_method!(self.env, "enumValue", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Class;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#enumValue was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn remaining_joined_strings(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "remainingJoinedStrings", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#remainingJoinedStrings was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn literal(param_1: text_Text, param_2: &[jobject]) -> command_args_CommandElement {
    let ret = java_method!(self.env, "literal", "(Lorg/spongepowered/api/text/Text;[Ljava/lang/String;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#literal was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn literal_1(param_1: text_Text, param_2: jobject, param_3: &[jobject]) -> command_args_CommandElement {
    let ret = java_method!(self.env, "literal", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Object;[Ljava/lang/String;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#literal was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn only_one(param_1: command_args_CommandElement) -> command_args_CommandElement {
    let ret = java_method!(self.env, "onlyOne", "(Lorg/spongepowered/api/command/args/CommandElement;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#onlyOne was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn requiring_permission(param_1: command_args_CommandElement, param_2: jobject) -> command_args_CommandElement {
    let ret = java_method!(self.env, "requiringPermission", "(Lorg/spongepowered/api/command/args/CommandElement;Ljava/lang/String;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#requiringPermission was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn entity(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "entity", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#entity was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

  pub fn entity_or_source(param_1: text_Text) -> command_args_CommandElement {
    let ret = java_method!(self.env, "entityOrSource", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/CommandElement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/GenericArguments#entityOrSource was null") }
    command_args_CommandElement { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct command_args_parsing_InputTokenizer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_parsing_InputTokenizer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_parsing_InputTokenizer {
      env: env,
      object: object
    }
  }

  pub fn quoted_strings(param_1: bool) -> command_args_parsing_InputTokenizer {
    let ret = java_method!(self.env, "quotedStrings", "(Z)Lorg/spongepowered/api/command/args/parsing/InputTokenizer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/InputTokenizer#quotedStrings was null") }
    command_args_parsing_InputTokenizer { env: self.env, object: ret }
  }

  pub fn space_split_string() -> command_args_parsing_InputTokenizer {
    let ret = java_method!(self.env, "spaceSplitString", "()Lorg/spongepowered/api/command/args/parsing/InputTokenizer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/InputTokenizer#spaceSplitString was null") }
    command_args_parsing_InputTokenizer { env: self.env, object: ret }
  }

  pub fn raw_input() -> command_args_parsing_InputTokenizer {
    let ret = java_method!(self.env, "rawInput", "()Lorg/spongepowered/api/command/args/parsing/InputTokenizer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/InputTokenizer#rawInput was null") }
    command_args_parsing_InputTokenizer { env: self.env, object: ret }
  }

  pub fn tokenize(&self, param_1: jobject, param_2: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "tokenize", "(Ljava/lang/String;Z)Ljava/util/List;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/InputTokenizer#tokenize was null") }
    ret
  }

}


#[derive(Debug)]
pub struct command_args_parsing_QuotedStringTokenizer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_parsing_QuotedStringTokenizer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_parsing_QuotedStringTokenizer {
      env: env,
      object: object
    }
  }

  pub fn tokenize(&self, param_1: jobject, param_2: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "tokenize", "(Ljava/lang/String;Z)Ljava/util/List;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/QuotedStringTokenizer#tokenize was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_parsing_RawStringInputTokenizer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_parsing_RawStringInputTokenizer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_parsing_RawStringInputTokenizer {
      env: env,
      object: object
    }
  }

  pub fn tokenize(&self, param_1: jobject, param_2: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "tokenize", "(Ljava/lang/String;Z)Ljava/util/List;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/RawStringInputTokenizer#tokenize was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_parsing_SingleArg {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_parsing_SingleArg {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_parsing_SingleArg {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: i32, param_3: i32) -> command_args_parsing_SingleArg {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;II)Lorg/spongepowered/api/command/args/parsing/SingleArg", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/SingleArg#<init> was null") }
    command_args_parsing_SingleArg { env: self.env, object: ret }
  }

  pub fn get_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValue", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/SingleArg#getValue was null") }
    ret
  }

  pub fn get_start_idx(&self) -> i32 {
    java_method!(self.env, self.object, "getStartIdx", "()I", CallIntMethod)
  }

  pub fn get_end_idx(&self) -> i32 {
    java_method!(self.env, self.object, "getEndIdx", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/SingleArg#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_parsing_SpaceSplitInputTokenizer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_parsing_SpaceSplitInputTokenizer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_parsing_SpaceSplitInputTokenizer {
      env: env,
      object: object
    }
  }

  pub fn tokenize(&self, param_1: jobject, param_2: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "tokenize", "(Ljava/lang/String;Z)Ljava/util/List;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/SpaceSplitInputTokenizer#tokenize was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_parsing_TokenizerState {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_parsing_TokenizerState {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_parsing_TokenizerState {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: bool) -> command_args_parsing_TokenizerState {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Z)Lorg/spongepowered/api/command/args/parsing/TokenizerState", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/TokenizerState#<init> was null") }
    command_args_parsing_TokenizerState { env: self.env, object: ret }
  }

  pub fn has_more(&self) -> bool {
    java_method!(self.env, self.object, "hasMore", "()Z", CallBooleanMethod) == 1
  }

  pub fn peek(&self) -> i32 {
    java_method!(self.env, self.object, "peek", "()I", CallIntMethod)
  }

  pub fn next(&self) -> i32 {
    java_method!(self.env, self.object, "next", "()I", CallIntMethod)
  }

  pub fn create_exception(&self, param_1: text_Text) -> command_args_ArgumentParseException {
    let ret = java_method!(self.env, self.object, "createException", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/args/ArgumentParseException;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/parsing/TokenizerState#createException was null") }
    command_args_ArgumentParseException { env: self.env, object: ret }
  }

  pub fn is_lenient(&self) -> bool {
    java_method!(self.env, self.object, "isLenient", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_index(&self) -> i32 {
    java_method!(self.env, self.object, "getIndex", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct command_args_PatternMatchingCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_PatternMatchingCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_PatternMatchingCommandElement {
      env: env,
      object: object
    }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/PatternMatchingCommandElement#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_args_SelectorCommandElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_args_SelectorCommandElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_args_SelectorCommandElement {
      env: env,
      object: object
    }
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/args/SelectorCommandElement#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_CommandCallable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandCallable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandCallable {
      env: env,
      object: object
    }
  }

  pub fn process(&self, param_1: command_CommandSource, param_2: jobject) -> command_CommandResult {
    let ret = java_method!(self.env, self.object, "process", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;)Lorg/spongepowered/api/command/CommandResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandCallable#process was null") }
    command_CommandResult { env: self.env, object: ret }
  }

  pub fn get_suggestions(&self, param_1: command_CommandSource, param_2: jobject, param_3: world_Location) -> jobject {
    let ret = java_method!(self.env, self.object, "getSuggestions", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;Lorg/spongepowered/api/world/Location;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandCallable#getSuggestions was null") }
    ret
  }

  pub fn test_permission(&self, param_1: command_CommandSource) -> bool {
    java_method!(self.env, self.object, "testPermission", "(Lorg/spongepowered/api/command/CommandSource;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_short_description(&self, param_1: command_CommandSource) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getShortDescription", "(Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandCallable#getShortDescription was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_help(&self, param_1: command_CommandSource) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getHelp", "(Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandCallable#getHelp was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandCallable#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_CommandException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandException {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: text_Text) -> command_CommandException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/CommandException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandException#<init> was null") }
    command_CommandException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: text_Text, param_2: jobject) -> command_CommandException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Throwable;)Lorg/spongepowered/api/command/CommandException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandException#<init> was null") }
    command_CommandException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: text_Text, param_2: bool) -> command_CommandException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Z)Lorg/spongepowered/api/command/CommandException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandException#<init> was null") }
    command_CommandException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: text_Text, param_2: jobject, param_3: bool) -> command_CommandException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Throwable;Z)Lorg/spongepowered/api/command/CommandException", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandException#<init> was null") }
    command_CommandException { env: self.env, object: ret }
  }

  pub fn should_include_usage(&self) -> bool {
    java_method!(self.env, self.object, "shouldIncludeUsage", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct command_CommandManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandManager {
      env: env,
      object: object
    }
  }

  pub fn register(&self, param_1: jobject, param_2: command_CommandCallable, param_3: &[jobject]) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "register", "(Ljava/lang/Object;Lorg/spongepowered/api/command/CommandCallable;[Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandManager#register was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn register_1(&self, param_1: jobject, param_2: command_CommandCallable, param_3: jobject) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "register", "(Ljava/lang/Object;Lorg/spongepowered/api/command/CommandCallable;Ljava/util/List;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandManager#register was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn register_2(&self, param_1: jobject, param_2: command_CommandCallable, param_3: jobject, param_4: jobject) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "register", "(Ljava/lang/Object;Lorg/spongepowered/api/command/CommandCallable;Ljava/util/List;Ljava/util/function/Function;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandManager#register was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn remove_mapping(&self, param_1: command_CommandMapping) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "removeMapping", "(Lorg/spongepowered/api/command/CommandMapping;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandManager#removeMapping was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn get_plugin_containers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPluginContainers", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandManager#getPluginContainers was null") }
    ret
  }

  pub fn get_owned_by(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getOwnedBy", "(Ljava/lang/Object;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandManager#getOwnedBy was null") }
    ret
  }

  pub fn get_owner(&self, param_1: command_CommandMapping) -> Option<plugin_PluginContainer> {
    let ret = java_method!(self.env, self.object, "getOwner", "(Lorg/spongepowered/api/command/CommandMapping;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandManager#getOwner was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(plugin_PluginContainer { env: self.env, object: unwrapped }) }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn process(&self, param_1: command_CommandSource, param_2: jobject) -> command_CommandResult {
    let ret = java_method!(self.env, self.object, "process", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;)Lorg/spongepowered/api/command/CommandResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandManager#process was null") }
    command_CommandResult { env: self.env, object: ret }
  }

  pub fn get_suggestions(&self, param_1: command_CommandSource, param_2: jobject, param_3: world_Location) -> jobject {
    let ret = java_method!(self.env, self.object, "getSuggestions", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;Lorg/spongepowered/api/world/Location;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandManager#getSuggestions was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_CommandMapping {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandMapping {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandMapping {
      env: env,
      object: object
    }
  }

  pub fn get_primary_alias(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPrimaryAlias", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandMapping#getPrimaryAlias was null") }
    ret
  }

  pub fn get_all_aliases(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllAliases", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandMapping#getAllAliases was null") }
    ret
  }

  pub fn get_callable(&self) -> command_CommandCallable {
    let ret = java_method!(self.env, self.object, "getCallable", "()Lorg/spongepowered/api/command/CommandCallable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandMapping#getCallable was null") }
    command_CommandCallable { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_CommandMessageFormatting {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandMessageFormatting {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandMessageFormatting {
      env: env,
      object: object
    }
  }

  pub fn error(param_1: text_Text) -> text_Text {
    let ret = java_method!(self.env, "error", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandMessageFormatting#error was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn debug(param_1: text_Text) -> text_Text {
    let ret = java_method!(self.env, "debug", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandMessageFormatting#debug was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_CommandNotFoundException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandNotFoundException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandNotFoundException {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> command_CommandNotFoundException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/command/CommandNotFoundException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandNotFoundException#<init> was null") }
    command_CommandNotFoundException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: text_Text, param_2: jobject) -> command_CommandNotFoundException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Ljava/lang/String;)Lorg/spongepowered/api/command/CommandNotFoundException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandNotFoundException#<init> was null") }
    command_CommandNotFoundException { env: self.env, object: ret }
  }

  pub fn get_command(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCommand", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandNotFoundException#getCommand was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_CommandPermissionException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandPermissionException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandPermissionException {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> command_CommandPermissionException {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/command/CommandPermissionException", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandPermissionException#<init> was null") }
    command_CommandPermissionException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: text_Text) -> command_CommandPermissionException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/CommandPermissionException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandPermissionException#<init> was null") }
    command_CommandPermissionException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: text_Text, param_2: jobject) -> command_CommandPermissionException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Throwable;)Lorg/spongepowered/api/command/CommandPermissionException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandPermissionException#<init> was null") }
    command_CommandPermissionException { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_CommandResult_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandResult_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandResult_Builder {
      env: env,
      object: object
    }
  }

  pub fn success_count(&self, param_1: jobject) -> command_CommandResult_Builder {
    let ret = java_method!(self.env, self.object, "successCount", "(Ljava/lang/Integer;)Lorg/spongepowered/api/command/CommandResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult$Builder#successCount was null") }
    command_CommandResult_Builder { env: self.env, object: ret }
  }

  pub fn affected_blocks(&self, param_1: jobject) -> command_CommandResult_Builder {
    let ret = java_method!(self.env, self.object, "affectedBlocks", "(Ljava/lang/Integer;)Lorg/spongepowered/api/command/CommandResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult$Builder#affectedBlocks was null") }
    command_CommandResult_Builder { env: self.env, object: ret }
  }

  pub fn affected_entities(&self, param_1: jobject) -> command_CommandResult_Builder {
    let ret = java_method!(self.env, self.object, "affectedEntities", "(Ljava/lang/Integer;)Lorg/spongepowered/api/command/CommandResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult$Builder#affectedEntities was null") }
    command_CommandResult_Builder { env: self.env, object: ret }
  }

  pub fn affected_items(&self, param_1: jobject) -> command_CommandResult_Builder {
    let ret = java_method!(self.env, self.object, "affectedItems", "(Ljava/lang/Integer;)Lorg/spongepowered/api/command/CommandResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult$Builder#affectedItems was null") }
    command_CommandResult_Builder { env: self.env, object: ret }
  }

  pub fn query_result(&self, param_1: jobject) -> command_CommandResult_Builder {
    let ret = java_method!(self.env, self.object, "queryResult", "(Ljava/lang/Integer;)Lorg/spongepowered/api/command/CommandResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult$Builder#queryResult was null") }
    command_CommandResult_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> command_CommandResult {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/command/CommandResult;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult$Builder#build was null") }
    command_CommandResult { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_CommandResult {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandResult {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandResult {
      env: env,
      object: object
    }
  }

  pub fn builder() -> command_CommandResult_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/command/CommandResult$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult#builder was null") }
    command_CommandResult_Builder { env: self.env, object: ret }
  }

  pub fn empty() -> command_CommandResult {
    let ret = java_method!(self.env, "empty", "()Lorg/spongepowered/api/command/CommandResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult#empty was null") }
    command_CommandResult { env: self.env, object: ret }
  }

  pub fn success() -> command_CommandResult {
    let ret = java_method!(self.env, "success", "()Lorg/spongepowered/api/command/CommandResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult#success was null") }
    command_CommandResult { env: self.env, object: ret }
  }

  pub fn get_success_count(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSuccessCount", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult#getSuccessCount was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_affected_blocks(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getAffectedBlocks", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult#getAffectedBlocks was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_affected_entities(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getAffectedEntities", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult#getAffectedEntities was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_affected_items(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getAffectedItems", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult#getAffectedItems was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_query_result(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getQueryResult", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandResult#getQueryResult was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct command_CommandSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_CommandSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_CommandSource {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandSource#getName was null") }
    ret
  }

  pub fn get_locale(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getLocale", "()Ljava/util/Locale;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/CommandSource#getLocale was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_dispatcher_Disambiguator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_dispatcher_Disambiguator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_dispatcher_Disambiguator {
      env: env,
      object: object
    }
  }

  pub fn disambiguate(&self, param_1: command_CommandSource, param_2: jobject, param_3: jobject) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "disambiguate", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;Ljava/util/List;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/Disambiguator#disambiguate was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct command_dispatcher_Dispatcher {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_dispatcher_Dispatcher {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_dispatcher_Dispatcher {
      env: env,
      object: object
    }
  }

  pub fn get_commands(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCommands", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/Dispatcher#getCommands was null") }
    ret
  }

  pub fn get_primary_aliases(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPrimaryAliases", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/Dispatcher#getPrimaryAliases was null") }
    ret
  }

  pub fn get_aliases(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAliases", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/Dispatcher#getAliases was null") }
    ret
  }

  pub fn get(&self, param_1: jobject) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/Dispatcher#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn get_1(&self, param_1: jobject, param_2: command_CommandSource) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/Dispatcher#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn get_all(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "(Ljava/lang/String;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/Dispatcher#getAll was null") }
    ret
  }

  pub fn get_all_1(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Lcom/google/common/collect/Multimap;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/Dispatcher#getAll was null") }
    ret
  }

  pub fn contains_alias(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsAlias", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_mapping(&self, param_1: command_CommandMapping) -> bool {
    java_method!(self.env, self.object, "containsMapping", "(Lorg/spongepowered/api/command/CommandMapping;)Z", CallBooleanMethodA, param_1) == 1
  }

}


#[derive(Debug)]
pub struct command_dispatcher_SimpleDispatcher {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_dispatcher_SimpleDispatcher {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_dispatcher_SimpleDispatcher {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> command_dispatcher_SimpleDispatcher {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/command/dispatcher/SimpleDispatcher", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#<init> was null") }
    command_dispatcher_SimpleDispatcher { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: command_dispatcher_Disambiguator) -> command_dispatcher_SimpleDispatcher {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/command/dispatcher/Disambiguator;)Lorg/spongepowered/api/command/dispatcher/SimpleDispatcher", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#<init> was null") }
    command_dispatcher_SimpleDispatcher { env: self.env, object: ret }
  }

  pub fn register(&self, param_1: command_CommandCallable, param_2: &[jobject]) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "register", "(Lorg/spongepowered/api/command/CommandCallable;[Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#register was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn register_1(&self, param_1: command_CommandCallable, param_2: jobject) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "register", "(Lorg/spongepowered/api/command/CommandCallable;Ljava/util/List;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#register was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn register_2(&self, param_1: command_CommandCallable, param_2: jobject, param_3: jobject) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "register", "(Lorg/spongepowered/api/command/CommandCallable;Ljava/util/List;Ljava/util/function/Function;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#register was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn remove(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/String;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#remove was null") }
    ret
  }

  pub fn remove_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "removeAll", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_mapping(&self, param_1: command_CommandMapping) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "removeMapping", "(Lorg/spongepowered/api/command/CommandMapping;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#removeMapping was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn remove_mappings(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "removeMappings", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_commands(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCommands", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#getCommands was null") }
    ret
  }

  pub fn get_primary_aliases(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPrimaryAliases", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#getPrimaryAliases was null") }
    ret
  }

  pub fn get_aliases(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAliases", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#getAliases was null") }
    ret
  }

  pub fn get(&self, param_1: jobject) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn get_1(&self, param_1: jobject, param_2: command_CommandSource) -> Option<command_CommandMapping> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandMapping { env: self.env, object: unwrapped }) }
  }

  pub fn contains_alias(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsAlias", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_mapping(&self, param_1: command_CommandMapping) -> bool {
    java_method!(self.env, self.object, "containsMapping", "(Lorg/spongepowered/api/command/CommandMapping;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn process(&self, param_1: command_CommandSource, param_2: jobject) -> command_CommandResult {
    let ret = java_method!(self.env, self.object, "process", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;)Lorg/spongepowered/api/command/CommandResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#process was null") }
    command_CommandResult { env: self.env, object: ret }
  }

  pub fn get_suggestions(&self, param_1: command_CommandSource, param_2: jobject, param_3: world_Location) -> jobject {
    let ret = java_method!(self.env, self.object, "getSuggestions", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;Lorg/spongepowered/api/world/Location;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#getSuggestions was null") }
    ret
  }

  pub fn test_permission(&self, param_1: command_CommandSource) -> bool {
    java_method!(self.env, self.object, "testPermission", "(Lorg/spongepowered/api/command/CommandSource;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_short_description(&self, param_1: command_CommandSource) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getShortDescription", "(Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#getShortDescription was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_help(&self, param_1: command_CommandSource) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getHelp", "(Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#getHelp was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_all(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "(Ljava/lang/String;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#getAll was null") }
    ret
  }

  pub fn get_all_1(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Lcom/google/common/collect/Multimap;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/dispatcher/SimpleDispatcher#getAll was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_ImmutableCommandMapping {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_ImmutableCommandMapping {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_ImmutableCommandMapping {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: command_CommandCallable, param_2: jobject, param_3: &[jobject]) -> command_ImmutableCommandMapping {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/command/CommandCallable;Ljava/lang/String;[Ljava/lang/String;)Lorg/spongepowered/api/command/ImmutableCommandMapping", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/ImmutableCommandMapping#<init> was null") }
    command_ImmutableCommandMapping { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: command_CommandCallable, param_2: jobject, param_3: jobject) -> command_ImmutableCommandMapping {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/command/CommandCallable;Ljava/lang/String;Ljava/util/Collection;)Lorg/spongepowered/api/command/ImmutableCommandMapping", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/ImmutableCommandMapping#<init> was null") }
    command_ImmutableCommandMapping { env: self.env, object: ret }
  }

  pub fn get_primary_alias(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPrimaryAlias", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/ImmutableCommandMapping#getPrimaryAlias was null") }
    ret
  }

  pub fn get_all_aliases(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllAliases", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/ImmutableCommandMapping#getAllAliases was null") }
    ret
  }

  pub fn get_callable(&self) -> command_CommandCallable {
    let ret = java_method!(self.env, self.object, "getCallable", "()Lorg/spongepowered/api/command/CommandCallable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/ImmutableCommandMapping#getCallable was null") }
    command_CommandCallable { env: self.env, object: ret }
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/ImmutableCommandMapping#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct command_InvocationCommandException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_InvocationCommandException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_InvocationCommandException {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: text_Text, param_2: jobject) -> command_InvocationCommandException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Throwable;)Lorg/spongepowered/api/command/InvocationCommandException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/InvocationCommandException#<init> was null") }
    command_InvocationCommandException { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct command_source_CommandBlockSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_source_CommandBlockSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_source_CommandBlockSource {
      env: env,
      object: object
    }
  }

  pub fn get_command_data(&self) -> data_manipulator_mutable_CommandData {
    let ret = java_method!(self.env, self.object, "getCommandData", "()Lorg/spongepowered/api/data/manipulator/mutable/CommandData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/source/CommandBlockSource#getCommandData was null") }
    data_manipulator_mutable_CommandData { env: self.env, object: ret }
  }

  pub fn stored_command(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "storedCommand", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/source/CommandBlockSource#storedCommand was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn success_count(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "successCount", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/source/CommandBlockSource#successCount was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn does_track_output(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "doesTrackOutput", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/source/CommandBlockSource#doesTrackOutput was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn last_output(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "lastOutput", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/source/CommandBlockSource#lastOutput was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_source_ConsoleSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_source_ConsoleSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_source_ConsoleSource {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct command_source_ProxySource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_source_ProxySource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_source_ProxySource {
      env: env,
      object: object
    }
  }

  pub fn get_original_source(&self) -> command_CommandSource {
    let ret = java_method!(self.env, self.object, "getOriginalSource", "()Lorg/spongepowered/api/command/CommandSource;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/source/ProxySource#getOriginalSource was null") }
    command_CommandSource { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_source_RconSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_source_RconSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_source_RconSource {
      env: env,
      object: object
    }
  }

  pub fn get_logged_in(&self) -> bool {
    java_method!(self.env, self.object, "getLoggedIn", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_logged_in(&self, param_1: bool) {
    java_method!(self.env, self.object, "setLoggedIn", "(Z)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct command_source_RemoteSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_source_RemoteSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_source_RemoteSource {
      env: env,
      object: object
    }
  }

  pub fn get_connection(&self) -> network_RemoteConnection {
    let ret = java_method!(self.env, self.object, "getConnection", "()Lorg/spongepowered/api/network/RemoteConnection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/source/RemoteSource#getConnection was null") }
    network_RemoteConnection { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_source_SignSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_source_SignSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_source_SignSource {
      env: env,
      object: object
    }
  }

  pub fn get_sign(&self) -> block_tileentity_Sign {
    let ret = java_method!(self.env, self.object, "getSign", "()Lorg/spongepowered/api/block/tileentity/Sign;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/source/SignSource#getSign was null") }
    block_tileentity_Sign { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_spec_CommandExecutor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_spec_CommandExecutor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_spec_CommandExecutor {
      env: env,
      object: object
    }
  }

  pub fn execute(&self, param_1: command_CommandSource, param_2: command_args_CommandContext) -> command_CommandResult {
    let ret = java_method!(self.env, self.object, "execute", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandContext;)Lorg/spongepowered/api/command/CommandResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandExecutor#execute was null") }
    command_CommandResult { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_spec_CommandSpec_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_spec_CommandSpec_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_spec_CommandSpec_Builder {
      env: env,
      object: object
    }
  }

  pub fn permission(&self, param_1: jobject) -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, self.object, "permission", "(Ljava/lang/String;)Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#permission was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn executor(&self, param_1: command_spec_CommandExecutor) -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, self.object, "executor", "(Lorg/spongepowered/api/command/spec/CommandExecutor;)Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#executor was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn children(&self, param_1: jobject) -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, self.object, "children", "(Ljava/util/Map;)Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#children was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn child(&self, param_1: command_CommandCallable, param_2: &[jobject]) -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, self.object, "child", "(Lorg/spongepowered/api/command/CommandCallable;[Ljava/lang/String;)Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#child was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn description(&self, param_1: text_Text) -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, self.object, "description", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#description was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn extended_description(&self, param_1: text_Text) -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, self.object, "extendedDescription", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#extendedDescription was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn arguments(&self, param_1: command_args_CommandElement) -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, self.object, "arguments", "(Lorg/spongepowered/api/command/args/CommandElement;)Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#arguments was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn arguments_1(&self, param_1: &[command_args_CommandElement]) -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, self.object, "arguments", "([Lorg/spongepowered/api/command/args/CommandElement;)Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#arguments was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn input_tokenizer(&self, param_1: command_args_parsing_InputTokenizer) -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, self.object, "inputTokenizer", "(Lorg/spongepowered/api/command/args/parsing/InputTokenizer;)Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#inputTokenizer was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> command_spec_CommandSpec {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/command/spec/CommandSpec;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec$Builder#build was null") }
    command_spec_CommandSpec { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct command_spec_CommandSpec {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl command_spec_CommandSpec {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    command_spec_CommandSpec {
      env: env,
      object: object
    }
  }

  pub fn builder() -> command_spec_CommandSpec_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/command/spec/CommandSpec$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#builder was null") }
    command_spec_CommandSpec_Builder { env: self.env, object: ret }
  }

  pub fn check_permission(&self, param_1: command_CommandSource) {
    java_method!(self.env, self.object, "checkPermission", "(Lorg/spongepowered/api/command/CommandSource;)V", CallVoidMethodA, param_1);
  }

  pub fn populate_context(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) {
    java_method!(self.env, self.object, "populateContext", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn complete(&self, param_1: command_CommandSource, param_2: command_args_CommandArgs, param_3: command_args_CommandContext) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Lorg/spongepowered/api/command/CommandSource;Lorg/spongepowered/api/command/args/CommandArgs;Lorg/spongepowered/api/command/args/CommandContext;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#complete was null") }
    ret
  }

  pub fn get_executor(&self) -> command_spec_CommandExecutor {
    let ret = java_method!(self.env, self.object, "getExecutor", "()Lorg/spongepowered/api/command/spec/CommandExecutor;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#getExecutor was null") }
    command_spec_CommandExecutor { env: self.env, object: ret }
  }

  pub fn get_input_tokenizer(&self) -> command_args_parsing_InputTokenizer {
    let ret = java_method!(self.env, self.object, "getInputTokenizer", "()Lorg/spongepowered/api/command/args/parsing/InputTokenizer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#getInputTokenizer was null") }
    command_args_parsing_InputTokenizer { env: self.env, object: ret }
  }

  pub fn process(&self, param_1: command_CommandSource, param_2: jobject) -> command_CommandResult {
    let ret = java_method!(self.env, self.object, "process", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;)Lorg/spongepowered/api/command/CommandResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#process was null") }
    command_CommandResult { env: self.env, object: ret }
  }

  pub fn get_suggestions(&self, param_1: command_CommandSource, param_2: jobject, param_3: world_Location) -> jobject {
    let ret = java_method!(self.env, self.object, "getSuggestions", "(Lorg/spongepowered/api/command/CommandSource;Ljava/lang/String;Lorg/spongepowered/api/world/Location;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#getSuggestions was null") }
    ret
  }

  pub fn test_permission(&self, param_1: command_CommandSource) -> bool {
    java_method!(self.env, self.object, "testPermission", "(Lorg/spongepowered/api/command/CommandSource;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_short_description(&self, param_1: command_CommandSource) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getShortDescription", "(Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#getShortDescription was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_usage(&self, param_1: command_CommandSource) -> text_Text {
    let ret = java_method!(self.env, self.object, "getUsage", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#getUsage was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_help(&self, param_1: command_CommandSource) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getHelp", "(Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#getHelp was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/command/spec/CommandSpec#toString was null") }
    ret
  }

}


#[derive(Debug)]
pub struct config_ConfigDir {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl config_ConfigDir {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    config_ConfigDir {
      env: env,
      object: object
    }
  }

  pub fn shared_root(&self) -> bool {
    java_method!(self.env, self.object, "sharedRoot", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct config_ConfigManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl config_ConfigManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    config_ConfigManager {
      env: env,
      object: object
    }
  }

  pub fn get_shared_config(&self, param_1: jobject) -> config_ConfigRoot {
    let ret = java_method!(self.env, self.object, "getSharedConfig", "(Ljava/lang/Object;)Lorg/spongepowered/api/config/ConfigRoot;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/config/ConfigManager#getSharedConfig was null") }
    config_ConfigRoot { env: self.env, object: ret }
  }

  pub fn get_plugin_config(&self, param_1: jobject) -> config_ConfigRoot {
    let ret = java_method!(self.env, self.object, "getPluginConfig", "(Ljava/lang/Object;)Lorg/spongepowered/api/config/ConfigRoot;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/config/ConfigManager#getPluginConfig was null") }
    config_ConfigRoot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct config_ConfigRoot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl config_ConfigRoot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    config_ConfigRoot {
      env: env,
      object: object
    }
  }

  pub fn get_config_path(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getConfigPath", "()Ljava/nio/file/Path;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/config/ConfigRoot#getConfigPath was null") }
    ret
  }

  pub fn get_config(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getConfig", "()Lninja/leaping/configurate/loader/ConfigurationLoader;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/config/ConfigRoot#getConfig was null") }
    ret
  }

  pub fn get_directory(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDirectory", "()Ljava/nio/file/Path;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/config/ConfigRoot#getDirectory was null") }
    ret
  }

}

#[derive(Debug)]
pub struct config_DefaultConfig {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl config_DefaultConfig {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    config_DefaultConfig {
      env: env,
      object: object
    }
  }

  pub fn shared_root(&self) -> bool {
    java_method!(self.env, self.object, "sharedRoot", "()Z", CallBooleanMethod) == 1
  }

}


#[derive(Debug)]
pub struct data_DataContainer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_DataContainer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_DataContainer {
      env: env,
      object: object
    }
  }

  pub fn set(&self, param_1: data_DataQuery, param_2: jobject) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataContainer#set was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: data_key_Key, param_2: jobject) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataContainer#set was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: data_DataQuery) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataContainer#remove was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: data_DataQuery) -> data_DataView {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataContainer#remove was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn set_2(&self, param_1: data_key_Key, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataContainer#set was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn set_3(&self, param_1: data_DataQuery, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataContainer#set was null") }
    data_DataView { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_DataHolder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_DataHolder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_DataHolder {
      env: env,
      object: object
    }
  }

  pub fn validate_raw_data(&self, param_1: data_DataContainer) -> bool {
    java_method!(self.env, self.object, "validateRawData", "(Lorg/spongepowered/api/data/DataContainer;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn set_raw_data(&self, param_1: data_DataContainer) {
    java_method!(self.env, self.object, "setRawData", "(Lorg/spongepowered/api/data/DataContainer;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct data_DataManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_DataManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_DataManager {
      env: env,
      object: object
    }
  }

  pub fn register_builder(&self, param_1: jobject, param_2: data_persistence_DataBuilder) {
    java_method!(self.env, self.object, "registerBuilder", "(Ljava/lang/Class;Lorg/spongepowered/api/data/persistence/DataBuilder;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn register_content_updater(&self, param_1: jobject, param_2: data_persistence_DataContentUpdater) {
    java_method!(self.env, self.object, "registerContentUpdater", "(Ljava/lang/Class;Lorg/spongepowered/api/data/persistence/DataContentUpdater;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_wrapped_content_updater(&self, param_1: jobject, param_2: i32, param_3: i32) -> Option<data_persistence_DataContentUpdater> {
    let ret = java_method!(self.env, self.object, "getWrappedContentUpdater", "(Ljava/lang/Class;II)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataManager#getWrappedContentUpdater was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_persistence_DataContentUpdater { env: self.env, object: unwrapped }) }
  }

  pub fn get_builder(&self, param_1: jobject) -> Option<data_persistence_DataBuilder> {
    let ret = java_method!(self.env, self.object, "getBuilder", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataManager#getBuilder was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_persistence_DataBuilder { env: self.env, object: unwrapped }) }
  }

  pub fn deserialize(&self, param_1: jobject, param_2: data_DataView) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "deserialize", "(Ljava/lang/Class;Lorg/spongepowered/api/data/DataView;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataManager#deserialize was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn register(&self, param_1: jobject, param_2: data_ImmutableDataBuilder) {
    java_method!(self.env, self.object, "register", "(Ljava/lang/Class;Lorg/spongepowered/api/data/ImmutableDataBuilder;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn register_1(&self, param_1: jobject, param_2: jobject, param_3: data_manipulator_DataManipulatorBuilder) {
    java_method!(self.env, self.object, "register", "(Ljava/lang/Class;Ljava/lang/Class;Lorg/spongepowered/api/data/manipulator/DataManipulatorBuilder;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_immutable_builder(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getImmutableBuilder", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataManager#getImmutableBuilder was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_manipulator_builder(&self, param_1: jobject) -> Option<data_manipulator_DataManipulatorBuilder> {
    let ret = java_method!(self.env, self.object, "getManipulatorBuilder", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataManager#getManipulatorBuilder was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_manipulator_DataManipulatorBuilder { env: self.env, object: unwrapped }) }
  }

  pub fn get_immutable_manipulator_builder(&self, param_1: jobject) -> Option<data_manipulator_DataManipulatorBuilder> {
    let ret = java_method!(self.env, self.object, "getImmutableManipulatorBuilder", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataManager#getImmutableManipulatorBuilder was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_manipulator_DataManipulatorBuilder { env: self.env, object: unwrapped }) }
  }

  pub fn register_serializer(&self, param_1: jobject, param_2: data_persistence_DataSerializer) {
    java_method!(self.env, self.object, "registerSerializer", "(Ljava/lang/Class;Lorg/spongepowered/api/data/persistence/DataSerializer;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_serializer(&self, param_1: jobject) -> Option<data_persistence_DataSerializer> {
    let ret = java_method!(self.env, self.object, "getSerializer", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataManager#getSerializer was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_persistence_DataSerializer { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct data_DataQuery {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_DataQuery {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_DataQuery {
      env: env,
      object: object
    }
  }

  pub fn of() -> data_DataQuery {
    let ret = java_method!(self.env, "of", "()Lorg/spongepowered/api/data/DataQuery;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#of was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn of_1(param_1: char, param_2: jobject) -> data_DataQuery {
    let ret = java_method!(self.env, "of", "(CLjava/lang/String;)Lorg/spongepowered/api/data/DataQuery;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#of was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn of_2(param_1: &[jobject]) -> data_DataQuery {
    let ret = java_method!(self.env, "of", "([Ljava/lang/String;)Lorg/spongepowered/api/data/DataQuery;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#of was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn of_3(param_1: jobject) -> data_DataQuery {
    let ret = java_method!(self.env, "of", "(Ljava/util/List;)Lorg/spongepowered/api/data/DataQuery;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#of was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn get_parts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getParts", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#getParts was null") }
    ret
  }

  pub fn then(&self, param_1: data_DataQuery) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "then", "(Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/DataQuery;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#then was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn get_query_parts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getQueryParts", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#getQueryParts was null") }
    ret
  }

  pub fn pop(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "pop", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#pop was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn last(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "last", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#last was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn as_string(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "asString", "(Ljava/lang/String;)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#asString was null") }
    ret
  }

  pub fn as_string_1(&self, param_1: char) -> jobject {
    let ret = java_method!(self.env, self.object, "asString", "(C)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#asString was null") }
    ret
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataQuery#toString was null") }
    ret
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct data_DataSerializable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_DataSerializable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_DataSerializable {
      env: env,
      object: object
    }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataSerializable#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_DataTransactionResult_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_DataTransactionResult_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_DataTransactionResult_Builder {
      env: env,
      object: object
    }
  }

  pub fn result(&self, param_1: data_DataTransactionResult_Type) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "result", "(Lorg/spongepowered/api/data/DataTransactionResult$Type;)Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#result was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn replace(&self, param_1: data_value_immutable_ImmutableValue) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "replace", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValue;)Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#replace was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn replace_1(&self, param_1: jobject) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "replace", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#replace was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn reject(&self, param_1: data_value_immutable_ImmutableValue) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "reject", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValue;)Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#reject was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn reject_1(&self, param_1: jobject) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "reject", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#reject was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn success(&self, param_1: data_value_immutable_ImmutableValue) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "success", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValue;)Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#success was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn success_1(&self, param_1: jobject) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "success", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#success was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn absorb_result(&self, param_1: data_DataTransactionResult) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "absorbResult", "(Lorg/spongepowered/api/data/DataTransactionResult;)Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#absorbResult was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#build was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: data_DataTransactionResult) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/data/DataTransactionResult;)Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#from was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#reset was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_DataTransactionResult_Type {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_DataTransactionResult_Type {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_DataTransactionResult_Type {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[data_DataTransactionResult_Type] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> data_DataTransactionResult_Type {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/data/DataTransactionResult$Type;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult$Type#valueOf was null") }
    data_DataTransactionResult_Type { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_DataTransactionResult {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_DataTransactionResult {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_DataTransactionResult {
      env: env,
      object: object
    }
  }

  pub fn builder() -> data_DataTransactionResult_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/data/DataTransactionResult$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#builder was null") }
    data_DataTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn success_no_data() -> data_DataTransactionResult {
    let ret = java_method!(self.env, "successNoData", "()Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#successNoData was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn success_result(param_1: data_value_immutable_ImmutableValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, "successResult", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#successResult was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn success_replace_result(param_1: data_value_immutable_ImmutableValue, param_2: data_value_immutable_ImmutableValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, "successReplaceResult", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValue;Lorg/spongepowered/api/data/value/immutable/ImmutableValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#successReplaceResult was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn success_replace_result_1(param_1: jobject, param_2: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, "successReplaceResult", "(Ljava/util/Collection;Ljava/util/Collection;)Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#successReplaceResult was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn success_remove(param_1: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, "successRemove", "(Ljava/util/Collection;)Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#successRemove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn success_remove_1(param_1: data_value_immutable_ImmutableValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, "successRemove", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#successRemove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn fail_result(param_1: data_value_immutable_ImmutableValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, "failResult", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#failResult was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn fail_result_1(param_1: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, "failResult", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#failResult was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn fail_no_data() -> data_DataTransactionResult {
    let ret = java_method!(self.env, "failNoData", "()Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#failNoData was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn error_result(param_1: data_value_immutable_ImmutableValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, "errorResult", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#errorResult was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> data_DataTransactionResult_Type {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/data/DataTransactionResult$Type;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#getType was null") }
    data_DataTransactionResult_Type { env: self.env, object: ret }
  }

  pub fn is_successful(&self) -> bool {
    java_method!(self.env, self.object, "isSuccessful", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_successful_data(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSuccessfulData", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#getSuccessfulData was null") }
    ret
  }

  pub fn get_rejected_data(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRejectedData", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#getRejectedData was null") }
    ret
  }

  pub fn get_replaced_data(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getReplacedData", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#getReplacedData was null") }
    ret
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataTransactionResult#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_DataView {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_DataView {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_DataView {
      env: env,
      object: object
    }
  }

  pub fn get_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "getContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_current_path(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "getCurrentPath", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getCurrentPath was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getName was null") }
    ret
  }

  pub fn get_parent(&self) -> Option<data_DataView> {
    let ret = java_method!(self.env, self.object, "getParent", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getParent was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_DataView { env: self.env, object: unwrapped }) }
  }

  pub fn get_keys(&self, param_1: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "getKeys", "(Z)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getKeys was null") }
    ret
  }

  pub fn get_values(&self, param_1: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "getValues", "(Z)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getValues was null") }
    ret
  }

  pub fn contains(&self, param_1: data_DataQuery) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/data/DataQuery;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_1(&self, param_1: data_DataQuery, param_2: &[data_DataQuery]) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/data/DataQuery;[Lorg/spongepowered/api/data/DataQuery;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn contains_2(&self, param_1: data_key_Key) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_3(&self, param_1: data_key_Key, param_2: &[data_key_Key]) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/data/key/Key;[Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn get(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set(&self, param_1: data_DataQuery, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#set was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: data_key_Key, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#set was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: data_DataQuery) -> data_DataView {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#remove was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn create_view(&self, param_1: data_DataQuery) -> data_DataView {
    let ret = java_method!(self.env, self.object, "createView", "(Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#createView was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn create_view_1(&self, param_1: data_DataQuery, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "createView", "(Lorg/spongepowered/api/data/DataQuery;Ljava/util/Map;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#createView was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn get_view(&self, param_1: data_DataQuery) -> Option<data_DataView> {
    let ret = java_method!(self.env, self.object, "getView", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getView was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_DataView { env: self.env, object: unwrapped }) }
  }

  pub fn get_map(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getMap", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getMap was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_boolean(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getBoolean", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getBoolean was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_short(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getShort", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getShort was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_byte(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getByte", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getByte was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_int(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getInt", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getInt was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_long(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getLong", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getLong was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_float(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFloat", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getFloat was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_double(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getDouble", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getDouble was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_string(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getString", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getString was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_string_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getStringList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getStringList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_character_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCharacterList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getCharacterList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_boolean_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getBooleanList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getBooleanList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_byte_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getByteList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getByteList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_short_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getShortList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getShortList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_integer_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getIntegerList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getIntegerList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_long_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getLongList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getLongList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_float_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFloatList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getFloatList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_double_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getDoubleList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getDoubleList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_map_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getMapList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getMapList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_view_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getViewList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getViewList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_serializable(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSerializable", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getSerializable was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_serializable_list(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSerializableList", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getSerializableList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_object(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getObject", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getObject was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_object_list(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getObjectList", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getObjectList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_catalog_type(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCatalogType", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getCatalogType was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_catalog_type_list(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCatalogTypeList", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#getCatalogTypeList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn copy(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/DataView#copy was null") }
    data_DataContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_ImmutableDataBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_ImmutableDataBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_ImmutableDataBuilder {
      env: env,
      object: object
    }
  }

  pub fn add(&self, param_1: data_manipulator_DataManipulator) -> data_ImmutableDataBuilder {
    let ret = java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)Lorg/spongepowered/api/data/ImmutableDataBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#add was null") }
    data_ImmutableDataBuilder { env: self.env, object: ret }
  }

  pub fn add_1(&self, param_1: data_manipulator_ImmutableDataManipulator) -> data_ImmutableDataBuilder {
    let ret = java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;)Lorg/spongepowered/api/data/ImmutableDataBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#add was null") }
    data_ImmutableDataBuilder { env: self.env, object: ret }
  }

  pub fn add_2(&self, param_1: data_key_Key, param_2: jobject) -> data_ImmutableDataBuilder {
    let ret = java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/ImmutableDataBuilder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#add was null") }
    data_ImmutableDataBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: data_ImmutableDataHolder) -> data_ImmutableDataBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/data/ImmutableDataHolder;)Lorg/spongepowered/api/data/ImmutableDataBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#from was null") }
    data_ImmutableDataBuilder { env: self.env, object: ret }
  }

  pub fn build(&self) -> data_ImmutableDataHolder {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/data/ImmutableDataHolder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#build was null") }
    data_ImmutableDataHolder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> data_ImmutableDataBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/ImmutableDataBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#reset was null") }
    data_ImmutableDataBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: data_DataSerializable) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/data/DataSerializable;)Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#from was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#reset was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_ImmutableDataHolder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_ImmutableDataHolder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_ImmutableDataHolder {
      env: env,
      object: object
    }
  }

  pub fn get_manipulators(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getManipulators", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/ImmutableDataHolder#getManipulators was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_key_Key {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_key_Key {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_key_Key {
      env: env,
      object: object
    }
  }

  pub fn get_value_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValueClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/Key#getValueClass was null") }
    ret
  }

  pub fn get_query(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "getQuery", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/Key#getQuery was null") }
    data_DataQuery { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_key_KeyFactory_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_key_KeyFactory_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_key_KeyFactory_1 {
      env: env,
      object: object
    }
  }

  pub fn get_value_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValueClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$1#getValueClass was null") }
    ret
  }

  pub fn get_query(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "getQuery", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$1#getQuery was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$1#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_key_KeyFactory_2 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_key_KeyFactory_2 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_key_KeyFactory_2 {
      env: env,
      object: object
    }
  }

  pub fn get_value_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValueClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$2#getValueClass was null") }
    ret
  }

  pub fn get_query(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "getQuery", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$2#getQuery was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$2#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_key_KeyFactory_3 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_key_KeyFactory_3 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_key_KeyFactory_3 {
      env: env,
      object: object
    }
  }

  pub fn get_value_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValueClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$3#getValueClass was null") }
    ret
  }

  pub fn get_query(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "getQuery", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$3#getQuery was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$3#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_key_KeyFactory_4 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_key_KeyFactory_4 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_key_KeyFactory_4 {
      env: env,
      object: object
    }
  }

  pub fn get_value_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValueClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$4#getValueClass was null") }
    ret
  }

  pub fn get_query(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "getQuery", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$4#getQuery was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$4#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_key_KeyFactory_5 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_key_KeyFactory_5 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_key_KeyFactory_5 {
      env: env,
      object: object
    }
  }

  pub fn get_value_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValueClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$5#getValueClass was null") }
    ret
  }

  pub fn get_query(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "getQuery", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$5#getQuery was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$5#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_key_KeyFactory_6 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_key_KeyFactory_6 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_key_KeyFactory_6 {
      env: env,
      object: object
    }
  }

  pub fn get_value_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValueClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$6#getValueClass was null") }
    ret
  }

  pub fn get_query(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "getQuery", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory$6#getQuery was null") }
    data_DataQuery { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_key_KeyFactory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_key_KeyFactory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_key_KeyFactory {
      env: env,
      object: object
    }
  }

  pub fn make_single_key(param_1: jobject, param_2: jobject, param_3: data_DataQuery) -> data_key_Key {
    let ret = java_method!(self.env, "makeSingleKey", "(Ljava/lang/Class;Ljava/lang/Class;Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/key/Key;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory#makeSingleKey was null") }
    data_key_Key { env: self.env, object: ret }
  }

  pub fn make_list_key(param_1: jobject, param_2: data_DataQuery) -> data_key_Key {
    let ret = java_method!(self.env, "makeListKey", "(Ljava/lang/Class;Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/key/Key;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory#makeListKey was null") }
    data_key_Key { env: self.env, object: ret }
  }

  pub fn make_set_key(param_1: jobject, param_2: data_DataQuery) -> data_key_Key {
    let ret = java_method!(self.env, "makeSetKey", "(Ljava/lang/Class;Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/key/Key;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory#makeSetKey was null") }
    data_key_Key { env: self.env, object: ret }
  }

  pub fn make_map_key(param_1: jobject, param_2: jobject, param_3: data_DataQuery) -> data_key_Key {
    let ret = java_method!(self.env, "makeMapKey", "(Ljava/lang/Class;Ljava/lang/Class;Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/key/Key;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory#makeMapKey was null") }
    data_key_Key { env: self.env, object: ret }
  }

  pub fn make_optional_key(param_1: jobject, param_2: data_DataQuery) -> data_key_Key {
    let ret = java_method!(self.env, "makeOptionalKey", "(Ljava/lang/Class;Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/key/Key;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/key/KeyFactory#makeOptionalKey was null") }
    data_key_Key { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_key_Keys {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_key_Keys {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_key_Keys {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_LocatableSnapshot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_LocatableSnapshot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_LocatableSnapshot {
      env: env,
      object: object
    }
  }

  pub fn get_world_unique_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getWorldUniqueId", "()Ljava/util/UUID;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/LocatableSnapshot#getWorldUniqueId was null") }
    ret
  }

  pub fn get_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPosition", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/LocatableSnapshot#getPosition was null") }
    ret
  }

  pub fn get_location(&self) -> Option<world_Location> {
    let ret = java_method!(self.env, self.object, "getLocation", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/LocatableSnapshot#getLocation was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Location { env: self.env, object: unwrapped }) }
  }

  pub fn with_location(&self, param_1: world_Location) -> data_LocatableSnapshot {
    let ret = java_method!(self.env, self.object, "withLocation", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/data/LocatableSnapshot;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/LocatableSnapshot#withLocation was null") }
    data_LocatableSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_catalog_CatalogBlockData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_catalog_CatalogBlockData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_catalog_CatalogBlockData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_catalog_CatalogEntityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_catalog_CatalogEntityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_catalog_CatalogEntityData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_catalog_CatalogItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_catalog_CatalogItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_catalog_CatalogItemData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_catalog_CatalogTileEntityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_catalog_CatalogTileEntityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_catalog_CatalogTileEntityData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_DataManipulator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_DataManipulator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_DataManipulator {
      env: env,
      object: object
    }
  }

  pub fn fill(&self, param_1: data_DataHolder) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "fill", "(Lorg/spongepowered/api/data/DataHolder;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#fill was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn fill_1(&self, param_1: data_DataHolder, param_2: data_merge_MergeFunction) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "fill", "(Lorg/spongepowered/api/data/DataHolder;Lorg/spongepowered/api/data/merge/MergeFunction;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#fill was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn from_1(&self, param_1: data_DataContainer) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/data/DataContainer;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#from was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set(&self, param_1: data_key_Key, param_2: jobject) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#set was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: data_value_BaseValue) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/value/BaseValue;)Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#set was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn set_2(&self, param_1: &[data_value_BaseValue]) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "set", "([Lorg/spongepowered/api/data/value/BaseValue;)Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#set was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn set_3(&self, param_1: jobject) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "set", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#set was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn transform(&self, param_1: data_key_Key, param_2: jobject) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "transform", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/function/Function;)Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#transform was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn copy(&self) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#copy was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn as_immutable(&self) -> data_manipulator_ImmutableDataManipulator {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#asImmutable was null") }
    data_manipulator_ImmutableDataManipulator { env: self.env, object: ret }
  }

  pub fn copy_1(&self) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulator#copy was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_DataManipulatorBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_DataManipulatorBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_DataManipulatorBuilder {
      env: env,
      object: object
    }
  }

  pub fn create(&self) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "create", "()Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulatorBuilder#create was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn create_from(&self, param_1: data_DataHolder) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "createFrom", "(Lorg/spongepowered/api/data/DataHolder;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/DataManipulatorBuilder#createFrom was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableAttachedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableAttachedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableAttachedData {
      env: env,
      object: object
    }
  }

  pub fn attached(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "attached", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableAttachedData#attached was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableAxisData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableAxisData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableAxisData {
      env: env,
      object: object
    }
  }

  pub fn axis(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "axis", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableAxisData#axis was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableBigMushroomData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableBigMushroomData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableBigMushroomData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableBrickData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableBrickData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableBrickData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableComparatorData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableComparatorData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableComparatorData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableConnectedDirectionData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableConnectedDirectionData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableConnectedDirectionData {
      env: env,
      object: object
    }
  }

  pub fn connected_directions(&self) -> data_value_immutable_ImmutableSetValue {
    let ret = java_method!(self.env, self.object, "connectedDirections", "()Lorg/spongepowered/api/data/value/immutable/ImmutableSetValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableConnectedDirectionData#connectedDirections was null") }
    data_value_immutable_ImmutableSetValue { env: self.env, object: ret }
  }

  pub fn connected_north(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "connectedNorth", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableConnectedDirectionData#connectedNorth was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn connected_south(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "connectedSouth", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableConnectedDirectionData#connectedSouth was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn connected_east(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "connectedEast", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableConnectedDirectionData#connectedEast was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn connected_west(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "connectedWest", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableConnectedDirectionData#connectedWest was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableDecayableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableDecayableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableDecayableData {
      env: env,
      object: object
    }
  }

  pub fn decayable(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "decayable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableDecayableData#decayable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableDelayableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableDelayableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableDelayableData {
      env: env,
      object: object
    }
  }

  pub fn delay(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "delay", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableDelayableData#delay was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableDirectionalData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableDirectionalData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableDirectionalData {
      env: env,
      object: object
    }
  }

  pub fn direction(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "direction", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableDirectionalData#direction was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableDirtData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableDirtData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableDirtData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableDisarmedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableDisarmedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableDisarmedData {
      env: env,
      object: object
    }
  }

  pub fn disarmed(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "disarmed", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableDisarmedData#disarmed was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableDisguisedBlockData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableDisguisedBlockData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableDisguisedBlockData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableDoublePlantData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableDoublePlantData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableDoublePlantData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableDropData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableDropData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableDropData {
      env: env,
      object: object
    }
  }

  pub fn will_drop(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "willDrop", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableDropData#willDrop was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableExtendedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableExtendedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableExtendedData {
      env: env,
      object: object
    }
  }

  pub fn extended(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "extended", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableExtendedData#extended was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableFilledData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableFilledData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableFilledData {
      env: env,
      object: object
    }
  }

  pub fn filled(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "filled", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableFilledData#filled was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableFluidLevelData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableFluidLevelData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableFluidLevelData {
      env: env,
      object: object
    }
  }

  pub fn level(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "level", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableFluidLevelData#level was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableGrowthData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableGrowthData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableGrowthData {
      env: env,
      object: object
    }
  }

  pub fn growth_stage(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "growthStage", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableGrowthData#growthStage was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableHingeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableHingeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableHingeData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableInWallData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableInWallData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableInWallData {
      env: env,
      object: object
    }
  }

  pub fn in_wall(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "inWall", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableInWallData#inWall was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableLayeredData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableLayeredData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableLayeredData {
      env: env,
      object: object
    }
  }

  pub fn layer(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "layer", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableLayeredData#layer was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableLogAxisData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableLogAxisData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableLogAxisData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableMoistureData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableMoistureData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableMoistureData {
      env: env,
      object: object
    }
  }

  pub fn moisture(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "moisture", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableMoistureData#moisture was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableOccupiedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableOccupiedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableOccupiedData {
      env: env,
      object: object
    }
  }

  pub fn occupied(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "occupied", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableOccupiedData#occupied was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableOpenData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableOpenData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableOpenData {
      env: env,
      object: object
    }
  }

  pub fn open(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "open", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableOpenData#open was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutablePistonData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutablePistonData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutablePistonData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutablePlantData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutablePlantData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutablePlantData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutablePortionData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutablePortionData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutablePortionData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutablePoweredData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutablePoweredData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutablePoweredData {
      env: env,
      object: object
    }
  }

  pub fn powered(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "powered", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutablePoweredData#powered was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutablePrismarineData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutablePrismarineData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutablePrismarineData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableQuartzData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableQuartzData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableQuartzData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableRailDirectionData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableRailDirectionData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableRailDirectionData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableRedstonePoweredData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableRedstonePoweredData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableRedstonePoweredData {
      env: env,
      object: object
    }
  }

  pub fn power(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "power", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableRedstonePoweredData#power was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableSandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableSandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableSandData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableSandstoneData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableSandstoneData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableSandstoneData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableSeamlessData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableSeamlessData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableSeamlessData {
      env: env,
      object: object
    }
  }

  pub fn seamless(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "seamless", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableSeamlessData#seamless was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableShrubData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableShrubData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableShrubData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableSlabData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableSlabData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableSlabData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableSnowedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableSnowedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableSnowedData {
      env: env,
      object: object
    }
  }

  pub fn has_snow(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "hasSnow", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableSnowedData#hasSnow was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableStairShapeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableStairShapeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableStairShapeData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableStoneData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableStoneData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableStoneData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableTreeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableTreeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableTreeData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableWallData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableWallData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableWallData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_block_ImmutableWireAttachmentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_block_ImmutableWireAttachmentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_block_ImmutableWireAttachmentData {
      env: env,
      object: object
    }
  }

  pub fn wire_attachments(&self) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "wireAttachments", "()Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableWireAttachmentData#wireAttachments was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn wire_attachment_north(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "wireAttachmentNorth", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableWireAttachmentData#wireAttachmentNorth was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn wire_attachment_south(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "wireAttachmentSouth", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableWireAttachmentData#wireAttachmentSouth was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn wire_attachment_east(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "wireAttachmentEast", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableWireAttachmentData#wireAttachmentEast was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn wire_attachment_west(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "wireAttachmentWest", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/block/ImmutableWireAttachmentData#wireAttachmentWest was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_common_AbstractImmutableBooleanData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_common_AbstractImmutableBooleanData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_common_AbstractImmutableBooleanData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_ImmutableDataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_common_AbstractImmutableBoundedComparableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_common_AbstractImmutableBoundedComparableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_common_AbstractImmutableBoundedComparableData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_ImmutableDataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_common_AbstractImmutableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_common_AbstractImmutableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_common_AbstractImmutableData {
      env: env,
      object: object
    }
  }

  pub fn copy(&self) -> data_manipulator_ImmutableDataManipulator {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableData#copy was null") }
    data_manipulator_ImmutableDataManipulator { env: self.env, object: ret }
  }

  pub fn get(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_value(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getValue", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableData#getValue was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn supports(&self, param_1: data_key_Key) -> bool {
    java_method!(self.env, self.object, "supports", "(Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_keys(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKeys", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableData#getKeys was null") }
    ret
  }

  pub fn get_values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValues", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableData#getValues was null") }
    ret
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableData#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn copy_1(&self) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableData#copy was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_common_AbstractImmutableListData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_common_AbstractImmutableListData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_common_AbstractImmutableListData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_immutable_ImmutableListData) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/immutable/ImmutableListData;)I", CallIntMethodA, param_1)
  }

  pub fn get_list_value(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "getListValue", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableListData#getListValue was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn as_list(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asList", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableListData#asList was null") }
    ret
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_common_AbstractImmutableMappedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_common_AbstractImmutableMappedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_common_AbstractImmutableMappedData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_immutable_ImmutableMappedData) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/immutable/ImmutableMappedData;)I", CallIntMethodA, param_1)
  }

  pub fn get(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableMappedData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_map_keys(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMapKeys", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableMappedData#getMapKeys was null") }
    ret
  }

  pub fn get_map_value(&self) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "getMapValue", "()Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableMappedData#getMapValue was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_common_AbstractImmutableSingleCatalogData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_common_AbstractImmutableSingleCatalogData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_common_AbstractImmutableSingleCatalogData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_immutable_ImmutableVariantData) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/immutable/ImmutableVariantData;)I", CallIntMethodA, param_1)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableSingleCatalogData#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn type_(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "type", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableSingleCatalogData#type was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_common_AbstractImmutableSingleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_common_AbstractImmutableSingleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_common_AbstractImmutableSingleData {
      env: env,
      object: object
    }
  }

  pub fn as_mutable(&self) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableSingleData#asMutable was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn get(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableSingleData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn supports(&self, param_1: data_key_Key) -> bool {
    java_method!(self.env, self.object, "supports", "(Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_keys(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKeys", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableSingleData#getKeys was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_common_AbstractImmutableSingleEnumData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_common_AbstractImmutableSingleEnumData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_common_AbstractImmutableSingleEnumData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_ImmutableDataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/common/AbstractImmutableSingleEnumData#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}


#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableAchievementData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableAchievementData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableAchievementData {
      env: env,
      object: object
    }
  }

  pub fn achievements(&self) -> data_value_immutable_ImmutableSetValue {
    let ret = java_method!(self.env, self.object, "achievements", "()Lorg/spongepowered/api/data/value/immutable/ImmutableSetValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableAchievementData#achievements was null") }
    data_value_immutable_ImmutableSetValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableAffectsSpawningData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableAffectsSpawningData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableAffectsSpawningData {
      env: env,
      object: object
    }
  }

  pub fn affects_spawning(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "affectsSpawning", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableAffectsSpawningData#affectsSpawning was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableAgeableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableAgeableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableAgeableData {
      env: env,
      object: object
    }
  }

  pub fn age(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "age", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableAgeableData#age was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn baby(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "baby", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableAgeableData#baby was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn adult(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "adult", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableAgeableData#adult was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableAgentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableAgentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableAgentData {
      env: env,
      object: object
    }
  }

  pub fn ai_enabled(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "aiEnabled", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableAgentData#aiEnabled was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableAggressiveData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableAggressiveData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableAggressiveData {
      env: env,
      object: object
    }
  }

  pub fn aggressive(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "aggressive", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableAggressiveData#aggressive was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableAngerableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableAngerableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableAngerableData {
      env: env,
      object: object
    }
  }

  pub fn anger_level(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "angerLevel", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableAngerableData#angerLevel was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableArmorStandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableArmorStandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableArmorStandData {
      env: env,
      object: object
    }
  }

  pub fn marker(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "marker", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableArmorStandData#marker was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn small(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "small", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableArmorStandData#small was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn gravity(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "gravity", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableArmorStandData#gravity was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn arms(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "arms", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableArmorStandData#arms was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn base_plate(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "basePlate", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableArmorStandData#basePlate was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableArtData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableArtData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableArtData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableBodyPartRotationalData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableBodyPartRotationalData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableBodyPartRotationalData {
      env: env,
      object: object
    }
  }

  pub fn part_rotation(&self) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "partRotation", "()Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBodyPartRotationalData#partRotation was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn head_direction(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "headDirection", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBodyPartRotationalData#headDirection was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn body_rotation(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "bodyRotation", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBodyPartRotationalData#bodyRotation was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn left_arm_direction(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "leftArmDirection", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBodyPartRotationalData#leftArmDirection was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn right_arm_direction(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "rightArmDirection", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBodyPartRotationalData#rightArmDirection was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn left_leg_direction(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "leftLegDirection", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBodyPartRotationalData#leftLegDirection was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn right_leg_direction(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "rightLegDirection", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBodyPartRotationalData#rightLegDirection was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableBreathingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableBreathingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableBreathingData {
      env: env,
      object: object
    }
  }

  pub fn remaining_air(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "remainingAir", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBreathingData#remainingAir was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_air(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxAir", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBreathingData#maxAir was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableBreedableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableBreedableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableBreedableData {
      env: env,
      object: object
    }
  }

  pub fn breedable(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "breedable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableBreedableData#breedable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableCareerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableCareerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableCareerData {
      env: env,
      object: object
    }
  }

  pub fn career(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "career", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableCareerData#career was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableChargedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableChargedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableChargedData {
      env: env,
      object: object
    }
  }

  pub fn charged(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "charged", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableChargedData#charged was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableCriticalHitData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableCriticalHitData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableCriticalHitData {
      env: env,
      object: object
    }
  }

  pub fn critical_hit(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "criticalHit", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableCriticalHitData#criticalHit was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableCustomNameVisibleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableCustomNameVisibleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableCustomNameVisibleData {
      env: env,
      object: object
    }
  }

  pub fn custom_name_visible(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "customNameVisible", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableCustomNameVisibleData#customNameVisible was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableDamageableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableDamageableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableDamageableData {
      env: env,
      object: object
    }
  }

  pub fn last_attacker(&self) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "lastAttacker", "()Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableDamageableData#lastAttacker was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

  pub fn last_damage(&self) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "lastDamage", "()Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableDamageableData#lastDamage was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableDamagingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableDamagingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableDamagingData {
      env: env,
      object: object
    }
  }

  pub fn damage(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "damage", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableDamagingData#damage was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn damage_for_entity_types(&self) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "damageForEntityTypes", "()Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableDamagingData#damageForEntityTypes was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableDominantHandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableDominantHandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableDominantHandData {
      env: env,
      object: object
    }
  }

  pub fn dominant_hand(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "dominantHand", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableDominantHandData#dominantHand was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableElderData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableElderData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableElderData {
      env: env,
      object: object
    }
  }

  pub fn elder(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "elder", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableElderData#elder was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableExperienceHolderData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableExperienceHolderData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableExperienceHolderData {
      env: env,
      object: object
    }
  }

  pub fn experience_since_level(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "experienceSinceLevel", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableExperienceHolderData#experienceSinceLevel was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn experience_between_levels(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "experienceBetweenLevels", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableExperienceHolderData#experienceBetweenLevels was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn level(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "level", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableExperienceHolderData#level was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn total_experience(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "totalExperience", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableExperienceHolderData#totalExperience was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableExpirableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableExpirableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableExpirableData {
      env: env,
      object: object
    }
  }

  pub fn expire_ticks(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "expireTicks", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableExpirableData#expireTicks was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableExplosionRadiusData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableExplosionRadiusData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableExplosionRadiusData {
      env: env,
      object: object
    }
  }

  pub fn explosion_radius(&self) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "explosionRadius", "()Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableExplosionRadiusData#explosionRadius was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableExpOrbData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableExpOrbData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableExpOrbData {
      env: env,
      object: object
    }
  }

  pub fn experience(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "experience", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableExpOrbData#experience was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableFallDistanceData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableFallDistanceData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableFallDistanceData {
      env: env,
      object: object
    }
  }

  pub fn fall_distance(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "fallDistance", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallDistanceData#fallDistance was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableFallingBlockData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableFallingBlockData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableFallingBlockData {
      env: env,
      object: object
    }
  }

  pub fn fall_damage_per_block(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "fallDamagePerBlock", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallingBlockData#fallDamagePerBlock was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn max_fall_damage(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "maxFallDamage", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallingBlockData#maxFallDamage was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn block_state(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "blockState", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallingBlockData#blockState was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn can_place_as_block(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "canPlaceAsBlock", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallingBlockData#canPlaceAsBlock was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn can_drop_as_item(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "canDropAsItem", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallingBlockData#canDropAsItem was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn fall_time(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "fallTime", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallingBlockData#fallTime was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn can_hurt_entities(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "canHurtEntities", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallingBlockData#canHurtEntities was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableFlammableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableFlammableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableFlammableData {
      env: env,
      object: object
    }
  }

  pub fn flammable(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "flammable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFlammableData#flammable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableFlyingAbilityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableFlyingAbilityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableFlyingAbilityData {
      env: env,
      object: object
    }
  }

  pub fn can_fly(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "canFly", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFlyingAbilityData#canFly was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableFlyingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableFlyingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableFlyingData {
      env: env,
      object: object
    }
  }

  pub fn flying(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "flying", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFlyingData#flying was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableFoodData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableFoodData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableFoodData {
      env: env,
      object: object
    }
  }

  pub fn food_level(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "foodLevel", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFoodData#foodLevel was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn exhaustion(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "exhaustion", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFoodData#exhaustion was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn saturation(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "saturation", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFoodData#saturation was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableFuseData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableFuseData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableFuseData {
      env: env,
      object: object
    }
  }

  pub fn fuse_duration(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "fuseDuration", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFuseData#fuseDuration was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn ticks_remaining(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "ticksRemaining", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableFuseData#ticksRemaining was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableGameModeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableGameModeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableGameModeData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableGlowingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableGlowingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableGlowingData {
      env: env,
      object: object
    }
  }

  pub fn glowing(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "glowing", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableGlowingData#glowing was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableGriefingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableGriefingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableGriefingData {
      env: env,
      object: object
    }
  }

  pub fn can_grief(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "canGrief", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableGriefingData#canGrief was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableHealthData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableHealthData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableHealthData {
      env: env,
      object: object
    }
  }

  pub fn health(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "health", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableHealthData#health was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_health(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxHealth", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableHealthData#maxHealth was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableHealthScalingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableHealthScalingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableHealthScalingData {
      env: env,
      object: object
    }
  }

  pub fn health_scale(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "healthScale", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableHealthScalingData#healthScale was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableHorseData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableHorseData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableHorseData {
      env: env,
      object: object
    }
  }

  pub fn color(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "color", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableHorseData#color was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn style(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "style", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableHorseData#style was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn variant(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "variant", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableHorseData#variant was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableIgniteableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableIgniteableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableIgniteableData {
      env: env,
      object: object
    }
  }

  pub fn fire_ticks(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "fireTicks", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableIgniteableData#fireTicks was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn fire_delay(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "fireDelay", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableIgniteableData#fireDelay was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableInvisibilityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableInvisibilityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableInvisibilityData {
      env: env,
      object: object
    }
  }

  pub fn invisible(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "invisible", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableInvisibilityData#invisible was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn vanish(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "vanish", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableInvisibilityData#vanish was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn ignores_collision_detection(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "ignoresCollisionDetection", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableInvisibilityData#ignoresCollisionDetection was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn untargetable(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "untargetable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableInvisibilityData#untargetable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableInvulnerabilityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableInvulnerabilityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableInvulnerabilityData {
      env: env,
      object: object
    }
  }

  pub fn invulnerable_ticks(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "invulnerableTicks", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableInvulnerabilityData#invulnerableTicks was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableJoinData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableJoinData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableJoinData {
      env: env,
      object: object
    }
  }

  pub fn first_played(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "firstPlayed", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableJoinData#firstPlayed was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn last_played(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "lastPlayed", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableJoinData#lastPlayed was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableKnockbackData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableKnockbackData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableKnockbackData {
      env: env,
      object: object
    }
  }

  pub fn knockback_strength(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "knockbackStrength", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableKnockbackData#knockbackStrength was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableLeashData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableLeashData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableLeashData {
      env: env,
      object: object
    }
  }

  pub fn leash_holder(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "leashHolder", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableLeashData#leashHolder was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableMinecartBlockData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableMinecartBlockData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableMinecartBlockData {
      env: env,
      object: object
    }
  }

  pub fn block(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "block", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableMinecartBlockData#block was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn offset(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "offset", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableMinecartBlockData#offset was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableMovementSpeedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableMovementSpeedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableMovementSpeedData {
      env: env,
      object: object
    }
  }

  pub fn walk_speed(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "walkSpeed", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableMovementSpeedData#walkSpeed was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn fly_speed(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "flySpeed", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableMovementSpeedData#flySpeed was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableOcelotData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableOcelotData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableOcelotData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutablePassengerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutablePassengerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutablePassengerData {
      env: env,
      object: object
    }
  }

  pub fn passengers(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "passengers", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutablePassengerData#passengers was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutablePersistingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutablePersistingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutablePersistingData {
      env: env,
      object: object
    }
  }

  pub fn persists(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "persists", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutablePersistingData#persists was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutablePickupRuleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutablePickupRuleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutablePickupRuleData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutablePigSaddleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutablePigSaddleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutablePigSaddleData {
      env: env,
      object: object
    }
  }

  pub fn saddle(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "saddle", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutablePigSaddleData#saddle was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutablePlayerCreatedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutablePlayerCreatedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutablePlayerCreatedData {
      env: env,
      object: object
    }
  }

  pub fn player_created(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "playerCreated", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutablePlayerCreatedData#playerCreated was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutablePlayingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutablePlayingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutablePlayingData {
      env: env,
      object: object
    }
  }

  pub fn playing(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "playing", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutablePlayingData#playing was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableRabbitData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableRabbitData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableRabbitData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableRespawnLocation {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableRespawnLocation {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableRespawnLocation {
      env: env,
      object: object
    }
  }

  pub fn respawn_location(&self) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "respawnLocation", "()Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableRespawnLocation#respawnLocation was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn get_for_world(&self, param_1: world_World) -> Option<util_RespawnLocation> {
    let ret = java_method!(self.env, self.object, "getForWorld", "(Lorg/spongepowered/api/world/World;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableRespawnLocation#getForWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_RespawnLocation { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableScreamingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableScreamingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableScreamingData {
      env: env,
      object: object
    }
  }

  pub fn screaming(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "screaming", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableScreamingData#screaming was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableShatteringData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableShatteringData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableShatteringData {
      env: env,
      object: object
    }
  }

  pub fn will_shatter(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "willShatter", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableShatteringData#willShatter was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableShearedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableShearedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableShearedData {
      env: env,
      object: object
    }
  }

  pub fn sheared(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "sheared", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableShearedData#sheared was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableSilentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableSilentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableSilentData {
      env: env,
      object: object
    }
  }

  pub fn silent(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "silent", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSilentData#silent was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableSittingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableSittingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableSittingData {
      env: env,
      object: object
    }
  }

  pub fn sitting(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "sitting", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSittingData#sitting was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableSizeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableSizeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableSizeData {
      env: env,
      object: object
    }
  }

  pub fn base(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "base", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSizeData#base was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn height(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "height", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSizeData#height was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn scale(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "scale", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSizeData#scale was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableSkeletonData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableSkeletonData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableSkeletonData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableSkinData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableSkinData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableSkinData {
      env: env,
      object: object
    }
  }

  pub fn skin_unique_id(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "skinUniqueId", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSkinData#skinUniqueId was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableSleepingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableSleepingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableSleepingData {
      env: env,
      object: object
    }
  }

  pub fn sleeping(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "sleeping", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSleepingData#sleeping was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn ignore_sleeping(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "ignoreSleeping", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSleepingData#ignoreSleeping was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableSlimeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableSlimeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableSlimeData {
      env: env,
      object: object
    }
  }

  pub fn size(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "size", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSlimeData#size was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableSneakingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableSneakingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableSneakingData {
      env: env,
      object: object
    }
  }

  pub fn sneaking(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "sneaking", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSneakingData#sneaking was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableSprintData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableSprintData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableSprintData {
      env: env,
      object: object
    }
  }

  pub fn sprinting(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "sprinting", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableSprintData#sprinting was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableStatisticData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableStatisticData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableStatisticData {
      env: env,
      object: object
    }
  }

  pub fn statistics(&self) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "statistics", "()Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableStatisticData#statistics was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableStuckArrowsData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableStuckArrowsData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableStuckArrowsData {
      env: env,
      object: object
    }
  }

  pub fn stuck_arrows(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "stuckArrows", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableStuckArrowsData#stuckArrows was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableTameableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableTameableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableTameableData {
      env: env,
      object: object
    }
  }

  pub fn owner(&self) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "owner", "()Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableTameableData#owner was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableTradeOfferData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableTradeOfferData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableTradeOfferData {
      env: env,
      object: object
    }
  }

  pub fn trade_offers(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "tradeOffers", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableTradeOfferData#tradeOffers was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableVehicleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableVehicleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableVehicleData {
      env: env,
      object: object
    }
  }

  pub fn vehicle(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "vehicle", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableVehicleData#vehicle was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn base_vehicle(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "baseVehicle", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableVehicleData#baseVehicle was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableVelocityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableVelocityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableVelocityData {
      env: env,
      object: object
    }
  }

  pub fn velocity(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "velocity", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/entity/ImmutableVelocityData#velocity was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_entity_ImmutableVillagerZombieData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_entity_ImmutableVillagerZombieData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_entity_ImmutableVillagerZombieData {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableColoredData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableColoredData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableColoredData {
      env: env,
      object: object
    }
  }

  pub fn color(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "color", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableColoredData#color was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableCommandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableCommandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableCommandData {
      env: env,
      object: object
    }
  }

  pub fn stored_command(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "storedCommand", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableCommandData#storedCommand was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn success_count(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "successCount", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableCommandData#successCount was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn does_track_output(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "doesTrackOutput", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableCommandData#doesTrackOutput was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn last_output(&self) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "lastOutput", "()Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableCommandData#lastOutput was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableDisplayNameData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableDisplayNameData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableDisplayNameData {
      env: env,
      object: object
    }
  }

  pub fn display_name(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "displayName", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableDisplayNameData#displayName was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableDyeableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableDyeableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableDyeableData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableFireworkEffectData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableFireworkEffectData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableFireworkEffectData {
      env: env,
      object: object
    }
  }

  pub fn effects(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "effects", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableFireworkEffectData#effects was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableFireworkRocketData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableFireworkRocketData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableFireworkRocketData {
      env: env,
      object: object
    }
  }

  pub fn flight_modifier(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "flightModifier", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableFireworkRocketData#flightModifier was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableListData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableListData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableListData {
      env: env,
      object: object
    }
  }

  pub fn get_list_value(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "getListValue", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableListData#getListValue was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn as_list(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asList", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableListData#asList was null") }
    ret
  }

  pub fn get(&self, param_1: i32) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(I)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableListData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn contains(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "contains", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableMappedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableMappedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableMappedData {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMappedData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_map_keys(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMapKeys", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMappedData#getMapKeys was null") }
    ret
  }

  pub fn get_map_values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMapValues", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMappedData#getMapValues was null") }
    ret
  }

  pub fn get_map_value(&self) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "getMapValue", "()Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMappedData#getMapValue was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn as_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asMap", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMappedData#asMap was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue {
      env: env,
      object: object
    }
  }

  pub fn with(&self, param_1: entity_EntityType, param_2: jobject) -> data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue {
    let ret = java_method!(self.env, self.object, "with", "(Lorg/spongepowered/api/entity/EntityType;Ljava/util/Collection;)Lorg/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue#with was null") }
    data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue { env: self.env, object: ret }
  }

  pub fn with_1(&self, param_1: util_weighted_WeightedSerializableObject) -> data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue {
    let ret = java_method!(self.env, self.object, "with", "(Lorg/spongepowered/api/util/weighted/WeightedSerializableObject;)Lorg/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue#with was null") }
    data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue { env: self.env, object: ret }
  }

  pub fn transform(&self, param_1: jobject) -> data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue#transform was null") }
    data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue { env: self.env, object: ret }
  }

  pub fn as_mutable(&self) -> data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/manipulator/mutable/MobSpawnerData$NextEntityToSpawnValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue#asMutable was null") }
    data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue { env: self.env, object: ret }
  }

  pub fn as_mutable_1(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue#asMutable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn transform_1(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue#transform was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn with_2(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue#with was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableMobSpawnerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableMobSpawnerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableMobSpawnerData {
      env: env,
      object: object
    }
  }

  pub fn remaining_delay(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "remainingDelay", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData#remainingDelay was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn minimum_spawn_delay(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "minimumSpawnDelay", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData#minimumSpawnDelay was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn maximum_spawn_delay(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maximumSpawnDelay", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData#maximumSpawnDelay was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn spawn_count(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "spawnCount", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData#spawnCount was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn maximum_nearby_entities(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maximumNearbyEntities", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData#maximumNearbyEntities was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn required_player_range(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "requiredPlayerRange", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData#requiredPlayerRange was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn spawn_range(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "spawnRange", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData#spawnRange was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn next_entity_to_spawn(&self) -> data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue {
    let ret = java_method!(self.env, self.object, "nextEntityToSpawn", "()Lorg/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData#nextEntityToSpawn was null") }
    data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue { env: self.env, object: ret }
  }

  pub fn possible_entities_to_spawn(&self) -> data_value_immutable_ImmutableWeightedCollectionValue {
    let ret = java_method!(self.env, self.object, "possibleEntitiesToSpawn", "()Lorg/spongepowered/api/data/value/immutable/ImmutableWeightedCollectionValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData#possibleEntitiesToSpawn was null") }
    data_value_immutable_ImmutableWeightedCollectionValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutablePotionEffectData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutablePotionEffectData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutablePotionEffectData {
      env: env,
      object: object
    }
  }

  pub fn effects(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "effects", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutablePotionEffectData#effects was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableRepresentedItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableRepresentedItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableRepresentedItemData {
      env: env,
      object: object
    }
  }

  pub fn item(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "item", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableRepresentedItemData#item was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableRepresentedPlayerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableRepresentedPlayerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableRepresentedPlayerData {
      env: env,
      object: object
    }
  }

  pub fn owner(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "owner", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableRepresentedPlayerData#owner was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableRotationalData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableRotationalData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableRotationalData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableSkullData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableSkullData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableSkullData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableTargetedLocationData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableTargetedLocationData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableTargetedLocationData {
      env: env,
      object: object
    }
  }

  pub fn target(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "target", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableTargetedLocationData#target was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableVariantData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableVariantData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableVariantData {
      env: env,
      object: object
    }
  }

  pub fn type_(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "type", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableVariantData#type was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_ImmutableWetData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_ImmutableWetData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_ImmutableWetData {
      env: env,
      object: object
    }
  }

  pub fn wet(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "wet", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/ImmutableWetData#wet was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableAuthorData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableAuthorData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableAuthorData {
      env: env,
      object: object
    }
  }

  pub fn author(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "author", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableAuthorData#author was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableBlockItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableBlockItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableBlockItemData {
      env: env,
      object: object
    }
  }

  pub fn state(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "state", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableBlockItemData#state was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableBreakableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableBreakableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableBreakableData {
      env: env,
      object: object
    }
  }

  pub fn breakable(&self) -> data_value_immutable_ImmutableSetValue {
    let ret = java_method!(self.env, self.object, "breakable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableSetValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableBreakableData#breakable was null") }
    data_value_immutable_ImmutableSetValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableCoalData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableCoalData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableCoalData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableCookedFishData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableCookedFishData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableCookedFishData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableDurabilityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableDurabilityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableDurabilityData {
      env: env,
      object: object
    }
  }

  pub fn durability(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "durability", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableDurabilityData#durability was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn unbreakable(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "unbreakable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableDurabilityData#unbreakable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableEnchantmentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableEnchantmentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableEnchantmentData {
      env: env,
      object: object
    }
  }

  pub fn enchantments(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "enchantments", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableEnchantmentData#enchantments was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableFishData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableFishData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableFishData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableGenerationData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableGenerationData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableGenerationData {
      env: env,
      object: object
    }
  }

  pub fn generation(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "generation", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableGenerationData#generation was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableGoldenAppleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableGoldenAppleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableGoldenAppleData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableHideData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableHideData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableHideData {
      env: env,
      object: object
    }
  }

  pub fn hide_enchantments(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "hideEnchantments", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableHideData#hideEnchantments was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn hide_attributes(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "hideAttributes", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableHideData#hideAttributes was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn hide_unbreakable(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "hideUnbreakable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableHideData#hideUnbreakable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn hide_can_destroy(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "hideCanDestroy", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableHideData#hideCanDestroy was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn hide_can_place(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "hideCanPlace", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableHideData#hideCanPlace was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn hide_miscellaneous(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "hideMiscellaneous", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableHideData#hideMiscellaneous was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableInventoryItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableInventoryItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableInventoryItemData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableLoreData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableLoreData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableLoreData {
      env: env,
      object: object
    }
  }

  pub fn lore(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "lore", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableLoreData#lore was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableMapItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableMapItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableMapItemData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutablePagedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutablePagedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutablePagedData {
      env: env,
      object: object
    }
  }

  pub fn pages(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "pages", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutablePagedData#pages was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutablePlaceableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutablePlaceableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutablePlaceableData {
      env: env,
      object: object
    }
  }

  pub fn placeable(&self) -> data_value_immutable_ImmutableSetValue {
    let ret = java_method!(self.env, self.object, "placeable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableSetValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutablePlaceableData#placeable was null") }
    data_value_immutable_ImmutableSetValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableSpawnableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableSpawnableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableSpawnableData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_item_ImmutableStoredEnchantmentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_item_ImmutableStoredEnchantmentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_item_ImmutableStoredEnchantmentData {
      env: env,
      object: object
    }
  }

  pub fn enchantments(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "enchantments", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/item/ImmutableStoredEnchantmentData#enchantments was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_manipulator_immutable_tileentity_ImmutableBannerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_tileentity_ImmutableBannerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_tileentity_ImmutableBannerData {
      env: env,
      object: object
    }
  }

  pub fn base_color(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "baseColor", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableBannerData#baseColor was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn patterns(&self) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "patterns", "()Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableBannerData#patterns was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_tileentity_ImmutableBeaconData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_tileentity_ImmutableBeaconData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_tileentity_ImmutableBeaconData {
      env: env,
      object: object
    }
  }

  pub fn primary_effect(&self) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "primaryEffect", "()Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableBeaconData#primaryEffect was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

  pub fn secondary_effect(&self) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "secondaryEffect", "()Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableBeaconData#secondaryEffect was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

  pub fn clear_effects(&self) -> data_manipulator_immutable_tileentity_ImmutableBeaconData {
    let ret = java_method!(self.env, self.object, "clearEffects", "()Lorg/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableBeaconData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableBeaconData#clearEffects was null") }
    data_manipulator_immutable_tileentity_ImmutableBeaconData { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_tileentity_ImmutableBrewingStandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_tileentity_ImmutableBrewingStandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_tileentity_ImmutableBrewingStandData {
      env: env,
      object: object
    }
  }

  pub fn remaining_brew_time(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "remainingBrewTime", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableBrewingStandData#remainingBrewTime was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_tileentity_ImmutableCooldownData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_tileentity_ImmutableCooldownData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_tileentity_ImmutableCooldownData {
      env: env,
      object: object
    }
  }

  pub fn cooldown(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "cooldown", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableCooldownData#cooldown was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_tileentity_ImmutableFurnaceData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_tileentity_ImmutableFurnaceData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_tileentity_ImmutableFurnaceData {
      env: env,
      object: object
    }
  }

  pub fn passed_burn_time(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "passedBurnTime", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableFurnaceData#passedBurnTime was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_burn_time(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxBurnTime", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableFurnaceData#maxBurnTime was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn passed_cook_time(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "passedCookTime", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableFurnaceData#passedCookTime was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_cook_time(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxCookTime", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableFurnaceData#maxCookTime was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_tileentity_ImmutableLockableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_tileentity_ImmutableLockableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_tileentity_ImmutableLockableData {
      env: env,
      object: object
    }
  }

  pub fn lock_token(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "lockToken", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableLockableData#lockToken was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_tileentity_ImmutableNoteData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_tileentity_ImmutableNoteData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_tileentity_ImmutableNoteData {
      env: env,
      object: object
    }
  }

  pub fn note(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "note", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableNoteData#note was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_immutable_tileentity_ImmutableSignData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_immutable_tileentity_ImmutableSignData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_immutable_tileentity_ImmutableSignData {
      env: env,
      object: object
    }
  }

  pub fn lines(&self) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "lines", "()Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableSignData#lines was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_ImmutableDataManipulator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_ImmutableDataManipulator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_ImmutableDataManipulator {
      env: env,
      object: object
    }
  }

  pub fn with(&self, param_1: data_key_Key, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "with", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulator#with was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn with_1(&self, param_1: data_value_BaseValue) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "with", "(Lorg/spongepowered/api/data/value/BaseValue;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulator#with was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn copy(&self) -> data_manipulator_ImmutableDataManipulator {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulator#copy was null") }
    data_manipulator_ImmutableDataManipulator { env: self.env, object: ret }
  }

  pub fn as_mutable(&self) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulator#asMutable was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn copy_1(&self) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulator#copy was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_ImmutableDataManipulatorBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_ImmutableDataManipulatorBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_ImmutableDataManipulatorBuilder {
      env: env,
      object: object
    }
  }

  pub fn create_immutable(&self) -> data_manipulator_ImmutableDataManipulator {
    let ret = java_method!(self.env, self.object, "createImmutable", "()Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulatorBuilder#createImmutable was null") }
    data_manipulator_ImmutableDataManipulator { env: self.env, object: ret }
  }

  pub fn create_from(&self, param_1: data_DataHolder) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "createFrom", "(Lorg/spongepowered/api/data/DataHolder;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulatorBuilder#createFrom was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn create_from_1(&self, param_1: data_ImmutableDataHolder) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "createFrom", "(Lorg/spongepowered/api/data/ImmutableDataHolder;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulatorBuilder#createFrom was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn reset(&self) -> data_manipulator_ImmutableDataManipulatorBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulatorBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulatorBuilder#reset was null") }
    data_manipulator_ImmutableDataManipulatorBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulatorBuilder#reset was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/ImmutableDataManipulatorBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_AttachedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_AttachedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_AttachedData {
      env: env,
      object: object
    }
  }

  pub fn attached(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "attached", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/AttachedData#attached was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_AxisData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_AxisData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_AxisData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_BigMushroomData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_BigMushroomData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_BigMushroomData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_BrickData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_BrickData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_BrickData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_ComparatorData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_ComparatorData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_ComparatorData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_ConnectedDirectionData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_ConnectedDirectionData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_ConnectedDirectionData {
      env: env,
      object: object
    }
  }

  pub fn connected_directions(&self) -> data_value_mutable_SetValue {
    let ret = java_method!(self.env, self.object, "connectedDirections", "()Lorg/spongepowered/api/data/value/mutable/SetValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/ConnectedDirectionData#connectedDirections was null") }
    data_value_mutable_SetValue { env: self.env, object: ret }
  }

  pub fn connected_north(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "connectedNorth", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/ConnectedDirectionData#connectedNorth was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn connected_south(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "connectedSouth", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/ConnectedDirectionData#connectedSouth was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn connected_east(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "connectedEast", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/ConnectedDirectionData#connectedEast was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn connected_west(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "connectedWest", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/ConnectedDirectionData#connectedWest was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_DecayableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_DecayableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_DecayableData {
      env: env,
      object: object
    }
  }

  pub fn decayable(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "decayable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/DecayableData#decayable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_DelayableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_DelayableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_DelayableData {
      env: env,
      object: object
    }
  }

  pub fn delay(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "delay", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/DelayableData#delay was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_DirectionalData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_DirectionalData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_DirectionalData {
      env: env,
      object: object
    }
  }

  pub fn direction(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "direction", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/DirectionalData#direction was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_DirtData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_DirtData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_DirtData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_DisarmedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_DisarmedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_DisarmedData {
      env: env,
      object: object
    }
  }

  pub fn disarmed(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "disarmed", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/DisarmedData#disarmed was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_DisguisedBlockData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_DisguisedBlockData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_DisguisedBlockData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_DoublePlantData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_DoublePlantData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_DoublePlantData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_DropData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_DropData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_DropData {
      env: env,
      object: object
    }
  }

  pub fn will_drop(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "willDrop", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/DropData#willDrop was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_ExtendedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_ExtendedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_ExtendedData {
      env: env,
      object: object
    }
  }

  pub fn extended(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "extended", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/ExtendedData#extended was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_FilledData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_FilledData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_FilledData {
      env: env,
      object: object
    }
  }

  pub fn filled(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "filled", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/FilledData#filled was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_FluidLevelData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_FluidLevelData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_FluidLevelData {
      env: env,
      object: object
    }
  }

  pub fn level(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "level", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/FluidLevelData#level was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_GrowthData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_GrowthData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_GrowthData {
      env: env,
      object: object
    }
  }

  pub fn growth_stage(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "growthStage", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/GrowthData#growthStage was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_HingeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_HingeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_HingeData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_InWallData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_InWallData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_InWallData {
      env: env,
      object: object
    }
  }

  pub fn in_wall(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "inWall", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/InWallData#inWall was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_LayeredData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_LayeredData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_LayeredData {
      env: env,
      object: object
    }
  }

  pub fn layer(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "layer", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/LayeredData#layer was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_LogAxisData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_LogAxisData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_LogAxisData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_MoistureData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_MoistureData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_MoistureData {
      env: env,
      object: object
    }
  }

  pub fn moisture(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "moisture", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/MoistureData#moisture was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_OccupiedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_OccupiedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_OccupiedData {
      env: env,
      object: object
    }
  }

  pub fn occupied(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "occupied", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/OccupiedData#occupied was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_OpenData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_OpenData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_OpenData {
      env: env,
      object: object
    }
  }

  pub fn open(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "open", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/OpenData#open was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_manipulator_mutable_block_PistonData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_PistonData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_PistonData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_PlantData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_PlantData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_PlantData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_PortionData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_PortionData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_PortionData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_PoweredData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_PoweredData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_PoweredData {
      env: env,
      object: object
    }
  }

  pub fn powered(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "powered", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/PoweredData#powered was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_PrismarineData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_PrismarineData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_PrismarineData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_QuartzData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_QuartzData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_QuartzData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_RailDirectionData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_RailDirectionData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_RailDirectionData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_RedstonePoweredData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_RedstonePoweredData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_RedstonePoweredData {
      env: env,
      object: object
    }
  }

  pub fn power(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "power", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/RedstonePoweredData#power was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_SandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_SandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_SandData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_SandstoneData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_SandstoneData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_SandstoneData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_SeamlessData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_SeamlessData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_SeamlessData {
      env: env,
      object: object
    }
  }

  pub fn seamless(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "seamless", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/SeamlessData#seamless was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_ShrubData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_ShrubData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_ShrubData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_SlabData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_SlabData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_SlabData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_SnowedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_SnowedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_SnowedData {
      env: env,
      object: object
    }
  }

  pub fn has_snow(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "hasSnow", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/SnowedData#hasSnow was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_StairShapeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_StairShapeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_StairShapeData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_StoneData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_StoneData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_StoneData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_TreeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_TreeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_TreeData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_WallData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_WallData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_WallData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_block_WireAttachmentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_block_WireAttachmentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_block_WireAttachmentData {
      env: env,
      object: object
    }
  }

  pub fn wire_attachments(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "wireAttachments", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/WireAttachmentData#wireAttachments was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn wire_attachment_north(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "wireAttachmentNorth", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/WireAttachmentData#wireAttachmentNorth was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn wire_attachment_south(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "wireAttachmentSouth", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/WireAttachmentData#wireAttachmentSouth was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn wire_attachment_east(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "wireAttachmentEast", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/WireAttachmentData#wireAttachmentEast was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn wire_attachment_west(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "wireAttachmentWest", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/block/WireAttachmentData#wireAttachmentWest was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_ColoredData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_ColoredData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_ColoredData {
      env: env,
      object: object
    }
  }

  pub fn color(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "color", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ColoredData#color was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_CommandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_CommandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_CommandData {
      env: env,
      object: object
    }
  }

  pub fn stored_command(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "storedCommand", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/CommandData#storedCommand was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn success_count(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "successCount", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/CommandData#successCount was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn does_track_output(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "doesTrackOutput", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/CommandData#doesTrackOutput was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn last_output(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "lastOutput", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/CommandData#lastOutput was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_common_AbstractBooleanData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_common_AbstractBooleanData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_common_AbstractBooleanData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_DataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractBooleanData#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_common_AbstractBoundedComparableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_common_AbstractBoundedComparableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_common_AbstractBoundedComparableData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_DataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn set_value(&self, param_1: jobject) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "setValue", "(Ljava/lang/Comparable;)Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractBoundedComparableData#setValue was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractBoundedComparableData#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn set_value_1(&self, param_1: jobject) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "setValue", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractBoundedComparableData#setValue was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_common_AbstractData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_common_AbstractData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_common_AbstractData {
      env: env,
      object: object
    }
  }

  pub fn set(&self, param_1: data_key_Key, param_2: jobject) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractData#set was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn transform(&self, param_1: data_key_Key, param_2: jobject) -> data_manipulator_DataManipulator {
    let ret = java_method!(self.env, self.object, "transform", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/function/Function;)Lorg/spongepowered/api/data/manipulator/DataManipulator;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractData#transform was null") }
    data_manipulator_DataManipulator { env: self.env, object: ret }
  }

  pub fn get(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_value(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getValue", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractData#getValue was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn supports(&self, param_1: data_key_Key) -> bool {
    java_method!(self.env, self.object, "supports", "(Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_keys(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKeys", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractData#getKeys was null") }
    ret
  }

  pub fn get_values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValues", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractData#getValues was null") }
    ret
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractData#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_common_AbstractIntData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_common_AbstractIntData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_common_AbstractIntData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_DataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_common_AbstractListData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_common_AbstractListData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_common_AbstractListData {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractListData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn supports(&self, param_1: data_key_Key) -> bool {
    java_method!(self.env, self.object, "supports", "(Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn as_immutable(&self) -> data_manipulator_immutable_ImmutableListData {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/manipulator/immutable/ImmutableListData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractListData#asImmutable was null") }
    data_manipulator_immutable_ImmutableListData { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_manipulator_mutable_ListData) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/mutable/ListData;)I", CallIntMethodA, param_1)
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_list_value(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "getListValue", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractListData#getListValue was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn as_list(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asList", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractListData#asList was null") }
    ret
  }

  pub fn compare_to_1(&self, param_1: data_manipulator_DataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn as_immutable_1(&self) -> data_manipulator_ImmutableDataManipulator {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractListData#asImmutable was null") }
    data_manipulator_ImmutableDataManipulator { env: self.env, object: ret }
  }

  pub fn compare_to_2(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_common_AbstractMappedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_common_AbstractMappedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_common_AbstractMappedData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_mutable_MappedData) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/mutable/MappedData;)I", CallIntMethodA, param_1)
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_map_value(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "getMapValue", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractMappedData#getMapValue was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn as_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asMap", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractMappedData#asMap was null") }
    ret
  }

  pub fn compare_to_1(&self, param_1: data_manipulator_DataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_2(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_common_AbstractSingleCatalogData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_common_AbstractSingleCatalogData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_common_AbstractSingleCatalogData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_mutable_VariantData) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/mutable/VariantData;)I", CallIntMethodA, param_1)
  }

  pub fn type_(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "type", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractSingleCatalogData#type was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractSingleCatalogData#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: data_manipulator_DataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_2(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_common_AbstractSingleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_common_AbstractSingleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_common_AbstractSingleData {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractSingleData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn supports(&self, param_1: data_key_Key) -> bool {
    java_method!(self.env, self.object, "supports", "(Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn as_immutable(&self) -> data_manipulator_ImmutableDataManipulator {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractSingleData#asImmutable was null") }
    data_manipulator_ImmutableDataManipulator { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_manipulator_DataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_common_AbstractSingleEnumData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_common_AbstractSingleEnumData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_common_AbstractSingleEnumData {
      env: env,
      object: object
    }
  }

  pub fn compare_to(&self, param_1: data_manipulator_DataManipulator) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)I", CallIntMethodA, param_1)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/common/AbstractSingleEnumData#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}


#[derive(Debug)]
pub struct data_manipulator_mutable_DisplayNameData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_DisplayNameData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_DisplayNameData {
      env: env,
      object: object
    }
  }

  pub fn display_name(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "displayName", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/DisplayNameData#displayName was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_DyeableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_DyeableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_DyeableData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_AchievementData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_AchievementData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_AchievementData {
      env: env,
      object: object
    }
  }

  pub fn achievements(&self) -> data_value_mutable_SetValue {
    let ret = java_method!(self.env, self.object, "achievements", "()Lorg/spongepowered/api/data/value/mutable/SetValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/AchievementData#achievements was null") }
    data_value_mutable_SetValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_AffectsSpawningData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_AffectsSpawningData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_AffectsSpawningData {
      env: env,
      object: object
    }
  }

  pub fn affects_spawning(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "affectsSpawning", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/AffectsSpawningData#affectsSpawning was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_AgeableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_AgeableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_AgeableData {
      env: env,
      object: object
    }
  }

  pub fn age(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "age", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/AgeableData#age was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn baby(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "baby", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/AgeableData#baby was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn adult(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "adult", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/AgeableData#adult was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_AgentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_AgentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_AgentData {
      env: env,
      object: object
    }
  }

  pub fn ai_enabled(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "aiEnabled", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/AgentData#aiEnabled was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_AggressiveData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_AggressiveData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_AggressiveData {
      env: env,
      object: object
    }
  }

  pub fn aggressive(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "aggressive", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/AggressiveData#aggressive was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_AngerableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_AngerableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_AngerableData {
      env: env,
      object: object
    }
  }

  pub fn anger_level(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "angerLevel", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/AngerableData#angerLevel was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ArmorStandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ArmorStandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ArmorStandData {
      env: env,
      object: object
    }
  }

  pub fn marker(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "marker", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ArmorStandData#marker was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn small(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "small", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ArmorStandData#small was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn gravity(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "gravity", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ArmorStandData#gravity was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn arms(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "arms", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ArmorStandData#arms was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn base_plate(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "basePlate", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ArmorStandData#basePlate was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ArtData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ArtData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ArtData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_BodyPartRotationalData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_BodyPartRotationalData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_BodyPartRotationalData {
      env: env,
      object: object
    }
  }

  pub fn part_rotation(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "partRotation", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BodyPartRotationalData#partRotation was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn head_direction(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "headDirection", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BodyPartRotationalData#headDirection was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn body_rotation(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "bodyRotation", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BodyPartRotationalData#bodyRotation was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn left_arm_direction(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "leftArmDirection", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BodyPartRotationalData#leftArmDirection was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn right_arm_direction(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "rightArmDirection", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BodyPartRotationalData#rightArmDirection was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn left_leg_direction(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "leftLegDirection", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BodyPartRotationalData#leftLegDirection was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn right_leg_direction(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "rightLegDirection", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BodyPartRotationalData#rightLegDirection was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_BreathingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_BreathingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_BreathingData {
      env: env,
      object: object
    }
  }

  pub fn remaining_air(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "remainingAir", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BreathingData#remainingAir was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_air(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxAir", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BreathingData#maxAir was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_BreedableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_BreedableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_BreedableData {
      env: env,
      object: object
    }
  }

  pub fn breedable(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "breedable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/BreedableData#breedable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_CareerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_CareerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_CareerData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ChargedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ChargedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ChargedData {
      env: env,
      object: object
    }
  }

  pub fn charged(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "charged", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ChargedData#charged was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_CriticalHitData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_CriticalHitData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_CriticalHitData {
      env: env,
      object: object
    }
  }

  pub fn critical_hit(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "criticalHit", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/CriticalHitData#criticalHit was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_CustomNameVisibleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_CustomNameVisibleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_CustomNameVisibleData {
      env: env,
      object: object
    }
  }

  pub fn custom_name_visible(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "customNameVisible", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/CustomNameVisibleData#customNameVisible was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_DamageableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_DamageableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_DamageableData {
      env: env,
      object: object
    }
  }

  pub fn last_attacker(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "lastAttacker", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/DamageableData#lastAttacker was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn last_damage(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "lastDamage", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/DamageableData#lastDamage was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_DamagingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_DamagingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_DamagingData {
      env: env,
      object: object
    }
  }

  pub fn damage(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "damage", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/DamagingData#damage was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn damage_for_entity(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "damageForEntity", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/DamagingData#damageForEntity was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_DominantHandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_DominantHandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_DominantHandData {
      env: env,
      object: object
    }
  }

  pub fn dominant_hand(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "dominantHand", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/DominantHandData#dominantHand was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ElderData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ElderData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ElderData {
      env: env,
      object: object
    }
  }

  pub fn elder(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "elder", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ElderData#elder was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ExperienceHolderData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ExperienceHolderData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ExperienceHolderData {
      env: env,
      object: object
    }
  }

  pub fn experience_since_level(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "experienceSinceLevel", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ExperienceHolderData#experienceSinceLevel was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn get_experience_between_levels(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "getExperienceBetweenLevels", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ExperienceHolderData#getExperienceBetweenLevels was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn level(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "level", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ExperienceHolderData#level was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn total_experience(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "totalExperience", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ExperienceHolderData#totalExperience was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ExpirableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ExpirableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ExpirableData {
      env: env,
      object: object
    }
  }

  pub fn expire_ticks(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "expireTicks", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ExpirableData#expireTicks was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ExplosionRadiusData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ExplosionRadiusData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ExplosionRadiusData {
      env: env,
      object: object
    }
  }

  pub fn explosion_radius(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "explosionRadius", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ExplosionRadiusData#explosionRadius was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ExpOrbData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ExpOrbData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ExpOrbData {
      env: env,
      object: object
    }
  }

  pub fn experience(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "experience", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ExpOrbData#experience was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_FallDistanceData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_FallDistanceData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_FallDistanceData {
      env: env,
      object: object
    }
  }

  pub fn fall_distance(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "fallDistance", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FallDistanceData#fallDistance was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_FallingBlockData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_FallingBlockData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_FallingBlockData {
      env: env,
      object: object
    }
  }

  pub fn fall_damage_per_block(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "fallDamagePerBlock", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FallingBlockData#fallDamagePerBlock was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn max_fall_damage(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "maxFallDamage", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FallingBlockData#maxFallDamage was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn block_state(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "blockState", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FallingBlockData#blockState was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn can_place_as_block(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "canPlaceAsBlock", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FallingBlockData#canPlaceAsBlock was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn can_drop_as_item(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "canDropAsItem", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FallingBlockData#canDropAsItem was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn fall_time(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "fallTime", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FallingBlockData#fallTime was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn can_hurt_entities(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "canHurtEntities", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FallingBlockData#canHurtEntities was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_FlammableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_FlammableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_FlammableData {
      env: env,
      object: object
    }
  }

  pub fn flammable(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "flammable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FlammableData#flammable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_FlyingAbilityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_FlyingAbilityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_FlyingAbilityData {
      env: env,
      object: object
    }
  }

  pub fn can_fly(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "canFly", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FlyingAbilityData#canFly was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_FlyingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_FlyingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_FlyingData {
      env: env,
      object: object
    }
  }

  pub fn flying(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "flying", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FlyingData#flying was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_FoodData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_FoodData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_FoodData {
      env: env,
      object: object
    }
  }

  pub fn food_level(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "foodLevel", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FoodData#foodLevel was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn exhaustion(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "exhaustion", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FoodData#exhaustion was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn saturation(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "saturation", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FoodData#saturation was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_FuseData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_FuseData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_FuseData {
      env: env,
      object: object
    }
  }

  pub fn fuse_duration(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "fuseDuration", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FuseData#fuseDuration was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn ticks_remaining(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "ticksRemaining", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/FuseData#ticksRemaining was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_GameModeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_GameModeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_GameModeData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_GlowingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_GlowingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_GlowingData {
      env: env,
      object: object
    }
  }

  pub fn glowing(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "glowing", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/GlowingData#glowing was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_GriefingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_GriefingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_GriefingData {
      env: env,
      object: object
    }
  }

  pub fn can_grief(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "canGrief", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/GriefingData#canGrief was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_HealthData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_HealthData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_HealthData {
      env: env,
      object: object
    }
  }

  pub fn health(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "health", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/HealthData#health was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_health(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxHealth", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/HealthData#maxHealth was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_HealthScalingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_HealthScalingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_HealthScalingData {
      env: env,
      object: object
    }
  }

  pub fn health_scale(&self) -> data_value_BoundedValue {
    let ret = java_method!(self.env, self.object, "healthScale", "()Lorg/spongepowered/api/data/value/BoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/HealthScalingData#healthScale was null") }
    data_value_BoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_HorseData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_HorseData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_HorseData {
      env: env,
      object: object
    }
  }

  pub fn color(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "color", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/HorseData#color was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn style(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "style", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/HorseData#style was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn variant(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "variant", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/HorseData#variant was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_IgniteableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_IgniteableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_IgniteableData {
      env: env,
      object: object
    }
  }

  pub fn fire_ticks(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "fireTicks", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/IgniteableData#fireTicks was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn fire_delay(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "fireDelay", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/IgniteableData#fireDelay was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_InvisibilityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_InvisibilityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_InvisibilityData {
      env: env,
      object: object
    }
  }

  pub fn invisible(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "invisible", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/InvisibilityData#invisible was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn vanish(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "vanish", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/InvisibilityData#vanish was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn ignores_collision_detection(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "ignoresCollisionDetection", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/InvisibilityData#ignoresCollisionDetection was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn untargetable(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "untargetable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/InvisibilityData#untargetable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_InvulnerabilityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_InvulnerabilityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_InvulnerabilityData {
      env: env,
      object: object
    }
  }

  pub fn invulnerable_ticks(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "invulnerableTicks", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/InvulnerabilityData#invulnerableTicks was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_JoinData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_JoinData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_JoinData {
      env: env,
      object: object
    }
  }

  pub fn first_played(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "firstPlayed", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/JoinData#firstPlayed was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn last_played(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "lastPlayed", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/JoinData#lastPlayed was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_KnockbackData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_KnockbackData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_KnockbackData {
      env: env,
      object: object
    }
  }

  pub fn knockback_strength(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "knockbackStrength", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/KnockbackData#knockbackStrength was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_LeashData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_LeashData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_LeashData {
      env: env,
      object: object
    }
  }

  pub fn leash_holder(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "leashHolder", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/LeashData#leashHolder was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_MinecartBlockData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_MinecartBlockData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_MinecartBlockData {
      env: env,
      object: object
    }
  }

  pub fn block(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "block", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/MinecartBlockData#block was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn offset(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "offset", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/MinecartBlockData#offset was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_MovementSpeedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_MovementSpeedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_MovementSpeedData {
      env: env,
      object: object
    }
  }

  pub fn walk_speed(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "walkSpeed", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/MovementSpeedData#walkSpeed was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn fly_speed(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "flySpeed", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/MovementSpeedData#flySpeed was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_OcelotData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_OcelotData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_OcelotData {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct data_manipulator_mutable_entity_PassengerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_PassengerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_PassengerData {
      env: env,
      object: object
    }
  }

  pub fn passengers(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "passengers", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/PassengerData#passengers was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_PersistingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_PersistingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_PersistingData {
      env: env,
      object: object
    }
  }

  pub fn persists(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "persists", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/PersistingData#persists was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_PickupRuleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_PickupRuleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_PickupRuleData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_PigSaddleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_PigSaddleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_PigSaddleData {
      env: env,
      object: object
    }
  }

  pub fn saddle(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "saddle", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/PigSaddleData#saddle was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_PlayerCreatedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_PlayerCreatedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_PlayerCreatedData {
      env: env,
      object: object
    }
  }

  pub fn player_created(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "playerCreated", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/PlayerCreatedData#playerCreated was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_PlayingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_PlayingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_PlayingData {
      env: env,
      object: object
    }
  }

  pub fn playing(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "playing", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/PlayingData#playing was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_RabbitData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_RabbitData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_RabbitData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_RespawnLocationData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_RespawnLocationData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_RespawnLocationData {
      env: env,
      object: object
    }
  }

  pub fn respawn_location(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "respawnLocation", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/RespawnLocationData#respawnLocation was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn get_for_world(&self, param_1: world_World) -> Option<util_RespawnLocation> {
    let ret = java_method!(self.env, self.object, "getForWorld", "(Lorg/spongepowered/api/world/World;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/RespawnLocationData#getForWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_RespawnLocation { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ScreamingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ScreamingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ScreamingData {
      env: env,
      object: object
    }
  }

  pub fn screaming(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "screaming", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ScreamingData#screaming was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ShatteringData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ShatteringData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ShatteringData {
      env: env,
      object: object
    }
  }

  pub fn will_shatter(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "willShatter", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ShatteringData#willShatter was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_ShearedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_ShearedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_ShearedData {
      env: env,
      object: object
    }
  }

  pub fn sheared(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "sheared", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/ShearedData#sheared was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_SilentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_SilentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_SilentData {
      env: env,
      object: object
    }
  }

  pub fn silent(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "silent", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SilentData#silent was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_SittingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_SittingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_SittingData {
      env: env,
      object: object
    }
  }

  pub fn sitting(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "sitting", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SittingData#sitting was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_SizeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_SizeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_SizeData {
      env: env,
      object: object
    }
  }

  pub fn base(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "base", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SizeData#base was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn height(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "height", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SizeData#height was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn scale(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "scale", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SizeData#scale was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_SkeletonData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_SkeletonData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_SkeletonData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_SkinData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_SkinData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_SkinData {
      env: env,
      object: object
    }
  }

  pub fn skin_unique_id(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "skinUniqueId", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SkinData#skinUniqueId was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_SleepingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_SleepingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_SleepingData {
      env: env,
      object: object
    }
  }

  pub fn sleeping(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "sleeping", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SleepingData#sleeping was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_SlimeData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_SlimeData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_SlimeData {
      env: env,
      object: object
    }
  }

  pub fn size(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "size", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SlimeData#size was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_SneakingData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_SneakingData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_SneakingData {
      env: env,
      object: object
    }
  }

  pub fn sneaking(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "sneaking", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SneakingData#sneaking was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_SprintData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_SprintData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_SprintData {
      env: env,
      object: object
    }
  }

  pub fn sprinting(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "sprinting", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/SprintData#sprinting was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_StatisticData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_StatisticData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_StatisticData {
      env: env,
      object: object
    }
  }

  pub fn statistics(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "statistics", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/StatisticData#statistics was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_StuckArrowsData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_StuckArrowsData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_StuckArrowsData {
      env: env,
      object: object
    }
  }

  pub fn stuck_arrows(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "stuckArrows", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/StuckArrowsData#stuckArrows was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_TameableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_TameableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_TameableData {
      env: env,
      object: object
    }
  }

  pub fn owner(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "owner", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/TameableData#owner was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_TradeOfferData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_TradeOfferData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_TradeOfferData {
      env: env,
      object: object
    }
  }

  pub fn trade_offers(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "tradeOffers", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/TradeOfferData#tradeOffers was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_VehicleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_VehicleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_VehicleData {
      env: env,
      object: object
    }
  }

  pub fn vehicle(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "vehicle", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/VehicleData#vehicle was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn base_vehicle(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "baseVehicle", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/VehicleData#baseVehicle was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_VelocityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_VelocityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_VelocityData {
      env: env,
      object: object
    }
  }

  pub fn velocity(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "velocity", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/entity/VelocityData#velocity was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_entity_VillagerZombieData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_entity_VillagerZombieData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_entity_VillagerZombieData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_FireworkEffectData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_FireworkEffectData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_FireworkEffectData {
      env: env,
      object: object
    }
  }

  pub fn effects(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "effects", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/FireworkEffectData#effects was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_FireworkRocketData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_FireworkRocketData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_FireworkRocketData {
      env: env,
      object: object
    }
  }

  pub fn flight_modifier(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "flightModifier", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/FireworkRocketData#flightModifier was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_AuthorData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_AuthorData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_AuthorData {
      env: env,
      object: object
    }
  }

  pub fn author(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "author", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/AuthorData#author was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_BlockItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_BlockItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_BlockItemData {
      env: env,
      object: object
    }
  }

  pub fn state(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "state", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/BlockItemData#state was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_BreakableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_BreakableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_BreakableData {
      env: env,
      object: object
    }
  }

  pub fn breakable(&self) -> data_value_mutable_SetValue {
    let ret = java_method!(self.env, self.object, "breakable", "()Lorg/spongepowered/api/data/value/mutable/SetValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/BreakableData#breakable was null") }
    data_value_mutable_SetValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_CoalData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_CoalData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_CoalData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_CookedFishData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_CookedFishData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_CookedFishData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_DurabilityData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_DurabilityData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_DurabilityData {
      env: env,
      object: object
    }
  }

  pub fn durability(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "durability", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/DurabilityData#durability was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn unbreakable(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "unbreakable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/DurabilityData#unbreakable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_EnchantmentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_EnchantmentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_EnchantmentData {
      env: env,
      object: object
    }
  }

  pub fn enchantments(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "enchantments", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/EnchantmentData#enchantments was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_FishData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_FishData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_FishData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_GenerationData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_GenerationData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_GenerationData {
      env: env,
      object: object
    }
  }

  pub fn generation(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "generation", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/GenerationData#generation was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_GoldenAppleData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_GoldenAppleData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_GoldenAppleData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_HideData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_HideData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_HideData {
      env: env,
      object: object
    }
  }

  pub fn hide_enchantments(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "hideEnchantments", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/HideData#hideEnchantments was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn hide_attributes(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "hideAttributes", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/HideData#hideAttributes was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn hide_unbreakable(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "hideUnbreakable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/HideData#hideUnbreakable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn hide_can_destroy(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "hideCanDestroy", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/HideData#hideCanDestroy was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn hide_can_place(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "hideCanPlace", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/HideData#hideCanPlace was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn hide_miscellaneous(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "hideMiscellaneous", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/HideData#hideMiscellaneous was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_InventoryItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_InventoryItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_InventoryItemData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_LoreData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_LoreData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_LoreData {
      env: env,
      object: object
    }
  }

  pub fn lore(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "lore", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/LoreData#lore was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_MapItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_MapItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_MapItemData {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct data_manipulator_mutable_item_PagedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_PagedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_PagedData {
      env: env,
      object: object
    }
  }

  pub fn pages(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "pages", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/PagedData#pages was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_PlaceableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_PlaceableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_PlaceableData {
      env: env,
      object: object
    }
  }

  pub fn placeable(&self) -> data_value_mutable_SetValue {
    let ret = java_method!(self.env, self.object, "placeable", "()Lorg/spongepowered/api/data/value/mutable/SetValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/PlaceableData#placeable was null") }
    data_value_mutable_SetValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_SpawnableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_SpawnableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_SpawnableData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_item_StoredEnchantmentData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_item_StoredEnchantmentData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_item_StoredEnchantmentData {
      env: env,
      object: object
    }
  }

  pub fn enchantments(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "enchantments", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/item/StoredEnchantmentData#enchantments was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_ListData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_ListData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_ListData {
      env: env,
      object: object
    }
  }

  pub fn get_list_value(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "getListValue", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#getListValue was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn as_list(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asList", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#asList was null") }
    ret
  }

  pub fn get(&self, param_1: i32) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(I)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn contains(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "contains", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn set_element(&self, param_1: i32, param_2: jobject) -> data_manipulator_mutable_ListData {
    let ret = java_method!(self.env, self.object, "setElement", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/manipulator/mutable/ListData;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#setElement was null") }
    data_manipulator_mutable_ListData { env: self.env, object: ret }
  }

  pub fn set_elements(&self, param_1: jobject) -> data_manipulator_mutable_ListData {
    let ret = java_method!(self.env, self.object, "setElements", "(Ljava/util/List;)Lorg/spongepowered/api/data/manipulator/mutable/ListData;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#setElements was null") }
    data_manipulator_mutable_ListData { env: self.env, object: ret }
  }

  pub fn add_element(&self, param_1: jobject) -> data_manipulator_mutable_ListData {
    let ret = java_method!(self.env, self.object, "addElement", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/manipulator/mutable/ListData;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#addElement was null") }
    data_manipulator_mutable_ListData { env: self.env, object: ret }
  }

  pub fn add_element_1(&self, param_1: i32, param_2: jobject) -> data_manipulator_mutable_ListData {
    let ret = java_method!(self.env, self.object, "addElement", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/manipulator/mutable/ListData;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#addElement was null") }
    data_manipulator_mutable_ListData { env: self.env, object: ret }
  }

  pub fn add_elements(&self, param_1: jobject) -> data_manipulator_mutable_ListData {
    let ret = java_method!(self.env, self.object, "addElements", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/manipulator/mutable/ListData;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#addElements was null") }
    data_manipulator_mutable_ListData { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: i32) -> data_manipulator_mutable_ListData {
    let ret = java_method!(self.env, self.object, "remove", "(I)Lorg/spongepowered/api/data/manipulator/mutable/ListData;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#remove was null") }
    data_manipulator_mutable_ListData { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: jobject) -> data_manipulator_mutable_ListData {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/manipulator/mutable/ListData;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#remove was null") }
    data_manipulator_mutable_ListData { env: self.env, object: ret }
  }

  pub fn remove_all(&self, param_1: jobject) -> data_manipulator_mutable_ListData {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/manipulator/mutable/ListData;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#removeAll was null") }
    data_manipulator_mutable_ListData { env: self.env, object: ret }
  }

  pub fn remove_all_1(&self, param_1: jobject) -> data_manipulator_mutable_ListData {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/manipulator/mutable/ListData;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/ListData#removeAll was null") }
    data_manipulator_mutable_ListData { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_MappedData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_MappedData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_MappedData {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MappedData#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_map_keys(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMapKeys", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MappedData#getMapKeys was null") }
    ret
  }

  pub fn get_map_values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMapValues", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MappedData#getMapValues was null") }
    ret
  }

  pub fn get_map_value(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "getMapValue", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MappedData#getMapValue was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn as_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asMap", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MappedData#asMap was null") }
    ret
  }

  pub fn put(&self, param_1: jobject, param_2: jobject) -> data_manipulator_mutable_MappedData {
    let ret = java_method!(self.env, self.object, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/data/manipulator/mutable/MappedData;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MappedData#put was null") }
    data_manipulator_mutable_MappedData { env: self.env, object: ret }
  }

  pub fn put_all(&self, param_1: jobject) -> data_manipulator_mutable_MappedData {
    let ret = java_method!(self.env, self.object, "putAll", "(Ljava/util/Map;)Lorg/spongepowered/api/data/manipulator/mutable/MappedData;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MappedData#putAll was null") }
    data_manipulator_mutable_MappedData { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: jobject) -> data_manipulator_mutable_MappedData {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/manipulator/mutable/MappedData;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MappedData#remove was null") }
    data_manipulator_mutable_MappedData { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue {
      env: env,
      object: object
    }
  }

  pub fn set(&self, param_1: entity_EntityType, param_2: jobject) -> data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/entity/EntityType;Ljava/util/Collection;)Lorg/spongepowered/api/data/manipulator/mutable/MobSpawnerData$NextEntityToSpawnValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData$NextEntityToSpawnValue#set was null") }
    data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue { env: self.env, object: ret }
  }

  pub fn as_immutable(&self) -> data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData$ImmutableNextEntityToSpawnValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData$NextEntityToSpawnValue#asImmutable was null") }
    data_manipulator_immutable_ImmutableMobSpawnerData_ImmutableNextEntityToSpawnValue { env: self.env, object: ret }
  }

  pub fn as_immutable_1(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData$NextEntityToSpawnValue#asImmutable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_MobSpawnerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_MobSpawnerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_MobSpawnerData {
      env: env,
      object: object
    }
  }

  pub fn remaining_delay(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "remainingDelay", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData#remainingDelay was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn minimum_spawn_delay(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "minimumSpawnDelay", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData#minimumSpawnDelay was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn maximum_spawn_delay(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maximumSpawnDelay", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData#maximumSpawnDelay was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn spawn_count(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "spawnCount", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData#spawnCount was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn maximum_nearby_entities(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maximumNearbyEntities", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData#maximumNearbyEntities was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn required_player_range(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "requiredPlayerRange", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData#requiredPlayerRange was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn spawn_range(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "spawnRange", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData#spawnRange was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn next_entity_to_spawn(&self) -> data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue {
    let ret = java_method!(self.env, self.object, "nextEntityToSpawn", "()Lorg/spongepowered/api/data/manipulator/mutable/MobSpawnerData$NextEntityToSpawnValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData#nextEntityToSpawn was null") }
    data_manipulator_mutable_MobSpawnerData_NextEntityToSpawnValue { env: self.env, object: ret }
  }

  pub fn possible_entities_to_spawn(&self) -> data_value_mutable_WeightedCollectionValue {
    let ret = java_method!(self.env, self.object, "possibleEntitiesToSpawn", "()Lorg/spongepowered/api/data/value/mutable/WeightedCollectionValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/MobSpawnerData#possibleEntitiesToSpawn was null") }
    data_value_mutable_WeightedCollectionValue { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_manipulator_mutable_PotionEffectData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_PotionEffectData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_PotionEffectData {
      env: env,
      object: object
    }
  }

  pub fn effects(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "effects", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/PotionEffectData#effects was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_RepresentedItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_RepresentedItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_RepresentedItemData {
      env: env,
      object: object
    }
  }

  pub fn item(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "item", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/RepresentedItemData#item was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_RepresentedPlayerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_RepresentedPlayerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_RepresentedPlayerData {
      env: env,
      object: object
    }
  }

  pub fn owner(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "owner", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/RepresentedPlayerData#owner was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_RotationalData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_RotationalData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_RotationalData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_SkullData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_SkullData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_SkullData {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_TargetedLocationData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_TargetedLocationData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_TargetedLocationData {
      env: env,
      object: object
    }
  }

  pub fn target(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "target", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/TargetedLocationData#target was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_tileentity_BannerData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_tileentity_BannerData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_tileentity_BannerData {
      env: env,
      object: object
    }
  }

  pub fn base_color(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "baseColor", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/BannerData#baseColor was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn patterns_list(&self) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "patternsList", "()Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/BannerData#patternsList was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_tileentity_BeaconData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_tileentity_BeaconData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_tileentity_BeaconData {
      env: env,
      object: object
    }
  }

  pub fn primary_effect(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "primaryEffect", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/BeaconData#primaryEffect was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn secondary_effect(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "secondaryEffect", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/BeaconData#secondaryEffect was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn clear_effects(&self) -> data_manipulator_mutable_tileentity_BeaconData {
    let ret = java_method!(self.env, self.object, "clearEffects", "()Lorg/spongepowered/api/data/manipulator/mutable/tileentity/BeaconData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/BeaconData#clearEffects was null") }
    data_manipulator_mutable_tileentity_BeaconData { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_tileentity_BrewingStandData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_tileentity_BrewingStandData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_tileentity_BrewingStandData {
      env: env,
      object: object
    }
  }

  pub fn remaining_brew_time(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "remainingBrewTime", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/BrewingStandData#remainingBrewTime was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_tileentity_CooldownData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_tileentity_CooldownData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_tileentity_CooldownData {
      env: env,
      object: object
    }
  }

  pub fn cooldown(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "cooldown", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/CooldownData#cooldown was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_tileentity_FurnaceData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_tileentity_FurnaceData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_tileentity_FurnaceData {
      env: env,
      object: object
    }
  }

  pub fn passed_burn_time(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "passedBurnTime", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/FurnaceData#passedBurnTime was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_burn_time(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxBurnTime", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/FurnaceData#maxBurnTime was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn passed_cook_time(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "passedCookTime", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/FurnaceData#passedCookTime was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_cook_time(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxCookTime", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/FurnaceData#maxCookTime was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_tileentity_LockableData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_tileentity_LockableData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_tileentity_LockableData {
      env: env,
      object: object
    }
  }

  pub fn lock_token(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "lockToken", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/LockableData#lockToken was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_tileentity_NoteData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_tileentity_NoteData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_tileentity_NoteData {
      env: env,
      object: object
    }
  }

  pub fn note(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "note", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/NoteData#note was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_manipulator_mutable_tileentity_SignData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_tileentity_SignData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_tileentity_SignData {
      env: env,
      object: object
    }
  }

  pub fn lines(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "lines", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/tileentity/SignData#lines was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_VariantData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_VariantData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_VariantData {
      env: env,
      object: object
    }
  }

  pub fn type_(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "type", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/VariantData#type was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_manipulator_mutable_WetData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_manipulator_mutable_WetData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_manipulator_mutable_WetData {
      env: env,
      object: object
    }
  }

  pub fn wet(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "wet", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/manipulator/mutable/WetData#wet was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_MemoryDataContainer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_MemoryDataContainer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_MemoryDataContainer {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> data_MemoryDataContainer {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/data/MemoryDataContainer", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataContainer#<init> was null") }
    data_MemoryDataContainer { env: self.env, object: ret }
  }

  pub fn get_parent(&self) -> Option<data_DataView> {
    let ret = java_method!(self.env, self.object, "getParent", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataContainer#getParent was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_DataView { env: self.env, object: unwrapped }) }
  }

  pub fn get_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "getContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataContainer#getContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn set(&self, param_1: data_DataQuery, param_2: jobject) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataContainer#set was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: data_key_Key, param_2: jobject) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataContainer#set was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: data_DataQuery) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataContainer#remove was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: data_DataQuery) -> data_DataView {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataContainer#remove was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn set_2(&self, param_1: data_key_Key, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataContainer#set was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn set_3(&self, param_1: data_DataQuery, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataContainer#set was null") }
    data_DataView { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_MemoryDataView {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_MemoryDataView {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_MemoryDataView {
      env: env,
      object: object
    }
  }

  pub fn get_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "getContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_current_path(&self) -> data_DataQuery {
    let ret = java_method!(self.env, self.object, "getCurrentPath", "()Lorg/spongepowered/api/data/DataQuery;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getCurrentPath was null") }
    data_DataQuery { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getName was null") }
    ret
  }

  pub fn get_parent(&self) -> Option<data_DataView> {
    let ret = java_method!(self.env, self.object, "getParent", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getParent was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_DataView { env: self.env, object: unwrapped }) }
  }

  pub fn get_keys(&self, param_1: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "getKeys", "(Z)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getKeys was null") }
    ret
  }

  pub fn get_values(&self, param_1: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "getValues", "(Z)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getValues was null") }
    ret
  }

  pub fn contains(&self, param_1: data_DataQuery) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/data/DataQuery;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_1(&self, param_1: data_DataQuery, param_2: &[data_DataQuery]) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/data/DataQuery;[Lorg/spongepowered/api/data/DataQuery;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn get(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set(&self, param_1: data_DataQuery, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#set was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: data_key_Key, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#set was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: data_DataQuery) -> data_DataView {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#remove was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn create_view(&self, param_1: data_DataQuery) -> data_DataView {
    let ret = java_method!(self.env, self.object, "createView", "(Lorg/spongepowered/api/data/DataQuery;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#createView was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn create_view_1(&self, param_1: data_DataQuery, param_2: jobject) -> data_DataView {
    let ret = java_method!(self.env, self.object, "createView", "(Lorg/spongepowered/api/data/DataQuery;Ljava/util/Map;)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#createView was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn get_view(&self, param_1: data_DataQuery) -> Option<data_DataView> {
    let ret = java_method!(self.env, self.object, "getView", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getView was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_DataView { env: self.env, object: unwrapped }) }
  }

  pub fn get_map(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getMap", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getMap was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_boolean(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getBoolean", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getBoolean was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_byte(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getByte", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getByte was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_short(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getShort", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getShort was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_int(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getInt", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getInt was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_long(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getLong", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getLong was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_float(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFloat", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getFloat was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_double(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getDouble", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getDouble was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_string(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getString", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getString was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_string_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getStringList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getStringList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_character_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCharacterList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getCharacterList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_boolean_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getBooleanList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getBooleanList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_byte_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getByteList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getByteList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_short_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getShortList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getShortList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_integer_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getIntegerList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getIntegerList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_long_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getLongList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getLongList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_float_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFloatList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getFloatList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_double_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getDoubleList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getDoubleList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_map_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getMapList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getMapList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_view_list(&self, param_1: data_DataQuery) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getViewList", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getViewList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_serializable(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSerializable", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getSerializable was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_serializable_list(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSerializableList", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getSerializableList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_catalog_type(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCatalogType", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getCatalogType was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_catalog_type_list(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCatalogTypeList", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getCatalogTypeList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_object(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getObject", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getObject was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_object_list(&self, param_1: data_DataQuery, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getObjectList", "(Lorg/spongepowered/api/data/DataQuery;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#getObjectList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn copy(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#copy was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/MemoryDataView#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_merge_MergeFunction_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_merge_MergeFunction_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_merge_MergeFunction_1 {
      env: env,
      object: object
    }
  }

  pub fn merge(&self, param_1: data_value_ValueContainer, param_2: data_value_ValueContainer) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/value/ValueContainer;)Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/merge/MergeFunction$1#merge was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_merge_MergeFunction_2 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_merge_MergeFunction_2 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_merge_MergeFunction_2 {
      env: env,
      object: object
    }
  }

  pub fn merge(&self, param_1: data_value_ValueContainer, param_2: data_value_ValueContainer) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/value/ValueContainer;)Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/merge/MergeFunction$2#merge was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_merge_MergeFunction_3 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_merge_MergeFunction_3 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_merge_MergeFunction_3 {
      env: env,
      object: object
    }
  }

  pub fn merge(&self, param_1: data_value_ValueContainer, param_2: data_value_ValueContainer) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/value/ValueContainer;)Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/merge/MergeFunction$3#merge was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_merge_MergeFunction {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_merge_MergeFunction {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_merge_MergeFunction {
      env: env,
      object: object
    }
  }

  pub fn merge(&self, param_1: data_value_ValueContainer, param_2: data_value_ValueContainer) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/value/ValueContainer;)Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/merge/MergeFunction#merge was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

  pub fn and_then(&self, param_1: data_merge_MergeFunction) -> data_merge_MergeFunction {
    let ret = java_method!(self.env, self.object, "andThen", "(Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/merge/MergeFunction;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/merge/MergeFunction#andThen was null") }
    data_merge_MergeFunction { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_meta_ItemEnchantment {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_meta_ItemEnchantment {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_meta_ItemEnchantment {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: item_Enchantment, param_2: i32) -> data_meta_ItemEnchantment {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/Enchantment;I)Lorg/spongepowered/api/data/meta/ItemEnchantment", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/ItemEnchantment#<init> was null") }
    data_meta_ItemEnchantment { env: self.env, object: ret }
  }

  pub fn get_enchantment(&self) -> item_Enchantment {
    let ret = java_method!(self.env, self.object, "getEnchantment", "()Lorg/spongepowered/api/item/Enchantment;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/ItemEnchantment#getEnchantment was null") }
    item_Enchantment { env: self.env, object: ret }
  }

  pub fn get_level(&self) -> i32 {
    java_method!(self.env, self.object, "getLevel", "()I", CallIntMethod)
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/ItemEnchantment#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}


#[derive(Debug)]
pub struct data_meta_PatternLayer_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_meta_PatternLayer_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_meta_PatternLayer_Builder {
      env: env,
      object: object
    }
  }

  pub fn pattern(&self, param_1: data_type_BannerPatternShape) -> data_meta_PatternLayer_Builder {
    let ret = java_method!(self.env, self.object, "pattern", "(Lorg/spongepowered/api/data/type/BannerPatternShape;)Lorg/spongepowered/api/data/meta/PatternLayer$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/PatternLayer$Builder#pattern was null") }
    data_meta_PatternLayer_Builder { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: data_type_DyeColor) -> data_meta_PatternLayer_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/data/type/DyeColor;)Lorg/spongepowered/api/data/meta/PatternLayer$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/PatternLayer$Builder#color was null") }
    data_meta_PatternLayer_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> data_meta_PatternLayer {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/data/meta/PatternLayer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/PatternLayer$Builder#build was null") }
    data_meta_PatternLayer { env: self.env, object: ret }
  }

  pub fn reset(&self) -> data_meta_PatternLayer_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/meta/PatternLayer$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/PatternLayer$Builder#reset was null") }
    data_meta_PatternLayer_Builder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/PatternLayer$Builder#reset was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/PatternLayer$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_meta_PatternLayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_meta_PatternLayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_meta_PatternLayer {
      env: env,
      object: object
    }
  }

  pub fn of(param_1: data_type_BannerPatternShape, param_2: data_type_DyeColor) -> data_meta_PatternLayer {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/data/type/BannerPatternShape;Lorg/spongepowered/api/data/type/DyeColor;)Lorg/spongepowered/api/data/meta/PatternLayer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/PatternLayer#of was null") }
    data_meta_PatternLayer { env: self.env, object: ret }
  }

  pub fn get_shape(&self) -> data_type_BannerPatternShape {
    let ret = java_method!(self.env, self.object, "getShape", "()Lorg/spongepowered/api/data/type/BannerPatternShape;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/PatternLayer#getShape was null") }
    data_type_BannerPatternShape { env: self.env, object: ret }
  }

  pub fn get_color(&self) -> data_type_DyeColor {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/data/type/DyeColor;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/meta/PatternLayer#getColor was null") }
    data_type_DyeColor { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_persistence_AbstractDataBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_persistence_AbstractDataBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_persistence_AbstractDataBuilder {
      env: env,
      object: object
    }
  }

  pub fn build(&self, param_1: data_DataView) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "build", "(Lorg/spongepowered/api/data/DataView;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/AbstractDataBuilder#build was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct data_persistence_DataBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_persistence_DataBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_persistence_DataBuilder {
      env: env,
      object: object
    }
  }

  pub fn build(&self, param_1: data_DataView) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "build", "(Lorg/spongepowered/api/data/DataView;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/DataBuilder#build was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn reset(&self) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/DataBuilder#reset was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: data_DataSerializable) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/data/DataSerializable;)Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/DataBuilder#from was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/DataBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/DataBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_persistence_DataContentUpdater {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_persistence_DataContentUpdater {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_persistence_DataContentUpdater {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_persistence_DataFormat {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_persistence_DataFormat {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_persistence_DataFormat {
      env: env,
      object: object
    }
  }

  pub fn read_from(&self, param_1: jobject) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "readFrom", "(Ljava/io/InputStream;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/DataFormat#readFrom was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn write_to(&self, param_1: jobject, param_2: data_DataView) {
    java_method!(self.env, self.object, "writeTo", "(Ljava/io/OutputStream;Lorg/spongepowered/api/data/DataView;)V", CallVoidMethodA, param_1, param_2);
  }

}

#[derive(Debug)]
pub struct data_persistence_DataFormats {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_persistence_DataFormats {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_persistence_DataFormats {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_persistence_DataSerializer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_persistence_DataSerializer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_persistence_DataSerializer {
      env: env,
      object: object
    }
  }

  pub fn get_token(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getToken", "()Lcom/google/common/reflect/TypeToken;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/DataSerializer#getToken was null") }
    ret
  }

  pub fn deserialize(&self, param_1: data_DataView) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "deserialize", "(Lorg/spongepowered/api/data/DataView;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/DataSerializer#deserialize was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn serialize(&self, param_1: jobject) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "serialize", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/DataSerializer#serialize was null") }
    data_DataContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_persistence_InvalidDataException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_persistence_InvalidDataException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_persistence_InvalidDataException {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> data_persistence_InvalidDataException {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/data/persistence/InvalidDataException", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/InvalidDataException#<init> was null") }
    data_persistence_InvalidDataException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> data_persistence_InvalidDataException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/data/persistence/InvalidDataException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/InvalidDataException#<init> was null") }
    data_persistence_InvalidDataException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject) -> data_persistence_InvalidDataException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/spongepowered/api/data/persistence/InvalidDataException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/InvalidDataException#<init> was null") }
    data_persistence_InvalidDataException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: jobject) -> data_persistence_InvalidDataException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Throwable;)Lorg/spongepowered/api/data/persistence/InvalidDataException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/InvalidDataException#<init> was null") }
    data_persistence_InvalidDataException { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_persistence_InvalidDataFormatException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_persistence_InvalidDataFormatException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_persistence_InvalidDataFormatException {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> data_persistence_InvalidDataFormatException {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/data/persistence/InvalidDataFormatException", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/InvalidDataFormatException#<init> was null") }
    data_persistence_InvalidDataFormatException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> data_persistence_InvalidDataFormatException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/data/persistence/InvalidDataFormatException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/InvalidDataFormatException#<init> was null") }
    data_persistence_InvalidDataFormatException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject) -> data_persistence_InvalidDataFormatException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/spongepowered/api/data/persistence/InvalidDataFormatException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/InvalidDataFormatException#<init> was null") }
    data_persistence_InvalidDataFormatException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: jobject) -> data_persistence_InvalidDataFormatException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Throwable;)Lorg/spongepowered/api/data/persistence/InvalidDataFormatException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/persistence/InvalidDataFormatException#<init> was null") }
    data_persistence_InvalidDataFormatException { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_property_AbstractProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_AbstractProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_AbstractProperty {
      env: env,
      object: object
    }
  }

  pub fn get_key(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKey", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/AbstractProperty#getKey was null") }
    ret
  }

  pub fn get_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValue", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/AbstractProperty#getValue was null") }
    ret
  }

  pub fn get_operator(&self) -> data_Property_Operator {
    let ret = java_method!(self.env, self.object, "getOperator", "()Lorg/spongepowered/api/data/Property$Operator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/AbstractProperty#getOperator was null") }
    data_Property_Operator { env: self.env, object: ret }
  }

  pub fn matches(&self, param_1: data_Property) -> bool {
    java_method!(self.env, self.object, "matches", "(Lorg/spongepowered/api/data/Property;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/AbstractProperty#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_property_block_BlastResistanceProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_BlastResistanceProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_BlastResistanceProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> data_property_block_BlastResistanceProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/data/property/block/BlastResistanceProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/BlastResistanceProperty#<init> was null") }
    data_property_block_BlastResistanceProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: f64, param_2: data_Property_Operator) -> data_property_block_BlastResistanceProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(DLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/BlastResistanceProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/BlastResistanceProperty#<init> was null") }
    data_property_block_BlastResistanceProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_CollectiveProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_CollectiveProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_CollectiveProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> data_property_block_CollectiveProperty {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/data/property/block/CollectiveProperty", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/CollectiveProperty#<init> was null") }
    data_property_block_CollectiveProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_FlammableProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_FlammableProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_FlammableProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_FlammableProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/FlammableProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/FlammableProperty#<init> was null") }
    data_property_block_FlammableProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_FlammableProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/FlammableProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/FlammableProperty#<init> was null") }
    data_property_block_FlammableProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_FullBlockSelectionBoxProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_FullBlockSelectionBoxProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_FullBlockSelectionBoxProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_FullBlockSelectionBoxProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/FullBlockSelectionBoxProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/FullBlockSelectionBoxProperty#<init> was null") }
    data_property_block_FullBlockSelectionBoxProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_FullBlockSelectionBoxProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/FullBlockSelectionBoxProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/FullBlockSelectionBoxProperty#<init> was null") }
    data_property_block_FullBlockSelectionBoxProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_GravityAffectedProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_GravityAffectedProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_GravityAffectedProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_GravityAffectedProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/GravityAffectedProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/GravityAffectedProperty#<init> was null") }
    data_property_block_GravityAffectedProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_GravityAffectedProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/GravityAffectedProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/GravityAffectedProperty#<init> was null") }
    data_property_block_GravityAffectedProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_GroundLuminanceProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_GroundLuminanceProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_GroundLuminanceProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> data_property_block_GroundLuminanceProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/data/property/block/GroundLuminanceProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/GroundLuminanceProperty#<init> was null") }
    data_property_block_GroundLuminanceProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: f64, param_2: data_Property_Operator) -> data_property_block_GroundLuminanceProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(DLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/GroundLuminanceProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/GroundLuminanceProperty#<init> was null") }
    data_property_block_GroundLuminanceProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_block_GroundLuminanceProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/GroundLuminanceProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/GroundLuminanceProperty#<init> was null") }
    data_property_block_GroundLuminanceProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_HardnessProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_HardnessProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_HardnessProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> data_property_block_HardnessProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/data/property/block/HardnessProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/HardnessProperty#<init> was null") }
    data_property_block_HardnessProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: f64, param_2: data_Property_Operator) -> data_property_block_HardnessProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(DLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/HardnessProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/HardnessProperty#<init> was null") }
    data_property_block_HardnessProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_HeldItemProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_HeldItemProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_HeldItemProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: item_ItemType) -> data_property_block_HeldItemProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/ItemType;)Lorg/spongepowered/api/data/property/block/HeldItemProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/HeldItemProperty#<init> was null") }
    data_property_block_HeldItemProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: item_ItemType, param_2: data_Property_Operator) -> data_property_block_HeldItemProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/ItemType;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/HeldItemProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/HeldItemProperty#<init> was null") }
    data_property_block_HeldItemProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_block_IndirectlyPoweredProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_IndirectlyPoweredProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_IndirectlyPoweredProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_IndirectlyPoweredProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/IndirectlyPoweredProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/IndirectlyPoweredProperty#<init> was null") }
    data_property_block_IndirectlyPoweredProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_IndirectlyPoweredProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/IndirectlyPoweredProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/IndirectlyPoweredProperty#<init> was null") }
    data_property_block_IndirectlyPoweredProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_LightEmissionProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_LightEmissionProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_LightEmissionProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> data_property_block_LightEmissionProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/data/property/block/LightEmissionProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/LightEmissionProperty#<init> was null") }
    data_property_block_LightEmissionProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> data_property_block_LightEmissionProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/LightEmissionProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/LightEmissionProperty#<init> was null") }
    data_property_block_LightEmissionProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_block_LightEmissionProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/LightEmissionProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/LightEmissionProperty#<init> was null") }
    data_property_block_LightEmissionProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_MatterProperty_Matter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_MatterProperty_Matter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_MatterProperty_Matter {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[data_property_block_MatterProperty_Matter] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> data_property_block_MatterProperty_Matter {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/data/property/block/MatterProperty$Matter;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/MatterProperty$Matter#valueOf was null") }
    data_property_block_MatterProperty_Matter { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_MatterProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_MatterProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_MatterProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: data_property_block_MatterProperty_Matter) -> data_property_block_MatterProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/property/block/MatterProperty$Matter;)Lorg/spongepowered/api/data/property/block/MatterProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/MatterProperty#<init> was null") }
    data_property_block_MatterProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: data_property_block_MatterProperty_Matter, param_2: data_Property_Operator) -> data_property_block_MatterProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/property/block/MatterProperty$Matter;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/MatterProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/MatterProperty#<init> was null") }
    data_property_block_MatterProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}


#[derive(Debug)]
pub struct data_property_block_PassableProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_PassableProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_PassableProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_PassableProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/PassableProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/PassableProperty#<init> was null") }
    data_property_block_PassableProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_PassableProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/PassableProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/PassableProperty#<init> was null") }
    data_property_block_PassableProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_PoweredProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_PoweredProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_PoweredProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_PoweredProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/PoweredProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/PoweredProperty#<init> was null") }
    data_property_block_PoweredProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_PoweredProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/PoweredProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/PoweredProperty#<init> was null") }
    data_property_block_PoweredProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_ReplaceableProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_ReplaceableProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_ReplaceableProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_ReplaceableProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/ReplaceableProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/ReplaceableProperty#<init> was null") }
    data_property_block_ReplaceableProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_ReplaceableProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/ReplaceableProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/ReplaceableProperty#<init> was null") }
    data_property_block_ReplaceableProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_SkyLuminanceProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_SkyLuminanceProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_SkyLuminanceProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> data_property_block_SkyLuminanceProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/data/property/block/SkyLuminanceProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/SkyLuminanceProperty#<init> was null") }
    data_property_block_SkyLuminanceProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: f64, param_2: data_Property_Operator) -> data_property_block_SkyLuminanceProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(DLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/SkyLuminanceProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/SkyLuminanceProperty#<init> was null") }
    data_property_block_SkyLuminanceProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_block_SkyLuminanceProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/SkyLuminanceProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/SkyLuminanceProperty#<init> was null") }
    data_property_block_SkyLuminanceProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_SolidCubeProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_SolidCubeProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_SolidCubeProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_SolidCubeProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/SolidCubeProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/SolidCubeProperty#<init> was null") }
    data_property_block_SolidCubeProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_SolidCubeProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/SolidCubeProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/SolidCubeProperty#<init> was null") }
    data_property_block_SolidCubeProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_StatisticsTrackedProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_StatisticsTrackedProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_StatisticsTrackedProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_StatisticsTrackedProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/StatisticsTrackedProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/StatisticsTrackedProperty#<init> was null") }
    data_property_block_StatisticsTrackedProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_StatisticsTrackedProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/StatisticsTrackedProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/StatisticsTrackedProperty#<init> was null") }
    data_property_block_StatisticsTrackedProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_SurrogateBlockProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_SurrogateBlockProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_SurrogateBlockProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_SurrogateBlockProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/SurrogateBlockProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/SurrogateBlockProperty#<init> was null") }
    data_property_block_SurrogateBlockProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_SurrogateBlockProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/SurrogateBlockProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/SurrogateBlockProperty#<init> was null") }
    data_property_block_SurrogateBlockProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_TemperatureProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_TemperatureProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_TemperatureProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> data_property_block_TemperatureProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/data/property/block/TemperatureProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/TemperatureProperty#<init> was null") }
    data_property_block_TemperatureProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: f64, param_2: data_Property_Operator) -> data_property_block_TemperatureProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(DLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/TemperatureProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/TemperatureProperty#<init> was null") }
    data_property_block_TemperatureProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_block_UnbreakableProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_block_UnbreakableProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_block_UnbreakableProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_block_UnbreakableProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/block/UnbreakableProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/UnbreakableProperty#<init> was null") }
    data_property_block_UnbreakableProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_block_UnbreakableProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/block/UnbreakableProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/block/UnbreakableProperty#<init> was null") }
    data_property_block_UnbreakableProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_BooleanProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_BooleanProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_BooleanProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: bool) -> data_property_BooleanProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Z)Lorg/spongepowered/api/data/property/BooleanProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/BooleanProperty#<init> was null") }
    data_property_BooleanProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: bool, param_2: data_Property_Operator) -> data_property_BooleanProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ZLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/BooleanProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/BooleanProperty#<init> was null") }
    data_property_BooleanProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_BooleanProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/BooleanProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/BooleanProperty#<init> was null") }
    data_property_BooleanProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject) -> data_property_BooleanProperty {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/BooleanProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/BooleanProperty#of was null") }
    data_property_BooleanProperty { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> data_property_BooleanProperty {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/BooleanProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/BooleanProperty#not was null") }
    data_property_BooleanProperty { env: self.env, object: ret }
  }

  pub fn greater_than(param_1: jobject) -> data_property_BooleanProperty {
    let ret = java_method!(self.env, "greaterThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/BooleanProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/BooleanProperty#greaterThan was null") }
    data_property_BooleanProperty { env: self.env, object: ret }
  }

  pub fn greater_than_or_equal(param_1: jobject) -> data_property_BooleanProperty {
    let ret = java_method!(self.env, "greaterThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/BooleanProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/BooleanProperty#greaterThanOrEqual was null") }
    data_property_BooleanProperty { env: self.env, object: ret }
  }

  pub fn less_than(param_1: jobject) -> data_property_BooleanProperty {
    let ret = java_method!(self.env, "lessThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/BooleanProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/BooleanProperty#lessThan was null") }
    data_property_BooleanProperty { env: self.env, object: ret }
  }

  pub fn less_than_or_equal(param_1: jobject) -> data_property_BooleanProperty {
    let ret = java_method!(self.env, "lessThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/BooleanProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/BooleanProperty#lessThanOrEqual was null") }
    data_property_BooleanProperty { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_DirectionRelativePropertyHolder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_DirectionRelativePropertyHolder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_DirectionRelativePropertyHolder {
      env: env,
      object: object
    }
  }

  pub fn get_property(&self, param_1: util_Direction, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getProperty", "(Lorg/spongepowered/api/util/Direction;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DirectionRelativePropertyHolder#getProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct data_property_DisplacementProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_DisplacementProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_DisplacementProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> data_property_DisplacementProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Set;)Lorg/spongepowered/api/data/property/DisplacementProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DisplacementProperty#<init> was null") }
    data_property_DisplacementProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_DisplacementProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Set;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/DisplacementProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DisplacementProperty#<init> was null") }
    data_property_DisplacementProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_DoubleProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_DoubleProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_DoubleProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> data_property_DoubleProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/data/property/DoubleProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DoubleProperty#<init> was null") }
    data_property_DoubleProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: f64, param_2: data_Property_Operator) -> data_property_DoubleProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(DLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/DoubleProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DoubleProperty#<init> was null") }
    data_property_DoubleProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_DoubleProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/DoubleProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DoubleProperty#<init> was null") }
    data_property_DoubleProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject) -> data_property_DoubleProperty {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/DoubleProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DoubleProperty#of was null") }
    data_property_DoubleProperty { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> data_property_DoubleProperty {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/DoubleProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DoubleProperty#not was null") }
    data_property_DoubleProperty { env: self.env, object: ret }
  }

  pub fn greater_than(param_1: jobject) -> data_property_DoubleProperty {
    let ret = java_method!(self.env, "greaterThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/DoubleProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DoubleProperty#greaterThan was null") }
    data_property_DoubleProperty { env: self.env, object: ret }
  }

  pub fn greater_than_or_equal(param_1: jobject) -> data_property_DoubleProperty {
    let ret = java_method!(self.env, "greaterThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/DoubleProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DoubleProperty#greaterThanOrEqual was null") }
    data_property_DoubleProperty { env: self.env, object: ret }
  }

  pub fn less_than(param_1: jobject) -> data_property_DoubleProperty {
    let ret = java_method!(self.env, "lessThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/DoubleProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DoubleProperty#lessThan was null") }
    data_property_DoubleProperty { env: self.env, object: ret }
  }

  pub fn less_than_or_equal(param_1: jobject) -> data_property_DoubleProperty {
    let ret = java_method!(self.env, "lessThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/DoubleProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/DoubleProperty#lessThanOrEqual was null") }
    data_property_DoubleProperty { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_entity_DominantHandProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_entity_DominantHandProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_entity_DominantHandProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: data_type_HandType) -> data_property_entity_DominantHandProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/type/HandType;)Lorg/spongepowered/api/data/property/entity/DominantHandProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/entity/DominantHandProperty#<init> was null") }
    data_property_entity_DominantHandProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: data_type_HandType, param_2: data_Property_Operator) -> data_property_entity_DominantHandProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/type/HandType;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/entity/DominantHandProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/entity/DominantHandProperty#<init> was null") }
    data_property_entity_DominantHandProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_entity_EyeHeightProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_entity_EyeHeightProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_entity_EyeHeightProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> data_property_entity_EyeHeightProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/data/property/entity/EyeHeightProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/entity/EyeHeightProperty#<init> was null") }
    data_property_entity_EyeHeightProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: f64, param_2: data_Property_Operator) -> data_property_entity_EyeHeightProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(DLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/entity/EyeHeightProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/entity/EyeHeightProperty#<init> was null") }
    data_property_entity_EyeHeightProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_entity_EyeLocationProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_entity_EyeLocationProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_entity_EyeLocationProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> data_property_entity_EyeLocationProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/data/property/entity/EyeLocationProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/entity/EyeLocationProperty#<init> was null") }
    data_property_entity_EyeLocationProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_entity_EyeLocationProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vector3d;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/entity/EyeLocationProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/entity/EyeLocationProperty#<init> was null") }
    data_property_entity_EyeLocationProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_IntProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_IntProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_IntProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> data_property_IntProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/data/property/IntProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/IntProperty#<init> was null") }
    data_property_IntProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> data_property_IntProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/IntProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/IntProperty#<init> was null") }
    data_property_IntProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_IntProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/IntProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/IntProperty#<init> was null") }
    data_property_IntProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject) -> data_property_IntProperty {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/IntProperty#of was null") }
    data_property_IntProperty { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> data_property_IntProperty {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/IntProperty#not was null") }
    data_property_IntProperty { env: self.env, object: ret }
  }

  pub fn greater_than(param_1: jobject) -> data_property_IntProperty {
    let ret = java_method!(self.env, "greaterThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/IntProperty#greaterThan was null") }
    data_property_IntProperty { env: self.env, object: ret }
  }

  pub fn greater_than_or_equal(param_1: jobject) -> data_property_IntProperty {
    let ret = java_method!(self.env, "greaterThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/IntProperty#greaterThanOrEqual was null") }
    data_property_IntProperty { env: self.env, object: ret }
  }

  pub fn less_than(param_1: jobject) -> data_property_IntProperty {
    let ret = java_method!(self.env, "lessThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/IntProperty#lessThan was null") }
    data_property_IntProperty { env: self.env, object: ret }
  }

  pub fn less_than_or_equal(param_1: jobject) -> data_property_IntProperty {
    let ret = java_method!(self.env, "lessThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/IntProperty#lessThanOrEqual was null") }
    data_property_IntProperty { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_item_ApplicableEffectProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_ApplicableEffectProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_ApplicableEffectProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> data_property_item_ApplicableEffectProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Set;)Lorg/spongepowered/api/data/property/item/ApplicableEffectProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/ApplicableEffectProperty#<init> was null") }
    data_property_item_ApplicableEffectProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_item_ApplicableEffectProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Set;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/ApplicableEffectProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/ApplicableEffectProperty#<init> was null") }
    data_property_item_ApplicableEffectProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_item_ArmorTypeProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_ArmorTypeProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_ArmorTypeProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: data_type_ArmorType) -> data_property_item_ArmorTypeProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/type/ArmorType;)Lorg/spongepowered/api/data/property/item/ArmorTypeProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/ArmorTypeProperty#<init> was null") }
    data_property_item_ArmorTypeProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: data_type_ArmorType, param_2: data_Property_Operator) -> data_property_item_ArmorTypeProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/type/ArmorType;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/ArmorTypeProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/ArmorTypeProperty#<init> was null") }
    data_property_item_ArmorTypeProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_item_BurningFuelProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_BurningFuelProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_BurningFuelProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> data_property_item_BurningFuelProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/data/property/item/BurningFuelProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/BurningFuelProperty#<init> was null") }
    data_property_item_BurningFuelProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> data_property_item_BurningFuelProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/BurningFuelProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/BurningFuelProperty#<init> was null") }
    data_property_item_BurningFuelProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_item_DamageAbsorptionProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_DamageAbsorptionProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_DamageAbsorptionProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> data_property_item_DamageAbsorptionProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/data/property/item/DamageAbsorptionProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/DamageAbsorptionProperty#<init> was null") }
    data_property_item_DamageAbsorptionProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> data_property_item_DamageAbsorptionProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/DamageAbsorptionProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/DamageAbsorptionProperty#<init> was null") }
    data_property_item_DamageAbsorptionProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_item_DamageAbsorptionProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/DamageAbsorptionProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/DamageAbsorptionProperty#<init> was null") }
    data_property_item_DamageAbsorptionProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_item_EfficiencyProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_EfficiencyProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_EfficiencyProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> data_property_item_EfficiencyProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/data/property/item/EfficiencyProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/EfficiencyProperty#<init> was null") }
    data_property_item_EfficiencyProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: f64, param_2: data_Property_Operator) -> data_property_item_EfficiencyProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(DLorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/EfficiencyProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/EfficiencyProperty#<init> was null") }
    data_property_item_EfficiencyProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_item_EfficiencyProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/EfficiencyProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/EfficiencyProperty#<init> was null") }
    data_property_item_EfficiencyProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_item_EquipmentProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_EquipmentProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_EquipmentProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: item_inventory_equipment_EquipmentType) -> data_property_item_EquipmentProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;)Lorg/spongepowered/api/data/property/item/EquipmentProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/EquipmentProperty#<init> was null") }
    data_property_item_EquipmentProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: item_inventory_equipment_EquipmentType, param_2: data_Property_Operator) -> data_property_item_EquipmentProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/EquipmentProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/EquipmentProperty#<init> was null") }
    data_property_item_EquipmentProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_item_EquipmentProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/EquipmentProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/EquipmentProperty#<init> was null") }
    data_property_item_EquipmentProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_item_FoodRestorationProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_FoodRestorationProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_FoodRestorationProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> data_property_item_FoodRestorationProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/data/property/item/FoodRestorationProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/FoodRestorationProperty#<init> was null") }
    data_property_item_FoodRestorationProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> data_property_item_FoodRestorationProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/FoodRestorationProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/FoodRestorationProperty#<init> was null") }
    data_property_item_FoodRestorationProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_item_FoodRestorationProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/FoodRestorationProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/FoodRestorationProperty#<init> was null") }
    data_property_item_FoodRestorationProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_item_HarvestingProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_HarvestingProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_HarvestingProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> data_property_item_HarvestingProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Set;)Lorg/spongepowered/api/data/property/item/HarvestingProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/HarvestingProperty#<init> was null") }
    data_property_item_HarvestingProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_item_HarvestingProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Set;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/HarvestingProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/HarvestingProperty#<init> was null") }
    data_property_item_HarvestingProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}


#[derive(Debug)]
pub struct data_property_item_SaturationProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_SaturationProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_SaturationProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> data_property_item_SaturationProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Double;)Lorg/spongepowered/api/data/property/item/SaturationProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/SaturationProperty#<init> was null") }
    data_property_item_SaturationProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_item_SaturationProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Double;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/SaturationProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/SaturationProperty#<init> was null") }
    data_property_item_SaturationProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_item_ToolTypeProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_ToolTypeProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_ToolTypeProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: data_type_ToolType) -> data_property_item_ToolTypeProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/type/ToolType;)Lorg/spongepowered/api/data/property/item/ToolTypeProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/ToolTypeProperty#<init> was null") }
    data_property_item_ToolTypeProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: data_type_ToolType, param_2: data_Property_Operator) -> data_property_item_ToolTypeProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/type/ToolType;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/ToolTypeProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/ToolTypeProperty#<init> was null") }
    data_property_item_ToolTypeProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_property_item_UseLimitProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_item_UseLimitProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_item_UseLimitProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> data_property_item_UseLimitProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/data/property/item/UseLimitProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/UseLimitProperty#<init> was null") }
    data_property_item_UseLimitProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> data_property_item_UseLimitProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/UseLimitProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/UseLimitProperty#<init> was null") }
    data_property_item_UseLimitProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> data_property_item_UseLimitProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/data/property/item/UseLimitProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/item/UseLimitProperty#<init> was null") }
    data_property_item_UseLimitProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_property_LocationBasePropertyHolder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_LocationBasePropertyHolder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_LocationBasePropertyHolder {
      env: env,
      object: object
    }
  }

  pub fn get_property(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getProperty", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/LocationBasePropertyHolder#getProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_property_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getProperty", "(IIILjava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/LocationBasePropertyHolder#getProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_property_2(&self, param_1: jobject, param_2: util_Direction, param_3: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getProperty", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/util/Direction;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/LocationBasePropertyHolder#getProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_property_3(&self, param_1: i32, param_2: i32, param_3: i32, param_4: util_Direction, param_5: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getProperty", "(IIILorg/spongepowered/api/util/Direction;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/LocationBasePropertyHolder#getProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_properties(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getProperties", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/LocationBasePropertyHolder#getProperties was null") }
    ret
  }

  pub fn get_properties_1(&self, param_1: i32, param_2: i32, param_3: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "getProperties", "(III)Ljava/util/Collection;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/LocationBasePropertyHolder#getProperties was null") }
    ret
  }

  pub fn get_faces_with_property(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getFacesWithProperty", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/lang/Class;)Ljava/util/Collection;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/LocationBasePropertyHolder#getFacesWithProperty was null") }
    ret
  }

  pub fn get_faces_with_property_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getFacesWithProperty", "(IIILjava/lang/Class;)Ljava/util/Collection;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/LocationBasePropertyHolder#getFacesWithProperty was null") }
    ret
  }

}


#[derive(Debug)]
pub struct data_property_PropertyHolder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_PropertyHolder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_PropertyHolder {
      env: env,
      object: object
    }
  }

  pub fn get_property(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getProperty", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/PropertyHolder#getProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_applicable_properties(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getApplicableProperties", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/PropertyHolder#getApplicableProperties was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_property_PropertyRegistry {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_PropertyRegistry {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_PropertyRegistry {
      env: env,
      object: object
    }
  }

  pub fn register(&self, param_1: jobject, param_2: data_property_PropertyStore) {
    java_method!(self.env, self.object, "register", "(Ljava/lang/Class;Lorg/spongepowered/api/data/property/PropertyStore;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_store(&self, param_1: jobject) -> Option<data_property_PropertyStore> {
    let ret = java_method!(self.env, self.object, "getStore", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/PropertyRegistry#getStore was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_property_PropertyStore { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct data_property_PropertyStore {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_property_PropertyStore {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_property_PropertyStore {
      env: env,
      object: object
    }
  }

  pub fn get_for(&self, param_1: data_property_PropertyHolder) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFor", "(Lorg/spongepowered/api/data/property/PropertyHolder;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/PropertyStore#getFor was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_for_1(&self, param_1: world_Location) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFor", "(Lorg/spongepowered/api/world/Location;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/PropertyStore#getFor was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_for_2(&self, param_1: world_Location, param_2: util_Direction) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFor", "(Lorg/spongepowered/api/world/Location;Lorg/spongepowered/api/util/Direction;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/property/PropertyStore#getFor was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_priority(&self) -> i32 {
    java_method!(self.env, self.object, "getPriority", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct data_Property_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_Property_Operator_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property_Operator_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property_Operator_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_Property_Operator_2 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property_Operator_2 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property_Operator_2 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_Property_Operator_3 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property_Operator_3 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property_Operator_3 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_Property_Operator_4 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property_Operator_4 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property_Operator_4 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_Property_Operator_5 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property_Operator_5 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property_Operator_5 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_Property_Operator_6 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property_Operator_6 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property_Operator_6 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_Property_Operator_7 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property_Operator_7 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property_Operator_7 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_Property_Operator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property_Operator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property_Operator {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[data_Property_Operator] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> data_Property_Operator {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/data/Property$Operator;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Property$Operator#valueOf was null") }
    data_Property_Operator { env: self.env, object: ret }
  }

  pub fn compare(&self, param_1: data_Property, param_2: data_Property) -> bool {
    java_method!(self.env, self.object, "compare", "(Lorg/spongepowered/api/data/Property;Lorg/spongepowered/api/data/Property;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn default_operator() -> data_Property_Operator {
    let ret = java_method!(self.env, "defaultOperator", "()Lorg/spongepowered/api/data/Property$Operator;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Property$Operator#defaultOperator was null") }
    data_Property_Operator { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_Property {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Property {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Property {
      env: env,
      object: object
    }
  }

  pub fn get_key(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKey", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Property#getKey was null") }
    ret
  }

  pub fn get_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValue", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Property#getValue was null") }
    ret
  }

  pub fn get_operator(&self) -> data_Property_Operator {
    let ret = java_method!(self.env, self.object, "getOperator", "()Lorg/spongepowered/api/data/Property$Operator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Property#getOperator was null") }
    data_Property_Operator { env: self.env, object: ret }
  }

  pub fn matches(&self, param_1: data_Property) -> bool {
    java_method!(self.env, self.object, "matches", "(Lorg/spongepowered/api/data/Property;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct data_Queries {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Queries {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Queries {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_Transaction {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_Transaction {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_Transaction {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: data_DataSerializable, param_2: data_DataSerializable) -> data_Transaction {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/DataSerializable;Lorg/spongepowered/api/data/DataSerializable;)Lorg/spongepowered/api/data/Transaction", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/Transaction#<init> was null") }
    data_Transaction { env: self.env, object: ret }
  }

  pub fn get_original(&self) -> data_DataSerializable {
    let ret = java_method!(self.env, self.object, "getOriginal", "()Lorg/spongepowered/api/data/DataSerializable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Transaction#getOriginal was null") }
    data_DataSerializable { env: self.env, object: ret }
  }

  pub fn get_default(&self) -> data_DataSerializable {
    let ret = java_method!(self.env, self.object, "getDefault", "()Lorg/spongepowered/api/data/DataSerializable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Transaction#getDefault was null") }
    data_DataSerializable { env: self.env, object: ret }
  }

  pub fn get_custom(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCustom", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Transaction#getCustom was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set_custom(&self, param_1: data_DataSerializable) {
    java_method!(self.env, self.object, "setCustom", "(Lorg/spongepowered/api/data/DataSerializable;)V", CallVoidMethodA, param_1);
  }

  pub fn get_final(&self) -> data_DataSerializable {
    let ret = java_method!(self.env, self.object, "getFinal", "()Lorg/spongepowered/api/data/DataSerializable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Transaction#getFinal was null") }
    data_DataSerializable { env: self.env, object: ret }
  }

  pub fn is_valid(&self) -> bool {
    java_method!(self.env, self.object, "isValid", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_valid(&self, param_1: bool) {
    java_method!(self.env, self.object, "setValid", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Transaction#toString was null") }
    ret
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/Transaction#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_translator_ConfigurateTranslator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_translator_ConfigurateTranslator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_translator_ConfigurateTranslator {
      env: env,
      object: object
    }
  }

  pub fn instance() -> data_translator_ConfigurateTranslator {
    let ret = java_method!(self.env, "instance", "()Lorg/spongepowered/api/data/translator/ConfigurateTranslator;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/translator/ConfigurateTranslator#instance was null") }
    data_translator_ConfigurateTranslator { env: self.env, object: ret }
  }

  pub fn translate_data(&self, param_1: data_DataView) -> jobject {
    let ret = java_method!(self.env, self.object, "translateData", "(Lorg/spongepowered/api/data/DataView;)Lninja/leaping/configurate/ConfigurationNode;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/translator/ConfigurateTranslator#translateData was null") }
    ret
  }

  pub fn translate_container_to_data(&self, param_1: jobject, param_2: data_DataView) {
    java_method!(self.env, self.object, "translateContainerToData", "(Lninja/leaping/configurate/ConfigurationNode;Lorg/spongepowered/api/data/DataView;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn translate_from(&self, param_1: jobject) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "translateFrom", "(Lninja/leaping/configurate/ConfigurationNode;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/translator/ConfigurateTranslator#translateFrom was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn translate_from_1(&self, param_1: jobject) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "translateFrom", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/translator/ConfigurateTranslator#translateFrom was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn translate_container_to_data_1(&self, param_1: jobject, param_2: data_DataView) {
    java_method!(self.env, self.object, "translateContainerToData", "(Ljava/lang/Object;Lorg/spongepowered/api/data/DataView;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn translate_data_1(&self, param_1: data_DataView) -> jobject {
    let ret = java_method!(self.env, self.object, "translateData", "(Lorg/spongepowered/api/data/DataView;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/translator/ConfigurateTranslator#translateData was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_translator_DataTranslator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_translator_DataTranslator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_translator_DataTranslator {
      env: env,
      object: object
    }
  }

  pub fn translate_data(&self, param_1: data_DataView) -> jobject {
    let ret = java_method!(self.env, self.object, "translateData", "(Lorg/spongepowered/api/data/DataView;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/translator/DataTranslator#translateData was null") }
    ret
  }

  pub fn translate_container_to_data(&self, param_1: jobject, param_2: data_DataView) {
    java_method!(self.env, self.object, "translateContainerToData", "(Ljava/lang/Object;Lorg/spongepowered/api/data/DataView;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn translate_from(&self, param_1: jobject) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "translateFrom", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/DataContainer;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/translator/DataTranslator#translateFrom was null") }
    data_DataContainer { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_type_ArmorType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_ArmorType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_ArmorType {
      env: env,
      object: object
    }
  }

  pub fn get_repair_item_type(&self) -> Option<item_ItemType> {
    let ret = java_method!(self.env, self.object, "getRepairItemType", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/type/ArmorType#getRepairItemType was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_ItemType { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct data_type_ArmorTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_ArmorTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_ArmorTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_Art {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Art {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Art {
      env: env,
      object: object
    }
  }

  pub fn get_height(&self) -> i32 {
    java_method!(self.env, self.object, "getHeight", "()I", CallIntMethod)
  }

  pub fn get_width(&self) -> i32 {
    java_method!(self.env, self.object, "getWidth", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct data_type_Arts {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Arts {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Arts {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_BannerPatternShape {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_BannerPatternShape {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_BannerPatternShape {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_BannerPatternShapes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_BannerPatternShapes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_BannerPatternShapes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_BigMushroomType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_BigMushroomType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_BigMushroomType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_BigMushroomTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_BigMushroomTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_BigMushroomTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_BodyPart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_BodyPart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_BodyPart {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_BodyParts {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_BodyParts {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_BodyParts {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_BrickType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_BrickType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_BrickType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_BrickTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_BrickTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_BrickTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_Career {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Career {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Career {
      env: env,
      object: object
    }
  }

  pub fn get_profession(&self) -> data_type_Profession {
    let ret = java_method!(self.env, self.object, "getProfession", "()Lorg/spongepowered/api/data/type/Profession;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/type/Career#getProfession was null") }
    data_type_Profession { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_type_Careers {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Careers {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Careers {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_CoalType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_CoalType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_CoalType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_CoalTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_CoalTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_CoalTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_ComparatorType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_ComparatorType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_ComparatorType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_ComparatorTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_ComparatorTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_ComparatorTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_CookedFish {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_CookedFish {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_CookedFish {
      env: env,
      object: object
    }
  }

  pub fn get_raw_fish(&self) -> data_type_Fish {
    let ret = java_method!(self.env, self.object, "getRawFish", "()Lorg/spongepowered/api/data/type/Fish;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/type/CookedFish#getRawFish was null") }
    data_type_Fish { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_type_CookedFishes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_CookedFishes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_CookedFishes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_DirtType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_DirtType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_DirtType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_DirtTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_DirtTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_DirtTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_DisguisedBlockType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_DisguisedBlockType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_DisguisedBlockType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_DisguisedBlockTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_DisguisedBlockTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_DisguisedBlockTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_DoublePlantType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_DoublePlantType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_DoublePlantType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_DoublePlantTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_DoublePlantTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_DoublePlantTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_DyeColor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_DyeColor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_DyeColor {
      env: env,
      object: object
    }
  }

  pub fn get_color(&self) -> util_Color {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/util/Color;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/type/DyeColor#getColor was null") }
    util_Color { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_type_DyeColors {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_DyeColors {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_DyeColors {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_Fish {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Fish {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Fish {
      env: env,
      object: object
    }
  }

  pub fn get_cooked_fish(&self) -> Option<data_type_CookedFish> {
    let ret = java_method!(self.env, self.object, "getCookedFish", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/type/Fish#getCookedFish was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_type_CookedFish { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct data_type_Fishes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Fishes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Fishes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_GoldenApple {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_GoldenApple {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_GoldenApple {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_GoldenApples {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_GoldenApples {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_GoldenApples {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_HandType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_HandType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_HandType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_HandTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_HandTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_HandTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_Hinge {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Hinge {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Hinge {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_Hinges {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Hinges {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Hinges {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_HorseColor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_HorseColor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_HorseColor {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_HorseColors {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_HorseColors {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_HorseColors {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_HorseStyle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_HorseStyle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_HorseStyle {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_HorseStyles {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_HorseStyles {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_HorseStyles {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_HorseVariant {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_HorseVariant {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_HorseVariant {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_HorseVariants {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_HorseVariants {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_HorseVariants {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_InstrumentType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_InstrumentType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_InstrumentType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_InstrumentTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_InstrumentTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_InstrumentTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_LogAxes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_LogAxes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_LogAxes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_LogAxis {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_LogAxis {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_LogAxis {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_NotePitch {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_NotePitch {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_NotePitch {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_NotePitches {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_NotePitches {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_NotePitches {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_OcelotType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_OcelotType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_OcelotType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_OcelotTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_OcelotTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_OcelotTypes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct data_type_PickupRule {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PickupRule {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PickupRule {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_PickupRules {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PickupRules {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PickupRules {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_PistonType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PistonType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PistonType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_PistonTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PistonTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PistonTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_PlantType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PlantType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PlantType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_PlantTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PlantTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PlantTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_PortionType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PortionType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PortionType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_PortionTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PortionTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PortionTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_PrismarineType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PrismarineType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PrismarineType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_PrismarineTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_PrismarineTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_PrismarineTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_Profession {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Profession {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Profession {
      env: env,
      object: object
    }
  }

  pub fn get_careers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCareers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/type/Profession#getCareers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_type_Professions {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_Professions {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_Professions {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_QuartzType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_QuartzType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_QuartzType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_QuartzTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_QuartzTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_QuartzTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_RabbitType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_RabbitType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_RabbitType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_RabbitTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_RabbitTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_RabbitTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_RailDirection {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_RailDirection {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_RailDirection {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_RailDirections {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_RailDirections {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_RailDirections {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SandstoneType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SandstoneType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SandstoneType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SandstoneTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SandstoneTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SandstoneTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SandType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SandType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SandType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SandTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SandTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SandTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_ShrubType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_ShrubType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_ShrubType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_ShrubTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_ShrubTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_ShrubTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SkeletonType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SkeletonType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SkeletonType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SkeletonTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SkeletonTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SkeletonTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SkinPart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SkinPart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SkinPart {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SkinParts {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SkinParts {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SkinParts {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SkullType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SkullType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SkullType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SkullTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SkullTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SkullTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SlabType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SlabType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SlabType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_SlabTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_SlabTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_SlabTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_StairShape {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_StairShape {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_StairShape {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_StairShapes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_StairShapes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_StairShapes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_StoneType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_StoneType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_StoneType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_StoneTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_StoneTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_StoneTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_ToolType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_ToolType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_ToolType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_ToolTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_ToolTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_ToolTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_TreeType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_TreeType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_TreeType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_TreeTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_TreeTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_TreeTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_WallType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_WallType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_WallType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_WallTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_WallTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_WallTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_WireAttachmentType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_WireAttachmentType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_WireAttachmentType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_type_WireAttachmentTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_type_WireAttachmentTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_type_WireAttachmentTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_value_BaseValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_BaseValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_BaseValue {
      env: env,
      object: object
    }
  }

  pub fn get(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/BaseValue#get was null") }
    ret
  }

  pub fn exists(&self) -> bool {
    java_method!(self.env, self.object, "exists", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_default(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDefault", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/BaseValue#getDefault was null") }
    ret
  }

  pub fn get_direct(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getDirect", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/BaseValue#getDirect was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_key(&self) -> data_key_Key {
    let ret = java_method!(self.env, self.object, "getKey", "()Lorg/spongepowered/api/data/key/Key;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/BaseValue#getKey was null") }
    data_key_Key { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_BoundedValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_BoundedValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_BoundedValue {
      env: env,
      object: object
    }
  }

  pub fn get_min_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMinValue", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/BoundedValue#getMinValue was null") }
    ret
  }

  pub fn get_max_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMaxValue", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/BoundedValue#getMaxValue was null") }
    ret
  }

  pub fn get_comparator(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getComparator", "()Ljava/util/Comparator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/BoundedValue#getComparator was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutableBoundedValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutableBoundedValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutableBoundedValue {
      env: env,
      object: object
    }
  }

  pub fn transform(&self, param_1: jobject) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableBoundedValue#transform was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn as_mutable(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableBoundedValue#asMutable was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn as_mutable_1(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableBoundedValue#asMutable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn transform_1(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableBoundedValue#transform was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutableCollectionValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutableCollectionValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutableCollectionValue {
      env: env,
      object: object
    }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn with(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/util/Collection;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#with was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn with_element(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "withElement", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#withElement was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn transform(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#transform was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn with_all(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "withAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#withAll was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn without(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "without", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#without was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn without_all(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "withoutAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#withoutAll was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn without_all_1(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "withoutAll", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#withoutAll was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn contains(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "contains", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsAll", "(Ljava/lang/Iterable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#getAll was null") }
    ret
  }

  pub fn as_mutable(&self) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#asMutable was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn as_mutable_1(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#asMutable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn transform_1(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#transform was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn with_1(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableCollectionValue#with was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutableListValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutableListValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutableListValue {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(I)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableListValue#get was null") }
    ret
  }

  pub fn with(&self, param_1: i32, param_2: jobject) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "with", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableListValue#with was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn with_1(&self, param_1: i32, param_2: jobject) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "with", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableListValue#with was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn without(&self, param_1: i32) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "without", "(I)Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableListValue#without was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn set(&self, param_1: i32, param_2: jobject) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "set", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableListValue#set was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn index_of(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "indexOf", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutableMapValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutableMapValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutableMapValue {
      env: env,
      object: object
    }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn with(&self, param_1: jobject, param_2: jobject) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#with was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn with_1(&self, param_1: jobject) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/util/Map;)Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#with was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn with_all(&self, param_1: jobject) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "withAll", "(Ljava/util/Map;)Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#withAll was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn without(&self, param_1: jobject) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "without", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#without was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn without_all(&self, param_1: jobject) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "withoutAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#withoutAll was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn without_all_1(&self, param_1: jobject) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "withoutAll", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#withoutAll was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn contains_key(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsKey", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_value(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsValue", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn key_set(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "keySet", "()Lcom/google/common/collect/ImmutableSet;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#keySet was null") }
    ret
  }

  pub fn entry_set(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "entrySet", "()Lcom/google/common/collect/ImmutableSet;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#entrySet was null") }
    ret
  }

  pub fn values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "values", "()Lcom/google/common/collect/ImmutableCollection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#values was null") }
    ret
  }

  pub fn transform(&self, param_1: jobject) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#transform was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn as_mutable(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#asMutable was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn as_mutable_1(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#asMutable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn transform_1(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#transform was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn with_2(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableMapValue#with was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutableOptionalValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutableOptionalValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutableOptionalValue {
      env: env,
      object: object
    }
  }

  pub fn with(&self, param_1: jobject) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/util/Optional;)Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableOptionalValue#with was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

  pub fn transform(&self, param_1: jobject) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableOptionalValue#transform was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

  pub fn instead(&self, param_1: jobject) -> data_value_immutable_ImmutableOptionalValue {
    let ret = java_method!(self.env, self.object, "instead", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableOptionalValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableOptionalValue#instead was null") }
    data_value_immutable_ImmutableOptionalValue { env: self.env, object: ret }
  }

  pub fn or(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "or", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableOptionalValue#or was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn as_mutable(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableOptionalValue#asMutable was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn as_mutable_1(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableOptionalValue#asMutable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn transform_1(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableOptionalValue#transform was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn with_1(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableOptionalValue#with was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutablePatternListValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutablePatternListValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutablePatternListValue {
      env: env,
      object: object
    }
  }

  pub fn with(&self, param_1: data_type_BannerPatternShape, param_2: data_type_DyeColor) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "with", "(Lorg/spongepowered/api/data/type/BannerPatternShape;Lorg/spongepowered/api/data/type/DyeColor;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#with was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn with_1(&self, param_1: i32, param_2: data_meta_PatternLayer) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "with", "(ILorg/spongepowered/api/data/meta/PatternLayer;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#with was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn with_2(&self, param_1: i32, param_2: jobject) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "with", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#with was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn with_3(&self, param_1: i32, param_2: data_type_BannerPatternShape, param_3: data_type_DyeColor) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "with", "(ILorg/spongepowered/api/data/type/BannerPatternShape;Lorg/spongepowered/api/data/type/DyeColor;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#with was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn with_4(&self, param_1: jobject) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/util/List;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#with was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn with_element(&self, param_1: data_meta_PatternLayer) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "withElement", "(Lorg/spongepowered/api/data/meta/PatternLayer;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#withElement was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn with_all(&self, param_1: jobject) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "withAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#withAll was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn set(&self, param_1: i32, param_2: data_type_BannerPatternShape, param_3: data_type_DyeColor) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/data/type/BannerPatternShape;Lorg/spongepowered/api/data/type/DyeColor;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#set was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: i32, param_2: data_meta_PatternLayer) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/data/meta/PatternLayer;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#set was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn without(&self, param_1: data_meta_PatternLayer) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "without", "(Lorg/spongepowered/api/data/meta/PatternLayer;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#without was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn without_1(&self, param_1: i32) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "without", "(I)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#without was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn without_all(&self, param_1: jobject) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "withoutAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#withoutAll was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn without_all_1(&self, param_1: jobject) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "withoutAll", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#withoutAll was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn as_mutable(&self) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#asMutable was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn set_2(&self, param_1: i32, param_2: jobject) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "set", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#set was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn without_2(&self, param_1: i32) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "without", "(I)Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#without was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn with_5(&self, param_1: i32, param_2: jobject) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "with", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#with was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn with_6(&self, param_1: i32, param_2: jobject) -> data_value_immutable_ImmutableListValue {
    let ret = java_method!(self.env, self.object, "with", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#with was null") }
    data_value_immutable_ImmutableListValue { env: self.env, object: ret }
  }

  pub fn as_mutable_1(&self) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#asMutable was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn without_all_2(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "withoutAll", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#withoutAll was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn without_all_3(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "withoutAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#withoutAll was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn without_3(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "without", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#without was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn with_all_1(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "withAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#withAll was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn with_element_1(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "withElement", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#withElement was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn with_7(&self, param_1: jobject) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/util/Collection;)Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#with was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn as_mutable_2(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#asMutable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn with_8(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutablePatternListValue#with was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutableSetValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutableSetValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutableSetValue {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutableValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutableValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutableValue {
      env: env,
      object: object
    }
  }

  pub fn with(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValue#with was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn transform(&self, param_1: jobject) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValue#transform was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn as_mutable(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValue#asMutable was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutableValueStore {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutableValueStore {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutableValueStore {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_or_create(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOrCreate", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#getOrCreate was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn supports(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "supports", "(Ljava/lang/Class;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn transform(&self, param_1: data_key_Key, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "transform", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/function/Function;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#transform was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn with(&self, param_1: data_key_Key, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "with", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#with was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn with_1(&self, param_1: data_value_BaseValue) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "with", "(Lorg/spongepowered/api/data/value/BaseValue;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#with was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn with_2(&self, param_1: data_value_ValueContainer) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "with", "(Lorg/spongepowered/api/data/value/ValueContainer;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#with was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn with_3(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/lang/Iterable;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#with was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn without(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "without", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#without was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn merge(&self, param_1: data_value_immutable_ImmutableValueStore) -> data_value_immutable_ImmutableValueStore {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValueStore;)Lorg/spongepowered/api/data/value/immutable/ImmutableValueStore;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#merge was null") }
    data_value_immutable_ImmutableValueStore { env: self.env, object: ret }
  }

  pub fn merge_1(&self, param_1: data_value_immutable_ImmutableValueStore, param_2: data_merge_MergeFunction) -> data_value_immutable_ImmutableValueStore {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/data/value/immutable/ImmutableValueStore;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/value/immutable/ImmutableValueStore;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#merge was null") }
    data_value_immutable_ImmutableValueStore { env: self.env, object: ret }
  }

  pub fn get_containers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getContainers", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableValueStore#getContainers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_value_immutable_ImmutableWeightedCollectionValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_immutable_ImmutableWeightedCollectionValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_immutable_ImmutableWeightedCollectionValue {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Random;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/immutable/ImmutableWeightedCollectionValue#get was null") }
    ret
  }

}


#[derive(Debug)]
pub struct data_value_mutable_CollectionValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_CollectionValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_CollectionValue {
      env: env,
      object: object
    }
  }

  pub fn set(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "set", "(Ljava/util/Collection;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#set was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn transform(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#transform was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn add(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "add", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#add was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn add_all(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "addAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#addAll was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#remove was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn remove_all(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#removeAll was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn remove_all_1(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#removeAll was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn contains(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "contains", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsAll", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn filter(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "filter", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#filter was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#getAll was null") }
    ret
  }

  pub fn as_immutable(&self) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#asImmutable was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn as_immutable_1(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#asImmutable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn transform_1(&self, param_1: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#transform was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "set", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CollectionValue#set was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_mutable_CompositeValueStore {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_CompositeValueStore {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_CompositeValueStore {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_or_create(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOrCreate", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#getOrCreate was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn supports(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "supports", "(Ljava/lang/Class;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn transform(&self, param_1: data_key_Key, param_2: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "transform", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/function/Function;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#transform was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer(&self, param_1: data_key_Key, param_2: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn try_offer(&self, param_1: data_key_Key, param_2: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "tryOffer", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#tryOffer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1(&self, param_1: data_key_Key, param_2: jobject, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn try_offer_1(&self, param_1: data_key_Key, param_2: jobject, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "tryOffer", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#tryOffer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_2(&self, param_1: data_value_BaseValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/BaseValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn try_offer_2(&self, param_1: data_value_BaseValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "tryOffer", "(Lorg/spongepowered/api/data/value/BaseValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#tryOffer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_3(&self, param_1: data_value_BaseValue, param_2: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/BaseValue;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn try_offer_3(&self, param_1: data_value_BaseValue, param_2: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "tryOffer", "(Lorg/spongepowered/api/data/value/BaseValue;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#tryOffer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_4(&self, param_1: data_value_ValueContainer) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/ValueContainer;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn try_offer_4(&self, param_1: data_value_ValueContainer) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "tryOffer", "(Lorg/spongepowered/api/data/value/ValueContainer;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#tryOffer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_5(&self, param_1: data_value_ValueContainer, param_2: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_6(&self, param_1: data_value_ValueContainer, param_2: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn try_offer_5(&self, param_1: data_value_ValueContainer, param_2: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "tryOffer", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#tryOffer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_7(&self, param_1: data_value_ValueContainer, param_2: data_merge_MergeFunction, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/merge/MergeFunction;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn try_offer_6(&self, param_1: data_value_ValueContainer, param_2: data_merge_MergeFunction, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "tryOffer", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/merge/MergeFunction;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#tryOffer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_8(&self, param_1: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_9(&self, param_1: jobject, param_2: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Ljava/lang/Iterable;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_0(&self, param_1: jobject, param_2: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Ljava/lang/Iterable;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_1(&self, param_1: jobject, param_2: data_merge_MergeFunction, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Ljava/lang/Iterable;Lorg/spongepowered/api/data/merge/MergeFunction;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Class;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: data_value_BaseValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/value/BaseValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: data_key_Key) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/key/Key;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn undo(&self, param_1: data_DataTransactionResult) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "undo", "(Lorg/spongepowered/api/data/DataTransactionResult;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#undo was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from(&self, param_1: data_value_mutable_CompositeValueStore) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lorg/spongepowered/api/data/value/mutable/CompositeValueStore;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_1(&self, param_1: data_value_mutable_CompositeValueStore, param_2: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lorg/spongepowered/api/data/value/mutable/CompositeValueStore;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn get_containers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getContainers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/CompositeValueStore#getContainers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_value_mutable_ListValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_ListValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_ListValue {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(I)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/ListValue#get was null") }
    ret
  }

  pub fn add(&self, param_1: i32, param_2: jobject) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "add", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/ListValue#add was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn add_1(&self, param_1: i32, param_2: jobject) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "add", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/ListValue#add was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: i32) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "remove", "(I)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/ListValue#remove was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn set(&self, param_1: i32, param_2: jobject) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "set", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/ListValue#set was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn index_of(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "indexOf", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct data_value_mutable_MapValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_MapValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_MapValue {
      env: env,
      object: object
    }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn put(&self, param_1: jobject, param_2: jobject) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#put was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn put_all(&self, param_1: jobject) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "putAll", "(Ljava/util/Map;)Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#putAll was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: jobject) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#remove was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn remove_all(&self, param_1: jobject) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#removeAll was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn remove_all_1(&self, param_1: jobject) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#removeAll was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn contains_key(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsKey", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_value(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsValue", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn key_set(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "keySet", "()Lcom/google/common/collect/ImmutableSet;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#keySet was null") }
    ret
  }

  pub fn entry_set(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "entrySet", "()Lcom/google/common/collect/ImmutableSet;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#entrySet was null") }
    ret
  }

  pub fn values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "values", "()Lcom/google/common/collect/ImmutableCollection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#values was null") }
    ret
  }

  pub fn transform(&self, param_1: jobject) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#transform was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn as_immutable(&self) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#asImmutable was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn as_immutable_1(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#asImmutable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn transform_1(&self, param_1: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MapValue#transform was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_mutable_MutableBoundedValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_MutableBoundedValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_MutableBoundedValue {
      env: env,
      object: object
    }
  }

  pub fn as_immutable(&self) -> data_value_immutable_ImmutableBoundedValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MutableBoundedValue#asImmutable was null") }
    data_value_immutable_ImmutableBoundedValue { env: self.env, object: ret }
  }

  pub fn as_immutable_1(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/MutableBoundedValue#asImmutable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_mutable_OptionalValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_OptionalValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_OptionalValue {
      env: env,
      object: object
    }
  }

  pub fn set(&self, param_1: jobject) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "set", "(Ljava/util/Optional;)Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/OptionalValue#set was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn set_to(&self, param_1: jobject) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "setTo", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/OptionalValue#setTo was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn or(&self, param_1: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "or", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/OptionalValue#or was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "set", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/OptionalValue#set was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct data_value_mutable_PatternListValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_PatternListValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_PatternListValue {
      env: env,
      object: object
    }
  }

  pub fn add(&self, param_1: data_meta_PatternLayer) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/data/meta/PatternLayer;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#add was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn add_1(&self, param_1: data_type_BannerPatternShape, param_2: data_type_DyeColor) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/data/type/BannerPatternShape;Lorg/spongepowered/api/data/type/DyeColor;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#add was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn add_2(&self, param_1: i32, param_2: data_meta_PatternLayer) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "add", "(ILorg/spongepowered/api/data/meta/PatternLayer;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#add was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn add_3(&self, param_1: i32, param_2: data_type_BannerPatternShape, param_3: data_type_DyeColor) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "add", "(ILorg/spongepowered/api/data/type/BannerPatternShape;Lorg/spongepowered/api/data/type/DyeColor;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#add was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn add_4(&self, param_1: i32, param_2: jobject) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "add", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#add was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn set(&self, param_1: i32, param_2: data_meta_PatternLayer) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/data/meta/PatternLayer;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#set was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: jobject) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "set", "(Ljava/util/List;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#set was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn transform(&self, param_1: jobject) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#transform was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn add_all(&self, param_1: jobject) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "addAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#addAll was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: i32) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "remove", "(I)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#remove was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: data_meta_PatternLayer) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/meta/PatternLayer;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#remove was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn remove_all(&self, param_1: jobject) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#removeAll was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn remove_all_1(&self, param_1: jobject) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#removeAll was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn filter(&self, param_1: jobject) -> data_value_mutable_PatternListValue {
    let ret = java_method!(self.env, self.object, "filter", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/mutable/PatternListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#filter was null") }
    data_value_mutable_PatternListValue { env: self.env, object: ret }
  }

  pub fn as_immutable(&self) -> data_value_immutable_ImmutablePatternListValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutablePatternListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#asImmutable was null") }
    data_value_immutable_ImmutablePatternListValue { env: self.env, object: ret }
  }

  pub fn set_2(&self, param_1: i32, param_2: jobject) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "set", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#set was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: i32) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "remove", "(I)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#remove was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn add_5(&self, param_1: i32, param_2: jobject) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "add", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#add was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn add_6(&self, param_1: i32, param_2: jobject) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "add", "(ILjava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#add was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn as_immutable_1(&self) -> data_value_immutable_ImmutableCollectionValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableCollectionValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#asImmutable was null") }
    data_value_immutable_ImmutableCollectionValue { env: self.env, object: ret }
  }

  pub fn filter_1(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "filter", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#filter was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn remove_all_2(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#removeAll was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn remove_all_3(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "removeAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#removeAll was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn remove_3(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#remove was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn add_all_1(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "addAll", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#addAll was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn add_7(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "add", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#add was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn transform_1(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#transform was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn set_3(&self, param_1: jobject) -> data_value_mutable_CollectionValue {
    let ret = java_method!(self.env, self.object, "set", "(Ljava/util/Collection;)Lorg/spongepowered/api/data/value/mutable/CollectionValue;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#set was null") }
    data_value_mutable_CollectionValue { env: self.env, object: ret }
  }

  pub fn as_immutable_2(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#asImmutable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

  pub fn transform_2(&self, param_1: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#transform was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn set_4(&self, param_1: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "set", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/PatternListValue#set was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_mutable_SetValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_SetValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_SetValue {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct data_value_mutable_Value {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_Value {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_Value {
      env: env,
      object: object
    }
  }

  pub fn set(&self, param_1: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "set", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/Value#set was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn transform(&self, param_1: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "transform", "(Ljava/util/function/Function;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/Value#transform was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn as_immutable(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "asImmutable", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/Value#asImmutable was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_mutable_WeightedCollectionValue {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_mutable_WeightedCollectionValue {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_mutable_WeightedCollectionValue {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Random;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/mutable/WeightedCollectionValue#get was null") }
    ret
  }

}


#[derive(Debug)]
pub struct data_value_ValueContainer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_ValueContainer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_ValueContainer {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueContainer#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_or_null(&self, param_1: data_key_Key) -> jobject {
    let ret = java_method!(self.env, self.object, "getOrNull", "(Lorg/spongepowered/api/data/key/Key;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueContainer#getOrNull was null") }
    ret
  }

  pub fn get_or_else(&self, param_1: data_key_Key, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getOrElse", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueContainer#getOrElse was null") }
    ret
  }

  pub fn get_value(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getValue", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueContainer#getValue was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn supports(&self, param_1: data_key_Key) -> bool {
    java_method!(self.env, self.object, "supports", "(Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn supports_1(&self, param_1: data_value_BaseValue) -> bool {
    java_method!(self.env, self.object, "supports", "(Lorg/spongepowered/api/data/value/BaseValue;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn copy(&self) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueContainer#copy was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

  pub fn get_keys(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKeys", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueContainer#getKeys was null") }
    ret
  }

  pub fn get_values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValues", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueContainer#getValues was null") }
    ret
  }

}

#[derive(Debug)]
pub struct data_value_ValueFactory_BoundedValueBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_ValueFactory_BoundedValueBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_ValueFactory_BoundedValueBuilder {
      env: env,
      object: object
    }
  }

  pub fn comparator(&self, param_1: jobject) -> data_value_ValueFactory_BoundedValueBuilder {
    let ret = java_method!(self.env, self.object, "comparator", "(Ljava/util/Comparator;)Lorg/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder#comparator was null") }
    data_value_ValueFactory_BoundedValueBuilder { env: self.env, object: ret }
  }

  pub fn minimum(&self, param_1: jobject) -> data_value_ValueFactory_BoundedValueBuilder {
    let ret = java_method!(self.env, self.object, "minimum", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder#minimum was null") }
    data_value_ValueFactory_BoundedValueBuilder { env: self.env, object: ret }
  }

  pub fn maximum(&self, param_1: jobject) -> data_value_ValueFactory_BoundedValueBuilder {
    let ret = java_method!(self.env, self.object, "maximum", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder#maximum was null") }
    data_value_ValueFactory_BoundedValueBuilder { env: self.env, object: ret }
  }

  pub fn default_value(&self, param_1: jobject) -> data_value_ValueFactory_BoundedValueBuilder {
    let ret = java_method!(self.env, self.object, "defaultValue", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder#defaultValue was null") }
    data_value_ValueFactory_BoundedValueBuilder { env: self.env, object: ret }
  }

  pub fn actual_value(&self, param_1: jobject) -> data_value_ValueFactory_BoundedValueBuilder {
    let ret = java_method!(self.env, self.object, "actualValue", "(Ljava/lang/Object;)Lorg/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder#actualValue was null") }
    data_value_ValueFactory_BoundedValueBuilder { env: self.env, object: ret }
  }

  pub fn build(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder#build was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct data_value_ValueFactory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl data_value_ValueFactory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    data_value_ValueFactory {
      env: env,
      object: object
    }
  }

  pub fn create_value(&self, param_1: data_key_Key, param_2: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "createValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createValue was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn create_value_1(&self, param_1: data_key_Key, param_2: jobject, param_3: jobject) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "createValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createValue was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn create_list_value(&self, param_1: data_key_Key, param_2: jobject) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "createListValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/List;)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createListValue was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn create_list_value_1(&self, param_1: data_key_Key, param_2: jobject, param_3: jobject) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "createListValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/List;Ljava/util/List;)Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createListValue was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

  pub fn create_set_value(&self, param_1: data_key_Key, param_2: jobject) -> data_value_mutable_SetValue {
    let ret = java_method!(self.env, self.object, "createSetValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/Set;)Lorg/spongepowered/api/data/value/mutable/SetValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createSetValue was null") }
    data_value_mutable_SetValue { env: self.env, object: ret }
  }

  pub fn create_set_value_1(&self, param_1: data_key_Key, param_2: jobject, param_3: jobject) -> data_value_mutable_SetValue {
    let ret = java_method!(self.env, self.object, "createSetValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/Set;Ljava/util/Set;)Lorg/spongepowered/api/data/value/mutable/SetValue;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createSetValue was null") }
    data_value_mutable_SetValue { env: self.env, object: ret }
  }

  pub fn create_map_value(&self, param_1: data_key_Key, param_2: jobject) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "createMapValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/Map;)Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createMapValue was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn create_map_value_1(&self, param_1: data_key_Key, param_2: jobject, param_3: jobject) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "createMapValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/Map;Ljava/util/Map;)Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createMapValue was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn create_bounded_value_builder(&self, param_1: data_key_Key) -> data_value_ValueFactory_BoundedValueBuilder {
    let ret = java_method!(self.env, self.object, "createBoundedValueBuilder", "(Lorg/spongepowered/api/data/key/Key;)Lorg/spongepowered/api/data/value/ValueFactory$BoundedValueBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createBoundedValueBuilder was null") }
    data_value_ValueFactory_BoundedValueBuilder { env: self.env, object: ret }
  }

  pub fn create_optional_value(&self, param_1: data_key_Key, param_2: jobject) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "createOptionalValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createOptionalValue was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn create_optional_value_1(&self, param_1: data_key_Key, param_2: jobject, param_3: jobject) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "createOptionalValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/data/value/ValueFactory#createOptionalValue was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct effect_particle_BlockParticle_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_BlockParticle_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_BlockParticle_Builder {
      env: env,
      object: object
    }
  }

  pub fn block(&self, param_1: block_BlockState) -> effect_particle_BlockParticle_Builder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/effect/particle/BlockParticle$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/BlockParticle$Builder#block was null") }
    effect_particle_BlockParticle_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_BlockParticle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_BlockParticle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_BlockParticle {
      env: env,
      object: object
    }
  }

  pub fn builder() -> effect_particle_BlockParticle_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/effect/particle/BlockParticle$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/BlockParticle#builder was null") }
    effect_particle_BlockParticle_Builder { env: self.env, object: ret }
  }

  pub fn get_block_state(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getBlockState", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/BlockParticle#getBlockState was null") }
    block_BlockState { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ColoredParticle_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ColoredParticle_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ColoredParticle_Builder {
      env: env,
      object: object
    }
  }

  pub fn color(&self, param_1: util_Color) -> effect_particle_ColoredParticle_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/util/Color;)Lorg/spongepowered/api/effect/particle/ColoredParticle$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ColoredParticle$Builder#color was null") }
    effect_particle_ColoredParticle_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ColoredParticle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ColoredParticle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ColoredParticle {
      env: env,
      object: object
    }
  }

  pub fn builder() -> effect_particle_ColoredParticle_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/effect/particle/ColoredParticle$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ColoredParticle#builder was null") }
    effect_particle_ColoredParticle_Builder { env: self.env, object: ret }
  }

  pub fn get_color(&self) -> util_Color {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/util/Color;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ColoredParticle#getColor was null") }
    util_Color { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ItemParticle_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ItemParticle_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ItemParticle_Builder {
      env: env,
      object: object
    }
  }

  pub fn item(&self, param_1: item_inventory_ItemStackSnapshot) -> effect_particle_ItemParticle_Builder {
    let ret = java_method!(self.env, self.object, "item", "(Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Lorg/spongepowered/api/effect/particle/ItemParticle$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ItemParticle$Builder#item was null") }
    effect_particle_ItemParticle_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ItemParticle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ItemParticle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ItemParticle {
      env: env,
      object: object
    }
  }

  pub fn builder() -> effect_particle_ItemParticle_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/effect/particle/ItemParticle$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ItemParticle#builder was null") }
    effect_particle_ItemParticle_Builder { env: self.env, object: ret }
  }

  pub fn get_item(&self) -> item_inventory_ItemStackSnapshot {
    let ret = java_method!(self.env, self.object, "getItem", "()Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ItemParticle#getItem was null") }
    item_inventory_ItemStackSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_NoteParticle_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_NoteParticle_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_NoteParticle_Builder {
      env: env,
      object: object
    }
  }

  pub fn note(&self, param_1: data_type_NotePitch) -> effect_particle_NoteParticle_Builder {
    let ret = java_method!(self.env, self.object, "note", "(Lorg/spongepowered/api/data/type/NotePitch;)Lorg/spongepowered/api/effect/particle/NoteParticle$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/NoteParticle$Builder#note was null") }
    effect_particle_NoteParticle_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_NoteParticle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_NoteParticle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_NoteParticle {
      env: env,
      object: object
    }
  }

  pub fn builder() -> effect_particle_NoteParticle_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/effect/particle/NoteParticle$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/NoteParticle#builder was null") }
    effect_particle_NoteParticle_Builder { env: self.env, object: ret }
  }

  pub fn get_note(&self) -> data_type_NotePitch {
    let ret = java_method!(self.env, self.object, "getNote", "()Lorg/spongepowered/api/data/type/NotePitch;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/NoteParticle#getNote was null") }
    data_type_NotePitch { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct effect_particle_ParticleEffect_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleEffect_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleEffect_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct effect_particle_ParticleEffect_ParticleBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleEffect_ParticleBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleEffect_ParticleBuilder {
      env: env,
      object: object
    }
  }

  pub fn type_(&self, param_1: effect_particle_ParticleType) -> effect_particle_ParticleEffect_ParticleBuilder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/effect/particle/ParticleType;)Lorg/spongepowered/api/effect/particle/ParticleEffect$ParticleBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleEffect$ParticleBuilder#type was null") }
    effect_particle_ParticleEffect_ParticleBuilder { env: self.env, object: ret }
  }

  pub fn motion(&self, param_1: jobject) -> effect_particle_ParticleEffect_ParticleBuilder {
    let ret = java_method!(self.env, self.object, "motion", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/effect/particle/ParticleEffect$ParticleBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleEffect$ParticleBuilder#motion was null") }
    effect_particle_ParticleEffect_ParticleBuilder { env: self.env, object: ret }
  }

  pub fn offset(&self, param_1: jobject) -> effect_particle_ParticleEffect_ParticleBuilder {
    let ret = java_method!(self.env, self.object, "offset", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/effect/particle/ParticleEffect$ParticleBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleEffect$ParticleBuilder#offset was null") }
    effect_particle_ParticleEffect_ParticleBuilder { env: self.env, object: ret }
  }

  pub fn count(&self, param_1: i32) -> effect_particle_ParticleEffect_ParticleBuilder {
    let ret = java_method!(self.env, self.object, "count", "(I)Lorg/spongepowered/api/effect/particle/ParticleEffect$ParticleBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleEffect$ParticleBuilder#count was null") }
    effect_particle_ParticleEffect_ParticleBuilder { env: self.env, object: ret }
  }

  pub fn build(&self) -> effect_particle_ParticleEffect {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/effect/particle/ParticleEffect;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleEffect$ParticleBuilder#build was null") }
    effect_particle_ParticleEffect { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ParticleEffect {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleEffect {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleEffect {
      env: env,
      object: object
    }
  }

  pub fn builder() -> effect_particle_ParticleEffect_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/effect/particle/ParticleEffect$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleEffect#builder was null") }
    effect_particle_ParticleEffect_Builder { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> effect_particle_ParticleType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/effect/particle/ParticleType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleEffect#getType was null") }
    effect_particle_ParticleType { env: self.env, object: ret }
  }

  pub fn get_motion(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMotion", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleEffect#getMotion was null") }
    ret
  }

  pub fn get_offset(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOffset", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleEffect#getOffset was null") }
    ret
  }

  pub fn get_count(&self) -> i32 {
    java_method!(self.env, self.object, "getCount", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct effect_particle_ParticleType_Block {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleType_Block {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleType_Block {
      env: env,
      object: object
    }
  }

  pub fn get_default_block_state(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getDefaultBlockState", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleType$Block#getDefaultBlockState was null") }
    block_BlockState { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ParticleType_Colorable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleType_Colorable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleType_Colorable {
      env: env,
      object: object
    }
  }

  pub fn get_default_color(&self) -> util_Color {
    let ret = java_method!(self.env, self.object, "getDefaultColor", "()Lorg/spongepowered/api/util/Color;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleType$Colorable#getDefaultColor was null") }
    util_Color { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ParticleType_Item {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleType_Item {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleType_Item {
      env: env,
      object: object
    }
  }

  pub fn get_default_item(&self) -> item_inventory_ItemStack {
    let ret = java_method!(self.env, self.object, "getDefaultItem", "()Lorg/spongepowered/api/item/inventory/ItemStack;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleType$Item#getDefaultItem was null") }
    item_inventory_ItemStack { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ParticleType_Note {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleType_Note {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleType_Note {
      env: env,
      object: object
    }
  }

  pub fn get_default_note(&self) -> data_type_NotePitch {
    let ret = java_method!(self.env, self.object, "getDefaultNote", "()Lorg/spongepowered/api/data/type/NotePitch;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ParticleType$Note#getDefaultNote was null") }
    data_type_NotePitch { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ParticleType_Resizable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleType_Resizable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleType_Resizable {
      env: env,
      object: object
    }
  }

  pub fn get_default_size(&self) -> f32 {
    java_method!(self.env, self.object, "getDefaultSize", "()F", CallFloatMethod)
  }

}

#[derive(Debug)]
pub struct effect_particle_ParticleType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleType {
      env: env,
      object: object
    }
  }

  pub fn has_motion(&self) -> bool {
    java_method!(self.env, self.object, "hasMotion", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct effect_particle_ParticleTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ParticleTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ParticleTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct effect_particle_ResizableParticle_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ResizableParticle_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ResizableParticle_Builder {
      env: env,
      object: object
    }
  }

  pub fn size(&self, param_1: f32) -> effect_particle_ResizableParticle_Builder {
    let ret = java_method!(self.env, self.object, "size", "(F)Lorg/spongepowered/api/effect/particle/ResizableParticle$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ResizableParticle$Builder#size was null") }
    effect_particle_ResizableParticle_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_particle_ResizableParticle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_particle_ResizableParticle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_particle_ResizableParticle {
      env: env,
      object: object
    }
  }

  pub fn builder() -> effect_particle_ResizableParticle_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/effect/particle/ResizableParticle$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/particle/ResizableParticle#builder was null") }
    effect_particle_ResizableParticle_Builder { env: self.env, object: ret }
  }

  pub fn get_size(&self) -> f32 {
    java_method!(self.env, self.object, "getSize", "()F", CallFloatMethod)
  }

}


#[derive(Debug)]
pub struct effect_potion_PotionEffect_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_potion_PotionEffect_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_potion_PotionEffect_Builder {
      env: env,
      object: object
    }
  }

  pub fn from_1(&self, param_1: effect_potion_PotionEffect) -> effect_potion_PotionEffect_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/effect/potion/PotionEffect;)Lorg/spongepowered/api/effect/potion/PotionEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#from was null") }
    effect_potion_PotionEffect_Builder { env: self.env, object: ret }
  }

  pub fn potion_type(&self, param_1: effect_potion_PotionEffectType) -> effect_potion_PotionEffect_Builder {
    let ret = java_method!(self.env, self.object, "potionType", "(Lorg/spongepowered/api/effect/potion/PotionEffectType;)Lorg/spongepowered/api/effect/potion/PotionEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#potionType was null") }
    effect_potion_PotionEffect_Builder { env: self.env, object: ret }
  }

  pub fn duration(&self, param_1: i32) -> effect_potion_PotionEffect_Builder {
    let ret = java_method!(self.env, self.object, "duration", "(I)Lorg/spongepowered/api/effect/potion/PotionEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#duration was null") }
    effect_potion_PotionEffect_Builder { env: self.env, object: ret }
  }

  pub fn amplifier(&self, param_1: i32) -> effect_potion_PotionEffect_Builder {
    let ret = java_method!(self.env, self.object, "amplifier", "(I)Lorg/spongepowered/api/effect/potion/PotionEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#amplifier was null") }
    effect_potion_PotionEffect_Builder { env: self.env, object: ret }
  }

  pub fn ambience(&self, param_1: bool) -> effect_potion_PotionEffect_Builder {
    let ret = java_method!(self.env, self.object, "ambience", "(Z)Lorg/spongepowered/api/effect/potion/PotionEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#ambience was null") }
    effect_potion_PotionEffect_Builder { env: self.env, object: ret }
  }

  pub fn particles(&self, param_1: bool) -> effect_potion_PotionEffect_Builder {
    let ret = java_method!(self.env, self.object, "particles", "(Z)Lorg/spongepowered/api/effect/potion/PotionEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#particles was null") }
    effect_potion_PotionEffect_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> effect_potion_PotionEffect {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/effect/potion/PotionEffect;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#build was null") }
    effect_potion_PotionEffect { env: self.env, object: ret }
  }

  pub fn reset(&self) -> effect_potion_PotionEffect_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/effect/potion/PotionEffect$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#reset was null") }
    effect_potion_PotionEffect_Builder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: data_DataSerializable) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/data/DataSerializable;)Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#from was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#reset was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_potion_PotionEffect {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_potion_PotionEffect {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_potion_PotionEffect {
      env: env,
      object: object
    }
  }

  pub fn builder() -> effect_potion_PotionEffect_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/effect/potion/PotionEffect$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect#builder was null") }
    effect_potion_PotionEffect_Builder { env: self.env, object: ret }
  }

  pub fn of(param_1: effect_potion_PotionEffectType, param_2: i32, param_3: i32) -> effect_potion_PotionEffect {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/effect/potion/PotionEffectType;II)Lorg/spongepowered/api/effect/potion/PotionEffect;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect#of was null") }
    effect_potion_PotionEffect { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> effect_potion_PotionEffectType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/effect/potion/PotionEffectType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffect#getType was null") }
    effect_potion_PotionEffectType { env: self.env, object: ret }
  }

  pub fn get_duration(&self) -> i32 {
    java_method!(self.env, self.object, "getDuration", "()I", CallIntMethod)
  }

  pub fn get_amplifier(&self) -> i32 {
    java_method!(self.env, self.object, "getAmplifier", "()I", CallIntMethod)
  }

  pub fn is_ambient(&self) -> bool {
    java_method!(self.env, self.object, "isAmbient", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_show_particles(&self) -> bool {
    java_method!(self.env, self.object, "getShowParticles", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct effect_potion_PotionEffectType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_potion_PotionEffectType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_potion_PotionEffectType {
      env: env,
      object: object
    }
  }

  pub fn is_instant(&self) -> bool {
    java_method!(self.env, self.object, "isInstant", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_potion_translation(&self) -> text_translation_Translation {
    let ret = java_method!(self.env, self.object, "getPotionTranslation", "()Lorg/spongepowered/api/text/translation/Translation;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/effect/potion/PotionEffectType#getPotionTranslation was null") }
    text_translation_Translation { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct effect_potion_PotionEffectTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_potion_PotionEffectTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_potion_PotionEffectTypes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct effect_sound_PitchModulation {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_sound_PitchModulation {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_sound_PitchModulation {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct effect_sound_SoundCategories {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_sound_SoundCategories {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_sound_SoundCategories {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct effect_sound_SoundCategory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_sound_SoundCategory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_sound_SoundCategory {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct effect_sound_SoundType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_sound_SoundType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_sound_SoundType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct effect_sound_SoundTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_sound_SoundTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_sound_SoundTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct effect_Viewer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl effect_Viewer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    effect_Viewer {
      env: env,
      object: object
    }
  }

  pub fn spawn_particles(&self, param_1: effect_particle_ParticleEffect, param_2: jobject) {
    java_method!(self.env, self.object, "spawnParticles", "(Lorg/spongepowered/api/effect/particle/ParticleEffect;Lcom/flowpowered/math/vector/Vector3d;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn spawn_particles_1(&self, param_1: effect_particle_ParticleEffect, param_2: jobject, param_3: i32) {
    java_method!(self.env, self.object, "spawnParticles", "(Lorg/spongepowered/api/effect/particle/ParticleEffect;Lcom/flowpowered/math/vector/Vector3d;I)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn play_sound(&self, param_1: effect_sound_SoundType, param_2: jobject, param_3: f64) {
    java_method!(self.env, self.object, "playSound", "(Lorg/spongepowered/api/effect/sound/SoundType;Lcom/flowpowered/math/vector/Vector3d;D)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn play_sound_1(&self, param_1: effect_sound_SoundType, param_2: effect_sound_SoundCategory, param_3: jobject, param_4: f64) {
    java_method!(self.env, self.object, "playSound", "(Lorg/spongepowered/api/effect/sound/SoundType;Lorg/spongepowered/api/effect/sound/SoundCategory;Lcom/flowpowered/math/vector/Vector3d;D)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

  pub fn play_sound_2(&self, param_1: effect_sound_SoundType, param_2: jobject, param_3: f64, param_4: f64) {
    java_method!(self.env, self.object, "playSound", "(Lorg/spongepowered/api/effect/sound/SoundType;Lcom/flowpowered/math/vector/Vector3d;DD)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

  pub fn play_sound_3(&self, param_1: effect_sound_SoundType, param_2: effect_sound_SoundCategory, param_3: jobject, param_4: f64, param_5: f64) {
    java_method!(self.env, self.object, "playSound", "(Lorg/spongepowered/api/effect/sound/SoundType;Lorg/spongepowered/api/effect/sound/SoundCategory;Lcom/flowpowered/math/vector/Vector3d;DD)V", CallVoidMethodA, param_1, param_2, param_3, param_4, param_5);
  }

  pub fn play_sound_4(&self, param_1: effect_sound_SoundType, param_2: jobject, param_3: f64, param_4: f64, param_5: f64) {
    java_method!(self.env, self.object, "playSound", "(Lorg/spongepowered/api/effect/sound/SoundType;Lcom/flowpowered/math/vector/Vector3d;DDD)V", CallVoidMethodA, param_1, param_2, param_3, param_4, param_5);
  }

  pub fn play_sound_5(&self, param_1: effect_sound_SoundType, param_2: effect_sound_SoundCategory, param_3: jobject, param_4: f64, param_5: f64, param_6: f64) {
    java_method!(self.env, self.object, "playSound", "(Lorg/spongepowered/api/effect/sound/SoundType;Lorg/spongepowered/api/effect/sound/SoundCategory;Lcom/flowpowered/math/vector/Vector3d;DDD)V", CallVoidMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
  }

  pub fn send_title(&self, param_1: text_title_Title) {
    java_method!(self.env, self.object, "sendTitle", "(Lorg/spongepowered/api/text/title/Title;)V", CallVoidMethodA, param_1);
  }

  pub fn reset_title(&self) {
    java_method!(self.env, self.object, "resetTitle", "()V", CallVoidMethod);
  }

  pub fn clear_title(&self) {
    java_method!(self.env, self.object, "clearTitle", "()V", CallVoidMethod);
  }

  pub fn send_book_view(&self, param_1: text_BookView) {
    java_method!(self.env, self.object, "sendBookView", "(Lorg/spongepowered/api/text/BookView;)V", CallVoidMethodA, param_1);
  }

  pub fn send_block_change(&self, param_1: jobject, param_2: block_BlockState) {
    java_method!(self.env, self.object, "sendBlockChange", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/block/BlockState;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_block_change_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: block_BlockState) {
    java_method!(self.env, self.object, "sendBlockChange", "(IIILorg/spongepowered/api/block/BlockState;)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

  pub fn reset_block_change(&self, param_1: jobject) {
    java_method!(self.env, self.object, "resetBlockChange", "(Lcom/flowpowered/math/vector/Vector3i;)V", CallVoidMethodA, param_1);
  }

  pub fn reset_block_change_1(&self, param_1: i32, param_2: i32, param_3: i32) {
    java_method!(self.env, self.object, "resetBlockChange", "(III)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}

#[derive(Debug)]
pub struct entity_ai_Goal {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_Goal {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_Goal {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> entity_ai_GoalType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/entity/ai/GoalType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/Goal#getType was null") }
    entity_ai_GoalType { env: self.env, object: ret }
  }

  pub fn get_owner(&self) -> entity_living_Agent {
    let ret = java_method!(self.env, self.object, "getOwner", "()Lorg/spongepowered/api/entity/living/Agent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/Goal#getOwner was null") }
    entity_living_Agent { env: self.env, object: ret }
  }

  pub fn add_task(&self, param_1: i32, param_2: entity_ai_task_AITask) -> entity_ai_Goal {
    let ret = java_method!(self.env, self.object, "addTask", "(ILorg/spongepowered/api/entity/ai/task/AITask;)Lorg/spongepowered/api/entity/ai/Goal;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/Goal#addTask was null") }
    entity_ai_Goal { env: self.env, object: ret }
  }

  pub fn remove_task(&self, param_1: entity_ai_task_AITask) -> entity_ai_Goal {
    let ret = java_method!(self.env, self.object, "removeTask", "(Lorg/spongepowered/api/entity/ai/task/AITask;)Lorg/spongepowered/api/entity/ai/Goal;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/Goal#removeTask was null") }
    entity_ai_Goal { env: self.env, object: ret }
  }

  pub fn remove_tasks(&self, param_1: entity_ai_task_AITaskType) -> entity_ai_Goal {
    let ret = java_method!(self.env, self.object, "removeTasks", "(Lorg/spongepowered/api/entity/ai/task/AITaskType;)Lorg/spongepowered/api/entity/ai/Goal;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/Goal#removeTasks was null") }
    entity_ai_Goal { env: self.env, object: ret }
  }

  pub fn get_tasks_by_type(&self, param_1: entity_ai_task_AITaskType) -> jobject {
    let ret = java_method!(self.env, self.object, "getTasksByType", "(Lorg/spongepowered/api/entity/ai/task/AITaskType;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/Goal#getTasksByType was null") }
    ret
  }

  pub fn get_tasks(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTasks", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/Goal#getTasks was null") }
    ret
  }

  pub fn clear(&self) {
    java_method!(self.env, self.object, "clear", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct entity_ai_GoalType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_GoalType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_GoalType {
      env: env,
      object: object
    }
  }

  pub fn get_goal_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGoalClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/GoalType#getGoalClass was null") }
    ret
  }

}

#[derive(Debug)]
pub struct entity_ai_GoalTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_GoalTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_GoalTypes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct entity_ai_task_AbstractAITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_AbstractAITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_AbstractAITask {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: entity_ai_task_AITaskType) -> entity_ai_task_AbstractAITask {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/entity/ai/task/AITaskType;)Lorg/spongepowered/api/entity/ai/task/AbstractAITask", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/AbstractAITask#<init> was null") }
    entity_ai_task_AbstractAITask { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> entity_ai_task_AITaskType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/entity/ai/task/AITaskType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/AbstractAITask#getType was null") }
    entity_ai_task_AITaskType { env: self.env, object: ret }
  }

  pub fn get_goal(&self) -> Option<entity_ai_Goal> {
    let ret = java_method!(self.env, self.object, "getGoal", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/AbstractAITask#getGoal was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_ai_Goal { env: self.env, object: unwrapped }) }
  }

  pub fn start(&self) {
    java_method!(self.env, self.object, "start", "()V", CallVoidMethod);
  }

  pub fn should_update(&self) -> bool {
    java_method!(self.env, self.object, "shouldUpdate", "()Z", CallBooleanMethod) == 1
  }

  pub fn update(&self) {
    java_method!(self.env, self.object, "update", "()V", CallVoidMethod);
  }

  pub fn continue_updating(&self) -> bool {
    java_method!(self.env, self.object, "continueUpdating", "()Z", CallBooleanMethod) == 1
  }

  pub fn reset(&self) {
    java_method!(self.env, self.object, "reset", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct entity_ai_task_AITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_AITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_AITask {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> entity_ai_task_AITaskType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/entity/ai/task/AITaskType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/AITask#getType was null") }
    entity_ai_task_AITaskType { env: self.env, object: ret }
  }

  pub fn get_goal(&self) -> Option<entity_ai_Goal> {
    let ret = java_method!(self.env, self.object, "getGoal", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/AITask#getGoal was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_ai_Goal { env: self.env, object: unwrapped }) }
  }

  pub fn get_owner(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOwner", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/AITask#getOwner was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn can_run_concurrent_with(&self, param_1: entity_ai_task_AITask) -> bool {
    java_method!(self.env, self.object, "canRunConcurrentWith", "(Lorg/spongepowered/api/entity/ai/task/AITask;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn can_be_interrupted(&self) -> bool {
    java_method!(self.env, self.object, "canBeInterrupted", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct entity_ai_task_AITaskBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_AITaskBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_AITaskBuilder {
      env: env,
      object: object
    }
  }

  pub fn build(&self, param_1: entity_living_Agent) -> entity_ai_task_AITask {
    let ret = java_method!(self.env, self.object, "build", "(Lorg/spongepowered/api/entity/living/Agent;)Lorg/spongepowered/api/entity/ai/task/AITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/AITaskBuilder#build was null") }
    entity_ai_task_AITask { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_AITaskType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_AITaskType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_AITaskType {
      env: env,
      object: object
    }
  }

  pub fn get_a_i_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAIClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/AITaskType#getAIClass was null") }
    ret
  }

}

#[derive(Debug)]
pub struct entity_ai_task_AITaskTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_AITaskTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_AITaskTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_AttackLivingAITask_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_AttackLivingAITask_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_AttackLivingAITask_Builder {
      env: env,
      object: object
    }
  }

  pub fn speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_AttackLivingAITask_Builder {
    let ret = java_method!(self.env, self.object, "speed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AttackLivingAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AttackLivingAITask$Builder#speed was null") }
    entity_ai_task_builtin_creature_AttackLivingAITask_Builder { env: self.env, object: ret }
  }

  pub fn long_memory(&self) -> entity_ai_task_builtin_creature_AttackLivingAITask_Builder {
    let ret = java_method!(self.env, self.object, "longMemory", "()Lorg/spongepowered/api/entity/ai/task/builtin/creature/AttackLivingAITask$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AttackLivingAITask$Builder#longMemory was null") }
    entity_ai_task_builtin_creature_AttackLivingAITask_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_AttackLivingAITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_AttackLivingAITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_AttackLivingAITask {
      env: env,
      object: object
    }
  }

  pub fn get_speed(&self) -> f64 {
    java_method!(self.env, self.object, "getSpeed", "()D", CallDoubleMethod)
  }

  pub fn set_speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_AttackLivingAITask {
    let ret = java_method!(self.env, self.object, "setSpeed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AttackLivingAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AttackLivingAITask#setSpeed was null") }
    entity_ai_task_builtin_creature_AttackLivingAITask { env: self.env, object: ret }
  }

  pub fn has_long_memory(&self) -> bool {
    java_method!(self.env, self.object, "hasLongMemory", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_long_memory(&self, param_1: bool) -> entity_ai_task_builtin_creature_AttackLivingAITask {
    let ret = java_method!(self.env, self.object, "setLongMemory", "(Z)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AttackLivingAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AttackLivingAITask#setLongMemory was null") }
    entity_ai_task_builtin_creature_AttackLivingAITask { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_AvoidEntityAITask_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_AvoidEntityAITask_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_AvoidEntityAITask_Builder {
      env: env,
      object: object
    }
  }

  pub fn target_selector(&self, param_1: jobject) -> entity_ai_task_builtin_creature_AvoidEntityAITask_Builder {
    let ret = java_method!(self.env, self.object, "targetSelector", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask$Builder#targetSelector was null") }
    entity_ai_task_builtin_creature_AvoidEntityAITask_Builder { env: self.env, object: ret }
  }

  pub fn search_distance(&self, param_1: f32) -> entity_ai_task_builtin_creature_AvoidEntityAITask_Builder {
    let ret = java_method!(self.env, self.object, "searchDistance", "(F)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask$Builder#searchDistance was null") }
    entity_ai_task_builtin_creature_AvoidEntityAITask_Builder { env: self.env, object: ret }
  }

  pub fn close_range_speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_AvoidEntityAITask_Builder {
    let ret = java_method!(self.env, self.object, "closeRangeSpeed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask$Builder#closeRangeSpeed was null") }
    entity_ai_task_builtin_creature_AvoidEntityAITask_Builder { env: self.env, object: ret }
  }

  pub fn far_range_speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_AvoidEntityAITask_Builder {
    let ret = java_method!(self.env, self.object, "farRangeSpeed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask$Builder#farRangeSpeed was null") }
    entity_ai_task_builtin_creature_AvoidEntityAITask_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_AvoidEntityAITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_AvoidEntityAITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_AvoidEntityAITask {
      env: env,
      object: object
    }
  }

  pub fn get_target_selector(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTargetSelector", "()Ljava/util/function/Predicate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask#getTargetSelector was null") }
    ret
  }

  pub fn set_target_selector(&self, param_1: jobject) -> entity_ai_task_builtin_creature_AvoidEntityAITask {
    let ret = java_method!(self.env, self.object, "setTargetSelector", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask#setTargetSelector was null") }
    entity_ai_task_builtin_creature_AvoidEntityAITask { env: self.env, object: ret }
  }

  pub fn get_search_distance(&self) -> f32 {
    java_method!(self.env, self.object, "getSearchDistance", "()F", CallFloatMethod)
  }

  pub fn set_search_distance(&self, param_1: f32) -> entity_ai_task_builtin_creature_AvoidEntityAITask {
    let ret = java_method!(self.env, self.object, "setSearchDistance", "(F)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask#setSearchDistance was null") }
    entity_ai_task_builtin_creature_AvoidEntityAITask { env: self.env, object: ret }
  }

  pub fn get_close_range_speed(&self) -> f64 {
    java_method!(self.env, self.object, "getCloseRangeSpeed", "()D", CallDoubleMethod)
  }

  pub fn set_close_range_speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_AvoidEntityAITask {
    let ret = java_method!(self.env, self.object, "setCloseRangeSpeed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask#setCloseRangeSpeed was null") }
    entity_ai_task_builtin_creature_AvoidEntityAITask { env: self.env, object: ret }
  }

  pub fn get_far_range_speed(&self) -> f64 {
    java_method!(self.env, self.object, "getFarRangeSpeed", "()D", CallDoubleMethod)
  }

  pub fn set_far_range_speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_AvoidEntityAITask {
    let ret = java_method!(self.env, self.object, "setFarRangeSpeed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/AvoidEntityAITask#setFarRangeSpeed was null") }
    entity_ai_task_builtin_creature_AvoidEntityAITask { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask_Builder {
      env: env,
      object: object
    }
  }

  pub fn speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask_Builder {
    let ret = java_method!(self.env, self.object, "speed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/horse/RunAroundLikeCrazyAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/horse/RunAroundLikeCrazyAITask$Builder#speed was null") }
    entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask {
      env: env,
      object: object
    }
  }

  pub fn get_speed(&self) -> f64 {
    java_method!(self.env, self.object, "getSpeed", "()D", CallDoubleMethod)
  }

  pub fn set_speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask {
    let ret = java_method!(self.env, self.object, "setSpeed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/horse/RunAroundLikeCrazyAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/horse/RunAroundLikeCrazyAITask#setSpeed was null") }
    entity_ai_task_builtin_creature_horse_RunAroundLikeCrazyAITask { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask_Builder {
      env: env,
      object: object
    }
  }

  pub fn target(&self, param_1: jobject) -> entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask_Builder {
    let ret = java_method!(self.env, self.object, "target", "(Ljava/lang/Class;)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask$Builder#target was null") }
    entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask_Builder { env: self.env, object: ret }
  }

  pub fn chance(&self, param_1: i32) -> entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask_Builder {
    let ret = java_method!(self.env, self.object, "chance", "(I)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask$Builder#chance was null") }
    entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask_Builder { env: self.env, object: ret }
  }

  pub fn filter(&self, param_1: jobject) -> entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask_Builder {
    let ret = java_method!(self.env, self.object, "filter", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask$Builder#filter was null") }
    entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask {
      env: env,
      object: object
    }
  }

  pub fn get_target_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTargetClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask#getTargetClass was null") }
    ret
  }

  pub fn set_target_class(&self, param_1: jobject) -> entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask {
    let ret = java_method!(self.env, self.object, "setTargetClass", "(Ljava/lang/Class;)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask#setTargetClass was null") }
    entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask { env: self.env, object: ret }
  }

  pub fn get_chance(&self) -> i32 {
    java_method!(self.env, self.object, "getChance", "()I", CallIntMethod)
  }

  pub fn set_chance(&self, param_1: i32) -> entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask {
    let ret = java_method!(self.env, self.object, "setChance", "(I)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask#setChance was null") }
    entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask { env: self.env, object: ret }
  }

  pub fn filter(&self, param_1: jobject) -> entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask {
    let ret = java_method!(self.env, self.object, "filter", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask#filter was null") }
    entity_ai_task_builtin_creature_target_FindNearestAttackableTargetAITask { env: self.env, object: ret }
  }

  pub fn get_filter(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getFilter", "()Ljava/util/function/Predicate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/FindNearestAttackableTargetAITask#getFilter was null") }
    ret
  }

}


#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_target_TargetAITask_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_target_TargetAITask_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_target_TargetAITask_Builder {
      env: env,
      object: object
    }
  }

  pub fn check_sight(&self) -> entity_ai_task_builtin_creature_target_TargetAITask_Builder {
    let ret = java_method!(self.env, self.object, "checkSight", "()Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder#checkSight was null") }
    entity_ai_task_builtin_creature_target_TargetAITask_Builder { env: self.env, object: ret }
  }

  pub fn only_nearby(&self) -> entity_ai_task_builtin_creature_target_TargetAITask_Builder {
    let ret = java_method!(self.env, self.object, "onlyNearby", "()Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder#onlyNearby was null") }
    entity_ai_task_builtin_creature_target_TargetAITask_Builder { env: self.env, object: ret }
  }

  pub fn search_delay(&self, param_1: i32) -> entity_ai_task_builtin_creature_target_TargetAITask_Builder {
    let ret = java_method!(self.env, self.object, "searchDelay", "(I)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder#searchDelay was null") }
    entity_ai_task_builtin_creature_target_TargetAITask_Builder { env: self.env, object: ret }
  }

  pub fn interrupt_target_unseen_ticks(&self, param_1: i32) -> entity_ai_task_builtin_creature_target_TargetAITask_Builder {
    let ret = java_method!(self.env, self.object, "interruptTargetUnseenTicks", "(I)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder#interruptTargetUnseenTicks was null") }
    entity_ai_task_builtin_creature_target_TargetAITask_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> entity_ai_task_builtin_creature_target_TargetAITask_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder#reset was null") }
    entity_ai_task_builtin_creature_target_TargetAITask_Builder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_target_TargetAITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_target_TargetAITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_target_TargetAITask {
      env: env,
      object: object
    }
  }

  pub fn should_check_sight(&self) -> bool {
    java_method!(self.env, self.object, "shouldCheckSight", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_check_sight(&self, param_1: bool) -> entity_ai_task_builtin_creature_target_TargetAITask {
    let ret = java_method!(self.env, self.object, "setCheckSight", "(Z)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask#setCheckSight was null") }
    entity_ai_task_builtin_creature_target_TargetAITask { env: self.env, object: ret }
  }

  pub fn only_nearby(&self) -> bool {
    java_method!(self.env, self.object, "onlyNearby", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_only_nearby(&self, param_1: bool) -> entity_ai_task_builtin_creature_target_TargetAITask {
    let ret = java_method!(self.env, self.object, "setOnlyNearby", "(Z)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask#setOnlyNearby was null") }
    entity_ai_task_builtin_creature_target_TargetAITask { env: self.env, object: ret }
  }

  pub fn get_search_status(&self) -> i32 {
    java_method!(self.env, self.object, "getSearchStatus", "()I", CallIntMethod)
  }

  pub fn set_search_status(&self, param_1: i32) -> entity_ai_task_builtin_creature_target_TargetAITask {
    let ret = java_method!(self.env, self.object, "setSearchStatus", "(I)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask#setSearchStatus was null") }
    entity_ai_task_builtin_creature_target_TargetAITask { env: self.env, object: ret }
  }

  pub fn get_search_delay(&self) -> i32 {
    java_method!(self.env, self.object, "getSearchDelay", "()I", CallIntMethod)
  }

  pub fn set_search_delay(&self, param_1: i32) -> entity_ai_task_builtin_creature_target_TargetAITask {
    let ret = java_method!(self.env, self.object, "setSearchDelay", "(I)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask#setSearchDelay was null") }
    entity_ai_task_builtin_creature_target_TargetAITask { env: self.env, object: ret }
  }

  pub fn get_interrupt_if_target_unseen_ticks(&self) -> i32 {
    java_method!(self.env, self.object, "getInterruptIfTargetUnseenTicks", "()I", CallIntMethod)
  }

  pub fn set_interrupt_if_target_unseen_ticks(&self, param_1: i32) -> entity_ai_task_builtin_creature_target_TargetAITask {
    let ret = java_method!(self.env, self.object, "setInterruptIfTargetUnseenTicks", "(I)Lorg/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/target/TargetAITask#setInterruptIfTargetUnseenTicks was null") }
    entity_ai_task_builtin_creature_target_TargetAITask { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_WanderAITask_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_WanderAITask_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_WanderAITask_Builder {
      env: env,
      object: object
    }
  }

  pub fn speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_WanderAITask_Builder {
    let ret = java_method!(self.env, self.object, "speed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WanderAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WanderAITask$Builder#speed was null") }
    entity_ai_task_builtin_creature_WanderAITask_Builder { env: self.env, object: ret }
  }

  pub fn execution_chance(&self, param_1: i32) -> entity_ai_task_builtin_creature_WanderAITask_Builder {
    let ret = java_method!(self.env, self.object, "executionChance", "(I)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WanderAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WanderAITask$Builder#executionChance was null") }
    entity_ai_task_builtin_creature_WanderAITask_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_WanderAITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_WanderAITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_WanderAITask {
      env: env,
      object: object
    }
  }

  pub fn get_speed(&self) -> f64 {
    java_method!(self.env, self.object, "getSpeed", "()D", CallDoubleMethod)
  }

  pub fn set_speed(&self, param_1: f64) -> entity_ai_task_builtin_creature_WanderAITask {
    let ret = java_method!(self.env, self.object, "setSpeed", "(D)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WanderAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WanderAITask#setSpeed was null") }
    entity_ai_task_builtin_creature_WanderAITask { env: self.env, object: ret }
  }

  pub fn get_execution_chance(&self) -> i32 {
    java_method!(self.env, self.object, "getExecutionChance", "()I", CallIntMethod)
  }

  pub fn set_execution_chance(&self, param_1: i32) -> entity_ai_task_builtin_creature_WanderAITask {
    let ret = java_method!(self.env, self.object, "setExecutionChance", "(I)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WanderAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WanderAITask#setExecutionChance was null") }
    entity_ai_task_builtin_creature_WanderAITask { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_WatchClosestAITask_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_WatchClosestAITask_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_WatchClosestAITask_Builder {
      env: env,
      object: object
    }
  }

  pub fn watch(&self, param_1: jobject) -> entity_ai_task_builtin_creature_WatchClosestAITask_Builder {
    let ret = java_method!(self.env, self.object, "watch", "(Ljava/lang/Class;)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask$Builder#watch was null") }
    entity_ai_task_builtin_creature_WatchClosestAITask_Builder { env: self.env, object: ret }
  }

  pub fn max_distance(&self, param_1: f32) -> entity_ai_task_builtin_creature_WatchClosestAITask_Builder {
    let ret = java_method!(self.env, self.object, "maxDistance", "(F)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask$Builder#maxDistance was null") }
    entity_ai_task_builtin_creature_WatchClosestAITask_Builder { env: self.env, object: ret }
  }

  pub fn chance(&self, param_1: f32) -> entity_ai_task_builtin_creature_WatchClosestAITask_Builder {
    let ret = java_method!(self.env, self.object, "chance", "(F)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask$Builder#chance was null") }
    entity_ai_task_builtin_creature_WatchClosestAITask_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_creature_WatchClosestAITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_creature_WatchClosestAITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_creature_WatchClosestAITask {
      env: env,
      object: object
    }
  }

  pub fn get_watched_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getWatchedClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask#getWatchedClass was null") }
    ret
  }

  pub fn set_watched_class(&self, param_1: jobject) -> entity_ai_task_builtin_creature_WatchClosestAITask {
    let ret = java_method!(self.env, self.object, "setWatchedClass", "(Ljava/lang/Class;)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask#setWatchedClass was null") }
    entity_ai_task_builtin_creature_WatchClosestAITask { env: self.env, object: ret }
  }

  pub fn get_max_distance(&self) -> f32 {
    java_method!(self.env, self.object, "getMaxDistance", "()F", CallFloatMethod)
  }

  pub fn set_max_distance(&self, param_1: f32) -> entity_ai_task_builtin_creature_WatchClosestAITask {
    let ret = java_method!(self.env, self.object, "setMaxDistance", "(F)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask#setMaxDistance was null") }
    entity_ai_task_builtin_creature_WatchClosestAITask { env: self.env, object: ret }
  }

  pub fn get_chance(&self) -> f32 {
    java_method!(self.env, self.object, "getChance", "()F", CallFloatMethod)
  }

  pub fn set_chance(&self, param_1: f32) -> entity_ai_task_builtin_creature_WatchClosestAITask {
    let ret = java_method!(self.env, self.object, "setChance", "(F)Lorg/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/creature/WatchClosestAITask#setChance was null") }
    entity_ai_task_builtin_creature_WatchClosestAITask { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_ai_task_builtin_SwimmingAITask_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_SwimmingAITask_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_SwimmingAITask_Builder {
      env: env,
      object: object
    }
  }

  pub fn swim_chance(&self, param_1: f32) -> entity_ai_task_builtin_SwimmingAITask_Builder {
    let ret = java_method!(self.env, self.object, "swimChance", "(F)Lorg/spongepowered/api/entity/ai/task/builtin/SwimmingAITask$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ai/task/builtin/SwimmingAITask$Builder#swimChance was null") }
    entity_ai_task_builtin_SwimmingAITask_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ai_task_builtin_SwimmingAITask {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ai_task_builtin_SwimmingAITask {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ai_task_builtin_SwimmingAITask {
      env: env,
      object: object
    }
  }

  pub fn get_swim_chance(&self) -> f32 {
    java_method!(self.env, self.object, "getSwimChance", "()F", CallFloatMethod)
  }

  pub fn set_swim_chance(&self, param_1: f32) {
    java_method!(self.env, self.object, "setSwimChance", "(F)V", CallVoidMethodA, param_1);
  }

}


#[derive(Debug)]
pub struct entity_AreaEffectCloud {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_AreaEffectCloud {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_AreaEffectCloud {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_ArmorEquipable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ArmorEquipable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ArmorEquipable {
      env: env,
      object: object
    }
  }

  pub fn get_helmet(&self) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "getHelmet", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ArmorEquipable#getHelmet was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn set_helmet(&self, param_1: item_inventory_ItemStack) {
    java_method!(self.env, self.object, "setHelmet", "(Lorg/spongepowered/api/item/inventory/ItemStack;)V", CallVoidMethodA, param_1);
  }

  pub fn get_chestplate(&self) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "getChestplate", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ArmorEquipable#getChestplate was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn set_chestplate(&self, param_1: item_inventory_ItemStack) {
    java_method!(self.env, self.object, "setChestplate", "(Lorg/spongepowered/api/item/inventory/ItemStack;)V", CallVoidMethodA, param_1);
  }

  pub fn get_leggings(&self) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "getLeggings", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ArmorEquipable#getLeggings was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn set_leggings(&self, param_1: item_inventory_ItemStack) {
    java_method!(self.env, self.object, "setLeggings", "(Lorg/spongepowered/api/item/inventory/ItemStack;)V", CallVoidMethodA, param_1);
  }

  pub fn get_boots(&self) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "getBoots", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ArmorEquipable#getBoots was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn set_boots(&self, param_1: item_inventory_ItemStack) {
    java_method!(self.env, self.object, "setBoots", "(Lorg/spongepowered/api/item/inventory/ItemStack;)V", CallVoidMethodA, param_1);
  }

  pub fn get_item_in_hand(&self, param_1: data_type_HandType) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "getItemInHand", "(Lorg/spongepowered/api/data/type/HandType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ArmorEquipable#getItemInHand was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn set_item_in_hand(&self, param_1: data_type_HandType, param_2: item_inventory_ItemStack) {
    java_method!(self.env, self.object, "setItemInHand", "(Lorg/spongepowered/api/data/type/HandType;Lorg/spongepowered/api/item/inventory/ItemStack;)V", CallVoidMethodA, param_1, param_2);
  }

}

#[derive(Debug)]
pub struct entity_EnderCrystal {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_EnderCrystal {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_EnderCrystal {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_Entity {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_Entity {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_Entity {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> entity_EntityType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/entity/EntityType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getType was null") }
    entity_EntityType { env: self.env, object: ret }
  }

  pub fn create_snapshot(&self) -> entity_EntitySnapshot {
    let ret = java_method!(self.env, self.object, "createSnapshot", "()Lorg/spongepowered/api/entity/EntitySnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#createSnapshot was null") }
    entity_EntitySnapshot { env: self.env, object: ret }
  }

  pub fn get_random(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRandom", "()Ljava/util/Random;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getRandom was null") }
    ret
  }

  pub fn set_location(&self, param_1: world_Location) -> bool {
    java_method!(self.env, self.object, "setLocation", "(Lorg/spongepowered/api/world/Location;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn set_location_safely(&self, param_1: world_Location) -> bool {
    java_method!(self.env, self.object, "setLocationSafely", "(Lorg/spongepowered/api/world/Location;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_rotation(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRotation", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getRotation was null") }
    ret
  }

  pub fn set_rotation(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setRotation", "(Lcom/flowpowered/math/vector/Vector3d;)V", CallVoidMethodA, param_1);
  }

  pub fn set_location_and_rotation(&self, param_1: world_Location, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "setLocationAndRotation", "(Lorg/spongepowered/api/world/Location;Lcom/flowpowered/math/vector/Vector3d;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn set_location_and_rotation_safely(&self, param_1: world_Location, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "setLocationAndRotationSafely", "(Lorg/spongepowered/api/world/Location;Lcom/flowpowered/math/vector/Vector3d;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn set_location_and_rotation_1(&self, param_1: world_Location, param_2: jobject, param_3: jobject) -> bool {
    java_method!(self.env, self.object, "setLocationAndRotation", "(Lorg/spongepowered/api/world/Location;Lcom/flowpowered/math/vector/Vector3d;Ljava/util/EnumSet;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn set_location_and_rotation_safely_1(&self, param_1: world_Location, param_2: jobject, param_3: jobject) -> bool {
    java_method!(self.env, self.object, "setLocationAndRotationSafely", "(Lorg/spongepowered/api/world/Location;Lcom/flowpowered/math/vector/Vector3d;Ljava/util/EnumSet;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn get_scale(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getScale", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getScale was null") }
    ret
  }

  pub fn set_scale(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setScale", "(Lcom/flowpowered/math/vector/Vector3d;)V", CallVoidMethodA, param_1);
  }

  pub fn get_transform(&self) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "getTransform", "()Lorg/spongepowered/api/entity/Transform;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getTransform was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn set_transform(&self, param_1: entity_Transform) -> bool {
    java_method!(self.env, self.object, "setTransform", "(Lorg/spongepowered/api/entity/Transform;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn transfer_to_world(&self, param_1: world_World) -> bool {
    java_method!(self.env, self.object, "transferToWorld", "(Lorg/spongepowered/api/world/World;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn transfer_to_world_1(&self, param_1: world_World, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "transferToWorld", "(Lorg/spongepowered/api/world/World;Lcom/flowpowered/math/vector/Vector3d;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn transfer_to_world_2(&self, param_1: jobject, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "transferToWorld", "(Ljava/lang/String;Lcom/flowpowered/math/vector/Vector3d;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn transfer_to_world_3(&self, param_1: jobject, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "transferToWorld", "(Ljava/util/UUID;Lcom/flowpowered/math/vector/Vector3d;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn get_bounding_box(&self) -> Option<util_AABB> {
    let ret = java_method!(self.env, self.object, "getBoundingBox", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getBoundingBox was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_AABB { env: self.env, object: unwrapped }) }
  }

  pub fn get_passengers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPassengers", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getPassengers was null") }
    ret
  }

  pub fn add_passenger(&self, param_1: entity_Entity) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "addPassenger", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#addPassenger was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove_passenger(&self, param_1: entity_Entity) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "removePassenger", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#removePassenger was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn clear_passengers(&self) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "clearPassengers", "()Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#clearPassengers was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn get_vehicle(&self) -> Option<entity_Entity> {
    let ret = java_method!(self.env, self.object, "getVehicle", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getVehicle was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Entity { env: self.env, object: unwrapped }) }
  }

  pub fn set_vehicle(&self, param_1: entity_Entity) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "setVehicle", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#setVehicle was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn get_base_vehicle(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getBaseVehicle", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getBaseVehicle was null") }
    entity_Entity { env: self.env, object: ret }
  }

  pub fn get_velocity(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getVelocity", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getVelocity was null") }
    ret
  }

  pub fn set_velocity(&self, param_1: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "setVelocity", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#setVelocity was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn is_on_ground(&self) -> bool {
    java_method!(self.env, self.object, "isOnGround", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_removed(&self) -> bool {
    java_method!(self.env, self.object, "isRemoved", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_loaded(&self) -> bool {
    java_method!(self.env, self.object, "isLoaded", "()Z", CallBooleanMethod) == 1
  }

  pub fn remove(&self) {
    java_method!(self.env, self.object, "remove", "()V", CallVoidMethod);
  }

  pub fn damage(&self, param_1: f64, param_2: event_cause_entity_damage_source_DamageSource) -> bool {
    java_method!(self.env, self.object, "damage", "(DLorg/spongepowered/api/event/cause/entity/damage/source/DamageSource;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn damage_1(&self, param_1: f64, param_2: event_cause_entity_damage_source_DamageSource, param_3: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "damage", "(DLorg/spongepowered/api/event/cause/entity/damage/source/DamageSource;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn get_nearby_entities(&self, param_1: f64) -> jobject {
    let ret = java_method!(self.env, self.object, "getNearbyEntities", "(D)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getNearbyEntities was null") }
    ret
  }

  pub fn get_nearby_entities_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getNearbyEntities", "(Ljava/util/function/Predicate;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getNearbyEntities was null") }
    ret
  }

  pub fn get_creator(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCreator", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getCreator was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_notifier(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getNotifier", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Entity#getNotifier was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set_creator(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setCreator", "(Ljava/util/UUID;)V", CallVoidMethodA, param_1);
  }

  pub fn set_notifier(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setNotifier", "(Ljava/util/UUID;)V", CallVoidMethodA, param_1);
  }

  pub fn can_see(&self, param_1: entity_Entity) -> bool {
    java_method!(self.env, self.object, "canSee", "(Lorg/spongepowered/api/entity/Entity;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct entity_EntitySnapshot_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_EntitySnapshot_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_EntitySnapshot_Builder {
      env: env,
      object: object
    }
  }

  pub fn world(&self, param_1: world_storage_WorldProperties) -> entity_EntitySnapshot_Builder {
    let ret = java_method!(self.env, self.object, "world", "(Lorg/spongepowered/api/world/storage/WorldProperties;)Lorg/spongepowered/api/entity/EntitySnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntitySnapshot$Builder#world was null") }
    entity_EntitySnapshot_Builder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: entity_EntityType) -> entity_EntitySnapshot_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/entity/EntityType;)Lorg/spongepowered/api/entity/EntitySnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntitySnapshot$Builder#type was null") }
    entity_EntitySnapshot_Builder { env: self.env, object: ret }
  }

  pub fn position(&self, param_1: jobject) -> entity_EntitySnapshot_Builder {
    let ret = java_method!(self.env, self.object, "position", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/EntitySnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntitySnapshot$Builder#position was null") }
    entity_EntitySnapshot_Builder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: entity_Entity) -> entity_EntitySnapshot_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/entity/EntitySnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntitySnapshot$Builder#from was null") }
    entity_EntitySnapshot_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_EntitySnapshot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_EntitySnapshot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_EntitySnapshot {
      env: env,
      object: object
    }
  }

  pub fn builder() -> entity_EntitySnapshot_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/entity/EntitySnapshot$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntitySnapshot#builder was null") }
    entity_EntitySnapshot_Builder { env: self.env, object: ret }
  }

  pub fn get_unique_id(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getUniqueId", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntitySnapshot#getUniqueId was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_transform(&self) -> Option<entity_Transform> {
    let ret = java_method!(self.env, self.object, "getTransform", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntitySnapshot#getTransform was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Transform { env: self.env, object: unwrapped }) }
  }

  pub fn get_type(&self) -> entity_EntityType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/entity/EntityType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntitySnapshot#getType was null") }
    entity_EntityType { env: self.env, object: ret }
  }

  pub fn restore(&self) -> Option<entity_Entity> {
    let ret = java_method!(self.env, self.object, "restore", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntitySnapshot#restore was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Entity { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct entity_EntityType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_EntityType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_EntityType {
      env: env,
      object: object
    }
  }

  pub fn get_entity_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getEntityClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/EntityType#getEntityClass was null") }
    ret
  }

}

#[derive(Debug)]
pub struct entity_EntityTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_EntityTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_EntityTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_Equipable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_Equipable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_Equipable {
      env: env,
      object: object
    }
  }

  pub fn can_equip(&self, param_1: item_inventory_equipment_EquipmentType) -> bool {
    java_method!(self.env, self.object, "canEquip", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn can_equip_1(&self, param_1: item_inventory_equipment_EquipmentType, param_2: item_inventory_ItemStack) -> bool {
    java_method!(self.env, self.object, "canEquip", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;Lorg/spongepowered/api/item/inventory/ItemStack;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn get_equipped(&self, param_1: item_inventory_equipment_EquipmentType) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "getEquipped", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Equipable#getEquipped was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn equip(&self, param_1: item_inventory_equipment_EquipmentType, param_2: item_inventory_ItemStack) -> bool {
    java_method!(self.env, self.object, "equip", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;Lorg/spongepowered/api/item/inventory/ItemStack;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

}

#[derive(Debug)]
pub struct entity_ExperienceOrb {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ExperienceOrb {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ExperienceOrb {
      env: env,
      object: object
    }
  }

  pub fn experience_held(&self) -> data_manipulator_mutable_entity_ExpOrbData {
    let ret = java_method!(self.env, self.object, "experienceHeld", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/ExpOrbData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ExperienceOrb#experienceHeld was null") }
    data_manipulator_mutable_entity_ExpOrbData { env: self.env, object: ret }
  }

  pub fn experience(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "experience", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/ExperienceOrb#experience was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_explosive_Explosive {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_explosive_Explosive {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_explosive_Explosive {
      env: env,
      object: object
    }
  }

  pub fn get_explosion_radius_data(&self) -> data_manipulator_mutable_entity_ExplosionRadiusData {
    let ret = java_method!(self.env, self.object, "getExplosionRadiusData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/ExplosionRadiusData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/explosive/Explosive#getExplosionRadiusData was null") }
    data_manipulator_mutable_entity_ExplosionRadiusData { env: self.env, object: ret }
  }

  pub fn explosion_radius(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "explosionRadius", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/explosive/Explosive#explosionRadius was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn detonate(&self, param_1: event_cause_Cause) {
    java_method!(self.env, self.object, "detonate", "(Lorg/spongepowered/api/event/cause/Cause;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct entity_explosive_FusedExplosive {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_explosive_FusedExplosive {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_explosive_FusedExplosive {
      env: env,
      object: object
    }
  }

  pub fn get_fuse_data(&self) -> data_manipulator_mutable_entity_FuseData {
    let ret = java_method!(self.env, self.object, "getFuseData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/FuseData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/explosive/FusedExplosive#getFuseData was null") }
    data_manipulator_mutable_entity_FuseData { env: self.env, object: ret }
  }

  pub fn is_primed(&self) -> bool {
    java_method!(self.env, self.object, "isPrimed", "()Z", CallBooleanMethod) == 1
  }

  pub fn prime(&self, param_1: event_cause_Cause) {
    java_method!(self.env, self.object, "prime", "(Lorg/spongepowered/api/event/cause/Cause;)V", CallVoidMethodA, param_1);
  }

  pub fn defuse(&self, param_1: event_cause_Cause) {
    java_method!(self.env, self.object, "defuse", "(Lorg/spongepowered/api/event/cause/Cause;)V", CallVoidMethodA, param_1);
  }

}


#[derive(Debug)]
pub struct entity_explosive_PrimedTNT {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_explosive_PrimedTNT {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_explosive_PrimedTNT {
      env: env,
      object: object
    }
  }

  pub fn get_detonator(&self) -> Option<entity_living_Living> {
    let ret = java_method!(self.env, self.object, "getDetonator", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/explosive/PrimedTNT#getDetonator was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_Living { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct entity_FallingBlock {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_FallingBlock {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_FallingBlock {
      env: env,
      object: object
    }
  }

  pub fn get_falling_block_data(&self) -> data_manipulator_mutable_entity_FallingBlockData {
    let ret = java_method!(self.env, self.object, "getFallingBlockData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/FallingBlockData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/FallingBlock#getFallingBlockData was null") }
    data_manipulator_mutable_entity_FallingBlockData { env: self.env, object: ret }
  }

  pub fn fall_damage_per_block(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "fallDamagePerBlock", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/FallingBlock#fallDamagePerBlock was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn max_fall_damage(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "maxFallDamage", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/FallingBlock#maxFallDamage was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn block_state(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "blockState", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/FallingBlock#blockState was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn can_place_as_block(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "canPlaceAsBlock", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/FallingBlock#canPlaceAsBlock was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn can_drop_as_item(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "canDropAsItem", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/FallingBlock#canDropAsItem was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn fall_time(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "fallTime", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/FallingBlock#fallTime was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn can_hurt_entities(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "canHurtEntities", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/FallingBlock#canHurtEntities was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_hanging_Hanging {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_hanging_Hanging {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_hanging_Hanging {
      env: env,
      object: object
    }
  }

  pub fn get_directional_data(&self) -> data_manipulator_mutable_block_DirectionalData {
    let ret = java_method!(self.env, self.object, "getDirectionalData", "()Lorg/spongepowered/api/data/manipulator/mutable/block/DirectionalData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/hanging/Hanging#getDirectionalData was null") }
    data_manipulator_mutable_block_DirectionalData { env: self.env, object: ret }
  }

  pub fn direction(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "direction", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/hanging/Hanging#direction was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_hanging_ItemFrame {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_hanging_ItemFrame {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_hanging_ItemFrame {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_hanging_LeashHitch {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_hanging_LeashHitch {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_hanging_LeashHitch {
      env: env,
      object: object
    }
  }

  pub fn get_leashed_entity(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getLeashedEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/hanging/LeashHitch#getLeashedEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_hanging_Painting {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_hanging_Painting {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_hanging_Painting {
      env: env,
      object: object
    }
  }

  pub fn get_art_data(&self) -> data_manipulator_mutable_entity_ArtData {
    let ret = java_method!(self.env, self.object, "getArtData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/ArtData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/hanging/Painting#getArtData was null") }
    data_manipulator_mutable_entity_ArtData { env: self.env, object: ret }
  }

  pub fn art(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "art", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/hanging/Painting#art was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_Item {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_Item {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_Item {
      env: env,
      object: object
    }
  }

  pub fn get_item_data(&self) -> data_manipulator_mutable_RepresentedItemData {
    let ret = java_method!(self.env, self.object, "getItemData", "()Lorg/spongepowered/api/data/manipulator/mutable/RepresentedItemData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Item#getItemData was null") }
    data_manipulator_mutable_RepresentedItemData { env: self.env, object: ret }
  }

  pub fn item(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "item", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Item#item was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn get_item_type(&self) -> item_ItemType {
    let ret = java_method!(self.env, self.object, "getItemType", "()Lorg/spongepowered/api/item/ItemType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Item#getItemType was null") }
    item_ItemType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_Aerial {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Aerial {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Aerial {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_Ageable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Ageable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Ageable {
      env: env,
      object: object
    }
  }

  pub fn set_scale_for_age(&self) {
    java_method!(self.env, self.object, "setScaleForAge", "()V", CallVoidMethod);
  }

  pub fn get_age_data(&self) -> data_manipulator_mutable_entity_AgeableData {
    let ret = java_method!(self.env, self.object, "getAgeData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/AgeableData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Ageable#getAgeData was null") }
    data_manipulator_mutable_entity_AgeableData { env: self.env, object: ret }
  }

  pub fn age(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "age", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Ageable#age was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_Agent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Agent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Agent {
      env: env,
      object: object
    }
  }

  pub fn get_target(&self) -> Option<entity_Entity> {
    let ret = java_method!(self.env, self.object, "getTarget", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Agent#getTarget was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Entity { env: self.env, object: unwrapped }) }
  }

  pub fn set_target(&self, param_1: entity_Entity) {
    java_method!(self.env, self.object, "setTarget", "(Lorg/spongepowered/api/entity/Entity;)V", CallVoidMethodA, param_1);
  }

  pub fn get_agent_data(&self) -> data_manipulator_mutable_entity_AgentData {
    let ret = java_method!(self.env, self.object, "getAgentData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/AgentData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Agent#getAgentData was null") }
    data_manipulator_mutable_entity_AgentData { env: self.env, object: ret }
  }

  pub fn ai_enabled(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "aiEnabled", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Agent#aiEnabled was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn get_goal(&self, param_1: entity_ai_GoalType) -> Option<entity_ai_Goal> {
    let ret = java_method!(self.env, self.object, "getGoal", "(Lorg/spongepowered/api/entity/ai/GoalType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Agent#getGoal was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_ai_Goal { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct entity_living_Ambient {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Ambient {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Ambient {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_Animal {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Animal {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Animal {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_Chicken {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Chicken {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Chicken {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_Cow {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Cow {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Cow {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_Horse {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Horse {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Horse {
      env: env,
      object: object
    }
  }

  pub fn get_horse_data(&self) -> data_manipulator_mutable_entity_HorseData {
    let ret = java_method!(self.env, self.object, "getHorseData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/HorseData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Horse#getHorseData was null") }
    data_manipulator_mutable_entity_HorseData { env: self.env, object: ret }
  }

  pub fn variant(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "variant", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Horse#variant was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn style(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "style", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Horse#style was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn color(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "color", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Horse#color was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_Mooshroom {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Mooshroom {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Mooshroom {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_Ocelot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Ocelot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Ocelot {
      env: env,
      object: object
    }
  }

  pub fn get_ocelot_data(&self) -> data_manipulator_mutable_entity_OcelotData {
    let ret = java_method!(self.env, self.object, "getOcelotData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/OcelotData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Ocelot#getOcelotData was null") }
    data_manipulator_mutable_entity_OcelotData { env: self.env, object: ret }
  }

  pub fn variant(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "variant", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Ocelot#variant was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_living_animal_Pig {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Pig {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Pig {
      env: env,
      object: object
    }
  }

  pub fn get_pig_saddle_data(&self) -> data_manipulator_mutable_entity_PigSaddleData {
    let ret = java_method!(self.env, self.object, "getPigSaddleData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/PigSaddleData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Pig#getPigSaddleData was null") }
    data_manipulator_mutable_entity_PigSaddleData { env: self.env, object: ret }
  }

  pub fn saddled(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "saddled", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Pig#saddled was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_PolarBear {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_PolarBear {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_PolarBear {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_Rabbit {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Rabbit {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Rabbit {
      env: env,
      object: object
    }
  }

  pub fn get_rabbit_data(&self) -> data_manipulator_mutable_entity_RabbitData {
    let ret = java_method!(self.env, self.object, "getRabbitData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/RabbitData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Rabbit#getRabbitData was null") }
    data_manipulator_mutable_entity_RabbitData { env: self.env, object: ret }
  }

  pub fn variant(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "variant", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Rabbit#variant was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_Sheep {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Sheep {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Sheep {
      env: env,
      object: object
    }
  }

  pub fn get_dye_data(&self) -> data_manipulator_mutable_DyeableData {
    let ret = java_method!(self.env, self.object, "getDyeData", "()Lorg/spongepowered/api/data/manipulator/mutable/DyeableData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Sheep#getDyeData was null") }
    data_manipulator_mutable_DyeableData { env: self.env, object: ret }
  }

  pub fn color(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "color", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/animal/Sheep#color was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_animal_Wolf {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_animal_Wolf {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_animal_Wolf {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_Aquatic {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Aquatic {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Aquatic {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_ArmorStand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_ArmorStand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_ArmorStand {
      env: env,
      object: object
    }
  }

  pub fn get_body_part_rotational_data(&self) -> data_manipulator_mutable_entity_BodyPartRotationalData {
    let ret = java_method!(self.env, self.object, "getBodyPartRotationalData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/BodyPartRotationalData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/ArmorStand#getBodyPartRotationalData was null") }
    data_manipulator_mutable_entity_BodyPartRotationalData { env: self.env, object: ret }
  }

  pub fn marker(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "marker", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/ArmorStand#marker was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn small(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "small", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/ArmorStand#small was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn base_plate(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "basePlate", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/ArmorStand#basePlate was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn arms(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "arms", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/ArmorStand#arms was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn gravity(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "gravity", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/ArmorStand#gravity was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn get_armor_stand_data(&self) -> data_manipulator_mutable_entity_ArmorStandData {
    let ret = java_method!(self.env, self.object, "getArmorStandData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/ArmorStandData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/ArmorStand#getArmorStandData was null") }
    data_manipulator_mutable_entity_ArmorStandData { env: self.env, object: ret }
  }

  pub fn is_small(&self) -> bool {
    java_method!(self.env, self.object, "isSmall", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_small(&self, param_1: bool) {
    java_method!(self.env, self.object, "setSmall", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn has_gravity(&self) -> bool {
    java_method!(self.env, self.object, "hasGravity", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_gravity(&self, param_1: bool) {
    java_method!(self.env, self.object, "setGravity", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn does_show_arms(&self) -> bool {
    java_method!(self.env, self.object, "doesShowArms", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_show_arms(&self, param_1: bool) {
    java_method!(self.env, self.object, "setShowArms", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn has_base_plate(&self) -> bool {
    java_method!(self.env, self.object, "hasBasePlate", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_has_base_plate(&self, param_1: bool) {
    java_method!(self.env, self.object, "setHasBasePlate", "(Z)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct entity_living_Bat {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Bat {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Bat {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_complex_ComplexLiving {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_complex_ComplexLiving {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_complex_ComplexLiving {
      env: env,
      object: object
    }
  }

  pub fn get_parts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getParts", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/complex/ComplexLiving#getParts was null") }
    ret
  }

}

#[derive(Debug)]
pub struct entity_living_complex_ComplexLivingPart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_complex_ComplexLivingPart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_complex_ComplexLivingPart {
      env: env,
      object: object
    }
  }

  pub fn get_parent(&self) -> entity_living_complex_ComplexLiving {
    let ret = java_method!(self.env, self.object, "getParent", "()Lorg/spongepowered/api/entity/living/complex/ComplexLiving;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/complex/ComplexLivingPart#getParent was null") }
    entity_living_complex_ComplexLiving { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_complex_EnderDragon {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_complex_EnderDragon {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_complex_EnderDragon {
      env: env,
      object: object
    }
  }

  pub fn get_parts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getParts", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/complex/EnderDragon#getParts was null") }
    ret
  }

  pub fn get_healing_crystal(&self) -> Option<entity_EnderCrystal> {
    let ret = java_method!(self.env, self.object, "getHealingCrystal", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/complex/EnderDragon#getHealingCrystal was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_EnderCrystal { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct entity_living_complex_EnderDragonPart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_complex_EnderDragonPart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_complex_EnderDragonPart {
      env: env,
      object: object
    }
  }

  pub fn get_parent(&self) -> entity_living_complex_EnderDragon {
    let ret = java_method!(self.env, self.object, "getParent", "()Lorg/spongepowered/api/entity/living/complex/EnderDragon;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/complex/EnderDragonPart#getParent was null") }
    entity_living_complex_EnderDragon { env: self.env, object: ret }
  }

  pub fn get_parent_1(&self) -> entity_living_complex_ComplexLiving {
    let ret = java_method!(self.env, self.object, "getParent", "()Lorg/spongepowered/api/entity/living/complex/ComplexLiving;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/complex/EnderDragonPart#getParent was null") }
    entity_living_complex_ComplexLiving { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_living_Creature {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Creature {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Creature {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_golem_Golem {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_golem_Golem {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_golem_Golem {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_golem_IronGolem {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_golem_IronGolem {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_golem_IronGolem {
      env: env,
      object: object
    }
  }

  pub fn player_created(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "playerCreated", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/golem/IronGolem#playerCreated was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_living_golem_Shulker {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_golem_Shulker {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_golem_Shulker {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_golem_SnowGolem {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_golem_SnowGolem {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_golem_SnowGolem {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_Hostile {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Hostile {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Hostile {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_Human {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Human {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Human {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_Humanoid {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Humanoid {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Humanoid {
      env: env,
      object: object
    }
  }

  pub fn get_food_data(&self) -> data_manipulator_mutable_entity_FoodData {
    let ret = java_method!(self.env, self.object, "getFoodData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/FoodData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Humanoid#getFoodData was null") }
    data_manipulator_mutable_entity_FoodData { env: self.env, object: ret }
  }

  pub fn food_level(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "foodLevel", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Humanoid#foodLevel was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn exhaustion(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "exhaustion", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Humanoid#exhaustion was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn saturation(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "saturation", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Humanoid#saturation was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_Living {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Living {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Living {
      env: env,
      object: object
    }
  }

  pub fn get_health_data(&self) -> data_manipulator_mutable_entity_HealthData {
    let ret = java_method!(self.env, self.object, "getHealthData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/HealthData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Living#getHealthData was null") }
    data_manipulator_mutable_entity_HealthData { env: self.env, object: ret }
  }

  pub fn health(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "health", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Living#health was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn max_health(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "maxHealth", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Living#maxHealth was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn get_mortal_data(&self) -> data_manipulator_mutable_entity_DamageableData {
    let ret = java_method!(self.env, self.object, "getMortalData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/DamageableData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Living#getMortalData was null") }
    data_manipulator_mutable_entity_DamageableData { env: self.env, object: ret }
  }

  pub fn last_attacker(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "lastAttacker", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Living#lastAttacker was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn last_damage(&self) -> data_value_mutable_OptionalValue {
    let ret = java_method!(self.env, self.object, "lastDamage", "()Lorg/spongepowered/api/data/value/mutable/OptionalValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Living#lastDamage was null") }
    data_value_mutable_OptionalValue { env: self.env, object: ret }
  }

  pub fn get_head_rotation(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getHeadRotation", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Living#getHeadRotation was null") }
    ret
  }

  pub fn set_head_rotation(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setHeadRotation", "(Lcom/flowpowered/math/vector/Vector3d;)V", CallVoidMethodA, param_1);
  }

  pub fn look_at(&self, param_1: jobject) {
    java_method!(self.env, self.object, "lookAt", "(Lcom/flowpowered/math/vector/Vector3d;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Blaze {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Blaze {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Blaze {
      env: env,
      object: object
    }
  }

  pub fn aflame(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "aflame", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Blaze#aflame was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Boss {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Boss {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Boss {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_CaveSpider {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_CaveSpider {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_CaveSpider {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Creeper {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Creeper {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Creeper {
      env: env,
      object: object
    }
  }

  pub fn charged(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "charged", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Creeper#charged was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Enderman {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Enderman {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Enderman {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Endermite {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Endermite {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Endermite {
      env: env,
      object: object
    }
  }

  pub fn get_expirable_data(&self) -> data_manipulator_mutable_entity_ExpirableData {
    let ret = java_method!(self.env, self.object, "getExpirableData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/ExpirableData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Endermite#getExpirableData was null") }
    data_manipulator_mutable_entity_ExpirableData { env: self.env, object: ret }
  }

  pub fn expire_ticks(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "expireTicks", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Endermite#expireTicks was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Ghast {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Ghast {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Ghast {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Giant {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Giant {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Giant {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Guardian {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Guardian {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Guardian {
      env: env,
      object: object
    }
  }

  pub fn get_elder_data(&self) -> data_manipulator_mutable_entity_ElderData {
    let ret = java_method!(self.env, self.object, "getElderData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/ElderData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Guardian#getElderData was null") }
    data_manipulator_mutable_entity_ElderData { env: self.env, object: ret }
  }

  pub fn elder(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "elder", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Guardian#elder was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn get_beam_target(&self) -> Option<entity_living_Living> {
    let ret = java_method!(self.env, self.object, "getBeamTarget", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Guardian#getBeamTarget was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_Living { env: self.env, object: unwrapped }) }
  }

  pub fn set_beam_target(&self, param_1: entity_living_Living) {
    java_method!(self.env, self.object, "setBeamTarget", "(Lorg/spongepowered/api/entity/living/Living;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct entity_living_monster_MagmaCube {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_MagmaCube {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_MagmaCube {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Monster {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Monster {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Monster {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct entity_living_monster_Silverfish {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Silverfish {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Silverfish {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Skeleton {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Skeleton {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Skeleton {
      env: env,
      object: object
    }
  }

  pub fn get_skeleton_data(&self) -> data_manipulator_mutable_entity_SkeletonData {
    let ret = java_method!(self.env, self.object, "getSkeletonData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/SkeletonData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Skeleton#getSkeletonData was null") }
    data_manipulator_mutable_entity_SkeletonData { env: self.env, object: ret }
  }

  pub fn variant(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "variant", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Skeleton#variant was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Slime {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Slime {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Slime {
      env: env,
      object: object
    }
  }

  pub fn get_slime_data(&self) -> data_manipulator_mutable_entity_SlimeData {
    let ret = java_method!(self.env, self.object, "getSlimeData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/SlimeData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Slime#getSlimeData was null") }
    data_manipulator_mutable_entity_SlimeData { env: self.env, object: ret }
  }

  pub fn slime_size(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "slimeSize", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Slime#slimeSize was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Spider {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Spider {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Spider {
      env: env,
      object: object
    }
  }

  pub fn is_climbing(&self) -> bool {
    java_method!(self.env, self.object, "isClimbing", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Witch {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Witch {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Witch {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Wither {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Wither {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Wither {
      env: env,
      object: object
    }
  }

  pub fn get_targets(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTargets", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/Wither#getTargets was null") }
    ret
  }

  pub fn set_targets(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setTargets", "(Ljava/util/List;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct entity_living_monster_Zombie {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_Zombie {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_Zombie {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_monster_ZombiePigman {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_monster_ZombiePigman {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_monster_ZombiePigman {
      env: env,
      object: object
    }
  }

  pub fn get_anger_data(&self) -> data_manipulator_mutable_entity_AngerableData {
    let ret = java_method!(self.env, self.object, "getAngerData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/AngerableData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/ZombiePigman#getAngerData was null") }
    data_manipulator_mutable_entity_AngerableData { env: self.env, object: ret }
  }

  pub fn anger_level(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "angerLevel", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/monster/ZombiePigman#angerLevel was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_living_player_gamemode_GameMode {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_player_gamemode_GameMode {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_player_gamemode_GameMode {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_player_gamemode_GameModes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_player_gamemode_GameModes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_player_gamemode_GameModes {
      env: env,
      object: object
    }
  }

}



#[derive(Debug)]
pub struct entity_living_player_Player {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_player_Player {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_player_Player {
      env: env,
      object: object
    }
  }

  pub fn is_viewing_inventory(&self) -> bool {
    java_method!(self.env, self.object, "isViewingInventory", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_open_inventory(&self) -> Option<item_inventory_Inventory> {
    let ret = java_method!(self.env, self.object, "getOpenInventory", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getOpenInventory was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_Inventory { env: self.env, object: unwrapped }) }
  }

  pub fn open_inventory(&self, param_1: item_inventory_Inventory, param_2: event_cause_Cause) {
    java_method!(self.env, self.object, "openInventory", "(Lorg/spongepowered/api/item/inventory/Inventory;Lorg/spongepowered/api/event/cause/Cause;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn close_inventory(&self, param_1: event_cause_Cause) {
    java_method!(self.env, self.object, "closeInventory", "(Lorg/spongepowered/api/event/cause/Cause;)V", CallVoidMethodA, param_1);
  }

  pub fn get_view_distance(&self) -> i32 {
    java_method!(self.env, self.object, "getViewDistance", "()I", CallIntMethod)
  }

  pub fn get_chat_visibility(&self) -> text_chat_ChatVisibility {
    let ret = java_method!(self.env, self.object, "getChatVisibility", "()Lorg/spongepowered/api/text/chat/ChatVisibility;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getChatVisibility was null") }
    text_chat_ChatVisibility { env: self.env, object: ret }
  }

  pub fn is_chat_colors_enabled(&self) -> bool {
    java_method!(self.env, self.object, "isChatColorsEnabled", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_displayed_skin_parts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDisplayedSkinParts", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getDisplayedSkinParts was null") }
    ret
  }

  pub fn get_connection(&self) -> network_PlayerConnection {
    let ret = java_method!(self.env, self.object, "getConnection", "()Lorg/spongepowered/api/network/PlayerConnection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getConnection was null") }
    network_PlayerConnection { env: self.env, object: ret }
  }

  pub fn send_resource_pack(&self, param_1: resourcepack_ResourcePack) {
    java_method!(self.env, self.object, "sendResourcePack", "(Lorg/spongepowered/api/resourcepack/ResourcePack;)V", CallVoidMethodA, param_1);
  }

  pub fn get_tab_list(&self) -> entity_living_player_tab_TabList {
    let ret = java_method!(self.env, self.object, "getTabList", "()Lorg/spongepowered/api/entity/living/player/tab/TabList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getTabList was null") }
    entity_living_player_tab_TabList { env: self.env, object: ret }
  }

  pub fn kick(&self) {
    java_method!(self.env, self.object, "kick", "()V", CallVoidMethod);
  }

  pub fn kick_1(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "kick", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn get_scoreboard(&self) -> scoreboard_Scoreboard {
    let ret = java_method!(self.env, self.object, "getScoreboard", "()Lorg/spongepowered/api/scoreboard/Scoreboard;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getScoreboard was null") }
    scoreboard_Scoreboard { env: self.env, object: ret }
  }

  pub fn set_scoreboard(&self, param_1: scoreboard_Scoreboard) {
    java_method!(self.env, self.object, "setScoreboard", "(Lorg/spongepowered/api/scoreboard/Scoreboard;)V", CallVoidMethodA, param_1);
  }

  pub fn get_join_data(&self) -> data_manipulator_mutable_entity_JoinData {
    let ret = java_method!(self.env, self.object, "getJoinData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/JoinData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getJoinData was null") }
    data_manipulator_mutable_entity_JoinData { env: self.env, object: ret }
  }

  pub fn first_played(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "firstPlayed", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#firstPlayed was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn last_played(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "lastPlayed", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#lastPlayed was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn has_played_before(&self) -> bool {
    java_method!(self.env, self.object, "hasPlayedBefore", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_display_name_data(&self) -> data_manipulator_mutable_DisplayNameData {
    let ret = java_method!(self.env, self.object, "getDisplayNameData", "()Lorg/spongepowered/api/data/manipulator/mutable/DisplayNameData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getDisplayNameData was null") }
    data_manipulator_mutable_DisplayNameData { env: self.env, object: ret }
  }

  pub fn get_game_mode_data(&self) -> data_manipulator_mutable_entity_GameModeData {
    let ret = java_method!(self.env, self.object, "getGameModeData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/GameModeData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getGameModeData was null") }
    data_manipulator_mutable_entity_GameModeData { env: self.env, object: ret }
  }

  pub fn game_mode(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "gameMode", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#gameMode was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

  pub fn is_sleeping_ignored(&self) -> bool {
    java_method!(self.env, self.object, "isSleepingIgnored", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_sleeping_ignored(&self, param_1: bool) {
    java_method!(self.env, self.object, "setSleepingIgnored", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_connection_1(&self) -> network_RemoteConnection {
    let ret = java_method!(self.env, self.object, "getConnection", "()Lorg/spongepowered/api/network/RemoteConnection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/Player#getConnection was null") }
    network_RemoteConnection { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_living_player_tab_TabList {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_player_tab_TabList {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_player_tab_TabList {
      env: env,
      object: object
    }
  }

  pub fn get_player(&self) -> entity_living_player_Player {
    let ret = java_method!(self.env, self.object, "getPlayer", "()Lorg/spongepowered/api/entity/living/player/Player;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#getPlayer was null") }
    entity_living_player_Player { env: self.env, object: ret }
  }

  pub fn get_header(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getHeader", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#getHeader was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn set_header(&self, param_1: text_Text) -> entity_living_player_tab_TabList {
    let ret = java_method!(self.env, self.object, "setHeader", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/entity/living/player/tab/TabList;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#setHeader was null") }
    entity_living_player_tab_TabList { env: self.env, object: ret }
  }

  pub fn get_footer(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getFooter", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#getFooter was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn set_footer(&self, param_1: text_Text) -> entity_living_player_tab_TabList {
    let ret = java_method!(self.env, self.object, "setFooter", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/entity/living/player/tab/TabList;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#setFooter was null") }
    entity_living_player_tab_TabList { env: self.env, object: ret }
  }

  pub fn set_header_and_footer(&self, param_1: text_Text, param_2: text_Text) -> entity_living_player_tab_TabList {
    let ret = java_method!(self.env, self.object, "setHeaderAndFooter", "(Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/entity/living/player/tab/TabList;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#setHeaderAndFooter was null") }
    entity_living_player_tab_TabList { env: self.env, object: ret }
  }

  pub fn get_entries(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getEntries", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#getEntries was null") }
    ret
  }

  pub fn get_entry(&self, param_1: jobject) -> Option<entity_living_player_tab_TabListEntry> {
    let ret = java_method!(self.env, self.object, "getEntry", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#getEntry was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_player_tab_TabListEntry { env: self.env, object: unwrapped }) }
  }

  pub fn add_entry(&self, param_1: entity_living_player_tab_TabListEntry) -> entity_living_player_tab_TabList {
    let ret = java_method!(self.env, self.object, "addEntry", "(Lorg/spongepowered/api/entity/living/player/tab/TabListEntry;)Lorg/spongepowered/api/entity/living/player/tab/TabList;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#addEntry was null") }
    entity_living_player_tab_TabList { env: self.env, object: ret }
  }

  pub fn remove_entry(&self, param_1: jobject) -> Option<entity_living_player_tab_TabListEntry> {
    let ret = java_method!(self.env, self.object, "removeEntry", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabList#removeEntry was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_player_tab_TabListEntry { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct entity_living_player_tab_TabListEntry_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_player_tab_TabListEntry_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_player_tab_TabListEntry_Builder {
      env: env,
      object: object
    }
  }

  pub fn list(&self, param_1: entity_living_player_tab_TabList) -> entity_living_player_tab_TabListEntry_Builder {
    let ret = java_method!(self.env, self.object, "list", "(Lorg/spongepowered/api/entity/living/player/tab/TabList;)Lorg/spongepowered/api/entity/living/player/tab/TabListEntry$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry$Builder#list was null") }
    entity_living_player_tab_TabListEntry_Builder { env: self.env, object: ret }
  }

  pub fn profile(&self, param_1: profile_GameProfile) -> entity_living_player_tab_TabListEntry_Builder {
    let ret = java_method!(self.env, self.object, "profile", "(Lorg/spongepowered/api/profile/GameProfile;)Lorg/spongepowered/api/entity/living/player/tab/TabListEntry$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry$Builder#profile was null") }
    entity_living_player_tab_TabListEntry_Builder { env: self.env, object: ret }
  }

  pub fn display_name(&self, param_1: text_Text) -> entity_living_player_tab_TabListEntry_Builder {
    let ret = java_method!(self.env, self.object, "displayName", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/entity/living/player/tab/TabListEntry$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry$Builder#displayName was null") }
    entity_living_player_tab_TabListEntry_Builder { env: self.env, object: ret }
  }

  pub fn latency(&self, param_1: i32) -> entity_living_player_tab_TabListEntry_Builder {
    let ret = java_method!(self.env, self.object, "latency", "(I)Lorg/spongepowered/api/entity/living/player/tab/TabListEntry$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry$Builder#latency was null") }
    entity_living_player_tab_TabListEntry_Builder { env: self.env, object: ret }
  }

  pub fn game_mode(&self, param_1: entity_living_player_gamemode_GameMode) -> entity_living_player_tab_TabListEntry_Builder {
    let ret = java_method!(self.env, self.object, "gameMode", "(Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;)Lorg/spongepowered/api/entity/living/player/tab/TabListEntry$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry$Builder#gameMode was null") }
    entity_living_player_tab_TabListEntry_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> entity_living_player_tab_TabListEntry {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/entity/living/player/tab/TabListEntry;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry$Builder#build was null") }
    entity_living_player_tab_TabListEntry { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_player_tab_TabListEntry {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_player_tab_TabListEntry {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_player_tab_TabListEntry {
      env: env,
      object: object
    }
  }

  pub fn builder() -> entity_living_player_tab_TabListEntry_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/entity/living/player/tab/TabListEntry$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry#builder was null") }
    entity_living_player_tab_TabListEntry_Builder { env: self.env, object: ret }
  }

  pub fn get_list(&self) -> entity_living_player_tab_TabList {
    let ret = java_method!(self.env, self.object, "getList", "()Lorg/spongepowered/api/entity/living/player/tab/TabList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry#getList was null") }
    entity_living_player_tab_TabList { env: self.env, object: ret }
  }

  pub fn get_profile(&self) -> profile_GameProfile {
    let ret = java_method!(self.env, self.object, "getProfile", "()Lorg/spongepowered/api/profile/GameProfile;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry#getProfile was null") }
    profile_GameProfile { env: self.env, object: ret }
  }

  pub fn get_display_name(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getDisplayName", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry#getDisplayName was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn set_display_name(&self, param_1: text_Text) -> entity_living_player_tab_TabListEntry {
    let ret = java_method!(self.env, self.object, "setDisplayName", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/entity/living/player/tab/TabListEntry;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry#setDisplayName was null") }
    entity_living_player_tab_TabListEntry { env: self.env, object: ret }
  }

  pub fn get_latency(&self) -> i32 {
    java_method!(self.env, self.object, "getLatency", "()I", CallIntMethod)
  }

  pub fn set_latency(&self, param_1: i32) -> entity_living_player_tab_TabListEntry {
    let ret = java_method!(self.env, self.object, "setLatency", "(I)Lorg/spongepowered/api/entity/living/player/tab/TabListEntry;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry#setLatency was null") }
    entity_living_player_tab_TabListEntry { env: self.env, object: ret }
  }

  pub fn get_game_mode(&self) -> entity_living_player_gamemode_GameMode {
    let ret = java_method!(self.env, self.object, "getGameMode", "()Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry#getGameMode was null") }
    entity_living_player_gamemode_GameMode { env: self.env, object: ret }
  }

  pub fn set_game_mode(&self, param_1: entity_living_player_gamemode_GameMode) -> entity_living_player_tab_TabListEntry {
    let ret = java_method!(self.env, self.object, "setGameMode", "(Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;)Lorg/spongepowered/api/entity/living/player/tab/TabListEntry;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/tab/TabListEntry#setGameMode was null") }
    entity_living_player_tab_TabListEntry { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_player_User {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_player_User {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_player_User {
      env: env,
      object: object
    }
  }

  pub fn get_profile(&self) -> profile_GameProfile {
    let ret = java_method!(self.env, self.object, "getProfile", "()Lorg/spongepowered/api/profile/GameProfile;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/User#getProfile was null") }
    profile_GameProfile { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/User#getName was null") }
    ret
  }

  pub fn is_online(&self) -> bool {
    java_method!(self.env, self.object, "isOnline", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_player(&self) -> Option<entity_living_player_Player> {
    let ret = java_method!(self.env, self.object, "getPlayer", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/User#getPlayer was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_player_Player { env: self.env, object: unwrapped }) }
  }

  pub fn get_achievement_data(&self) -> data_manipulator_mutable_entity_AchievementData {
    let ret = java_method!(self.env, self.object, "getAchievementData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/AchievementData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/User#getAchievementData was null") }
    data_manipulator_mutable_entity_AchievementData { env: self.env, object: ret }
  }

  pub fn get_statistic_data(&self) -> data_manipulator_mutable_entity_StatisticData {
    let ret = java_method!(self.env, self.object, "getStatisticData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/StatisticData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/player/User#getStatisticData was null") }
    data_manipulator_mutable_entity_StatisticData { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_living_Squid {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Squid {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Squid {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_living_Villager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_living_Villager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_living_Villager {
      env: env,
      object: object
    }
  }

  pub fn is_trading(&self) -> bool {
    java_method!(self.env, self.object, "isTrading", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_career_data(&self) -> data_manipulator_mutable_entity_CareerData {
    let ret = java_method!(self.env, self.object, "getCareerData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/CareerData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Villager#getCareerData was null") }
    data_manipulator_mutable_entity_CareerData { env: self.env, object: ret }
  }

  pub fn career(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "career", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/living/Villager#career was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_projectile_arrow_Arrow {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_arrow_Arrow {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_arrow_Arrow {
      env: env,
      object: object
    }
  }

  pub fn get_knockback_data(&self) -> data_manipulator_mutable_entity_KnockbackData {
    let ret = java_method!(self.env, self.object, "getKnockbackData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/KnockbackData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/arrow/Arrow#getKnockbackData was null") }
    data_manipulator_mutable_entity_KnockbackData { env: self.env, object: ret }
  }

  pub fn knockback_strength(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "knockbackStrength", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/arrow/Arrow#knockbackStrength was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_projectile_arrow_SpectralArrow {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_arrow_SpectralArrow {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_arrow_SpectralArrow {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_arrow_TippedArrow {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_arrow_TippedArrow {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_arrow_TippedArrow {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_DamagingProjectile {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_DamagingProjectile {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_DamagingProjectile {
      env: env,
      object: object
    }
  }

  pub fn get_damaging_data(&self) -> data_manipulator_mutable_entity_DamagingData {
    let ret = java_method!(self.env, self.object, "getDamagingData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/DamagingData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/DamagingProjectile#getDamagingData was null") }
    data_manipulator_mutable_entity_DamagingData { env: self.env, object: ret }
  }

  pub fn damage(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "damage", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/DamagingProjectile#damage was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

  pub fn damage_for_entity(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "damageForEntity", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/DamagingProjectile#damageForEntity was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_projectile_Egg {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_Egg {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_Egg {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_EnderPearl {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_EnderPearl {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_EnderPearl {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_explosive_DragonFireball {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_explosive_DragonFireball {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_explosive_DragonFireball {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_explosive_fireball_Fireball {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_explosive_fireball_Fireball {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_explosive_fireball_Fireball {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_explosive_fireball_LargeFireball {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_explosive_fireball_LargeFireball {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_explosive_fireball_LargeFireball {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct entity_projectile_explosive_fireball_SmallFireball {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_explosive_fireball_SmallFireball {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_explosive_fireball_SmallFireball {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_explosive_WitherSkull {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_explosive_WitherSkull {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_explosive_WitherSkull {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_EyeOfEnder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_EyeOfEnder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_EyeOfEnder {
      env: env,
      object: object
    }
  }

  pub fn get_target_location_data(&self) -> data_manipulator_mutable_TargetedLocationData {
    let ret = java_method!(self.env, self.object, "getTargetLocationData", "()Lorg/spongepowered/api/data/manipulator/mutable/TargetedLocationData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/EyeOfEnder#getTargetLocationData was null") }
    data_manipulator_mutable_TargetedLocationData { env: self.env, object: ret }
  }

  pub fn target(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "target", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/EyeOfEnder#target was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_projectile_Firework {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_Firework {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_Firework {
      env: env,
      object: object
    }
  }

  pub fn get_firework_data(&self) -> data_manipulator_mutable_FireworkEffectData {
    let ret = java_method!(self.env, self.object, "getFireworkData", "()Lorg/spongepowered/api/data/manipulator/mutable/FireworkEffectData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/Firework#getFireworkData was null") }
    data_manipulator_mutable_FireworkEffectData { env: self.env, object: ret }
  }

  pub fn effects(&self) -> data_value_mutable_ListValue {
    let ret = java_method!(self.env, self.object, "effects", "()Lorg/spongepowered/api/data/value/mutable/ListValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/Firework#effects was null") }
    data_value_mutable_ListValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_projectile_FishHook {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_FishHook {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_FishHook {
      env: env,
      object: object
    }
  }

  pub fn get_hooked_entity(&self) -> Option<entity_Entity> {
    let ret = java_method!(self.env, self.object, "getHookedEntity", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/FishHook#getHookedEntity was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Entity { env: self.env, object: unwrapped }) }
  }

  pub fn set_hooked_entity(&self, param_1: entity_Entity) {
    java_method!(self.env, self.object, "setHookedEntity", "(Lorg/spongepowered/api/entity/Entity;)V", CallVoidMethodA, param_1);
  }

}


#[derive(Debug)]
pub struct entity_projectile_Projectile {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_Projectile {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_Projectile {
      env: env,
      object: object
    }
  }

  pub fn get_shooter(&self) -> entity_projectile_source_ProjectileSource {
    let ret = java_method!(self.env, self.object, "getShooter", "()Lorg/spongepowered/api/entity/projectile/source/ProjectileSource;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/Projectile#getShooter was null") }
    entity_projectile_source_ProjectileSource { env: self.env, object: ret }
  }

  pub fn set_shooter(&self, param_1: entity_projectile_source_ProjectileSource) {
    java_method!(self.env, self.object, "setShooter", "(Lorg/spongepowered/api/entity/projectile/source/ProjectileSource;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct entity_projectile_Snowball {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_Snowball {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_Snowball {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_source_BlockProjectileSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_source_BlockProjectileSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_source_BlockProjectileSource {
      env: env,
      object: object
    }
  }

  pub fn get_location(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/source/BlockProjectileSource#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_block(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getBlock", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/source/BlockProjectileSource#getBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_projectile_source_ProjectileSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_source_ProjectileSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_source_ProjectileSource {
      env: env,
      object: object
    }
  }

  pub fn launch_projectile(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "launchProjectile", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/source/ProjectileSource#launchProjectile was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn launch_projectile_1(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "launchProjectile", "(Ljava/lang/Class;Lcom/flowpowered/math/vector/Vector3d;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/source/ProjectileSource#launchProjectile was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct entity_projectile_source_UnknownProjectileSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_source_UnknownProjectileSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_source_UnknownProjectileSource {
      env: env,
      object: object
    }
  }

  pub fn launch_projectile(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "launchProjectile", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/source/UnknownProjectileSource#launchProjectile was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn launch_projectile_1(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "launchProjectile", "(Ljava/lang/Class;Lcom/flowpowered/math/vector/Vector3d;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/source/UnknownProjectileSource#launchProjectile was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct entity_projectile_ThrownExpBottle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_ThrownExpBottle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_ThrownExpBottle {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_projectile_ThrownPotion {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_projectile_ThrownPotion {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_projectile_ThrownPotion {
      env: env,
      object: object
    }
  }

  pub fn get_potion_item_data(&self) -> data_manipulator_mutable_RepresentedItemData {
    let ret = java_method!(self.env, self.object, "getPotionItemData", "()Lorg/spongepowered/api/data/manipulator/mutable/RepresentedItemData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/ThrownPotion#getPotionItemData was null") }
    data_manipulator_mutable_RepresentedItemData { env: self.env, object: ret }
  }

  pub fn item(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "item", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/projectile/ThrownPotion#item was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_ShulkerBullet {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_ShulkerBullet {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_ShulkerBullet {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_Tamer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_Tamer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_Tamer {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Tamer#getName was null") }
    ret
  }

}

#[derive(Debug)]
pub struct entity_Transform {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_Transform {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_Transform {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: world_Location) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/entity/Transform", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#<init> was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: world_extent_Extent) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/extent/Extent;)Lorg/spongepowered/api/entity/Transform", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#<init> was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: world_extent_Extent, param_2: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/extent/Extent;Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#<init> was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: world_extent_Extent, param_2: jobject, param_3: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/extent/Extent;Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#<init> was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn new_4(&self, param_1: world_Location, param_2: jobject, param_3: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/Location;Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#<init> was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn new_5(&self, param_1: world_extent_Extent, param_2: jobject, param_3: jobject, param_4: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/extent/Extent;Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#<init> was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_location(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn set_location(&self, param_1: world_Location) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "setLocation", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#setLocation was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_extent(&self) -> world_extent_Extent {
    let ret = java_method!(self.env, self.object, "getExtent", "()Lorg/spongepowered/api/world/extent/Extent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#getExtent was null") }
    world_extent_Extent { env: self.env, object: ret }
  }

  pub fn set_extent(&self, param_1: world_extent_Extent) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "setExtent", "(Lorg/spongepowered/api/world/extent/Extent;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#setExtent was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPosition", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#getPosition was null") }
    ret
  }

  pub fn set_position(&self, param_1: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "setPosition", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#setPosition was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_rotation(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRotation", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#getRotation was null") }
    ret
  }

  pub fn set_rotation(&self, param_1: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "setRotation", "(Lcom/flowpowered/math/imaginary/Quaterniond;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#setRotation was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_rotation_as_quaternion(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRotationAsQuaternion", "()Lcom/flowpowered/math/imaginary/Quaterniond;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#getRotationAsQuaternion was null") }
    ret
  }

  pub fn set_rotation_1(&self, param_1: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "setRotation", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#setRotation was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_pitch(&self) -> f64 {
    java_method!(self.env, self.object, "getPitch", "()D", CallDoubleMethod)
  }

  pub fn get_yaw(&self) -> f64 {
    java_method!(self.env, self.object, "getYaw", "()D", CallDoubleMethod)
  }

  pub fn get_roll(&self) -> f64 {
    java_method!(self.env, self.object, "getRoll", "()D", CallDoubleMethod)
  }

  pub fn get_scale(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getScale", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#getScale was null") }
    ret
  }

  pub fn set_scale(&self, param_1: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "setScale", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#setScale was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn add(&self, param_1: entity_Transform) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/entity/Transform;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#add was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn add_translation(&self, param_1: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "addTranslation", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#addTranslation was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn add_rotation(&self, param_1: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "addRotation", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#addRotation was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn add_rotation_1(&self, param_1: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "addRotation", "(Lcom/flowpowered/math/imaginary/Quaterniond;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#addRotation was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn add_scale(&self, param_1: jobject) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "addScale", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Transform;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#addScale was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn to_matrix(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toMatrix", "()Lcom/flowpowered/math/matrix/Matrix4d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#toMatrix was null") }
    ret
  }

  pub fn is_valid(&self) -> bool {
    java_method!(self.env, self.object, "isValid", "()Z", CallBooleanMethod) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/Transform#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct entity_vehicle_Boat {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_Boat {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_Boat {
      env: env,
      object: object
    }
  }

  pub fn is_in_water(&self) -> bool {
    java_method!(self.env, self.object, "isInWater", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_max_speed(&self) -> f64 {
    java_method!(self.env, self.object, "getMaxSpeed", "()D", CallDoubleMethod)
  }

  pub fn set_max_speed(&self, param_1: f64) {
    java_method!(self.env, self.object, "setMaxSpeed", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn can_move_on_land(&self) -> bool {
    java_method!(self.env, self.object, "canMoveOnLand", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_move_on_land(&self, param_1: bool) {
    java_method!(self.env, self.object, "setMoveOnLand", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_occupied_deceleration(&self) -> f64 {
    java_method!(self.env, self.object, "getOccupiedDeceleration", "()D", CallDoubleMethod)
  }

  pub fn set_occupied_deceleration(&self, param_1: f64) {
    java_method!(self.env, self.object, "setOccupiedDeceleration", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_unoccupied_deceleration(&self) -> f64 {
    java_method!(self.env, self.object, "getUnoccupiedDeceleration", "()D", CallDoubleMethod)
  }

  pub fn set_unoccupied_deceleration(&self, param_1: f64) {
    java_method!(self.env, self.object, "setUnoccupiedDeceleration", "(D)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct entity_vehicle_minecart_ChestMinecart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_minecart_ChestMinecart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_minecart_ChestMinecart {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_vehicle_minecart_CommandBlockMinecart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_minecart_CommandBlockMinecart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_minecart_CommandBlockMinecart {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_vehicle_minecart_ContainerMinecart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_minecart_ContainerMinecart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_minecart_ContainerMinecart {
      env: env,
      object: object
    }
  }

  pub fn get_inventory(&self) -> item_inventory_type_CarriedInventory {
    let ret = java_method!(self.env, self.object, "getInventory", "()Lorg/spongepowered/api/item/inventory/type/CarriedInventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/vehicle/minecart/ContainerMinecart#getInventory was null") }
    item_inventory_type_CarriedInventory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_vehicle_minecart_FurnaceMinecart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_minecart_FurnaceMinecart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_minecart_FurnaceMinecart {
      env: env,
      object: object
    }
  }

  pub fn get_fuel(&self) -> i32 {
    java_method!(self.env, self.object, "getFuel", "()I", CallIntMethod)
  }

  pub fn set_fuel(&self, param_1: i32) {
    java_method!(self.env, self.object, "setFuel", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct entity_vehicle_minecart_HopperMinecart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_minecart_HopperMinecart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_minecart_HopperMinecart {
      env: env,
      object: object
    }
  }

  pub fn get_cooldown_data(&self) -> data_manipulator_mutable_tileentity_CooldownData {
    let ret = java_method!(self.env, self.object, "getCooldownData", "()Lorg/spongepowered/api/data/manipulator/mutable/tileentity/CooldownData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/vehicle/minecart/HopperMinecart#getCooldownData was null") }
    data_manipulator_mutable_tileentity_CooldownData { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct entity_vehicle_minecart_Minecart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_minecart_Minecart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_minecart_Minecart {
      env: env,
      object: object
    }
  }

  pub fn is_on_rail(&self) -> bool {
    java_method!(self.env, self.object, "isOnRail", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_swiftness(&self) -> f64 {
    java_method!(self.env, self.object, "getSwiftness", "()D", CallDoubleMethod)
  }

  pub fn set_swiftness(&self, param_1: f64) {
    java_method!(self.env, self.object, "setSwiftness", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_potential_max_speed(&self) -> f64 {
    java_method!(self.env, self.object, "getPotentialMaxSpeed", "()D", CallDoubleMethod)
  }

  pub fn does_slow_when_empty(&self) -> bool {
    java_method!(self.env, self.object, "doesSlowWhenEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_slow_when_empty(&self, param_1: bool) {
    java_method!(self.env, self.object, "setSlowWhenEmpty", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_airborne_velocity_mod(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAirborneVelocityMod", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/vehicle/minecart/Minecart#getAirborneVelocityMod was null") }
    ret
  }

  pub fn set_airborne_velocity_mod(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setAirborneVelocityMod", "(Lcom/flowpowered/math/vector/Vector3d;)V", CallVoidMethodA, param_1);
  }

  pub fn get_derailed_velocity_mod(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDerailedVelocityMod", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/vehicle/minecart/Minecart#getDerailedVelocityMod was null") }
    ret
  }

  pub fn set_derailed_velocity_mod(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setDerailedVelocityMod", "(Lcom/flowpowered/math/vector/Vector3d;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct entity_vehicle_minecart_MobSpawnerMinecart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_minecart_MobSpawnerMinecart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_minecart_MobSpawnerMinecart {
      env: env,
      object: object
    }
  }

  pub fn get_spawner_data(&self) -> data_manipulator_mutable_MobSpawnerData {
    let ret = java_method!(self.env, self.object, "getSpawnerData", "()Lorg/spongepowered/api/data/manipulator/mutable/MobSpawnerData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/vehicle/minecart/MobSpawnerMinecart#getSpawnerData was null") }
    data_manipulator_mutable_MobSpawnerData { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct entity_vehicle_minecart_RideableMinecart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_minecart_RideableMinecart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_minecart_RideableMinecart {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct entity_vehicle_minecart_TNTMinecart {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_vehicle_minecart_TNTMinecart {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_vehicle_minecart_TNTMinecart {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct entity_weather_Lightning {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_weather_Lightning {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_weather_Lightning {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct entity_weather_WeatherEffect {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl entity_weather_WeatherEffect {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    entity_weather_WeatherEffect {
      env: env,
      object: object
    }
  }

  pub fn is_effect(&self) -> bool {
    java_method!(self.env, self.object, "isEffect", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_effect(&self, param_1: bool) {
    java_method!(self.env, self.object, "setEffect", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_expiring_data(&self) -> data_manipulator_mutable_entity_ExpirableData {
    let ret = java_method!(self.env, self.object, "getExpiringData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/ExpirableData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/weather/WeatherEffect#getExpiringData was null") }
    data_manipulator_mutable_entity_ExpirableData { env: self.env, object: ret }
  }

  pub fn expire_ticks(&self) -> data_value_mutable_MutableBoundedValue {
    let ret = java_method!(self.env, self.object, "expireTicks", "()Lorg/spongepowered/api/data/value/mutable/MutableBoundedValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/entity/weather/WeatherEffect#expireTicks was null") }
    data_value_mutable_MutableBoundedValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_achievement_GrantAchievementEvent_TargetPlayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_achievement_GrantAchievementEvent_TargetPlayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_achievement_GrantAchievementEvent_TargetPlayer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_achievement_GrantAchievementEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_achievement_GrantAchievementEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_achievement_GrantAchievementEvent {
      env: env,
      object: object
    }
  }

  pub fn get_achievement(&self) -> statistic_achievement_Achievement {
    let ret = java_method!(self.env, self.object, "getAchievement", "()Lorg/spongepowered/api/statistic/achievement/Achievement;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/achievement/GrantAchievementEvent#getAchievement was null") }
    statistic_achievement_Achievement { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_action_CollideEvent_Impact {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_CollideEvent_Impact {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_CollideEvent_Impact {
      env: env,
      object: object
    }
  }

  pub fn get_impact_point(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getImpactPoint", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/action/CollideEvent$Impact#getImpactPoint was null") }
    world_Location { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_action_CollideEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_CollideEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_CollideEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_action_FishingEvent_HookEntity {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_FishingEvent_HookEntity {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_FishingEvent_HookEntity {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_action_FishingEvent_Start {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_FishingEvent_Start {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_FishingEvent_Start {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_action_FishingEvent_Stop {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_FishingEvent_Stop {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_FishingEvent_Stop {
      env: env,
      object: object
    }
  }

  pub fn get_item_stack_transaction(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getItemStackTransaction", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/action/FishingEvent$Stop#getItemStackTransaction was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_action_FishingEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_FishingEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_FishingEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_fish_hook(&self) -> entity_EntitySnapshot {
    let ret = java_method!(self.env, self.object, "getOriginalFishHook", "()Lorg/spongepowered/api/entity/EntitySnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/action/FishingEvent#getOriginalFishHook was null") }
    entity_EntitySnapshot { env: self.env, object: ret }
  }

  pub fn get_fish_hook(&self) -> entity_projectile_FishHook {
    let ret = java_method!(self.env, self.object, "getFishHook", "()Lorg/spongepowered/api/entity/projectile/FishHook;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/action/FishingEvent#getFishHook was null") }
    entity_projectile_FishHook { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_action_InteractEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_InteractEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_InteractEvent {
      env: env,
      object: object
    }
  }

  pub fn get_interaction_point(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getInteractionPoint", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/action/InteractEvent#getInteractionPoint was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct event_action_LightningEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_LightningEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_LightningEvent_Post {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_action_LightningEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_LightningEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_LightningEvent_Pre {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_action_LightningEvent_Strike {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_LightningEvent_Strike {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_LightningEvent_Strike {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_action_LightningEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_LightningEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_LightningEvent {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_action_SleepingEvent_Finish {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_SleepingEvent_Finish {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_SleepingEvent_Finish {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_action_SleepingEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_SleepingEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_SleepingEvent_Post {
      env: env,
      object: object
    }
  }

  pub fn is_spawn_set(&self) -> bool {
    java_method!(self.env, self.object, "isSpawnSet", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_spawn_transform(&self) -> Option<entity_Transform> {
    let ret = java_method!(self.env, self.object, "getSpawnTransform", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/action/SleepingEvent$Post#getSpawnTransform was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Transform { env: self.env, object: unwrapped }) }
  }

  pub fn set_spawn_transform(&self, param_1: entity_Transform) {
    java_method!(self.env, self.object, "setSpawnTransform", "(Lorg/spongepowered/api/entity/Transform;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_action_SleepingEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_SleepingEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_SleepingEvent_Pre {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_action_SleepingEvent_Tick {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_SleepingEvent_Tick {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_SleepingEvent_Tick {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_action_SleepingEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_action_SleepingEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_action_SleepingEvent {
      env: env,
      object: object
    }
  }

  pub fn get_bed(&self) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "getBed", "()Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/action/SleepingEvent#getBed was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_block_ChangeBlockEvent_Break {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_ChangeBlockEvent_Break {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_ChangeBlockEvent_Break {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_ChangeBlockEvent_Decay {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_ChangeBlockEvent_Decay {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_ChangeBlockEvent_Decay {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_ChangeBlockEvent_Grow {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_ChangeBlockEvent_Grow {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_ChangeBlockEvent_Grow {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_ChangeBlockEvent_Modify {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_ChangeBlockEvent_Modify {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_ChangeBlockEvent_Modify {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_ChangeBlockEvent_Place {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_ChangeBlockEvent_Place {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_ChangeBlockEvent_Place {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_ChangeBlockEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_ChangeBlockEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_ChangeBlockEvent_Post {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_ChangeBlockEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_ChangeBlockEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_ChangeBlockEvent_Pre {
      env: env,
      object: object
    }
  }

  pub fn get_locations(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getLocations", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/ChangeBlockEvent$Pre#getLocations was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_block_ChangeBlockEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_ChangeBlockEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_ChangeBlockEvent {
      env: env,
      object: object
    }
  }

  pub fn get_transactions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTransactions", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/ChangeBlockEvent#getTransactions was null") }
    ret
  }

  pub fn filter(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "filter", "(Ljava/util/function/Predicate;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/ChangeBlockEvent#filter was null") }
    ret
  }

  pub fn filter_all(&self) {
    java_method!(self.env, self.object, "filterAll", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct event_block_CollideBlockEvent_Impact {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_CollideBlockEvent_Impact {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_CollideBlockEvent_Impact {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_CollideBlockEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_CollideBlockEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_CollideBlockEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_location(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getTargetLocation", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/CollideBlockEvent#getTargetLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_target_block(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getTargetBlock", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/CollideBlockEvent#getTargetBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn get_target_side(&self) -> util_Direction {
    let ret = java_method!(self.env, self.object, "getTargetSide", "()Lorg/spongepowered/api/util/Direction;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/CollideBlockEvent#getTargetSide was null") }
    util_Direction { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_block_InteractBlockEvent_Primary_MainHand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_InteractBlockEvent_Primary_MainHand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_InteractBlockEvent_Primary_MainHand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_InteractBlockEvent_Primary_OffHand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_InteractBlockEvent_Primary_OffHand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_InteractBlockEvent_Primary_OffHand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_InteractBlockEvent_Primary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_InteractBlockEvent_Primary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_InteractBlockEvent_Primary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_InteractBlockEvent_Secondary_MainHand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_InteractBlockEvent_Secondary_MainHand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_InteractBlockEvent_Secondary_MainHand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_InteractBlockEvent_Secondary_OffHand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_InteractBlockEvent_Secondary_OffHand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_InteractBlockEvent_Secondary_OffHand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_InteractBlockEvent_Secondary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_InteractBlockEvent_Secondary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_InteractBlockEvent_Secondary {
      env: env,
      object: object
    }
  }

  pub fn get_original_use_item_result(&self) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "getOriginalUseItemResult", "()Lorg/spongepowered/api/util/Tristate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/InteractBlockEvent$Secondary#getOriginalUseItemResult was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn get_original_use_block_result(&self) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "getOriginalUseBlockResult", "()Lorg/spongepowered/api/util/Tristate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/InteractBlockEvent$Secondary#getOriginalUseBlockResult was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn get_use_item_result(&self) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "getUseItemResult", "()Lorg/spongepowered/api/util/Tristate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/InteractBlockEvent$Secondary#getUseItemResult was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn get_use_block_result(&self) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "getUseBlockResult", "()Lorg/spongepowered/api/util/Tristate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/InteractBlockEvent$Secondary#getUseBlockResult was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn set_use_item_result(&self, param_1: util_Tristate) {
    java_method!(self.env, self.object, "setUseItemResult", "(Lorg/spongepowered/api/util/Tristate;)V", CallVoidMethodA, param_1);
  }

  pub fn set_use_block_result(&self, param_1: util_Tristate) {
    java_method!(self.env, self.object, "setUseBlockResult", "(Lorg/spongepowered/api/util/Tristate;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_block_InteractBlockEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_InteractBlockEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_InteractBlockEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_side(&self) -> util_Direction {
    let ret = java_method!(self.env, self.object, "getTargetSide", "()Lorg/spongepowered/api/util/Direction;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/InteractBlockEvent#getTargetSide was null") }
    util_Direction { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_block_NotifyNeighborBlockEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_NotifyNeighborBlockEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_NotifyNeighborBlockEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_neighbors(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalNeighbors", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/NotifyNeighborBlockEvent#getOriginalNeighbors was null") }
    ret
  }

  pub fn get_neighbors(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getNeighbors", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/NotifyNeighborBlockEvent#getNeighbors was null") }
    ret
  }

  pub fn filter_directions(&self, param_1: jobject) {
    java_method!(self.env, self.object, "filterDirections", "(Ljava/util/function/Predicate;)V", CallVoidMethodA, param_1);
  }

}


#[derive(Debug)]
pub struct event_block_TargetBlockEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_TargetBlockEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_TargetBlockEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_block(&self) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "getTargetBlock", "()Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/TargetBlockEvent#getTargetBlock was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_block_TickBlockEvent_Random {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_TickBlockEvent_Random {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_TickBlockEvent_Random {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_TickBlockEvent_Scheduled {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_TickBlockEvent_Scheduled {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_TickBlockEvent_Scheduled {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_TickBlockEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_TickBlockEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_TickBlockEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_BrewingEvent_Finish {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_BrewingEvent_Finish {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_BrewingEvent_Finish {
      env: env,
      object: object
    }
  }

  pub fn get_brewed_item_stacks(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBrewedItemStacks", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/BrewingEvent$Finish#getBrewedItemStacks was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_BrewingEvent_Interrupt {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_BrewingEvent_Interrupt {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_BrewingEvent_Interrupt {
      env: env,
      object: object
    }
  }

  pub fn get_brewed_item_stacks(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBrewedItemStacks", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/BrewingEvent$Interrupt#getBrewedItemStacks was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_BrewingEvent_Start {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_BrewingEvent_Start {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_BrewingEvent_Start {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_BrewingEvent_Tick {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_BrewingEvent_Tick {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_BrewingEvent_Tick {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_BrewingEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_BrewingEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_BrewingEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_tile(&self) -> block_tileentity_carrier_BrewingStand {
    let ret = java_method!(self.env, self.object, "getTargetTile", "()Lorg/spongepowered/api/block/tileentity/carrier/BrewingStand;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/BrewingEvent#getTargetTile was null") }
    block_tileentity_carrier_BrewingStand { env: self.env, object: ret }
  }

  pub fn get_ingredient(&self) -> item_inventory_ItemStackSnapshot {
    let ret = java_method!(self.env, self.object, "getIngredient", "()Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/BrewingEvent#getIngredient was null") }
    item_inventory_ItemStackSnapshot { env: self.env, object: ret }
  }

  pub fn get_target_tile_1(&self) -> block_tileentity_TileEntity {
    let ret = java_method!(self.env, self.object, "getTargetTile", "()Lorg/spongepowered/api/block/tileentity/TileEntity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/BrewingEvent#getTargetTile was null") }
    block_tileentity_TileEntity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_ChangeSignEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_ChangeSignEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_ChangeSignEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_tile(&self) -> block_tileentity_Sign {
    let ret = java_method!(self.env, self.object, "getTargetTile", "()Lorg/spongepowered/api/block/tileentity/Sign;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/ChangeSignEvent#getTargetTile was null") }
    block_tileentity_Sign { env: self.env, object: ret }
  }

  pub fn get_original_text(&self) -> data_manipulator_immutable_tileentity_ImmutableSignData {
    let ret = java_method!(self.env, self.object, "getOriginalText", "()Lorg/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableSignData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/ChangeSignEvent#getOriginalText was null") }
    data_manipulator_immutable_tileentity_ImmutableSignData { env: self.env, object: ret }
  }

  pub fn get_text(&self) -> data_manipulator_mutable_tileentity_SignData {
    let ret = java_method!(self.env, self.object, "getText", "()Lorg/spongepowered/api/data/manipulator/mutable/tileentity/SignData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/ChangeSignEvent#getText was null") }
    data_manipulator_mutable_tileentity_SignData { env: self.env, object: ret }
  }

  pub fn get_target_tile_1(&self) -> block_tileentity_TileEntity {
    let ret = java_method!(self.env, self.object, "getTargetTile", "()Lorg/spongepowered/api/block/tileentity/TileEntity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/ChangeSignEvent#getTargetTile was null") }
    block_tileentity_TileEntity { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_block_tileentity_SmeltEvent_ConsumeFuel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_SmeltEvent_ConsumeFuel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_SmeltEvent_ConsumeFuel {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_SmeltEvent_Finish {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_SmeltEvent_Finish {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_SmeltEvent_Finish {
      env: env,
      object: object
    }
  }

  pub fn get_smelted_items(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSmeltedItems", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/SmeltEvent$Finish#getSmeltedItems was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_SmeltEvent_Interrupt {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_SmeltEvent_Interrupt {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_SmeltEvent_Interrupt {
      env: env,
      object: object
    }
  }

  pub fn get_smelted_items(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSmeltedItems", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/SmeltEvent$Interrupt#getSmeltedItems was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_SmeltEvent_Start {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_SmeltEvent_Start {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_SmeltEvent_Start {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_SmeltEvent_Tick {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_SmeltEvent_Tick {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_SmeltEvent_Tick {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_SmeltEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_SmeltEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_SmeltEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_tile(&self) -> block_tileentity_carrier_Furnace {
    let ret = java_method!(self.env, self.object, "getTargetTile", "()Lorg/spongepowered/api/block/tileentity/carrier/Furnace;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/SmeltEvent#getTargetTile was null") }
    block_tileentity_carrier_Furnace { env: self.env, object: ret }
  }

  pub fn get_fuel(&self) -> item_inventory_ItemStackSnapshot {
    let ret = java_method!(self.env, self.object, "getFuel", "()Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/SmeltEvent#getFuel was null") }
    item_inventory_ItemStackSnapshot { env: self.env, object: ret }
  }

  pub fn get_target_tile_1(&self) -> block_tileentity_TileEntity {
    let ret = java_method!(self.env, self.object, "getTargetTile", "()Lorg/spongepowered/api/block/tileentity/TileEntity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/SmeltEvent#getTargetTile was null") }
    block_tileentity_TileEntity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_block_tileentity_TargetTileEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_block_tileentity_TargetTileEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_block_tileentity_TargetTileEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_tile(&self) -> block_tileentity_TileEntity {
    let ret = java_method!(self.env, self.object, "getTargetTile", "()Lorg/spongepowered/api/block/tileentity/TileEntity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/block/tileentity/TargetTileEntityEvent#getTargetTile was null") }
    block_tileentity_TileEntity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_Cancellable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_Cancellable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_Cancellable {
      env: env,
      object: object
    }
  }

  pub fn is_cancelled(&self) -> bool {
    java_method!(self.env, self.object, "isCancelled", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_cancelled(&self, param_1: bool) {
    java_method!(self.env, self.object, "setCancelled", "(Z)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_cause_Cause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_Cause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_Cause_Builder {
      env: env,
      object: object
    }
  }

  pub fn owner(&self, param_1: jobject) -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, self.object, "owner", "(Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/Cause$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#owner was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn notifier(&self, param_1: jobject) -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, self.object, "notifier", "(Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/Cause$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#notifier was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn named(&self, param_1: event_cause_NamedCause) -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, self.object, "named", "(Lorg/spongepowered/api/event/cause/NamedCause;)Lorg/spongepowered/api/event/cause/Cause$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#named was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn named_1(&self, param_1: jobject, param_2: jobject) -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, self.object, "named", "(Ljava/lang/String;Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/Cause$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#named was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn suggest_named(&self, param_1: jobject, param_2: jobject) -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, self.object, "suggestNamed", "(Ljava/lang/String;Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/Cause$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#suggestNamed was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn add_all(&self, param_1: jobject) -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, self.object, "addAll", "(Ljava/util/Collection;)Lorg/spongepowered/api/event/cause/Cause$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#addAll was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> event_cause_Cause {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/event/cause/Cause;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#build was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_Cause) -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/event/cause/Cause$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#from was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/Cause$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#reset was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_Cause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_Cause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_Cause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/Cause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#builder was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn source(param_1: jobject) -> event_cause_Cause_Builder {
    let ret = java_method!(self.env, "source", "(Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/Cause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#source was null") }
    event_cause_Cause_Builder { env: self.env, object: ret }
  }

  pub fn of(param_1: event_cause_NamedCause) -> event_cause_Cause {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/event/cause/NamedCause;)Lorg/spongepowered/api/event/cause/Cause;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#of was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

  pub fn of_1(param_1: event_cause_NamedCause, param_2: &[event_cause_NamedCause]) -> event_cause_Cause {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/event/cause/NamedCause;[Lorg/spongepowered/api/event/cause/NamedCause;)Lorg/spongepowered/api/event/cause/Cause;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#of was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

  pub fn of_2(param_1: jobject) -> event_cause_Cause {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/event/cause/Cause;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#of was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

  pub fn root(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "root", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#root was null") }
    ret
  }

  pub fn first(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "first", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#first was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn last(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "last", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#last was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn before(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "before", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#before was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn before_1(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "before", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#before was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn after(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "after", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#after was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn after_1(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "after", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#after was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn contains_type(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsType", "(Ljava/lang/Class;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "contains", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_named(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsNamed", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn all_of(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "allOf", "(Ljava/lang/Class;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#allOf was null") }
    ret
  }

  pub fn none_of(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "noneOf", "(Ljava/lang/Class;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#noneOf was null") }
    ret
  }

  pub fn all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "all", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#all was null") }
    ret
  }

  pub fn with(&self, param_1: event_cause_NamedCause, param_2: &[event_cause_NamedCause]) -> event_cause_Cause {
    let ret = java_method!(self.env, self.object, "with", "(Lorg/spongepowered/api/event/cause/NamedCause;[Lorg/spongepowered/api/event/cause/NamedCause;)Lorg/spongepowered/api/event/cause/Cause;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#with was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

  pub fn with_1(&self, param_1: jobject) -> event_cause_Cause {
    let ret = java_method!(self.env, self.object, "with", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/event/cause/Cause;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#with was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

  pub fn merge(&self, param_1: event_cause_Cause) -> event_cause_Cause {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/event/cause/Cause;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#merge was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

  pub fn get_named_causes(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getNamedCauses", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#getNamedCauses was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/Cause#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_DamageModifier_Builder_ImplementedDamageModifier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_DamageModifier_Builder_ImplementedDamageModifier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_DamageModifier_Builder_ImplementedDamageModifier {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> event_cause_entity_damage_DamageModifierType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/damage/DamageModifierType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder$ImplementedDamageModifier#getType was null") }
    event_cause_entity_damage_DamageModifierType { env: self.env, object: ret }
  }

  pub fn get_cause(&self) -> event_cause_Cause {
    let ret = java_method!(self.env, self.object, "getCause", "()Lorg/spongepowered/api/event/cause/Cause;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder$ImplementedDamageModifier#getCause was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder$ImplementedDamageModifier#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_DamageModifier_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_DamageModifier_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_DamageModifier_Builder {
      env: env,
      object: object
    }
  }

  pub fn type_(&self, param_1: event_cause_entity_damage_DamageModifierType) -> event_cause_entity_damage_DamageModifier_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifierType;)Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder#type was null") }
    event_cause_entity_damage_DamageModifier_Builder { env: self.env, object: ret }
  }

  pub fn cause(&self, param_1: event_cause_Cause) -> event_cause_entity_damage_DamageModifier_Builder {
    let ret = java_method!(self.env, self.object, "cause", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder#cause was null") }
    event_cause_entity_damage_DamageModifier_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> event_cause_entity_damage_DamageModifier {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder#build was null") }
    event_cause_entity_damage_DamageModifier { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_damage_DamageModifier) -> event_cause_entity_damage_DamageModifier_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder#from was null") }
    event_cause_entity_damage_DamageModifier_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_damage_DamageModifier_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder#reset was null") }
    event_cause_entity_damage_DamageModifier_Builder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_DamageModifier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_DamageModifier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_DamageModifier {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_damage_DamageModifier_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier#builder was null") }
    event_cause_entity_damage_DamageModifier_Builder { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> event_cause_entity_damage_DamageModifierType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/damage/DamageModifierType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier#getType was null") }
    event_cause_entity_damage_DamageModifierType { env: self.env, object: ret }
  }

  pub fn get_cause(&self) -> event_cause_Cause {
    let ret = java_method!(self.env, self.object, "getCause", "()Lorg/spongepowered/api/event/cause/Cause;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/DamageModifier#getCause was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_DamageModifierType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_DamageModifierType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_DamageModifierType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_DamageModifierTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_DamageModifierTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_DamageModifierTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_DamageType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_DamageType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_DamageType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_DamageTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_DamageTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_DamageTypes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_cause_entity_damage_source_BlockDamageSource_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_BlockDamageSource_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_BlockDamageSource_Builder {
      env: env,
      object: object
    }
  }

  pub fn block(&self, param_1: world_Location) -> event_cause_entity_damage_source_BlockDamageSource_Builder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/event/cause/entity/damage/source/BlockDamageSource$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/BlockDamageSource$Builder#block was null") }
    event_cause_entity_damage_source_BlockDamageSource_Builder { env: self.env, object: ret }
  }

  pub fn block_1(&self, param_1: block_BlockSnapshot) -> event_cause_entity_damage_source_BlockDamageSource_Builder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/block/BlockSnapshot;)Lorg/spongepowered/api/event/cause/entity/damage/source/BlockDamageSource$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/BlockDamageSource$Builder#block was null") }
    event_cause_entity_damage_source_BlockDamageSource_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_BlockDamageSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_BlockDamageSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_BlockDamageSource {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_damage_source_BlockDamageSource_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/damage/source/BlockDamageSource$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/BlockDamageSource#builder was null") }
    event_cause_entity_damage_source_BlockDamageSource_Builder { env: self.env, object: ret }
  }

  pub fn get_location(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/BlockDamageSource#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_block_snapshot(&self) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "getBlockSnapshot", "()Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/BlockDamageSource#getBlockSnapshot was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_common_AbstractDamageSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_common_AbstractDamageSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_common_AbstractDamageSource {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> event_cause_entity_damage_DamageType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/damage/DamageType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSource#getType was null") }
    event_cause_entity_damage_DamageType { env: self.env, object: ret }
  }

  pub fn is_absolute(&self) -> bool {
    java_method!(self.env, self.object, "isAbsolute", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_bypassing_armor(&self) -> bool {
    java_method!(self.env, self.object, "isBypassingArmor", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_scaled_by_difficulty(&self) -> bool {
    java_method!(self.env, self.object, "isScaledByDifficulty", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_explosive(&self) -> bool {
    java_method!(self.env, self.object, "isExplosive", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_magic(&self) -> bool {
    java_method!(self.env, self.object, "isMagic", "()Z", CallBooleanMethod) == 1
  }

  pub fn does_affect_creative(&self) -> bool {
    java_method!(self.env, self.object, "doesAffectCreative", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_common_AbstractDamageSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_common_AbstractDamageSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_common_AbstractDamageSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_cause_entity_damage_source_common_AbstractDamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#<init> was null") }
    event_cause_entity_damage_source_common_AbstractDamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn scales_with_difficulty(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "scalesWithDifficulty", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#scalesWithDifficulty was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn bypasses_armor(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "bypassesArmor", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#bypassesArmor was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn explosion(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "explosion", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#explosion was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn absolute(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "absolute", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#absolute was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn magical(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "magical", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#magical was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn creative(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "creative", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#creative was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: event_cause_entity_damage_DamageType) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageType;)Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#type was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_damage_source_DamageSource) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource;)Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#from was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#reset was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractDamageSourceBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_common_AbstractEntityDamageSource_AbstractEntityDamageSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_common_AbstractEntityDamageSource_AbstractEntityDamageSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_common_AbstractEntityDamageSource_AbstractEntityDamageSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_cause_entity_damage_source_common_AbstractEntityDamageSource_AbstractEntityDamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/cause/entity/damage/source/common/AbstractEntityDamageSource$AbstractEntityDamageSourceBuilder", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractEntityDamageSource$AbstractEntityDamageSourceBuilder#<init> was null") }
    event_cause_entity_damage_source_common_AbstractEntityDamageSource_AbstractEntityDamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn entity(&self, param_1: entity_Entity) -> event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/damage/source/EntityDamageSource$EntityDamageSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractEntityDamageSource$AbstractEntityDamageSourceBuilder#entity was null") }
    event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/damage/source/EntityDamageSource$EntityDamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractEntityDamageSource$AbstractEntityDamageSourceBuilder#reset was null") }
    event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractEntityDamageSource$AbstractEntityDamageSourceBuilder#reset was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractEntityDamageSource$AbstractEntityDamageSourceBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_common_AbstractEntityDamageSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_common_AbstractEntityDamageSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_common_AbstractEntityDamageSource {
      env: env,
      object: object
    }
  }

  pub fn get_source(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getSource", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractEntityDamageSource#getSource was null") }
    entity_Entity { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> event_cause_entity_damage_DamageType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/damage/DamageType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractEntityDamageSource#getType was null") }
    event_cause_entity_damage_DamageType { env: self.env, object: ret }
  }

  pub fn is_absolute(&self) -> bool {
    java_method!(self.env, self.object, "isAbsolute", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_bypassing_armor(&self) -> bool {
    java_method!(self.env, self.object, "isBypassingArmor", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_scaled_by_difficulty(&self) -> bool {
    java_method!(self.env, self.object, "isScaledByDifficulty", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_explosive(&self) -> bool {
    java_method!(self.env, self.object, "isExplosive", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_magic(&self) -> bool {
    java_method!(self.env, self.object, "isMagic", "()Z", CallBooleanMethod) == 1
  }

  pub fn does_affect_creative(&self) -> bool {
    java_method!(self.env, self.object, "doesAffectCreative", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_common_AbstractIndirectEntityDamageSource_AbstractIndirectEntityDamageSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_common_AbstractIndirectEntityDamageSource_AbstractIndirectEntityDamageSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_common_AbstractIndirectEntityDamageSource_AbstractIndirectEntityDamageSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_cause_entity_damage_source_common_AbstractIndirectEntityDamageSource_AbstractIndirectEntityDamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource$AbstractIndirectEntityDamageSourceBuilder", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource$AbstractIndirectEntityDamageSourceBuilder#<init> was null") }
    event_cause_entity_damage_source_common_AbstractIndirectEntityDamageSource_AbstractIndirectEntityDamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn entity(&self, param_1: entity_Entity) -> event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/damage/source/IndirectEntityDamageSource$AbstractBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource$AbstractIndirectEntityDamageSourceBuilder#entity was null") }
    event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder { env: self.env, object: ret }
  }

  pub fn proxy_source(&self, param_1: entity_Entity) -> event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder {
    let ret = java_method!(self.env, self.object, "proxySource", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/damage/source/IndirectEntityDamageSource$AbstractBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource$AbstractIndirectEntityDamageSourceBuilder#proxySource was null") }
    event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/damage/source/IndirectEntityDamageSource$AbstractBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource$AbstractIndirectEntityDamageSourceBuilder#reset was null") }
    event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/damage/source/EntityDamageSource$EntityDamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource$AbstractIndirectEntityDamageSourceBuilder#reset was null") }
    event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn entity_1(&self, param_1: entity_Entity) -> event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/damage/source/EntityDamageSource$EntityDamageSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource$AbstractIndirectEntityDamageSourceBuilder#entity was null") }
    event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource$AbstractIndirectEntityDamageSourceBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn reset_3(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource$AbstractIndirectEntityDamageSourceBuilder#reset was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_common_AbstractIndirectEntityDamageSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_common_AbstractIndirectEntityDamageSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_common_AbstractIndirectEntityDamageSource {
      env: env,
      object: object
    }
  }

  pub fn get_source(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getSource", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource#getSource was null") }
    entity_Entity { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> event_cause_entity_damage_DamageType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/damage/DamageType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource#getType was null") }
    event_cause_entity_damage_DamageType { env: self.env, object: ret }
  }

  pub fn is_absolute(&self) -> bool {
    java_method!(self.env, self.object, "isAbsolute", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_bypassing_armor(&self) -> bool {
    java_method!(self.env, self.object, "isBypassingArmor", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_scaled_by_difficulty(&self) -> bool {
    java_method!(self.env, self.object, "isScaledByDifficulty", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_explosive(&self) -> bool {
    java_method!(self.env, self.object, "isExplosive", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_magic(&self) -> bool {
    java_method!(self.env, self.object, "isMagic", "()Z", CallBooleanMethod) == 1
  }

  pub fn does_affect_creative(&self) -> bool {
    java_method!(self.env, self.object, "doesAffectCreative", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_indirect_source(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getIndirectSource", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/common/AbstractIndirectEntityDamageSource#getIndirectSource was null") }
    entity_Entity { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_cause_entity_damage_source_DamageSource_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_DamageSource_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_DamageSource_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn scales_with_difficulty(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "scalesWithDifficulty", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder#scalesWithDifficulty was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn bypasses_armor(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "bypassesArmor", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder#bypassesArmor was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn explosion(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "explosion", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder#explosion was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn absolute(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "absolute", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder#absolute was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn magical(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "magical", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder#magical was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn creative(&self) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "creative", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder#creative was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: event_cause_entity_damage_DamageType) -> event_cause_entity_damage_source_DamageSource_DamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageType;)Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder#type was null") }
    event_cause_entity_damage_source_DamageSource_DamageSourceBuilder { env: self.env, object: ret }
  }

  pub fn build(&self) -> event_cause_entity_damage_source_DamageSource {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource$DamageSourceBuilder#build was null") }
    event_cause_entity_damage_source_DamageSource { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_DamageSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_DamageSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_DamageSource {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_damage_source_DamageSource_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/damage/source/DamageSource$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource#builder was null") }
    event_cause_entity_damage_source_DamageSource_Builder { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> event_cause_entity_damage_DamageType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/damage/DamageType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/DamageSource#getType was null") }
    event_cause_entity_damage_DamageType { env: self.env, object: ret }
  }

  pub fn is_absolute(&self) -> bool {
    java_method!(self.env, self.object, "isAbsolute", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_bypassing_armor(&self) -> bool {
    java_method!(self.env, self.object, "isBypassingArmor", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_scaled_by_difficulty(&self) -> bool {
    java_method!(self.env, self.object, "isScaledByDifficulty", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_explosive(&self) -> bool {
    java_method!(self.env, self.object, "isExplosive", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_magic(&self) -> bool {
    java_method!(self.env, self.object, "isMagic", "()Z", CallBooleanMethod) == 1
  }

  pub fn does_affect_creative(&self) -> bool {
    java_method!(self.env, self.object, "doesAffectCreative", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_DamageSources {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_DamageSources {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_DamageSources {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_EntityDamageSource_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_EntityDamageSource_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_EntityDamageSource_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn entity(&self, param_1: entity_Entity) -> event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/damage/source/EntityDamageSource$EntityDamageSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/EntityDamageSource$EntityDamageSourceBuilder#entity was null") }
    event_cause_entity_damage_source_EntityDamageSource_EntityDamageSourceBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_EntityDamageSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_EntityDamageSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_EntityDamageSource {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_damage_source_EntityDamageSource_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/damage/source/EntityDamageSource$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/EntityDamageSource#builder was null") }
    event_cause_entity_damage_source_EntityDamageSource_Builder { env: self.env, object: ret }
  }

  pub fn get_source(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getSource", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/EntityDamageSource#getSource was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_FallingBlockDamageSource_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_FallingBlockDamageSource_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_FallingBlockDamageSource_Builder {
      env: env,
      object: object
    }
  }

  pub fn falling_block(&self, param_1: data_manipulator_immutable_entity_ImmutableFallingBlockData) -> event_cause_entity_damage_source_FallingBlockDamageSource_Builder {
    let ret = java_method!(self.env, self.object, "fallingBlock", "(Lorg/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallingBlockData;)Lorg/spongepowered/api/event/cause/entity/damage/source/FallingBlockDamageSource$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/FallingBlockDamageSource$Builder#fallingBlock was null") }
    event_cause_entity_damage_source_FallingBlockDamageSource_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_FallingBlockDamageSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_FallingBlockDamageSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_FallingBlockDamageSource {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_damage_source_FallingBlockDamageSource_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/damage/source/FallingBlockDamageSource$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/FallingBlockDamageSource#builder was null") }
    event_cause_entity_damage_source_FallingBlockDamageSource_Builder { env: self.env, object: ret }
  }

  pub fn get_source(&self) -> entity_FallingBlock {
    let ret = java_method!(self.env, self.object, "getSource", "()Lorg/spongepowered/api/entity/FallingBlock;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/FallingBlockDamageSource#getSource was null") }
    entity_FallingBlock { env: self.env, object: ret }
  }

  pub fn get_falling_block_data(&self) -> data_manipulator_immutable_entity_ImmutableFallingBlockData {
    let ret = java_method!(self.env, self.object, "getFallingBlockData", "()Lorg/spongepowered/api/data/manipulator/immutable/entity/ImmutableFallingBlockData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/FallingBlockDamageSource#getFallingBlockData was null") }
    data_manipulator_immutable_entity_ImmutableFallingBlockData { env: self.env, object: ret }
  }

  pub fn get_source_1(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getSource", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/FallingBlockDamageSource#getSource was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder {
      env: env,
      object: object
    }
  }

  pub fn proxy_source(&self, param_1: entity_Entity) -> event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder {
    let ret = java_method!(self.env, self.object, "proxySource", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/damage/source/IndirectEntityDamageSource$AbstractBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/IndirectEntityDamageSource$AbstractBuilder#proxySource was null") }
    event_cause_entity_damage_source_IndirectEntityDamageSource_AbstractBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_IndirectEntityDamageSource_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_IndirectEntityDamageSource_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_IndirectEntityDamageSource_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_damage_source_IndirectEntityDamageSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_damage_source_IndirectEntityDamageSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_damage_source_IndirectEntityDamageSource {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_damage_source_IndirectEntityDamageSource_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/damage/source/IndirectEntityDamageSource$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/IndirectEntityDamageSource#builder was null") }
    event_cause_entity_damage_source_IndirectEntityDamageSource_Builder { env: self.env, object: ret }
  }

  pub fn get_indirect_source(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getIndirectSource", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/damage/source/IndirectEntityDamageSource#getIndirectSource was null") }
    entity_Entity { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_cause_entity_dismount_DismountType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_dismount_DismountType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_dismount_DismountType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_dismount_DismountTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_dismount_DismountTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_dismount_DismountTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_HealingType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_HealingType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_HealingType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_HealingTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_HealingTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_HealingTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_HealthModifier_Builder_ImplementedHealthModifier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_HealthModifier_Builder_ImplementedHealthModifier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_HealthModifier_Builder_ImplementedHealthModifier {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> event_cause_entity_health_HealthModifierType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/health/HealthModifierType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder$ImplementedHealthModifier#getType was null") }
    event_cause_entity_health_HealthModifierType { env: self.env, object: ret }
  }

  pub fn get_cause(&self) -> event_cause_Cause {
    let ret = java_method!(self.env, self.object, "getCause", "()Lorg/spongepowered/api/event/cause/Cause;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder$ImplementedHealthModifier#getCause was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder$ImplementedHealthModifier#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_HealthModifier_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_HealthModifier_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_HealthModifier_Builder {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_health_HealthModifier_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/health/HealthModifier$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder#builder was null") }
    event_cause_entity_health_HealthModifier_Builder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: event_cause_entity_health_HealthModifierType) -> event_cause_entity_health_HealthModifier_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifierType;)Lorg/spongepowered/api/event/cause/entity/health/HealthModifier$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder#type was null") }
    event_cause_entity_health_HealthModifier_Builder { env: self.env, object: ret }
  }

  pub fn cause(&self, param_1: event_cause_Cause) -> event_cause_entity_health_HealthModifier_Builder {
    let ret = java_method!(self.env, self.object, "cause", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/event/cause/entity/health/HealthModifier$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder#cause was null") }
    event_cause_entity_health_HealthModifier_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> event_cause_entity_health_HealthModifier {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder#build was null") }
    event_cause_entity_health_HealthModifier { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_health_HealthModifier) -> event_cause_entity_health_HealthModifier_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;)Lorg/spongepowered/api/event/cause/entity/health/HealthModifier$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder#from was null") }
    event_cause_entity_health_HealthModifier_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_health_HealthModifier_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/health/HealthModifier$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder#reset was null") }
    event_cause_entity_health_HealthModifier_Builder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_HealthModifier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_HealthModifier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_HealthModifier {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_health_HealthModifier_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/health/HealthModifier$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier#builder was null") }
    event_cause_entity_health_HealthModifier_Builder { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> event_cause_entity_health_HealthModifierType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/health/HealthModifierType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier#getType was null") }
    event_cause_entity_health_HealthModifierType { env: self.env, object: ret }
  }

  pub fn get_cause(&self) -> event_cause_Cause {
    let ret = java_method!(self.env, self.object, "getCause", "()Lorg/spongepowered/api/event/cause/Cause;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/HealthModifier#getCause was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_HealthModifierType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_HealthModifierType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_HealthModifierType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_HealthModifierTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_HealthModifierTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_HealthModifierTypes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_cause_entity_health_source_BlockHealingSource_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_BlockHealingSource_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_BlockHealingSource_Builder {
      env: env,
      object: object
    }
  }

  pub fn block(&self, param_1: world_Location) -> event_cause_entity_health_source_BlockHealingSource_Builder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/event/cause/entity/health/source/BlockHealingSource$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/BlockHealingSource$Builder#block was null") }
    event_cause_entity_health_source_BlockHealingSource_Builder { env: self.env, object: ret }
  }

  pub fn block_1(&self, param_1: block_BlockSnapshot) -> event_cause_entity_health_source_BlockHealingSource_Builder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/block/BlockSnapshot;)Lorg/spongepowered/api/event/cause/entity/health/source/BlockHealingSource$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/BlockHealingSource$Builder#block was null") }
    event_cause_entity_health_source_BlockHealingSource_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_BlockHealingSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_BlockHealingSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_BlockHealingSource {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_health_source_BlockHealingSource_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/health/source/BlockHealingSource$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/BlockHealingSource#builder was null") }
    event_cause_entity_health_source_BlockHealingSource_Builder { env: self.env, object: ret }
  }

  pub fn get_location(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/BlockHealingSource#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_block(&self) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "getBlock", "()Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/BlockHealingSource#getBlock was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_common_AbstractEntityHealingSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_common_AbstractEntityHealingSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_common_AbstractEntityHealingSource {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: event_cause_entity_health_source_common_AbstractEntityHealingSourceBuilder) -> event_cause_entity_health_source_common_AbstractEntityHealingSource {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder;)Lorg/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSource", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSource#<init> was null") }
    event_cause_entity_health_source_common_AbstractEntityHealingSource { env: self.env, object: ret }
  }

  pub fn get_source(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getSource", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSource#getSource was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_common_AbstractEntityHealingSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_common_AbstractEntityHealingSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_common_AbstractEntityHealingSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_cause_entity_health_source_common_AbstractEntityHealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder#<init> was null") }
    event_cause_entity_health_source_common_AbstractEntityHealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_health_source_EntityHealingSource) -> event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/health/source/EntityHealingSource;)Lorg/spongepowered/api/event/cause/entity/health/source/EntityHealingSource$EntityHealingSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder#from was null") }
    event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/health/source/EntityHealingSource$EntityHealingSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder#reset was null") }
    event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn entity(&self, param_1: entity_Entity) -> event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/health/source/EntityHealingSource$EntityHealingSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder#entity was null") }
    event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder#reset was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: event_cause_entity_health_source_HealingSource) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource;)Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder#from was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractEntityHealingSourceBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_common_AbstractHealingSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_common_AbstractHealingSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_common_AbstractHealingSource {
      env: env,
      object: object
    }
  }

  pub fn get_healing_type(&self) -> event_cause_entity_health_HealingType {
    let ret = java_method!(self.env, self.object, "getHealingType", "()Lorg/spongepowered/api/event/cause/entity/health/HealingType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSource#getHealingType was null") }
    event_cause_entity_health_HealingType { env: self.env, object: ret }
  }

  pub fn is_difficulty_scaled(&self) -> bool {
    java_method!(self.env, self.object, "isDifficultyScaled", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_magic(&self) -> bool {
    java_method!(self.env, self.object, "isMagic", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_common_AbstractHealingSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_common_AbstractHealingSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_common_AbstractHealingSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_cause_entity_health_source_common_AbstractHealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSourceBuilder", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSourceBuilder#<init> was null") }
    event_cause_entity_health_source_common_AbstractHealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn scales_with_difficulty(&self) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "scalesWithDifficulty", "()Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSourceBuilder#scalesWithDifficulty was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn magical(&self) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "magical", "()Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSourceBuilder#magical was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: event_cause_entity_health_HealingType) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/health/HealingType;)Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSourceBuilder#type was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_health_source_HealingSource) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource;)Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSourceBuilder#from was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSourceBuilder#reset was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSourceBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractHealingSourceBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_common_AbstractIndirectEntityHealingSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_common_AbstractIndirectEntityHealingSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_common_AbstractIndirectEntityHealingSource {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_cause_entity_health_source_common_AbstractIndirectEntityHealingSource {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/cause/entity/health/source/common/AbstractIndirectEntityHealingSource", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/common/AbstractIndirectEntityHealingSource#<init> was null") }
    event_cause_entity_health_source_common_AbstractIndirectEntityHealingSource { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_cause_entity_health_source_EntityHealingSource_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_EntityHealingSource_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_EntityHealingSource_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn entity(&self, param_1: entity_Entity) -> event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/health/source/EntityHealingSource$EntityHealingSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/EntityHealingSource$EntityHealingSourceBuilder#entity was null") }
    event_cause_entity_health_source_EntityHealingSource_EntityHealingSourceBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_EntityHealingSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_EntityHealingSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_EntityHealingSource {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_health_source_EntityHealingSource_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/health/source/EntityHealingSource$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/EntityHealingSource#builder was null") }
    event_cause_entity_health_source_EntityHealingSource_Builder { env: self.env, object: ret }
  }

  pub fn get_source(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getSource", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/EntityHealingSource#getSource was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_HealingSource_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_HealingSource_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_HealingSource_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn scales_with_difficulty(&self) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "scalesWithDifficulty", "()Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder#scalesWithDifficulty was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn magical(&self) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "magical", "()Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder#magical was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: event_cause_entity_health_HealingType) -> event_cause_entity_health_source_HealingSource_HealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/health/HealingType;)Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder#type was null") }
    event_cause_entity_health_source_HealingSource_HealingSourceBuilder { env: self.env, object: ret }
  }

  pub fn build(&self) -> event_cause_entity_health_source_HealingSource {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/HealingSource$HealingSourceBuilder#build was null") }
    event_cause_entity_health_source_HealingSource { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_HealingSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_HealingSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_HealingSource {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_health_source_HealingSource_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/health/source/HealingSource$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/HealingSource#builder was null") }
    event_cause_entity_health_source_HealingSource_Builder { env: self.env, object: ret }
  }

  pub fn get_healing_type(&self) -> event_cause_entity_health_HealingType {
    let ret = java_method!(self.env, self.object, "getHealingType", "()Lorg/spongepowered/api/event/cause/entity/health/HealingType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/HealingSource#getHealingType was null") }
    event_cause_entity_health_HealingType { env: self.env, object: ret }
  }

  pub fn is_difficulty_scaled(&self) -> bool {
    java_method!(self.env, self.object, "isDifficultyScaled", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_magic(&self) -> bool {
    java_method!(self.env, self.object, "isMagic", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_HealingSources {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_HealingSources {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_HealingSources {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_IndirectEntityHealingSource_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_IndirectEntityHealingSource_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_IndirectEntityHealingSource_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_IndirectEntityHealingSource_IndirectEntityHealingSourceBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_IndirectEntityHealingSource_IndirectEntityHealingSourceBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_IndirectEntityHealingSource_IndirectEntityHealingSourceBuilder {
      env: env,
      object: object
    }
  }

  pub fn indirect_entity(&self, param_1: entity_Entity) -> event_cause_entity_health_source_IndirectEntityHealingSource_IndirectEntityHealingSourceBuilder {
    let ret = java_method!(self.env, self.object, "indirectEntity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/health/source/IndirectEntityHealingSource$IndirectEntityHealingSourceBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/IndirectEntityHealingSource$IndirectEntityHealingSourceBuilder#indirectEntity was null") }
    event_cause_entity_health_source_IndirectEntityHealingSource_IndirectEntityHealingSourceBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_health_source_IndirectEntityHealingSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_health_source_IndirectEntityHealingSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_health_source_IndirectEntityHealingSource {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_health_source_IndirectEntityHealingSource_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/health/source/IndirectEntityHealingSource$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/IndirectEntityHealingSource#builder was null") }
    event_cause_entity_health_source_IndirectEntityHealingSource_Builder { env: self.env, object: ret }
  }

  pub fn get_indirect_source(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getIndirectSource", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/health/source/IndirectEntityHealingSource#getIndirectSource was null") }
    entity_Entity { env: self.env, object: ret }
  }

}



#[derive(Debug)]
pub struct event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn block(&self, param_1: block_BlockSnapshot) -> event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/block/BlockSnapshot;)Lorg/spongepowered/api/event/cause/entity/spawn/BlockSpawnCause$BlockSpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/BlockSpawnCause$BlockSpawnCauseBuilder#block was null") }
    event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_BlockSpawnCause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_BlockSpawnCause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_BlockSpawnCause_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_BlockSpawnCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_BlockSpawnCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_BlockSpawnCause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_spawn_BlockSpawnCause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/spawn/BlockSpawnCause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/BlockSpawnCause#builder was null") }
    event_cause_entity_spawn_BlockSpawnCause_Builder { env: self.env, object: ret }
  }

  pub fn get_block_snapshot(&self) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "getBlockSnapshot", "()Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/BlockSpawnCause#getBlockSnapshot was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_BreedingSpawnCause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_BreedingSpawnCause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_BreedingSpawnCause_Builder {
      env: env,
      object: object
    }
  }

  pub fn mate(&self, param_1: entity_Entity) -> event_cause_entity_spawn_BreedingSpawnCause_Builder {
    let ret = java_method!(self.env, self.object, "mate", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/spawn/BreedingSpawnCause$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/BreedingSpawnCause$Builder#mate was null") }
    event_cause_entity_spawn_BreedingSpawnCause_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_BreedingSpawnCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_BreedingSpawnCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_BreedingSpawnCause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_spawn_BreedingSpawnCause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/spawn/BreedingSpawnCause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/BreedingSpawnCause#builder was null") }
    event_cause_entity_spawn_BreedingSpawnCause_Builder { env: self.env, object: ret }
  }

  pub fn get_mate(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getMate", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/BreedingSpawnCause#getMate was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_common_AbstractBlockSpawnCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_common_AbstractBlockSpawnCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_common_AbstractBlockSpawnCause {
      env: env,
      object: object
    }
  }

  pub fn get_block_snapshot(&self) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "getBlockSnapshot", "()Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractBlockSpawnCause#getBlockSnapshot was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_common_AbstractBlockSpawnCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_common_AbstractBlockSpawnCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_common_AbstractBlockSpawnCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn block(&self, param_1: block_BlockSnapshot) -> event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/block/BlockSnapshot;)Lorg/spongepowered/api/event/cause/entity/spawn/BlockSpawnCause$BlockSpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractBlockSpawnCauseBuilder#block was null") }
    event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_spawn_BlockSpawnCause) -> event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/spawn/BlockSpawnCause;)Lorg/spongepowered/api/event/cause/entity/spawn/BlockSpawnCause$BlockSpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractBlockSpawnCauseBuilder#from was null") }
    event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/spawn/BlockSpawnCause$BlockSpawnCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractBlockSpawnCauseBuilder#reset was null") }
    event_cause_entity_spawn_BlockSpawnCause_BlockSpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractBlockSpawnCauseBuilder#reset was null") }
    event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: event_cause_entity_spawn_SpawnCause) -> event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause;)Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractBlockSpawnCauseBuilder#from was null") }
    event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractBlockSpawnCauseBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractBlockSpawnCauseBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_common_AbstractEntitySpawnCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_common_AbstractEntitySpawnCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_common_AbstractEntitySpawnCause {
      env: env,
      object: object
    }
  }

  pub fn get_entity(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractEntitySpawnCause#getEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_common_AbstractEntitySpawnCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_common_AbstractEntitySpawnCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_common_AbstractEntitySpawnCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn entity(&self, param_1: entity_Entity) -> event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/spawn/EntitySpawnCause$EntitySpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractEntitySpawnCauseBuilder#entity was null") }
    event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_spawn_EntitySpawnCause) -> event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/spawn/EntitySpawnCause;)Lorg/spongepowered/api/event/cause/entity/spawn/EntitySpawnCause$EntitySpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractEntitySpawnCauseBuilder#from was null") }
    event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/spawn/EntitySpawnCause$EntitySpawnCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractEntitySpawnCauseBuilder#reset was null") }
    event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractEntitySpawnCauseBuilder#reset was null") }
    event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: event_cause_entity_spawn_SpawnCause) -> event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause;)Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractEntitySpawnCauseBuilder#from was null") }
    event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractEntitySpawnCauseBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractEntitySpawnCauseBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_common_AbstractSpawnCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_common_AbstractSpawnCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_common_AbstractSpawnCause {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> event_cause_entity_spawn_SpawnType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/spawn/SpawnType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractSpawnCause#getType was null") }
    event_cause_entity_spawn_SpawnType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_common_AbstractSpawnCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_common_AbstractSpawnCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_common_AbstractSpawnCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn type_(&self, param_1: event_cause_entity_spawn_SpawnType) -> event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/spawn/SpawnType;)Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractSpawnCauseBuilder#type was null") }
    event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_spawn_SpawnCause) -> event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause;)Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractSpawnCauseBuilder#from was null") }
    event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractSpawnCauseBuilder#reset was null") }
    event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractSpawnCauseBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/common/AbstractSpawnCauseBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_cause_entity_spawn_EntitySpawnCause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_EntitySpawnCause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_EntitySpawnCause_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn entity(&self, param_1: entity_Entity) -> event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/spawn/EntitySpawnCause$EntitySpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/EntitySpawnCause$EntitySpawnCauseBuilder#entity was null") }
    event_cause_entity_spawn_EntitySpawnCause_EntitySpawnCauseBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_EntitySpawnCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_EntitySpawnCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_EntitySpawnCause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_spawn_EntitySpawnCause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/spawn/EntitySpawnCause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/EntitySpawnCause#builder was null") }
    event_cause_entity_spawn_EntitySpawnCause_Builder { env: self.env, object: ret }
  }

  pub fn get_entity(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/EntitySpawnCause#getEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_MobSpawnerSpawnCause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_MobSpawnerSpawnCause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_MobSpawnerSpawnCause_Builder {
      env: env,
      object: object
    }
  }

  pub fn spawner_data(&self, param_1: data_manipulator_immutable_ImmutableMobSpawnerData) -> event_cause_entity_spawn_MobSpawnerSpawnCause_Builder {
    let ret = java_method!(self.env, self.object, "spawnerData", "(Lorg/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData;)Lorg/spongepowered/api/event/cause/entity/spawn/MobSpawnerSpawnCause$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/MobSpawnerSpawnCause$Builder#spawnerData was null") }
    event_cause_entity_spawn_MobSpawnerSpawnCause_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_MobSpawnerSpawnCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_MobSpawnerSpawnCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_MobSpawnerSpawnCause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_spawn_MobSpawnerSpawnCause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/spawn/MobSpawnerSpawnCause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/MobSpawnerSpawnCause#builder was null") }
    event_cause_entity_spawn_MobSpawnerSpawnCause_Builder { env: self.env, object: ret }
  }

  pub fn get_mob_spawner_data(&self) -> data_manipulator_immutable_ImmutableMobSpawnerData {
    let ret = java_method!(self.env, self.object, "getMobSpawnerData", "()Lorg/spongepowered/api/data/manipulator/immutable/ImmutableMobSpawnerData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/MobSpawnerSpawnCause#getMobSpawnerData was null") }
    data_manipulator_immutable_ImmutableMobSpawnerData { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_cause_entity_spawn_SpawnCause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_SpawnCause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_SpawnCause_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn type_(&self, param_1: event_cause_entity_spawn_SpawnType) -> event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/spawn/SpawnType;)Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder#type was null") }
    event_cause_entity_spawn_SpawnCause_SpawnCauseBuilder { env: self.env, object: ret }
  }

  pub fn build(&self) -> event_cause_entity_spawn_SpawnCause {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/SpawnCause$SpawnCauseBuilder#build was null") }
    event_cause_entity_spawn_SpawnCause { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_SpawnCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_SpawnCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_SpawnCause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_spawn_SpawnCause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/spawn/SpawnCause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/SpawnCause#builder was null") }
    event_cause_entity_spawn_SpawnCause_Builder { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> event_cause_entity_spawn_SpawnType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/event/cause/entity/spawn/SpawnType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/SpawnCause#getType was null") }
    event_cause_entity_spawn_SpawnType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_SpawnType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_SpawnType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_SpawnType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_SpawnTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_SpawnTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_SpawnTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_WeatherSpawnCause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_WeatherSpawnCause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_WeatherSpawnCause_Builder {
      env: env,
      object: object
    }
  }

  pub fn weather(&self, param_1: world_weather_Weather) -> event_cause_entity_spawn_WeatherSpawnCause_Builder {
    let ret = java_method!(self.env, self.object, "weather", "(Lorg/spongepowered/api/world/weather/Weather;)Lorg/spongepowered/api/event/cause/entity/spawn/WeatherSpawnCause$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/WeatherSpawnCause$Builder#weather was null") }
    event_cause_entity_spawn_WeatherSpawnCause_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_spawn_WeatherSpawnCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_spawn_WeatherSpawnCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_spawn_WeatherSpawnCause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_spawn_WeatherSpawnCause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/spawn/WeatherSpawnCause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/WeatherSpawnCause#builder was null") }
    event_cause_entity_spawn_WeatherSpawnCause_Builder { env: self.env, object: ret }
  }

  pub fn get_weather(&self) -> world_weather_Weather {
    let ret = java_method!(self.env, self.object, "getWeather", "()Lorg/spongepowered/api/world/weather/Weather;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/spawn/WeatherSpawnCause#getWeather was null") }
    world_weather_Weather { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_common_AbstractEntityTeleportCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_common_AbstractEntityTeleportCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_common_AbstractEntityTeleportCause {
      env: env,
      object: object
    }
  }

  pub fn get_teleporter(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTeleporter", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractEntityTeleportCause#getTeleporter was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_common_AbstractEntityTeleportCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_common_AbstractEntityTeleportCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_common_AbstractEntityTeleportCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn entity(&self, param_1: entity_Entity) -> event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/teleport/EntityTeleportCause$EntityTeleportCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractEntityTeleportCauseBuilder#entity was null") }
    event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_teleport_EntityTeleportCause) -> event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/teleport/EntityTeleportCause;)Lorg/spongepowered/api/event/cause/entity/teleport/EntityTeleportCause$EntityTeleportCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractEntityTeleportCauseBuilder#from was null") }
    event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/teleport/EntityTeleportCause$EntityTeleportCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractEntityTeleportCauseBuilder#reset was null") }
    event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractEntityTeleportCauseBuilder#reset was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: event_cause_entity_teleport_TeleportCause) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause;)Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractEntityTeleportCauseBuilder#from was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractEntityTeleportCauseBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractEntityTeleportCauseBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_common_AbstractPortalTeleportCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_common_AbstractPortalTeleportCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_common_AbstractPortalTeleportCause {
      env: env,
      object: object
    }
  }

  pub fn get_teleporter(&self) -> world_PortalAgent {
    let ret = java_method!(self.env, self.object, "getTeleporter", "()Lorg/spongepowered/api/world/PortalAgent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractPortalTeleportCause#getTeleporter was null") }
    world_PortalAgent { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_common_AbstractPortalTeleportCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_common_AbstractPortalTeleportCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_common_AbstractPortalTeleportCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn agent(&self, param_1: world_PortalAgent) -> event_cause_entity_teleport_PortalTeleportCause_PortalTeleportCauseBuilder {
    let ret = java_method!(self.env, self.object, "agent", "(Lorg/spongepowered/api/world/PortalAgent;)Lorg/spongepowered/api/event/cause/entity/teleport/PortalTeleportCause$PortalTeleportCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractPortalTeleportCauseBuilder#agent was null") }
    event_cause_entity_teleport_PortalTeleportCause_PortalTeleportCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_teleport_PortalTeleportCause) -> event_cause_entity_teleport_PortalTeleportCause_PortalTeleportCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/teleport/PortalTeleportCause;)Lorg/spongepowered/api/event/cause/entity/teleport/PortalTeleportCause$PortalTeleportCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractPortalTeleportCauseBuilder#from was null") }
    event_cause_entity_teleport_PortalTeleportCause_PortalTeleportCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_teleport_PortalTeleportCause_PortalTeleportCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/teleport/PortalTeleportCause$PortalTeleportCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractPortalTeleportCauseBuilder#reset was null") }
    event_cause_entity_teleport_PortalTeleportCause_PortalTeleportCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractPortalTeleportCauseBuilder#reset was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: event_cause_entity_teleport_TeleportCause) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause;)Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractPortalTeleportCauseBuilder#from was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractPortalTeleportCauseBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractPortalTeleportCauseBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn agent_1(&self, param_1: world_PortalAgent) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "agent", "(Lorg/spongepowered/api/world/PortalAgent;)Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractPortalTeleportCauseBuilder#agent was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_common_AbstractTeleportCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_common_AbstractTeleportCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_common_AbstractTeleportCause {
      env: env,
      object: object
    }
  }

  pub fn get_teleport_type(&self) -> event_cause_entity_teleport_TeleportType {
    let ret = java_method!(self.env, self.object, "getTeleportType", "()Lorg/spongepowered/api/event/cause/entity/teleport/TeleportType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractTeleportCause#getTeleportType was null") }
    event_cause_entity_teleport_TeleportType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_common_AbstractTeleportCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_common_AbstractTeleportCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_common_AbstractTeleportCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn type_(&self, param_1: event_cause_entity_teleport_TeleportType) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/teleport/TeleportType;)Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractTeleportCauseBuilder#type was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: event_cause_entity_teleport_TeleportCause) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause;)Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractTeleportCauseBuilder#from was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractTeleportCauseBuilder#reset was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractTeleportCauseBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/common/AbstractTeleportCauseBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_cause_entity_teleport_EntityTeleportCause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_EntityTeleportCause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_EntityTeleportCause_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn entity(&self, param_1: entity_Entity) -> event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/cause/entity/teleport/EntityTeleportCause$EntityTeleportCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/EntityTeleportCause$EntityTeleportCauseBuilder#entity was null") }
    event_cause_entity_teleport_EntityTeleportCause_EntityTeleportCauseBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_EntityTeleportCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_EntityTeleportCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_EntityTeleportCause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_teleport_EntityTeleportCause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/teleport/EntityTeleportCause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/EntityTeleportCause#builder was null") }
    event_cause_entity_teleport_EntityTeleportCause_Builder { env: self.env, object: ret }
  }

  pub fn get_teleporter(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTeleporter", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/EntityTeleportCause#getTeleporter was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_PortalTeleportCause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_PortalTeleportCause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_PortalTeleportCause_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_PortalTeleportCause_PortalTeleportCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_PortalTeleportCause_PortalTeleportCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_PortalTeleportCause_PortalTeleportCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn agent(&self, param_1: world_PortalAgent) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "agent", "(Lorg/spongepowered/api/world/PortalAgent;)Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/PortalTeleportCause$PortalTeleportCauseBuilder#agent was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_PortalTeleportCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_PortalTeleportCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_PortalTeleportCause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_teleport_PortalTeleportCause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/teleport/PortalTeleportCause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/PortalTeleportCause#builder was null") }
    event_cause_entity_teleport_PortalTeleportCause_Builder { env: self.env, object: ret }
  }

  pub fn get_teleporter(&self) -> world_PortalAgent {
    let ret = java_method!(self.env, self.object, "getTeleporter", "()Lorg/spongepowered/api/world/PortalAgent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/PortalTeleportCause#getTeleporter was null") }
    world_PortalAgent { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_TeleportCause_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_TeleportCause_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_TeleportCause_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
      env: env,
      object: object
    }
  }

  pub fn type_(&self, param_1: event_cause_entity_teleport_TeleportType) -> event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/event/cause/entity/teleport/TeleportType;)Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder#type was null") }
    event_cause_entity_teleport_TeleportCause_TeleporterCauseBuilder { env: self.env, object: ret }
  }

  pub fn build(&self) -> event_cause_entity_teleport_TeleportCause {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/TeleportCause$TeleporterCauseBuilder#build was null") }
    event_cause_entity_teleport_TeleportCause { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_TeleportCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_TeleportCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_TeleportCause {
      env: env,
      object: object
    }
  }

  pub fn builder() -> event_cause_entity_teleport_TeleportCause_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/event/cause/entity/teleport/TeleportCause$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/TeleportCause#builder was null") }
    event_cause_entity_teleport_TeleportCause_Builder { env: self.env, object: ret }
  }

  pub fn get_teleport_type(&self) -> event_cause_entity_teleport_TeleportType {
    let ret = java_method!(self.env, self.object, "getTeleportType", "()Lorg/spongepowered/api/event/cause/entity/teleport/TeleportType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/entity/teleport/TeleportCause#getTeleportType was null") }
    event_cause_entity_teleport_TeleportType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_TeleportType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_TeleportType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_TeleportType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_entity_teleport_TeleportTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_entity_teleport_TeleportTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_entity_teleport_TeleportTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_cause_NamedCause {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_cause_NamedCause {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_cause_NamedCause {
      env: env,
      object: object
    }
  }

  pub fn source(param_1: jobject) -> event_cause_NamedCause {
    let ret = java_method!(self.env, "source", "(Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/NamedCause;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#source was null") }
    event_cause_NamedCause { env: self.env, object: ret }
  }

  pub fn owner(param_1: jobject) -> event_cause_NamedCause {
    let ret = java_method!(self.env, "owner", "(Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/NamedCause;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#owner was null") }
    event_cause_NamedCause { env: self.env, object: ret }
  }

  pub fn notifier(param_1: jobject) -> event_cause_NamedCause {
    let ret = java_method!(self.env, "notifier", "(Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/NamedCause;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#notifier was null") }
    event_cause_NamedCause { env: self.env, object: ret }
  }

  pub fn simulated(param_1: jobject) -> event_cause_NamedCause {
    let ret = java_method!(self.env, "simulated", "(Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/NamedCause;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#simulated was null") }
    event_cause_NamedCause { env: self.env, object: ret }
  }

  pub fn simulated_1(param_1: entity_living_player_Player) -> event_cause_NamedCause {
    let ret = java_method!(self.env, "simulated", "(Lorg/spongepowered/api/entity/living/player/Player;)Lorg/spongepowered/api/event/cause/NamedCause;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#simulated was null") }
    event_cause_NamedCause { env: self.env, object: ret }
  }

  pub fn simulated_2(param_1: entity_living_player_User) -> event_cause_NamedCause {
    let ret = java_method!(self.env, "simulated", "(Lorg/spongepowered/api/entity/living/player/User;)Lorg/spongepowered/api/event/cause/NamedCause;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#simulated was null") }
    event_cause_NamedCause { env: self.env, object: ret }
  }

  pub fn simulated_3(param_1: profile_GameProfile) -> event_cause_NamedCause {
    let ret = java_method!(self.env, "simulated", "(Lorg/spongepowered/api/profile/GameProfile;)Lorg/spongepowered/api/event/cause/NamedCause;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#simulated was null") }
    event_cause_NamedCause { env: self.env, object: ret }
  }

  pub fn of(param_1: jobject, param_2: jobject) -> event_cause_NamedCause {
    let ret = java_method!(self.env, "of", "(Ljava/lang/String;Ljava/lang/Object;)Lorg/spongepowered/api/event/cause/NamedCause;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#of was null") }
    event_cause_NamedCause { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#getName was null") }
    ret
  }

  pub fn get_cause_object(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCauseObject", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#getCauseObject was null") }
    ret
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/cause/NamedCause#toString was null") }
    ret
  }

}



#[derive(Debug)]
pub struct event_command_SendCommandEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_command_SendCommandEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_command_SendCommandEvent {
      env: env,
      object: object
    }
  }

  pub fn get_command(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCommand", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/command/SendCommandEvent#getCommand was null") }
    ret
  }

  pub fn set_command(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setCommand", "(Ljava/lang/String;)V", CallVoidMethodA, param_1);
  }

  pub fn get_arguments(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getArguments", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/command/SendCommandEvent#getArguments was null") }
    ret
  }

  pub fn set_arguments(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setArguments", "(Ljava/lang/String;)V", CallVoidMethodA, param_1);
  }

  pub fn get_result(&self) -> command_CommandResult {
    let ret = java_method!(self.env, self.object, "getResult", "()Lorg/spongepowered/api/command/CommandResult;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/command/SendCommandEvent#getResult was null") }
    command_CommandResult { env: self.env, object: ret }
  }

  pub fn set_result(&self, param_1: command_CommandResult) {
    java_method!(self.env, self.object, "setResult", "(Lorg/spongepowered/api/command/CommandResult;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_command_TabCompleteEvent_Chat {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_command_TabCompleteEvent_Chat {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_command_TabCompleteEvent_Chat {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_command_TabCompleteEvent_Command {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_command_TabCompleteEvent_Command {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_command_TabCompleteEvent_Command {
      env: env,
      object: object
    }
  }

  pub fn get_command(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCommand", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/command/TabCompleteEvent$Command#getCommand was null") }
    ret
  }

  pub fn get_arguments(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getArguments", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/command/TabCompleteEvent$Command#getArguments was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_command_TabCompleteEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_command_TabCompleteEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_command_TabCompleteEvent {
      env: env,
      object: object
    }
  }

  pub fn get_raw_message(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRawMessage", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/command/TabCompleteEvent#getRawMessage was null") }
    ret
  }

  pub fn get_original_tab_completions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalTabCompletions", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/command/TabCompleteEvent#getOriginalTabCompletions was null") }
    ret
  }

  pub fn get_tab_completions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTabCompletions", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/command/TabCompleteEvent#getTabCompletions was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_data_ChangeDataHolderEvent_ValueChange {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_data_ChangeDataHolderEvent_ValueChange {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_data_ChangeDataHolderEvent_ValueChange {
      env: env,
      object: object
    }
  }

  pub fn get_original_changes(&self) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "getOriginalChanges", "()Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/data/ChangeDataHolderEvent$ValueChange#getOriginalChanges was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn propose_changes(&self, param_1: data_DataTransactionResult) -> event_data_ChangeDataHolderEvent_ValueChange {
    let ret = java_method!(self.env, self.object, "proposeChanges", "(Lorg/spongepowered/api/data/DataTransactionResult;)Lorg/spongepowered/api/event/data/ChangeDataHolderEvent$ValueChange;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/data/ChangeDataHolderEvent$ValueChange#proposeChanges was null") }
    event_data_ChangeDataHolderEvent_ValueChange { env: self.env, object: ret }
  }

  pub fn get_end_result(&self) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "getEndResult", "()Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/data/ChangeDataHolderEvent$ValueChange#getEndResult was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_data_ChangeDataHolderEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_data_ChangeDataHolderEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_data_ChangeDataHolderEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_holder(&self) -> data_DataHolder {
    let ret = java_method!(self.env, self.object, "getTargetHolder", "()Lorg/spongepowered/api/data/DataHolder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/data/ChangeDataHolderEvent#getTargetHolder was null") }
    data_DataHolder { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_economy_EconomyTransactionEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_economy_EconomyTransactionEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_economy_EconomyTransactionEvent {
      env: env,
      object: object
    }
  }

  pub fn get_transaction_result(&self) -> service_economy_transaction_TransactionResult {
    let ret = java_method!(self.env, self.object, "getTransactionResult", "()Lorg/spongepowered/api/service/economy/transaction/TransactionResult;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/economy/EconomyTransactionEvent#getTransactionResult was null") }
    service_economy_transaction_TransactionResult { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_AffectEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_AffectEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_AffectEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn get_entities(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getEntities", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/AffectEntityEvent#getEntities was null") }
    ret
  }

  pub fn filter_entity_locations(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "filterEntityLocations", "(Ljava/util/function/Predicate;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/AffectEntityEvent#filterEntityLocations was null") }
    ret
  }

  pub fn filter_entities(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "filterEntities", "(Ljava/util/function/Predicate;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/AffectEntityEvent#filterEntities was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_entity_ai_AITaskEvent_Add {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ai_AITaskEvent_Add {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ai_AITaskEvent_Add {
      env: env,
      object: object
    }
  }

  pub fn get_original_priority(&self) -> i32 {
    java_method!(self.env, self.object, "getOriginalPriority", "()I", CallIntMethod)
  }

  pub fn set_priority(&self, param_1: i32) {
    java_method!(self.env, self.object, "setPriority", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_entity_ai_AITaskEvent_Remove {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ai_AITaskEvent_Remove {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ai_AITaskEvent_Remove {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ai_AITaskEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ai_AITaskEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ai_AITaskEvent {
      env: env,
      object: object
    }
  }

  pub fn get_goal(&self) -> entity_ai_Goal {
    let ret = java_method!(self.env, self.object, "getGoal", "()Lorg/spongepowered/api/entity/ai/Goal;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ai/AITaskEvent#getGoal was null") }
    entity_ai_Goal { env: self.env, object: ret }
  }

  pub fn get_task(&self) -> entity_ai_task_AITask {
    let ret = java_method!(self.env, self.object, "getTask", "()Lorg/spongepowered/api/entity/ai/task/AITask;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ai/AITaskEvent#getTask was null") }
    entity_ai_task_AITask { env: self.env, object: ret }
  }

  pub fn get_priority(&self) -> i32 {
    java_method!(self.env, self.object, "getPriority", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct event_entity_AttackEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_AttackEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_AttackEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getOriginalDamage", "()D", CallDoubleMethod)
  }

  pub fn get_original_final_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getOriginalFinalDamage", "()D", CallDoubleMethod)
  }

  pub fn get_original_damages(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalDamages", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/AttackEntityEvent#getOriginalDamages was null") }
    ret
  }

  pub fn get_original_modifier_damage(&self, param_1: event_cause_entity_damage_DamageModifier) -> f64 {
    java_method!(self.env, self.object, "getOriginalModifierDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn get_original_functions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalFunctions", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/AttackEntityEvent#getOriginalFunctions was null") }
    ret
  }

  pub fn get_base_output_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getBaseOutputDamage", "()D", CallDoubleMethod)
  }

  pub fn set_base_output_damage(&self, param_1: f64) {
    java_method!(self.env, self.object, "setBaseOutputDamage", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_final_output_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getFinalOutputDamage", "()D", CallDoubleMethod)
  }

  pub fn is_modifier_applicable(&self, param_1: event_cause_entity_damage_DamageModifier) -> bool {
    java_method!(self.env, self.object, "isModifierApplicable", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_output_damage(&self, param_1: event_cause_entity_damage_DamageModifier) -> f64 {
    java_method!(self.env, self.object, "getOutputDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn set_output_damage(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject) {
    java_method!(self.env, self.object, "setOutputDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn add_damage_modifier_before(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "addDamageModifierBefore", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;Ljava/util/Set;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn add_damage_modifier_after(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "addDamageModifierAfter", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;Ljava/util/Set;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_modifiers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getModifiers", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/AttackEntityEvent#getModifiers was null") }
    ret
  }

  pub fn get_knockback_modifier(&self) -> i32 {
    java_method!(self.env, self.object, "getKnockbackModifier", "()I", CallIntMethod)
  }

  pub fn set_knockback_modifier(&self, param_1: i32) {
    java_method!(self.env, self.object, "setKnockbackModifier", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_entity_BreedEntityEvent_Breed {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_BreedEntityEvent_Breed {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_BreedEntityEvent_Breed {
      env: env,
      object: object
    }
  }

  pub fn get_offspring_entity(&self) -> entity_living_Ageable {
    let ret = java_method!(self.env, self.object, "getOffspringEntity", "()Lorg/spongepowered/api/entity/living/Ageable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/BreedEntityEvent$Breed#getOffspringEntity was null") }
    entity_living_Ageable { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_BreedEntityEvent_FindMate {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_BreedEntityEvent_FindMate {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_BreedEntityEvent_FindMate {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_BreedEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_BreedEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_BreedEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ChangeEntityEquipmentEvent_TargetHumanoid {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ChangeEntityEquipmentEvent_TargetHumanoid {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ChangeEntityEquipmentEvent_TargetHumanoid {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ChangeEntityEquipmentEvent_TargetLiving {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ChangeEntityEquipmentEvent_TargetLiving {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ChangeEntityEquipmentEvent_TargetLiving {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ChangeEntityEquipmentEvent_TargetPlayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ChangeEntityEquipmentEvent_TargetPlayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ChangeEntityEquipmentEvent_TargetPlayer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ChangeEntityEquipmentEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ChangeEntityEquipmentEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ChangeEntityEquipmentEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_item_stack(&self) -> Option<item_inventory_ItemStackSnapshot> {
    let ret = java_method!(self.env, self.object, "getOriginalItemStack", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ChangeEntityEquipmentEvent#getOriginalItemStack was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStackSnapshot { env: self.env, object: unwrapped }) }
  }

  pub fn get_item_stack(&self) -> Option<data_Transaction> {
    let ret = java_method!(self.env, self.object, "getItemStack", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ChangeEntityEquipmentEvent#getItemStack was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_Transaction { env: self.env, object: unwrapped }) }
  }

  pub fn get_target_inventory(&self) -> item_inventory_Slot {
    let ret = java_method!(self.env, self.object, "getTargetInventory", "()Lorg/spongepowered/api/item/inventory/Slot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ChangeEntityEquipmentEvent#getTargetInventory was null") }
    item_inventory_Slot { env: self.env, object: ret }
  }

  pub fn get_target_inventory_1(&self) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "getTargetInventory", "()Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ChangeEntityEquipmentEvent#getTargetInventory was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_ChangeEntityExperienceEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ChangeEntityExperienceEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ChangeEntityExperienceEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_experience(&self) -> i32 {
    java_method!(self.env, self.object, "getOriginalExperience", "()I", CallIntMethod)
  }

  pub fn get_experience(&self) -> i32 {
    java_method!(self.env, self.object, "getExperience", "()I", CallIntMethod)
  }

  pub fn set_experience(&self, param_1: i32) {
    java_method!(self.env, self.object, "setExperience", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_entity_ChangeEntityPotionEffectEvent_Expire {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ChangeEntityPotionEffectEvent_Expire {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ChangeEntityPotionEffectEvent_Expire {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ChangeEntityPotionEffectEvent_Gain {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ChangeEntityPotionEffectEvent_Gain {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ChangeEntityPotionEffectEvent_Gain {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ChangeEntityPotionEffectEvent_Remove {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ChangeEntityPotionEffectEvent_Remove {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ChangeEntityPotionEffectEvent_Remove {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ChangeEntityPotionEffectEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ChangeEntityPotionEffectEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ChangeEntityPotionEffectEvent {
      env: env,
      object: object
    }
  }

  pub fn get_current_effects(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCurrentEffects", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ChangeEntityPotionEffectEvent#getCurrentEffects was null") }
    ret
  }

  pub fn get_potion_effect(&self) -> effect_potion_PotionEffect {
    let ret = java_method!(self.env, self.object, "getPotionEffect", "()Lorg/spongepowered/api/effect/potion/PotionEffect;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ChangeEntityPotionEffectEvent#getPotionEffect was null") }
    effect_potion_PotionEffect { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_CollideEntityEvent_Impact {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_CollideEntityEvent_Impact {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_CollideEntityEvent_Impact {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_CollideEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_CollideEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_CollideEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ConstructEntityEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ConstructEntityEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ConstructEntityEvent_Post {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ConstructEntityEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ConstructEntityEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ConstructEntityEvent_Pre {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ConstructEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ConstructEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ConstructEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn get_transform(&self) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "getTransform", "()Lorg/spongepowered/api/entity/Transform;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ConstructEntityEvent#getTransform was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_target_type(&self) -> entity_EntityType {
    let ret = java_method!(self.env, self.object, "getTargetType", "()Lorg/spongepowered/api/entity/EntityType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/ConstructEntityEvent#getTargetType was null") }
    entity_EntityType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_DamageEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_DamageEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_DamageEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getOriginalDamage", "()D", CallDoubleMethod)
  }

  pub fn get_original_final_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getOriginalFinalDamage", "()D", CallDoubleMethod)
  }

  pub fn get_original_damages(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalDamages", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/DamageEntityEvent#getOriginalDamages was null") }
    ret
  }

  pub fn get_original_modifier_damage(&self, param_1: event_cause_entity_damage_DamageModifier) -> f64 {
    java_method!(self.env, self.object, "getOriginalModifierDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn get_original_functions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalFunctions", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/DamageEntityEvent#getOriginalFunctions was null") }
    ret
  }

  pub fn get_base_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getBaseDamage", "()D", CallDoubleMethod)
  }

  pub fn set_base_damage(&self, param_1: f64) {
    java_method!(self.env, self.object, "setBaseDamage", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_final_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getFinalDamage", "()D", CallDoubleMethod)
  }

  pub fn is_modifier_applicable(&self, param_1: event_cause_entity_damage_DamageModifier) -> bool {
    java_method!(self.env, self.object, "isModifierApplicable", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_damage(&self, param_1: event_cause_entity_damage_DamageModifier) -> f64 {
    java_method!(self.env, self.object, "getDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn set_damage(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject) {
    java_method!(self.env, self.object, "setDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn add_damage_modifier_before(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "addDamageModifierBefore", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;Ljava/util/Set;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn add_modifier_after(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "addModifierAfter", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;Ljava/util/Set;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_modifiers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getModifiers", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/DamageEntityEvent#getModifiers was null") }
    ret
  }

  pub fn will_cause_death(&self) -> bool {
    java_method!(self.env, self.object, "willCauseDeath", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_entity_DestructEntityEvent_Death {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_DestructEntityEvent_Death {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_DestructEntityEvent_Death {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_DestructEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_DestructEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_DestructEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_DismountEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_DismountEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_DismountEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ExpireEntityEvent_TargetItem {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ExpireEntityEvent_TargetItem {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ExpireEntityEvent_TargetItem {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_ExpireEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_ExpireEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_ExpireEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_explosive_DefuseExplosiveEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_explosive_DefuseExplosiveEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_explosive_DefuseExplosiveEvent_Post {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_explosive_DefuseExplosiveEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_explosive_DefuseExplosiveEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_explosive_DefuseExplosiveEvent_Pre {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_explosive_DefuseExplosiveEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_explosive_DefuseExplosiveEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_explosive_DefuseExplosiveEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_explosive_DetonateExplosiveEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_explosive_DetonateExplosiveEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_explosive_DetonateExplosiveEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_explosion(&self) -> world_explosion_Explosion {
    let ret = java_method!(self.env, self.object, "getOriginalExplosion", "()Lorg/spongepowered/api/world/explosion/Explosion;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/explosive/DetonateExplosiveEvent#getOriginalExplosion was null") }
    world_explosion_Explosion { env: self.env, object: ret }
  }

  pub fn get_explosion_builder(&self) -> world_explosion_Explosion_Builder {
    let ret = java_method!(self.env, self.object, "getExplosionBuilder", "()Lorg/spongepowered/api/world/explosion/Explosion$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/explosive/DetonateExplosiveEvent#getExplosionBuilder was null") }
    world_explosion_Explosion_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_explosive_PrimeExplosiveEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_explosive_PrimeExplosiveEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_explosive_PrimeExplosiveEvent_Post {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_explosive_PrimeExplosiveEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_explosive_PrimeExplosiveEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_explosive_PrimeExplosiveEvent_Pre {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_explosive_PrimeExplosiveEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_explosive_PrimeExplosiveEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_explosive_PrimeExplosiveEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_explosive_TargetExplosiveEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_explosive_TargetExplosiveEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_explosive_TargetExplosiveEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_entity(&self) -> entity_explosive_Explosive {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/explosive/Explosive;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/explosive/TargetExplosiveEvent#getTargetEntity was null") }
    entity_explosive_Explosive { env: self.env, object: ret }
  }

  pub fn get_target_entity_1(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/explosive/TargetExplosiveEvent#getTargetEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_explosive_TargetFusedExplosiveEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_explosive_TargetFusedExplosiveEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_explosive_TargetFusedExplosiveEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_entity(&self) -> entity_explosive_FusedExplosive {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/explosive/FusedExplosive;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/explosive/TargetFusedExplosiveEvent#getTargetEntity was null") }
    entity_explosive_FusedExplosive { env: self.env, object: ret }
  }

  pub fn get_target_entity_1(&self) -> entity_explosive_Explosive {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/explosive/Explosive;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/explosive/TargetFusedExplosiveEvent#getTargetEntity was null") }
    entity_explosive_Explosive { env: self.env, object: ret }
  }

  pub fn get_target_entity_2(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/explosive/TargetFusedExplosiveEvent#getTargetEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_HarvestEntityEvent_TargetHumanoid {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_HarvestEntityEvent_TargetHumanoid {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_HarvestEntityEvent_TargetHumanoid {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_HarvestEntityEvent_TargetLiving {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_HarvestEntityEvent_TargetLiving {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_HarvestEntityEvent_TargetLiving {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_HarvestEntityEvent_TargetPlayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_HarvestEntityEvent_TargetPlayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_HarvestEntityEvent_TargetPlayer {
      env: env,
      object: object
    }
  }

  pub fn keeps_inventory(&self) -> bool {
    java_method!(self.env, self.object, "keepsInventory", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_keeps_inventory(&self, param_1: bool) {
    java_method!(self.env, self.object, "setKeepsInventory", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn keeps_level(&self) -> bool {
    java_method!(self.env, self.object, "keepsLevel", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_keeps_level(&self, param_1: bool) {
    java_method!(self.env, self.object, "setKeepsLevel", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_level(&self) -> i32 {
    java_method!(self.env, self.object, "getLevel", "()I", CallIntMethod)
  }

  pub fn set_level(&self, param_1: i32) {
    java_method!(self.env, self.object, "setLevel", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_entity_HarvestEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_HarvestEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_HarvestEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_HealEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_HealEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_HealEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_heal_amount(&self) -> f64 {
    java_method!(self.env, self.object, "getOriginalHealAmount", "()D", CallDoubleMethod)
  }

  pub fn get_original_final_heal_amount(&self) -> f64 {
    java_method!(self.env, self.object, "getOriginalFinalHealAmount", "()D", CallDoubleMethod)
  }

  pub fn get_original_healing_amounts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalHealingAmounts", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/HealEntityEvent#getOriginalHealingAmounts was null") }
    ret
  }

  pub fn get_final_heal_amount(&self) -> f64 {
    java_method!(self.env, self.object, "getFinalHealAmount", "()D", CallDoubleMethod)
  }

  pub fn get_original_healing_modifier_amount(&self, param_1: event_cause_entity_health_HealthModifier) -> f64 {
    java_method!(self.env, self.object, "getOriginalHealingModifierAmount", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn get_original_functions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalFunctions", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/HealEntityEvent#getOriginalFunctions was null") }
    ret
  }

  pub fn get_base_heal_amount(&self) -> f64 {
    java_method!(self.env, self.object, "getBaseHealAmount", "()D", CallDoubleMethod)
  }

  pub fn set_base_heal_amount(&self, param_1: f64) {
    java_method!(self.env, self.object, "setBaseHealAmount", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn is_modifier_applicable(&self, param_1: event_cause_entity_health_HealthModifier) -> bool {
    java_method!(self.env, self.object, "isModifierApplicable", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_heal_amount(&self, param_1: event_cause_entity_health_HealthModifier) -> f64 {
    java_method!(self.env, self.object, "getHealAmount", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn set_heal_amount(&self, param_1: event_cause_entity_health_HealthModifier, param_2: jobject) {
    java_method!(self.env, self.object, "setHealAmount", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;Ljava/util/function/Function;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_modifiers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getModifiers", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/HealEntityEvent#getModifiers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_entity_IgniteEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_IgniteEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_IgniteEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_fire_ticks(&self) -> i32 {
    java_method!(self.env, self.object, "getOriginalFireTicks", "()I", CallIntMethod)
  }

  pub fn get_fire_ticks(&self) -> i32 {
    java_method!(self.env, self.object, "getFireTicks", "()I", CallIntMethod)
  }

  pub fn set_fire_ticks(&self, param_1: i32) {
    java_method!(self.env, self.object, "setFireTicks", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_entity_InteractEntityEvent_Primary_MainHand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_InteractEntityEvent_Primary_MainHand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_InteractEntityEvent_Primary_MainHand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_InteractEntityEvent_Primary_OffHand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_InteractEntityEvent_Primary_OffHand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_InteractEntityEvent_Primary_OffHand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_InteractEntityEvent_Primary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_InteractEntityEvent_Primary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_InteractEntityEvent_Primary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_InteractEntityEvent_Secondary_MainHand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_InteractEntityEvent_Secondary_MainHand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_InteractEntityEvent_Secondary_MainHand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_InteractEntityEvent_Secondary_OffHand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_InteractEntityEvent_Secondary_OffHand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_InteractEntityEvent_Secondary_OffHand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_InteractEntityEvent_Secondary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_InteractEntityEvent_Secondary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_InteractEntityEvent_Secondary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_InteractEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_InteractEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_InteractEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_item_ItemMergeItemEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_item_ItemMergeItemEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_item_ItemMergeItemEvent {
      env: env,
      object: object
    }
  }

  pub fn get_item_to_merge(&self) -> entity_Item {
    let ret = java_method!(self.env, self.object, "getItemToMerge", "()Lorg/spongepowered/api/entity/Item;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/item/ItemMergeItemEvent#getItemToMerge was null") }
    entity_Item { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_entity_item_TargetItemEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_item_TargetItemEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_item_TargetItemEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_entity(&self) -> entity_Item {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Item;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/item/TargetItemEvent#getTargetEntity was null") }
    entity_Item { env: self.env, object: ret }
  }

  pub fn get_target_entity_1(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/item/TargetItemEvent#getTargetEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_LeashEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_LeashEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_LeashEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_living_humanoid_ChangeGameModeEvent_TargetPlayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_ChangeGameModeEvent_TargetPlayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_ChangeGameModeEvent_TargetPlayer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_living_humanoid_ChangeGameModeEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_ChangeGameModeEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_ChangeGameModeEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_game_mode(&self) -> entity_living_player_gamemode_GameMode {
    let ret = java_method!(self.env, self.object, "getOriginalGameMode", "()Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/ChangeGameModeEvent#getOriginalGameMode was null") }
    entity_living_player_gamemode_GameMode { env: self.env, object: ret }
  }

  pub fn get_game_mode(&self) -> entity_living_player_gamemode_GameMode {
    let ret = java_method!(self.env, self.object, "getGameMode", "()Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/ChangeGameModeEvent#getGameMode was null") }
    entity_living_player_gamemode_GameMode { env: self.env, object: ret }
  }

  pub fn set_game_mode(&self, param_1: entity_living_player_gamemode_GameMode) {
    java_method!(self.env, self.object, "setGameMode", "(Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_entity_living_humanoid_ChangeLevelEvent_TargetPlayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_ChangeLevelEvent_TargetPlayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_ChangeLevelEvent_TargetPlayer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_living_humanoid_ChangeLevelEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_ChangeLevelEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_ChangeLevelEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_level(&self) -> i32 {
    java_method!(self.env, self.object, "getOriginalLevel", "()I", CallIntMethod)
  }

  pub fn get_level(&self) -> i32 {
    java_method!(self.env, self.object, "getLevel", "()I", CallIntMethod)
  }

  pub fn set_level(&self, param_1: i32) {
    java_method!(self.env, self.object, "setLevel", "(I)V", CallVoidMethodA, param_1);
  }

}


#[derive(Debug)]
pub struct event_entity_living_humanoid_player_KickPlayerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_player_KickPlayerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_player_KickPlayerEvent {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_entity_living_humanoid_player_PlayerChangeClientSettingsEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_player_PlayerChangeClientSettingsEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_player_PlayerChangeClientSettingsEvent {
      env: env,
      object: object
    }
  }

  pub fn get_locale(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getLocale", "()Ljava/util/Locale;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/PlayerChangeClientSettingsEvent#getLocale was null") }
    ret
  }

  pub fn get_view_distance(&self) -> i32 {
    java_method!(self.env, self.object, "getViewDistance", "()I", CallIntMethod)
  }

  pub fn get_chat_visibility(&self) -> text_chat_ChatVisibility {
    let ret = java_method!(self.env, self.object, "getChatVisibility", "()Lorg/spongepowered/api/text/chat/ChatVisibility;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/PlayerChangeClientSettingsEvent#getChatVisibility was null") }
    text_chat_ChatVisibility { env: self.env, object: ret }
  }

  pub fn is_chat_colors_enabled(&self) -> bool {
    java_method!(self.env, self.object, "isChatColorsEnabled", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_displayed_skin_parts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDisplayedSkinParts", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/PlayerChangeClientSettingsEvent#getDisplayedSkinParts was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_entity_living_humanoid_player_ResourcePackStatusEvent_ResourcePackStatus {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_player_ResourcePackStatusEvent_ResourcePackStatus {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_player_ResourcePackStatusEvent_ResourcePackStatus {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[event_entity_living_humanoid_player_ResourcePackStatusEvent_ResourcePackStatus] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> event_entity_living_humanoid_player_ResourcePackStatusEvent_ResourcePackStatus {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/event/entity/living/humanoid/player/ResourcePackStatusEvent$ResourcePackStatus;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/ResourcePackStatusEvent$ResourcePackStatus#valueOf was null") }
    event_entity_living_humanoid_player_ResourcePackStatusEvent_ResourcePackStatus { env: self.env, object: ret }
  }

  pub fn was_successful(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "wasSuccessful", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/ResourcePackStatusEvent$ResourcePackStatus#wasSuccessful was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct event_entity_living_humanoid_player_ResourcePackStatusEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_player_ResourcePackStatusEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_player_ResourcePackStatusEvent {
      env: env,
      object: object
    }
  }

  pub fn get_player(&self) -> entity_living_player_Player {
    let ret = java_method!(self.env, self.object, "getPlayer", "()Lorg/spongepowered/api/entity/living/player/Player;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/ResourcePackStatusEvent#getPlayer was null") }
    entity_living_player_Player { env: self.env, object: ret }
  }

  pub fn get_pack(&self) -> resourcepack_ResourcePack {
    let ret = java_method!(self.env, self.object, "getPack", "()Lorg/spongepowered/api/resourcepack/ResourcePack;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/ResourcePackStatusEvent#getPack was null") }
    resourcepack_ResourcePack { env: self.env, object: ret }
  }

  pub fn get_status(&self) -> event_entity_living_humanoid_player_ResourcePackStatusEvent_ResourcePackStatus {
    let ret = java_method!(self.env, self.object, "getStatus", "()Lorg/spongepowered/api/event/entity/living/humanoid/player/ResourcePackStatusEvent$ResourcePackStatus;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/ResourcePackStatusEvent#getStatus was null") }
    event_entity_living_humanoid_player_ResourcePackStatusEvent_ResourcePackStatus { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_living_humanoid_player_RespawnPlayerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_player_RespawnPlayerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_player_RespawnPlayerEvent {
      env: env,
      object: object
    }
  }

  pub fn get_from_transform(&self) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "getFromTransform", "()Lorg/spongepowered/api/entity/Transform;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/RespawnPlayerEvent#getFromTransform was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_to_transform(&self) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "getToTransform", "()Lorg/spongepowered/api/entity/Transform;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/RespawnPlayerEvent#getToTransform was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn set_to_transform(&self, param_1: entity_Transform) {
    java_method!(self.env, self.object, "setToTransform", "(Lorg/spongepowered/api/entity/Transform;)V", CallVoidMethodA, param_1);
  }

  pub fn is_bed_spawn(&self) -> bool {
    java_method!(self.env, self.object, "isBedSpawn", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_entity_living_humanoid_player_TargetPlayerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_player_TargetPlayerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_player_TargetPlayerEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_entity(&self) -> entity_living_player_Player {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/living/player/Player;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/TargetPlayerEvent#getTargetEntity was null") }
    entity_living_player_Player { env: self.env, object: ret }
  }

  pub fn get_target_entity_1(&self) -> entity_living_Humanoid {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/living/Humanoid;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/TargetPlayerEvent#getTargetEntity was null") }
    entity_living_Humanoid { env: self.env, object: ret }
  }

  pub fn get_target_entity_2(&self) -> entity_living_Living {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/living/Living;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/TargetPlayerEvent#getTargetEntity was null") }
    entity_living_Living { env: self.env, object: ret }
  }

  pub fn get_target_entity_3(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/player/TargetPlayerEvent#getTargetEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_living_humanoid_TargetHumanoidEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_humanoid_TargetHumanoidEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_humanoid_TargetHumanoidEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_entity(&self) -> entity_living_Humanoid {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/living/Humanoid;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/TargetHumanoidEvent#getTargetEntity was null") }
    entity_living_Humanoid { env: self.env, object: ret }
  }

  pub fn get_target_entity_1(&self) -> entity_living_Living {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/living/Living;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/TargetHumanoidEvent#getTargetEntity was null") }
    entity_living_Living { env: self.env, object: ret }
  }

  pub fn get_target_entity_2(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/humanoid/TargetHumanoidEvent#getTargetEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_entity_living_TargetAgentEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_TargetAgentEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_TargetAgentEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_entity(&self) -> entity_living_Agent {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/living/Agent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/TargetAgentEvent#getTargetEntity was null") }
    entity_living_Agent { env: self.env, object: ret }
  }

  pub fn get_target_entity_1(&self) -> entity_living_Living {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/living/Living;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/TargetAgentEvent#getTargetEntity was null") }
    entity_living_Living { env: self.env, object: ret }
  }

  pub fn get_target_entity_2(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/TargetAgentEvent#getTargetEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_living_TargetLivingEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_living_TargetLivingEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_living_TargetLivingEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_entity(&self) -> entity_living_Living {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/living/Living;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/TargetLivingEvent#getTargetEntity was null") }
    entity_living_Living { env: self.env, object: ret }
  }

  pub fn get_target_entity_1(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/living/TargetLivingEvent#getTargetEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_MountEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_MountEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_MountEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_MoveEntityEvent_Teleport_Portal {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_MoveEntityEvent_Teleport_Portal {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_MoveEntityEvent_Teleport_Portal {
      env: env,
      object: object
    }
  }

  pub fn set_use_portal_agent(&self, param_1: bool) {
    java_method!(self.env, self.object, "setUsePortalAgent", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_use_portal_agent(&self) -> bool {
    java_method!(self.env, self.object, "getUsePortalAgent", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_portal_agent(&self) -> world_PortalAgent {
    let ret = java_method!(self.env, self.object, "getPortalAgent", "()Lorg/spongepowered/api/world/PortalAgent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/MoveEntityEvent$Teleport$Portal#getPortalAgent was null") }
    world_PortalAgent { env: self.env, object: ret }
  }

  pub fn set_portal_agent(&self, param_1: world_PortalAgent) {
    java_method!(self.env, self.object, "setPortalAgent", "(Lorg/spongepowered/api/world/PortalAgent;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_entity_MoveEntityEvent_Teleport {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_MoveEntityEvent_Teleport {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_MoveEntityEvent_Teleport {
      env: env,
      object: object
    }
  }

  pub fn get_keeps_velocity(&self) -> bool {
    java_method!(self.env, self.object, "getKeepsVelocity", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_keeps_velocity(&self, param_1: bool) {
    java_method!(self.env, self.object, "setKeepsVelocity", "(Z)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_entity_MoveEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_MoveEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_MoveEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn get_from_transform(&self) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "getFromTransform", "()Lorg/spongepowered/api/entity/Transform;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/MoveEntityEvent#getFromTransform was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_to_transform(&self) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "getToTransform", "()Lorg/spongepowered/api/entity/Transform;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/MoveEntityEvent#getToTransform was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn set_to_transform(&self, param_1: entity_Transform) {
    java_method!(self.env, self.object, "setToTransform", "(Lorg/spongepowered/api/entity/Transform;)V", CallVoidMethodA, param_1);
  }

}


#[derive(Debug)]
pub struct event_entity_projectile_LaunchProjectileEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_projectile_LaunchProjectileEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_projectile_LaunchProjectileEvent {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_entity_projectile_TargetProjectileEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_projectile_TargetProjectileEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_projectile_TargetProjectileEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_entity(&self) -> entity_projectile_Projectile {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/projectile/Projectile;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/projectile/TargetProjectileEvent#getTargetEntity was null") }
    entity_projectile_Projectile { env: self.env, object: ret }
  }

  pub fn get_target_entity_1(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/projectile/TargetProjectileEvent#getTargetEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_SpawnEntityEvent_ChunkLoad {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_SpawnEntityEvent_ChunkLoad {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_SpawnEntityEvent_ChunkLoad {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_SpawnEntityEvent_Custom {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_SpawnEntityEvent_Custom {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_SpawnEntityEvent_Custom {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_SpawnEntityEvent_Spawner {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_SpawnEntityEvent_Spawner {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_SpawnEntityEvent_Spawner {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_SpawnEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_SpawnEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_SpawnEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_TameEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_TameEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_TameEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_entity_TargetEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_TargetEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_TargetEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_entity(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getTargetEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/entity/TargetEntityEvent#getTargetEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_entity_UnleashEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_entity_UnleashEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_entity_UnleashEntityEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_Event {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_Event {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_Event {
      env: env,
      object: object
    }
  }

  pub fn get_cause(&self) -> event_cause_Cause {
    let ret = java_method!(self.env, self.object, "getCause", "()Lorg/spongepowered/api/event/cause/Cause;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/Event#getCause was null") }
    event_cause_Cause { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_EventListener {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_EventListener {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_EventListener {
      env: env,
      object: object
    }
  }

  pub fn handle(&self, param_1: event_Event) {
    java_method!(self.env, self.object, "handle", "(Lorg/spongepowered/api/event/Event;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_EventManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_EventManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_EventManager {
      env: env,
      object: object
    }
  }

  pub fn register_listeners(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "registerListeners", "(Ljava/lang/Object;Ljava/lang/Object;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn register_listener(&self, param_1: jobject, param_2: jobject, param_3: event_EventListener) {
    java_method!(self.env, self.object, "registerListener", "(Ljava/lang/Object;Ljava/lang/Class;Lorg/spongepowered/api/event/EventListener;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn register_listener_1(&self, param_1: jobject, param_2: jobject, param_3: event_Order, param_4: event_EventListener) {
    java_method!(self.env, self.object, "registerListener", "(Ljava/lang/Object;Ljava/lang/Class;Lorg/spongepowered/api/event/Order;Lorg/spongepowered/api/event/EventListener;)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

  pub fn register_listener_2(&self, param_1: jobject, param_2: jobject, param_3: event_Order, param_4: bool, param_5: event_EventListener) {
    java_method!(self.env, self.object, "registerListener", "(Ljava/lang/Object;Ljava/lang/Class;Lorg/spongepowered/api/event/Order;ZLorg/spongepowered/api/event/EventListener;)V", CallVoidMethodA, param_1, param_2, param_3, param_4, param_5);
  }

  pub fn unregister_listeners(&self, param_1: jobject) {
    java_method!(self.env, self.object, "unregisterListeners", "(Ljava/lang/Object;)V", CallVoidMethodA, param_1);
  }

  pub fn unregister_plugin_listeners(&self, param_1: jobject) {
    java_method!(self.env, self.object, "unregisterPluginListeners", "(Ljava/lang/Object;)V", CallVoidMethodA, param_1);
  }

  pub fn post(&self, param_1: event_Event) -> bool {
    java_method!(self.env, self.object, "post", "(Lorg/spongepowered/api/event/Event;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct event_filter_cause_After {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_cause_After {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_cause_After {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/filter/cause/After#value was null") }
    ret
  }

  pub fn type_filter(&self) -> &[jobject] {
    unimplemented!();
  }
  pub fn inverse(&self) -> bool {
    java_method!(self.env, self.object, "inverse", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_filter_cause_All {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_cause_All {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_cause_All {
      env: env,
      object: object
    }
  }

  pub fn ignore_empty(&self) -> bool {
    java_method!(self.env, self.object, "ignoreEmpty", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_filter_cause_Before {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_cause_Before {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_cause_Before {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/filter/cause/Before#value was null") }
    ret
  }

  pub fn type_filter(&self) -> &[jobject] {
    unimplemented!();
  }
  pub fn inverse(&self) -> bool {
    java_method!(self.env, self.object, "inverse", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_filter_cause_First {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_cause_First {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_cause_First {
      env: env,
      object: object
    }
  }

  pub fn type_filter(&self) -> &[jobject] {
    unimplemented!();
  }
  pub fn inverse(&self) -> bool {
    java_method!(self.env, self.object, "inverse", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_filter_cause_Last {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_cause_Last {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_cause_Last {
      env: env,
      object: object
    }
  }

  pub fn type_filter(&self) -> &[jobject] {
    unimplemented!();
  }
  pub fn inverse(&self) -> bool {
    java_method!(self.env, self.object, "inverse", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_filter_cause_Named {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_cause_Named {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_cause_Named {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/filter/cause/Named#value was null") }
    ret
  }

  pub fn type_filter(&self) -> &[jobject] {
    unimplemented!();
  }
  pub fn inverse(&self) -> bool {
    java_method!(self.env, self.object, "inverse", "()Z", CallBooleanMethod) == 1
  }

}


#[derive(Debug)]
pub struct event_filter_cause_Root {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_cause_Root {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_cause_Root {
      env: env,
      object: object
    }
  }

  pub fn type_filter(&self) -> &[jobject] {
    unimplemented!();
  }
  pub fn inverse(&self) -> bool {
    java_method!(self.env, self.object, "inverse", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_filter_data_Has {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_data_Has {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_data_Has {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/filter/data/Has#value was null") }
    ret
  }

  pub fn inverse(&self) -> bool {
    java_method!(self.env, self.object, "inverse", "()Z", CallBooleanMethod) == 1
  }

}


#[derive(Debug)]
pub struct event_filter_data_Supports {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_data_Supports {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_data_Supports {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/filter/data/Supports#value was null") }
    ret
  }

  pub fn inverse(&self) -> bool {
    java_method!(self.env, self.object, "inverse", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_filter_Getter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_Getter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_Getter {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/filter/Getter#value was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_filter_IsCancelled {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_IsCancelled {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_IsCancelled {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "value", "()Lorg/spongepowered/api/util/Tristate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/filter/IsCancelled#value was null") }
    util_Tristate { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_filter_type_Exclude {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_type_Exclude {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_type_Exclude {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> &[jobject] {
    unimplemented!();
  }
}

#[derive(Debug)]
pub struct event_filter_type_Include {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_filter_type_Include {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_filter_type_Include {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> &[jobject] {
    unimplemented!();
  }
}


#[derive(Debug)]
pub struct event_game_GameReloadEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_GameReloadEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_GameReloadEvent {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_game_state_GameAboutToStartServerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameAboutToStartServerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameAboutToStartServerEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameConstructionEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameConstructionEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameConstructionEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameInitializationEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameInitializationEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameInitializationEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameLoadCompleteEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameLoadCompleteEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameLoadCompleteEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GamePostInitializationEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GamePostInitializationEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GamePostInitializationEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GamePreInitializationEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GamePreInitializationEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GamePreInitializationEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameStartedServerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameStartedServerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameStartedServerEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameStartingServerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameStartingServerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameStartingServerEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameStateEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameStateEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameStateEvent {
      env: env,
      object: object
    }
  }

  pub fn get_state(&self) -> GameState {
    let ret = java_method!(self.env, self.object, "getState", "()Lorg/spongepowered/api/GameState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/game/state/GameStateEvent#getState was null") }
    GameState { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameStoppedEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameStoppedEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameStoppedEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameStoppedServerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameStoppedServerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameStoppedServerEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameStoppingEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameStoppingEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameStoppingEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_game_state_GameStoppingServerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_game_state_GameStoppingServerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_game_state_GameStoppingServerEvent {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_impl_AbstractAttackEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_impl_AbstractAttackEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_impl_AbstractAttackEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_impl_AbstractAttackEntityEvent {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/impl/AbstractAttackEntityEvent", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractAttackEntityEvent#<init> was null") }
    event_impl_AbstractAttackEntityEvent { env: self.env, object: ret }
  }

  pub fn get_original_modifier_damage(&self, param_1: event_cause_entity_damage_DamageModifier) -> f64 {
    java_method!(self.env, self.object, "getOriginalModifierDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn get_original_final_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getOriginalFinalDamage", "()D", CallDoubleMethod)
  }

  pub fn get_original_damages(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalDamages", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractAttackEntityEvent#getOriginalDamages was null") }
    ret
  }

  pub fn get_final_output_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getFinalOutputDamage", "()D", CallDoubleMethod)
  }

  pub fn is_modifier_applicable(&self, param_1: event_cause_entity_damage_DamageModifier) -> bool {
    java_method!(self.env, self.object, "isModifierApplicable", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_output_damage(&self, param_1: event_cause_entity_damage_DamageModifier) -> f64 {
    java_method!(self.env, self.object, "getOutputDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn set_output_damage(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject) {
    java_method!(self.env, self.object, "setOutputDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn add_damage_modifier_before(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "addDamageModifierBefore", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;Ljava/util/Set;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn add_damage_modifier_after(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "addDamageModifierAfter", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;Ljava/util/Set;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_base_output_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getBaseOutputDamage", "()D", CallDoubleMethod)
  }

  pub fn set_base_output_damage(&self, param_1: f64) {
    java_method!(self.env, self.object, "setBaseOutputDamage", "(D)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_impl_AbstractDamageEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_impl_AbstractDamageEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_impl_AbstractDamageEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_impl_AbstractDamageEntityEvent {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/impl/AbstractDamageEntityEvent", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractDamageEntityEvent#<init> was null") }
    event_impl_AbstractDamageEntityEvent { env: self.env, object: ret }
  }

  pub fn get_original_modifier_damage(&self, param_1: event_cause_entity_damage_DamageModifier) -> f64 {
    java_method!(self.env, self.object, "getOriginalModifierDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn get_original_final_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getOriginalFinalDamage", "()D", CallDoubleMethod)
  }

  pub fn get_original_damages(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalDamages", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractDamageEntityEvent#getOriginalDamages was null") }
    ret
  }

  pub fn get_final_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getFinalDamage", "()D", CallDoubleMethod)
  }

  pub fn is_modifier_applicable(&self, param_1: event_cause_entity_damage_DamageModifier) -> bool {
    java_method!(self.env, self.object, "isModifierApplicable", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_damage(&self, param_1: event_cause_entity_damage_DamageModifier) -> f64 {
    java_method!(self.env, self.object, "getDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn set_damage(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject) {
    java_method!(self.env, self.object, "setDamage", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn add_damage_modifier_before(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "addDamageModifierBefore", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;Ljava/util/Set;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn add_modifier_after(&self, param_1: event_cause_entity_damage_DamageModifier, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "addModifierAfter", "(Lorg/spongepowered/api/event/cause/entity/damage/DamageModifier;Ljava/util/function/Function;Ljava/util/Set;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_base_damage(&self) -> f64 {
    java_method!(self.env, self.object, "getBaseDamage", "()D", CallDoubleMethod)
  }

  pub fn set_base_damage(&self, param_1: f64) {
    java_method!(self.env, self.object, "setBaseDamage", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn will_cause_death(&self) -> bool {
    java_method!(self.env, self.object, "willCauseDeath", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_impl_AbstractEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_impl_AbstractEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_impl_AbstractEvent {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_impl_AbstractEvent {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/impl/AbstractEvent", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractEvent#<init> was null") }
    event_impl_AbstractEvent { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_impl_AbstractHealEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_impl_AbstractHealEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_impl_AbstractHealEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_impl_AbstractHealEntityEvent {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/impl/AbstractHealEntityEvent", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractHealEntityEvent#<init> was null") }
    event_impl_AbstractHealEntityEvent { env: self.env, object: ret }
  }

  pub fn get_original_healing_modifier_amount(&self, param_1: event_cause_entity_health_HealthModifier) -> f64 {
    java_method!(self.env, self.object, "getOriginalHealingModifierAmount", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn get_original_final_heal_amount(&self) -> f64 {
    java_method!(self.env, self.object, "getOriginalFinalHealAmount", "()D", CallDoubleMethod)
  }

  pub fn get_original_healing_amounts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalHealingAmounts", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractHealEntityEvent#getOriginalHealingAmounts was null") }
    ret
  }

  pub fn get_final_heal_amount(&self) -> f64 {
    java_method!(self.env, self.object, "getFinalHealAmount", "()D", CallDoubleMethod)
  }

  pub fn is_modifier_applicable(&self, param_1: event_cause_entity_health_HealthModifier) -> bool {
    java_method!(self.env, self.object, "isModifierApplicable", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_heal_amount(&self, param_1: event_cause_entity_health_HealthModifier) -> f64 {
    java_method!(self.env, self.object, "getHealAmount", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;)D", CallDoubleMethodA, param_1)
  }

  pub fn set_heal_amount(&self, param_1: event_cause_entity_health_HealthModifier, param_2: jobject) {
    java_method!(self.env, self.object, "setHealAmount", "(Lorg/spongepowered/api/event/cause/entity/health/HealthModifier;Ljava/util/function/Function;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_base_heal_amount(&self) -> f64 {
    java_method!(self.env, self.object, "getBaseHealAmount", "()D", CallDoubleMethod)
  }

  pub fn set_base_heal_amount(&self, param_1: f64) {
    java_method!(self.env, self.object, "setBaseHealAmount", "(D)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_impl_AbstractMessageEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_impl_AbstractMessageEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_impl_AbstractMessageEvent {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_impl_AbstractMessageEvent {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/impl/AbstractMessageEvent", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractMessageEvent#<init> was null") }
    event_impl_AbstractMessageEvent { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_impl_AbstractModifierEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_impl_AbstractModifierEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_impl_AbstractModifierEvent {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_impl_AbstractModifierEvent {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/impl/AbstractModifierEvent", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractModifierEvent#<init> was null") }
    event_impl_AbstractModifierEvent { env: self.env, object: ret }
  }

  pub fn get_modifiers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getModifiers", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractModifierEvent#getModifiers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_impl_AbstractSpawnEntityEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_impl_AbstractSpawnEntityEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_impl_AbstractSpawnEntityEvent {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_impl_AbstractSpawnEntityEvent {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/impl/AbstractSpawnEntityEvent", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractSpawnEntityEvent#<init> was null") }
    event_impl_AbstractSpawnEntityEvent { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_impl_AbstractValueChangeEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_impl_AbstractValueChangeEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_impl_AbstractValueChangeEvent {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_impl_AbstractValueChangeEvent {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/impl/AbstractValueChangeEvent", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractValueChangeEvent#<init> was null") }
    event_impl_AbstractValueChangeEvent { env: self.env, object: ret }
  }

  pub fn propose_changes(&self, param_1: data_DataTransactionResult) -> event_data_ChangeDataHolderEvent_ValueChange {
    let ret = java_method!(self.env, self.object, "proposeChanges", "(Lorg/spongepowered/api/data/DataTransactionResult;)Lorg/spongepowered/api/event/data/ChangeDataHolderEvent$ValueChange;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/impl/AbstractValueChangeEvent#proposeChanges was null") }
    event_data_ChangeDataHolderEvent_ValueChange { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_item_inventory_AffectItemStackEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_AffectItemStackEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_AffectItemStackEvent {
      env: env,
      object: object
    }
  }

  pub fn get_transactions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTransactions", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/AffectItemStackEvent#getTransactions was null") }
    ret
  }

  pub fn filter(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "filter", "(Ljava/util/function/Predicate;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/AffectItemStackEvent#filter was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_item_inventory_AffectSlotEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_AffectSlotEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_AffectSlotEvent {
      env: env,
      object: object
    }
  }

  pub fn get_transactions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTransactions", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/AffectSlotEvent#getTransactions was null") }
    ret
  }

  pub fn filter(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "filter", "(Ljava/util/function/Predicate;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/AffectSlotEvent#filter was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ChangeInventoryEvent_Equipment {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ChangeInventoryEvent_Equipment {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ChangeInventoryEvent_Equipment {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ChangeInventoryEvent_Held {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ChangeInventoryEvent_Held {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ChangeInventoryEvent_Held {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ChangeInventoryEvent_Pickup {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ChangeInventoryEvent_Pickup {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ChangeInventoryEvent_Pickup {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ChangeInventoryEvent_Transfer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ChangeInventoryEvent_Transfer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ChangeInventoryEvent_Transfer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ChangeInventoryEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ChangeInventoryEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ChangeInventoryEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Creative {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Creative {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Creative {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Double {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Double {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Double {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Drag_Primary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Drag_Primary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Drag_Primary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Drag_Secondary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Drag_Secondary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Drag_Secondary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Drag {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Drag {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Drag {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Drop_Full {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Drop_Full {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Drop_Full {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Drop_Outside_Primary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Drop_Outside_Primary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Drop_Outside_Primary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Drop_Outside_Secondary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Drop_Outside_Secondary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Drop_Outside_Secondary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Drop_Outside {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Drop_Outside {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Drop_Outside {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Drop_Single {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Drop_Single {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Drop_Single {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Drop {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Drop {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Drop {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Middle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Middle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Middle {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_NumberPress {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_NumberPress {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_NumberPress {
      env: env,
      object: object
    }
  }

  pub fn get_number(&self) -> i32 {
    java_method!(self.env, self.object, "getNumber", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Primary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Primary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Primary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Secondary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Secondary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Secondary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Shift_Primary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Shift_Primary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Shift_Primary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Shift_Secondary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Shift_Secondary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Shift_Secondary {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent_Shift {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent_Shift {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent_Shift {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_ClickInventoryEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_ClickInventoryEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_ClickInventoryEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_CreativeInventoryEvent_Click {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_CreativeInventoryEvent_Click {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_CreativeInventoryEvent_Click {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_CreativeInventoryEvent_Drop {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_CreativeInventoryEvent_Drop {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_CreativeInventoryEvent_Drop {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_CreativeInventoryEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_CreativeInventoryEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_CreativeInventoryEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_DropItemEvent_Custom {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_DropItemEvent_Custom {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_DropItemEvent_Custom {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_DropItemEvent_Destruct {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_DropItemEvent_Destruct {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_DropItemEvent_Destruct {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_DropItemEvent_Dispense {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_DropItemEvent_Dispense {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_DropItemEvent_Dispense {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_DropItemEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_DropItemEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_DropItemEvent_Pre {
      env: env,
      object: object
    }
  }

  pub fn get_original_dropped_items(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalDroppedItems", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/DropItemEvent$Pre#getOriginalDroppedItems was null") }
    ret
  }

  pub fn get_dropped_items(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDroppedItems", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/DropItemEvent$Pre#getDroppedItems was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_item_inventory_DropItemEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_DropItemEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_DropItemEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_InteractInventoryEvent_Close {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_InteractInventoryEvent_Close {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_InteractInventoryEvent_Close {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_InteractInventoryEvent_Open {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_InteractInventoryEvent_Open {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_InteractInventoryEvent_Open {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_InteractInventoryEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_InteractInventoryEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_InteractInventoryEvent {
      env: env,
      object: object
    }
  }

  pub fn get_cursor_transaction(&self) -> data_Transaction {
    let ret = java_method!(self.env, self.object, "getCursorTransaction", "()Lorg/spongepowered/api/data/Transaction;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/InteractInventoryEvent#getCursorTransaction was null") }
    data_Transaction { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_item_inventory_TargetContainerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_TargetContainerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_TargetContainerEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_inventory(&self) -> item_inventory_Container {
    let ret = java_method!(self.env, self.object, "getTargetInventory", "()Lorg/spongepowered/api/item/inventory/Container;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/TargetContainerEvent#getTargetInventory was null") }
    item_inventory_Container { env: self.env, object: ret }
  }

  pub fn get_target_inventory_1(&self) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "getTargetInventory", "()Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/TargetContainerEvent#getTargetInventory was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_TargetInventoryEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_TargetInventoryEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_TargetInventoryEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_inventory(&self) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "getTargetInventory", "()Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/TargetInventoryEvent#getTargetInventory was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_UseItemStackEvent_Finish {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_UseItemStackEvent_Finish {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_UseItemStackEvent_Finish {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_UseItemStackEvent_Replace {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_UseItemStackEvent_Replace {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_UseItemStackEvent_Replace {
      env: env,
      object: object
    }
  }

  pub fn get_item_stack_result(&self) -> data_Transaction {
    let ret = java_method!(self.env, self.object, "getItemStackResult", "()Lorg/spongepowered/api/data/Transaction;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/UseItemStackEvent$Replace#getItemStackResult was null") }
    data_Transaction { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_UseItemStackEvent_Reset {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_UseItemStackEvent_Reset {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_UseItemStackEvent_Reset {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_UseItemStackEvent_Start {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_UseItemStackEvent_Start {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_UseItemStackEvent_Start {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_UseItemStackEvent_Stop {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_UseItemStackEvent_Stop {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_UseItemStackEvent_Stop {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_UseItemStackEvent_Tick {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_UseItemStackEvent_Tick {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_UseItemStackEvent_Tick {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_item_inventory_UseItemStackEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_item_inventory_UseItemStackEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_item_inventory_UseItemStackEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_remaining_duration(&self) -> i32 {
    java_method!(self.env, self.object, "getOriginalRemainingDuration", "()I", CallIntMethod)
  }

  pub fn get_remaining_duration(&self) -> i32 {
    java_method!(self.env, self.object, "getRemainingDuration", "()I", CallIntMethod)
  }

  pub fn set_remaining_duration(&self, param_1: i32) {
    java_method!(self.env, self.object, "setRemainingDuration", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_item_stack_in_use(&self) -> item_inventory_ItemStackSnapshot {
    let ret = java_method!(self.env, self.object, "getItemStackInUse", "()Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/item/inventory/UseItemStackEvent#getItemStackInUse was null") }
    item_inventory_ItemStackSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_Listener {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_Listener {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_Listener {
      env: env,
      object: object
    }
  }

  pub fn order(&self) -> event_Order {
    let ret = java_method!(self.env, self.object, "order", "()Lorg/spongepowered/api/event/Order;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/Listener#order was null") }
    event_Order { env: self.env, object: ret }
  }

  pub fn before_modifications(&self) -> bool {
    java_method!(self.env, self.object, "beforeModifications", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct event_message_MessageChannelEvent_Chat {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_message_MessageChannelEvent_Chat {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_message_MessageChannelEvent_Chat {
      env: env,
      object: object
    }
  }

  pub fn get_raw_message(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getRawMessage", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageChannelEvent$Chat#getRawMessage was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_message_MessageChannelEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_message_MessageChannelEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_message_MessageChannelEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_channel(&self) -> text_channel_MessageChannel {
    let ret = java_method!(self.env, self.object, "getOriginalChannel", "()Lorg/spongepowered/api/text/channel/MessageChannel;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageChannelEvent#getOriginalChannel was null") }
    text_channel_MessageChannel { env: self.env, object: ret }
  }

  pub fn get_channel(&self) -> Option<text_channel_MessageChannel> {
    let ret = java_method!(self.env, self.object, "getChannel", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageChannelEvent#getChannel was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_channel_MessageChannel { env: self.env, object: unwrapped }) }
  }

  pub fn set_channel(&self, param_1: text_channel_MessageChannel) {
    java_method!(self.env, self.object, "setChannel", "(Lorg/spongepowered/api/text/channel/MessageChannel;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_message_MessageEvent_DefaultBodyApplier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_message_MessageEvent_DefaultBodyApplier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_message_MessageEvent_DefaultBodyApplier {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: text_TextRepresentable) -> event_message_MessageEvent_DefaultBodyApplier {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/TextRepresentable;)Lorg/spongepowered/api/event/message/MessageEvent$DefaultBodyApplier", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent$DefaultBodyApplier#<init> was null") }
    event_message_MessageEvent_DefaultBodyApplier { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_message_MessageEvent_DefaultHeaderApplier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_message_MessageEvent_DefaultHeaderApplier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_message_MessageEvent_DefaultHeaderApplier {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: text_TextRepresentable) -> event_message_MessageEvent_DefaultHeaderApplier {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/TextRepresentable;)Lorg/spongepowered/api/event/message/MessageEvent$DefaultHeaderApplier", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent$DefaultHeaderApplier#<init> was null") }
    event_message_MessageEvent_DefaultHeaderApplier { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_message_MessageEvent_MessageFormatter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_message_MessageEvent_MessageFormatter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_message_MessageEvent_MessageFormatter {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_message_MessageEvent_MessageFormatter {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent$MessageFormatter#<init> was null") }
    event_message_MessageEvent_MessageFormatter { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: text_Text, param_2: text_Text) -> event_message_MessageEvent_MessageFormatter {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent$MessageFormatter#<init> was null") }
    event_message_MessageEvent_MessageFormatter { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: text_Text) -> event_message_MessageEvent_MessageFormatter {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent$MessageFormatter#<init> was null") }
    event_message_MessageEvent_MessageFormatter { env: self.env, object: ret }
  }

  pub fn get_header(&self) -> text_transform_SimpleTextFormatter {
    let ret = java_method!(self.env, self.object, "getHeader", "()Lorg/spongepowered/api/text/transform/SimpleTextFormatter;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent$MessageFormatter#getHeader was null") }
    text_transform_SimpleTextFormatter { env: self.env, object: ret }
  }

  pub fn set_header(&self, param_1: text_TextRepresentable) {
    java_method!(self.env, self.object, "setHeader", "(Lorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1);
  }

  pub fn get_body(&self) -> text_transform_SimpleTextFormatter {
    let ret = java_method!(self.env, self.object, "getBody", "()Lorg/spongepowered/api/text/transform/SimpleTextFormatter;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent$MessageFormatter#getBody was null") }
    text_transform_SimpleTextFormatter { env: self.env, object: ret }
  }

  pub fn set_body(&self, param_1: text_TextRepresentable) {
    java_method!(self.env, self.object, "setBody", "(Lorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1);
  }

  pub fn get_footer(&self) -> text_transform_SimpleTextFormatter {
    let ret = java_method!(self.env, self.object, "getFooter", "()Lorg/spongepowered/api/text/transform/SimpleTextFormatter;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent$MessageFormatter#getFooter was null") }
    text_transform_SimpleTextFormatter { env: self.env, object: ret }
  }

  pub fn set_footer(&self, param_1: text_TextRepresentable) {
    java_method!(self.env, self.object, "setFooter", "(Lorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_message_MessageEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_message_MessageEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_message_MessageEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_message(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getOriginalMessage", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent#getOriginalMessage was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn is_message_cancelled(&self) -> bool {
    java_method!(self.env, self.object, "isMessageCancelled", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_message_cancelled(&self, param_1: bool) {
    java_method!(self.env, self.object, "setMessageCancelled", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_formatter(&self) -> event_message_MessageEvent_MessageFormatter {
    let ret = java_method!(self.env, self.object, "getFormatter", "()Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent#getFormatter was null") }
    event_message_MessageEvent_MessageFormatter { env: self.env, object: ret }
  }

  pub fn get_message(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getMessage", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent#getMessage was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn clear_message(&self) -> event_message_MessageEvent_MessageFormatter {
    let ret = java_method!(self.env, self.object, "clearMessage", "()Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/message/MessageEvent#clearMessage was null") }
    event_message_MessageEvent_MessageFormatter { env: self.env, object: ret }
  }

  pub fn set_message(&self, param_1: text_TextRepresentable, param_2: text_TextRepresentable, param_3: text_TextRepresentable) {
    java_method!(self.env, self.object, "setMessage", "(Lorg/spongepowered/api/text/TextRepresentable;Lorg/spongepowered/api/text/TextRepresentable;Lorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn set_message_1(&self, param_1: text_TextRepresentable, param_2: text_TextRepresentable) {
    java_method!(self.env, self.object, "setMessage", "(Lorg/spongepowered/api/text/TextRepresentable;Lorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn set_message_2(&self, param_1: text_TextRepresentable) {
    java_method!(self.env, self.object, "setMessage", "(Lorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1);
  }

}


#[derive(Debug)]
pub struct event_network_BanIpEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_BanIpEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_BanIpEvent {
      env: env,
      object: object
    }
  }

  pub fn get_ban(&self) -> util_ban_Ban_Ip {
    let ret = java_method!(self.env, self.object, "getBan", "()Lorg/spongepowered/api/util/ban/Ban$Ip;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/BanIpEvent#getBan was null") }
    util_ban_Ban_Ip { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_network_ChannelRegistrationEvent_Register {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_ChannelRegistrationEvent_Register {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_ChannelRegistrationEvent_Register {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_network_ChannelRegistrationEvent_Unregister {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_ChannelRegistrationEvent_Unregister {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_ChannelRegistrationEvent_Unregister {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_network_ChannelRegistrationEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_ChannelRegistrationEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_ChannelRegistrationEvent {
      env: env,
      object: object
    }
  }

  pub fn get_channel(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getChannel", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/ChannelRegistrationEvent#getChannel was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_network_ClientConnectionEvent_Auth {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_ClientConnectionEvent_Auth {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_ClientConnectionEvent_Auth {
      env: env,
      object: object
    }
  }

  pub fn get_connection(&self) -> network_RemoteConnection {
    let ret = java_method!(self.env, self.object, "getConnection", "()Lorg/spongepowered/api/network/RemoteConnection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/ClientConnectionEvent$Auth#getConnection was null") }
    network_RemoteConnection { env: self.env, object: ret }
  }

  pub fn get_profile(&self) -> profile_GameProfile {
    let ret = java_method!(self.env, self.object, "getProfile", "()Lorg/spongepowered/api/profile/GameProfile;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/ClientConnectionEvent$Auth#getProfile was null") }
    profile_GameProfile { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_network_ClientConnectionEvent_Disconnect {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_ClientConnectionEvent_Disconnect {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_ClientConnectionEvent_Disconnect {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_network_ClientConnectionEvent_Join {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_ClientConnectionEvent_Join {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_ClientConnectionEvent_Join {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_network_ClientConnectionEvent_Login {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_ClientConnectionEvent_Login {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_ClientConnectionEvent_Login {
      env: env,
      object: object
    }
  }

  pub fn get_connection(&self) -> network_RemoteConnection {
    let ret = java_method!(self.env, self.object, "getConnection", "()Lorg/spongepowered/api/network/RemoteConnection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/ClientConnectionEvent$Login#getConnection was null") }
    network_RemoteConnection { env: self.env, object: ret }
  }

  pub fn get_profile(&self) -> profile_GameProfile {
    let ret = java_method!(self.env, self.object, "getProfile", "()Lorg/spongepowered/api/profile/GameProfile;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/ClientConnectionEvent$Login#getProfile was null") }
    profile_GameProfile { env: self.env, object: ret }
  }

  pub fn get_from_transform(&self) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "getFromTransform", "()Lorg/spongepowered/api/entity/Transform;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/ClientConnectionEvent$Login#getFromTransform was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn get_to_transform(&self) -> entity_Transform {
    let ret = java_method!(self.env, self.object, "getToTransform", "()Lorg/spongepowered/api/entity/Transform;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/ClientConnectionEvent$Login#getToTransform was null") }
    entity_Transform { env: self.env, object: ret }
  }

  pub fn set_to_transform(&self, param_1: entity_Transform) {
    java_method!(self.env, self.object, "setToTransform", "(Lorg/spongepowered/api/entity/Transform;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_network_ClientConnectionEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_ClientConnectionEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_ClientConnectionEvent {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_network_PardonIpEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_PardonIpEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_PardonIpEvent {
      env: env,
      object: object
    }
  }

  pub fn get_ban(&self) -> util_ban_Ban_Ip {
    let ret = java_method!(self.env, self.object, "getBan", "()Lorg/spongepowered/api/util/ban/Ban$Ip;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/PardonIpEvent#getBan was null") }
    util_ban_Ban_Ip { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_network_rcon_RconConnectionEvent_Connect {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_rcon_RconConnectionEvent_Connect {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_rcon_RconConnectionEvent_Connect {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_network_rcon_RconConnectionEvent_Disconnect {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_rcon_RconConnectionEvent_Disconnect {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_rcon_RconConnectionEvent_Disconnect {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_network_rcon_RconConnectionEvent_Login {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_rcon_RconConnectionEvent_Login {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_rcon_RconConnectionEvent_Login {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_network_rcon_RconConnectionEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_network_rcon_RconConnectionEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_network_rcon_RconConnectionEvent {
      env: env,
      object: object
    }
  }

  pub fn get_source(&self) -> command_source_RconSource {
    let ret = java_method!(self.env, self.object, "getSource", "()Lorg/spongepowered/api/command/source/RconSource;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/network/rcon/RconConnectionEvent#getSource was null") }
    command_source_RconSource { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_Order {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_Order {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_Order {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[event_Order] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> event_Order {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/event/Order;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/Order#valueOf was null") }
    event_Order { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_server_ClientPingServerEvent_Response_Players {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_server_ClientPingServerEvent_Response_Players {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_server_ClientPingServerEvent_Response_Players {
      env: env,
      object: object
    }
  }

  pub fn set_online(&self, param_1: i32) {
    java_method!(self.env, self.object, "setOnline", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn set_max(&self, param_1: i32) {
    java_method!(self.env, self.object, "setMax", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_profiles(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getProfiles", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/ClientPingServerEvent$Response$Players#getProfiles was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_server_ClientPingServerEvent_Response {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_server_ClientPingServerEvent_Response {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_server_ClientPingServerEvent_Response {
      env: env,
      object: object
    }
  }

  pub fn set_description(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "setDescription", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn get_players(&self) -> Option<event_server_ClientPingServerEvent_Response_Players> {
    let ret = java_method!(self.env, self.object, "getPlayers", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/ClientPingServerEvent$Response#getPlayers was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(event_server_ClientPingServerEvent_Response_Players { env: self.env, object: unwrapped }) }
  }

  pub fn set_hide_players(&self, param_1: bool) {
    java_method!(self.env, self.object, "setHidePlayers", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn set_favicon(&self, param_1: network_status_Favicon) {
    java_method!(self.env, self.object, "setFavicon", "(Lorg/spongepowered/api/network/status/Favicon;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_server_ClientPingServerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_server_ClientPingServerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_server_ClientPingServerEvent {
      env: env,
      object: object
    }
  }

  pub fn get_client(&self) -> network_status_StatusClient {
    let ret = java_method!(self.env, self.object, "getClient", "()Lorg/spongepowered/api/network/status/StatusClient;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/ClientPingServerEvent#getClient was null") }
    network_status_StatusClient { env: self.env, object: ret }
  }

  pub fn get_response(&self) -> event_server_ClientPingServerEvent_Response {
    let ret = java_method!(self.env, self.object, "getResponse", "()Lorg/spongepowered/api/event/server/ClientPingServerEvent$Response;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/ClientPingServerEvent#getResponse was null") }
    event_server_ClientPingServerEvent_Response { env: self.env, object: ret }
  }

}



#[derive(Debug)]
pub struct event_server_query_QueryServerEvent_Basic {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_server_query_QueryServerEvent_Basic {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_server_query_QueryServerEvent_Basic {
      env: env,
      object: object
    }
  }

  pub fn get_motd(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMotd", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/query/QueryServerEvent$Basic#getMotd was null") }
    ret
  }

  pub fn set_motd(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setMotd", "(Ljava/lang/String;)V", CallVoidMethodA, param_1);
  }

  pub fn get_game_type(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGameType", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/query/QueryServerEvent$Basic#getGameType was null") }
    ret
  }

  pub fn set_game_type(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setGameType", "(Ljava/lang/String;)V", CallVoidMethodA, param_1);
  }

  pub fn get_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMap", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/query/QueryServerEvent$Basic#getMap was null") }
    ret
  }

  pub fn set_map(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setMap", "(Ljava/lang/String;)V", CallVoidMethodA, param_1);
  }

  pub fn get_player_count(&self) -> i32 {
    java_method!(self.env, self.object, "getPlayerCount", "()I", CallIntMethod)
  }

  pub fn set_player_count(&self, param_1: i32) {
    java_method!(self.env, self.object, "setPlayerCount", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_max_player_count(&self) -> i32 {
    java_method!(self.env, self.object, "getMaxPlayerCount", "()I", CallIntMethod)
  }

  pub fn set_max_player_count(&self, param_1: i32) {
    java_method!(self.env, self.object, "setMaxPlayerCount", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_address(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAddress", "()Ljava/net/InetSocketAddress;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/query/QueryServerEvent$Basic#getAddress was null") }
    ret
  }

  pub fn set_address(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setAddress", "(Ljava/net/InetSocketAddress;)V", CallVoidMethodA, param_1);
  }

  pub fn get_size(&self) -> i32 {
    java_method!(self.env, self.object, "getSize", "()I", CallIntMethod)
  }

  pub fn get_max_size(&self) -> i32 {
    java_method!(self.env, self.object, "getMaxSize", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct event_server_query_QueryServerEvent_Full {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_server_query_QueryServerEvent_Full {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_server_query_QueryServerEvent_Full {
      env: env,
      object: object
    }
  }

  pub fn get_game_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGameId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/query/QueryServerEvent$Full#getGameId was null") }
    ret
  }

  pub fn get_version(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getVersion", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/query/QueryServerEvent$Full#getVersion was null") }
    ret
  }

  pub fn set_version(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setVersion", "(Ljava/lang/String;)V", CallVoidMethodA, param_1);
  }

  pub fn get_plugins(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPlugins", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/query/QueryServerEvent$Full#getPlugins was null") }
    ret
  }

  pub fn set_plugins(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setPlugins", "(Ljava/lang/String;)V", CallVoidMethodA, param_1);
  }

  pub fn get_custom_values_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCustomValuesMap", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/query/QueryServerEvent$Full#getCustomValuesMap was null") }
    ret
  }

  pub fn get_players(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPlayers", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/server/query/QueryServerEvent$Full#getPlayers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_server_query_QueryServerEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_server_query_QueryServerEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_server_query_QueryServerEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_service_ChangeServiceProviderEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_service_ChangeServiceProviderEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_service_ChangeServiceProviderEvent {
      env: env,
      object: object
    }
  }

  pub fn get_previous_provider_registration(&self) -> Option<service_ProviderRegistration> {
    let ret = java_method!(self.env, self.object, "getPreviousProviderRegistration", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/service/ChangeServiceProviderEvent#getPreviousProviderRegistration was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(service_ProviderRegistration { env: self.env, object: unwrapped }) }
  }

  pub fn get_new_provider_registration(&self) -> service_ProviderRegistration {
    let ret = java_method!(self.env, self.object, "getNewProviderRegistration", "()Lorg/spongepowered/api/service/ProviderRegistration;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/service/ChangeServiceProviderEvent#getNewProviderRegistration was null") }
    service_ProviderRegistration { env: self.env, object: ret }
  }

  pub fn is_replacement(&self) -> bool {
    java_method!(self.env, self.object, "isReplacement", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_service(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getService", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/service/ChangeServiceProviderEvent#getService was null") }
    ret
  }

  pub fn get_new_provider(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getNewProvider", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/service/ChangeServiceProviderEvent#getNewProvider was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_SpongeEventFactory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_SpongeEventFactory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_SpongeEventFactory {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_SpongeEventFactory {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/SpongeEventFactory", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#<init> was null") }
    event_SpongeEventFactory { env: self.env, object: ret }
  }

  pub fn create_grant_achievement_event_target_player(param_1: event_cause_Cause, param_2: text_channel_MessageChannel, param_3: jobject, param_4: statistic_achievement_Achievement, param_5: event_message_MessageEvent_MessageFormatter, param_6: entity_living_player_Player, param_7: bool) -> event_achievement_GrantAchievementEvent_TargetPlayer {
    let ret = java_method!(self.env, "createGrantAchievementEventTargetPlayer", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/text/channel/MessageChannel;Ljava/util/Optional;Lorg/spongepowered/api/statistic/achievement/Achievement;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Lorg/spongepowered/api/entity/living/player/Player;Z)Lorg/spongepowered/api/event/achievement/GrantAchievementEvent$TargetPlayer;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGrantAchievementEventTargetPlayer was null") }
    event_achievement_GrantAchievementEvent_TargetPlayer { env: self.env, object: ret }
  }

  pub fn create_collide_event_impact(param_1: event_cause_Cause, param_2: world_Location) -> event_action_CollideEvent_Impact {
    let ret = java_method!(self.env, "createCollideEventImpact", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/event/action/CollideEvent$Impact;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createCollideEventImpact was null") }
    event_action_CollideEvent_Impact { env: self.env, object: ret }
  }

  pub fn create_fishing_event_hook_entity(param_1: event_cause_Cause, param_2: entity_EntitySnapshot, param_3: entity_projectile_FishHook, param_4: entity_Entity) -> event_action_FishingEvent_HookEntity {
    let ret = java_method!(self.env, "createFishingEventHookEntity", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/EntitySnapshot;Lorg/spongepowered/api/entity/projectile/FishHook;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/action/FishingEvent$HookEntity;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createFishingEventHookEntity was null") }
    event_action_FishingEvent_HookEntity { env: self.env, object: ret }
  }

  pub fn create_fishing_event_start(param_1: event_cause_Cause, param_2: entity_EntitySnapshot, param_3: entity_projectile_FishHook) -> event_action_FishingEvent_Start {
    let ret = java_method!(self.env, "createFishingEventStart", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/EntitySnapshot;Lorg/spongepowered/api/entity/projectile/FishHook;)Lorg/spongepowered/api/event/action/FishingEvent$Start;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createFishingEventStart was null") }
    event_action_FishingEvent_Start { env: self.env, object: ret }
  }

  pub fn create_fishing_event_stop(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: entity_EntitySnapshot, param_5: entity_projectile_FishHook, param_6: jobject, param_7: entity_Entity) -> event_action_FishingEvent_Stop {
    let ret = java_method!(self.env, "createFishingEventStop", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/entity/EntitySnapshot;Lorg/spongepowered/api/entity/projectile/FishHook;Ljava/util/List;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/action/FishingEvent$Stop;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createFishingEventStop was null") }
    event_action_FishingEvent_Stop { env: self.env, object: ret }
  }

  pub fn create_interact_event(param_1: event_cause_Cause, param_2: jobject) -> event_action_InteractEvent {
    let ret = java_method!(self.env, "createInteractEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;)Lorg/spongepowered/api/event/action/InteractEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractEvent was null") }
    event_action_InteractEvent { env: self.env, object: ret }
  }

  pub fn create_lightning_event_post(param_1: event_cause_Cause) -> event_action_LightningEvent_Post {
    let ret = java_method!(self.env, "createLightningEventPost", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/event/action/LightningEvent$Post;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createLightningEventPost was null") }
    event_action_LightningEvent_Post { env: self.env, object: ret }
  }

  pub fn create_lightning_event_pre(param_1: event_cause_Cause) -> event_action_LightningEvent_Pre {
    let ret = java_method!(self.env, "createLightningEventPre", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/event/action/LightningEvent$Pre;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createLightningEventPre was null") }
    event_action_LightningEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_lightning_event_strike(param_1: event_cause_Cause, param_2: jobject, param_3: world_World, param_4: jobject) -> event_action_LightningEvent_Strike {
    let ret = java_method!(self.env, "createLightningEventStrike", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/action/LightningEvent$Strike;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createLightningEventStrike was null") }
    event_action_LightningEvent_Strike { env: self.env, object: ret }
  }

  pub fn create_sleeping_event_finish(param_1: event_cause_Cause, param_2: block_BlockSnapshot, param_3: entity_Entity) -> event_action_SleepingEvent_Finish {
    let ret = java_method!(self.env, "createSleepingEventFinish", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/block/BlockSnapshot;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/action/SleepingEvent$Finish;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSleepingEventFinish was null") }
    event_action_SleepingEvent_Finish { env: self.env, object: ret }
  }

  pub fn create_sleeping_event_post(param_1: event_cause_Cause, param_2: block_BlockSnapshot, param_3: jobject, param_4: entity_Entity, param_5: bool) -> event_action_SleepingEvent_Post {
    let ret = java_method!(self.env, "createSleepingEventPost", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/block/BlockSnapshot;Ljava/util/Optional;Lorg/spongepowered/api/entity/Entity;Z)Lorg/spongepowered/api/event/action/SleepingEvent$Post;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSleepingEventPost was null") }
    event_action_SleepingEvent_Post { env: self.env, object: ret }
  }

  pub fn create_sleeping_event_pre(param_1: event_cause_Cause, param_2: block_BlockSnapshot, param_3: entity_Entity) -> event_action_SleepingEvent_Pre {
    let ret = java_method!(self.env, "createSleepingEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/block/BlockSnapshot;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/action/SleepingEvent$Pre;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSleepingEventPre was null") }
    event_action_SleepingEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_sleeping_event_tick(param_1: event_cause_Cause, param_2: block_BlockSnapshot, param_3: entity_Entity) -> event_action_SleepingEvent_Tick {
    let ret = java_method!(self.env, "createSleepingEventTick", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/block/BlockSnapshot;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/action/SleepingEvent$Tick;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSleepingEventTick was null") }
    event_action_SleepingEvent_Tick { env: self.env, object: ret }
  }

  pub fn create_change_block_event_break(param_1: event_cause_Cause, param_2: world_World, param_3: jobject) -> event_block_ChangeBlockEvent_Break {
    let ret = java_method!(self.env, "createChangeBlockEventBreak", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/block/ChangeBlockEvent$Break;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeBlockEventBreak was null") }
    event_block_ChangeBlockEvent_Break { env: self.env, object: ret }
  }

  pub fn create_change_block_event_decay(param_1: event_cause_Cause, param_2: world_World, param_3: jobject) -> event_block_ChangeBlockEvent_Decay {
    let ret = java_method!(self.env, "createChangeBlockEventDecay", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/block/ChangeBlockEvent$Decay;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeBlockEventDecay was null") }
    event_block_ChangeBlockEvent_Decay { env: self.env, object: ret }
  }

  pub fn create_change_block_event_grow(param_1: event_cause_Cause, param_2: world_World, param_3: jobject) -> event_block_ChangeBlockEvent_Grow {
    let ret = java_method!(self.env, "createChangeBlockEventGrow", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/block/ChangeBlockEvent$Grow;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeBlockEventGrow was null") }
    event_block_ChangeBlockEvent_Grow { env: self.env, object: ret }
  }

  pub fn create_change_block_event_modify(param_1: event_cause_Cause, param_2: world_World, param_3: jobject) -> event_block_ChangeBlockEvent_Modify {
    let ret = java_method!(self.env, "createChangeBlockEventModify", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/block/ChangeBlockEvent$Modify;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeBlockEventModify was null") }
    event_block_ChangeBlockEvent_Modify { env: self.env, object: ret }
  }

  pub fn create_change_block_event_place(param_1: event_cause_Cause, param_2: world_World, param_3: jobject) -> event_block_ChangeBlockEvent_Place {
    let ret = java_method!(self.env, "createChangeBlockEventPlace", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/block/ChangeBlockEvent$Place;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeBlockEventPlace was null") }
    event_block_ChangeBlockEvent_Place { env: self.env, object: ret }
  }

  pub fn create_change_block_event_post(param_1: event_cause_Cause, param_2: world_World, param_3: jobject) -> event_block_ChangeBlockEvent_Post {
    let ret = java_method!(self.env, "createChangeBlockEventPost", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/block/ChangeBlockEvent$Post;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeBlockEventPost was null") }
    event_block_ChangeBlockEvent_Post { env: self.env, object: ret }
  }

  pub fn create_change_block_event_pre(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_block_ChangeBlockEvent_Pre {
    let ret = java_method!(self.env, "createChangeBlockEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/block/ChangeBlockEvent$Pre;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeBlockEventPre was null") }
    event_block_ChangeBlockEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_collide_block_event(param_1: event_cause_Cause, param_2: block_BlockState, param_3: world_Location, param_4: util_Direction) -> event_block_CollideBlockEvent {
    let ret = java_method!(self.env, "createCollideBlockEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/world/Location;Lorg/spongepowered/api/util/Direction;)Lorg/spongepowered/api/event/block/CollideBlockEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createCollideBlockEvent was null") }
    event_block_CollideBlockEvent { env: self.env, object: ret }
  }

  pub fn create_collide_block_event_impact(param_1: event_cause_Cause, param_2: world_Location, param_3: block_BlockState, param_4: world_Location, param_5: util_Direction) -> event_block_CollideBlockEvent_Impact {
    let ret = java_method!(self.env, "createCollideBlockEventImpact", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/Location;Lorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/world/Location;Lorg/spongepowered/api/util/Direction;)Lorg/spongepowered/api/event/block/CollideBlockEvent$Impact;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createCollideBlockEventImpact was null") }
    event_block_CollideBlockEvent_Impact { env: self.env, object: ret }
  }

  pub fn create_interact_block_event_primary_main_hand(param_1: event_cause_Cause, param_2: jobject, param_3: block_BlockSnapshot, param_4: util_Direction) -> event_block_InteractBlockEvent_Primary_MainHand {
    let ret = java_method!(self.env, "createInteractBlockEventPrimaryMainHand", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Lorg/spongepowered/api/block/BlockSnapshot;Lorg/spongepowered/api/util/Direction;)Lorg/spongepowered/api/event/block/InteractBlockEvent$Primary$MainHand;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractBlockEventPrimaryMainHand was null") }
    event_block_InteractBlockEvent_Primary_MainHand { env: self.env, object: ret }
  }

  pub fn create_interact_block_event_primary_off_hand(param_1: event_cause_Cause, param_2: jobject, param_3: block_BlockSnapshot, param_4: util_Direction) -> event_block_InteractBlockEvent_Primary_OffHand {
    let ret = java_method!(self.env, "createInteractBlockEventPrimaryOffHand", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Lorg/spongepowered/api/block/BlockSnapshot;Lorg/spongepowered/api/util/Direction;)Lorg/spongepowered/api/event/block/InteractBlockEvent$Primary$OffHand;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractBlockEventPrimaryOffHand was null") }
    event_block_InteractBlockEvent_Primary_OffHand { env: self.env, object: ret }
  }

  pub fn create_interact_block_event_secondary_main_hand(param_1: event_cause_Cause, param_2: util_Tristate, param_3: util_Tristate, param_4: util_Tristate, param_5: util_Tristate, param_6: jobject, param_7: block_BlockSnapshot, param_8: util_Direction) -> event_block_InteractBlockEvent_Secondary_MainHand {
    let ret = java_method!(self.env, "createInteractBlockEventSecondaryMainHand", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/util/Tristate;Lorg/spongepowered/api/util/Tristate;Lorg/spongepowered/api/util/Tristate;Lorg/spongepowered/api/util/Tristate;Ljava/util/Optional;Lorg/spongepowered/api/block/BlockSnapshot;Lorg/spongepowered/api/util/Direction;)Lorg/spongepowered/api/event/block/InteractBlockEvent$Secondary$MainHand;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6, param_7);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractBlockEventSecondaryMainHand was null") }
    event_block_InteractBlockEvent_Secondary_MainHand { env: self.env, object: ret }
  }

  pub fn create_interact_block_event_secondary_off_hand(param_1: event_cause_Cause, param_2: util_Tristate, param_3: util_Tristate, param_4: util_Tristate, param_5: util_Tristate, param_6: jobject, param_7: block_BlockSnapshot, param_8: util_Direction) -> event_block_InteractBlockEvent_Secondary_OffHand {
    let ret = java_method!(self.env, "createInteractBlockEventSecondaryOffHand", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/util/Tristate;Lorg/spongepowered/api/util/Tristate;Lorg/spongepowered/api/util/Tristate;Lorg/spongepowered/api/util/Tristate;Ljava/util/Optional;Lorg/spongepowered/api/block/BlockSnapshot;Lorg/spongepowered/api/util/Direction;)Lorg/spongepowered/api/event/block/InteractBlockEvent$Secondary$OffHand;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6, param_7);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractBlockEventSecondaryOffHand was null") }
    event_block_InteractBlockEvent_Secondary_OffHand { env: self.env, object: ret }
  }

  pub fn create_notify_neighbor_block_event(param_1: event_cause_Cause, param_2: jobject, param_3: jobject) -> event_block_NotifyNeighborBlockEvent {
    let ret = java_method!(self.env, "createNotifyNeighborBlockEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Map;Ljava/util/Map;)Lorg/spongepowered/api/event/block/NotifyNeighborBlockEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createNotifyNeighborBlockEvent was null") }
    event_block_NotifyNeighborBlockEvent { env: self.env, object: ret }
  }

  pub fn create_target_block_event(param_1: event_cause_Cause, param_2: block_BlockSnapshot) -> event_block_TargetBlockEvent {
    let ret = java_method!(self.env, "createTargetBlockEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/block/BlockSnapshot;)Lorg/spongepowered/api/event/block/TargetBlockEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetBlockEvent was null") }
    event_block_TargetBlockEvent { env: self.env, object: ret }
  }

  pub fn create_tick_block_event_random(param_1: event_cause_Cause, param_2: block_BlockSnapshot) -> event_block_TickBlockEvent_Random {
    let ret = java_method!(self.env, "createTickBlockEventRandom", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/block/BlockSnapshot;)Lorg/spongepowered/api/event/block/TickBlockEvent$Random;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTickBlockEventRandom was null") }
    event_block_TickBlockEvent_Random { env: self.env, object: ret }
  }

  pub fn create_tick_block_event_scheduled(param_1: event_cause_Cause, param_2: block_BlockSnapshot) -> event_block_TickBlockEvent_Scheduled {
    let ret = java_method!(self.env, "createTickBlockEventScheduled", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/block/BlockSnapshot;)Lorg/spongepowered/api/event/block/TickBlockEvent$Scheduled;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTickBlockEventScheduled was null") }
    event_block_TickBlockEvent_Scheduled { env: self.env, object: ret }
  }

  pub fn create_brewing_event_finish(param_1: event_cause_Cause, param_2: jobject, param_3: item_inventory_ItemStackSnapshot, param_4: block_tileentity_carrier_BrewingStand) -> event_block_tileentity_BrewingEvent_Finish {
    let ret = java_method!(self.env, "createBrewingEventFinish", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Lorg/spongepowered/api/block/tileentity/carrier/BrewingStand;)Lorg/spongepowered/api/event/block/tileentity/BrewingEvent$Finish;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createBrewingEventFinish was null") }
    event_block_tileentity_BrewingEvent_Finish { env: self.env, object: ret }
  }

  pub fn create_brewing_event_interrupt(param_1: event_cause_Cause, param_2: jobject, param_3: item_inventory_ItemStackSnapshot, param_4: block_tileentity_carrier_BrewingStand) -> event_block_tileentity_BrewingEvent_Interrupt {
    let ret = java_method!(self.env, "createBrewingEventInterrupt", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Lorg/spongepowered/api/block/tileentity/carrier/BrewingStand;)Lorg/spongepowered/api/event/block/tileentity/BrewingEvent$Interrupt;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createBrewingEventInterrupt was null") }
    event_block_tileentity_BrewingEvent_Interrupt { env: self.env, object: ret }
  }

  pub fn create_brewing_event_start(param_1: event_cause_Cause, param_2: item_inventory_ItemStackSnapshot, param_3: block_tileentity_carrier_BrewingStand, param_4: jobject) -> event_block_tileentity_BrewingEvent_Start {
    let ret = java_method!(self.env, "createBrewingEventStart", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Lorg/spongepowered/api/block/tileentity/carrier/BrewingStand;Ljava/util/List;)Lorg/spongepowered/api/event/block/tileentity/BrewingEvent$Start;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createBrewingEventStart was null") }
    event_block_tileentity_BrewingEvent_Start { env: self.env, object: ret }
  }

  pub fn create_brewing_event_tick(param_1: event_cause_Cause, param_2: item_inventory_ItemStackSnapshot, param_3: block_tileentity_carrier_BrewingStand, param_4: jobject) -> event_block_tileentity_BrewingEvent_Tick {
    let ret = java_method!(self.env, "createBrewingEventTick", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Lorg/spongepowered/api/block/tileentity/carrier/BrewingStand;Ljava/util/List;)Lorg/spongepowered/api/event/block/tileentity/BrewingEvent$Tick;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createBrewingEventTick was null") }
    event_block_tileentity_BrewingEvent_Tick { env: self.env, object: ret }
  }

  pub fn create_change_sign_event(param_1: event_cause_Cause, param_2: data_manipulator_immutable_tileentity_ImmutableSignData, param_3: data_manipulator_mutable_tileentity_SignData, param_4: block_tileentity_Sign) -> event_block_tileentity_ChangeSignEvent {
    let ret = java_method!(self.env, "createChangeSignEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/manipulator/immutable/tileentity/ImmutableSignData;Lorg/spongepowered/api/data/manipulator/mutable/tileentity/SignData;Lorg/spongepowered/api/block/tileentity/Sign;)Lorg/spongepowered/api/event/block/tileentity/ChangeSignEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeSignEvent was null") }
    event_block_tileentity_ChangeSignEvent { env: self.env, object: ret }
  }

  pub fn create_smelt_event_consume_fuel(param_1: event_cause_Cause, param_2: item_inventory_ItemStackSnapshot, param_3: block_tileentity_carrier_Furnace, param_4: jobject) -> event_block_tileentity_SmeltEvent_ConsumeFuel {
    let ret = java_method!(self.env, "createSmeltEventConsumeFuel", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Lorg/spongepowered/api/block/tileentity/carrier/Furnace;Ljava/util/List;)Lorg/spongepowered/api/event/block/tileentity/SmeltEvent$ConsumeFuel;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSmeltEventConsumeFuel was null") }
    event_block_tileentity_SmeltEvent_ConsumeFuel { env: self.env, object: ret }
  }

  pub fn create_smelt_event_finish(param_1: event_cause_Cause, param_2: item_inventory_ItemStackSnapshot, param_3: jobject, param_4: block_tileentity_carrier_Furnace) -> event_block_tileentity_SmeltEvent_Finish {
    let ret = java_method!(self.env, "createSmeltEventFinish", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Ljava/util/List;Lorg/spongepowered/api/block/tileentity/carrier/Furnace;)Lorg/spongepowered/api/event/block/tileentity/SmeltEvent$Finish;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSmeltEventFinish was null") }
    event_block_tileentity_SmeltEvent_Finish { env: self.env, object: ret }
  }

  pub fn create_smelt_event_interrupt(param_1: event_cause_Cause, param_2: item_inventory_ItemStackSnapshot, param_3: jobject, param_4: block_tileentity_carrier_Furnace) -> event_block_tileentity_SmeltEvent_Interrupt {
    let ret = java_method!(self.env, "createSmeltEventInterrupt", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Ljava/util/List;Lorg/spongepowered/api/block/tileentity/carrier/Furnace;)Lorg/spongepowered/api/event/block/tileentity/SmeltEvent$Interrupt;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSmeltEventInterrupt was null") }
    event_block_tileentity_SmeltEvent_Interrupt { env: self.env, object: ret }
  }

  pub fn create_smelt_event_start(param_1: event_cause_Cause, param_2: item_inventory_ItemStackSnapshot, param_3: block_tileentity_carrier_Furnace, param_4: jobject) -> event_block_tileentity_SmeltEvent_Start {
    let ret = java_method!(self.env, "createSmeltEventStart", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Lorg/spongepowered/api/block/tileentity/carrier/Furnace;Ljava/util/List;)Lorg/spongepowered/api/event/block/tileentity/SmeltEvent$Start;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSmeltEventStart was null") }
    event_block_tileentity_SmeltEvent_Start { env: self.env, object: ret }
  }

  pub fn create_smelt_event_tick(param_1: event_cause_Cause, param_2: item_inventory_ItemStackSnapshot, param_3: block_tileentity_carrier_Furnace, param_4: jobject) -> event_block_tileentity_SmeltEvent_Tick {
    let ret = java_method!(self.env, "createSmeltEventTick", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Lorg/spongepowered/api/block/tileentity/carrier/Furnace;Ljava/util/List;)Lorg/spongepowered/api/event/block/tileentity/SmeltEvent$Tick;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSmeltEventTick was null") }
    event_block_tileentity_SmeltEvent_Tick { env: self.env, object: ret }
  }

  pub fn create_target_tile_entity_event(param_1: event_cause_Cause, param_2: block_tileentity_TileEntity) -> event_block_tileentity_TargetTileEntityEvent {
    let ret = java_method!(self.env, "createTargetTileEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/block/tileentity/TileEntity;)Lorg/spongepowered/api/event/block/tileentity/TargetTileEntityEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetTileEntityEvent was null") }
    event_block_tileentity_TargetTileEntityEvent { env: self.env, object: ret }
  }

  pub fn create_send_command_event(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: command_CommandResult) -> event_command_SendCommandEvent {
    let ret = java_method!(self.env, "createSendCommandEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/lang/String;Ljava/lang/String;Lorg/spongepowered/api/command/CommandResult;)Lorg/spongepowered/api/event/command/SendCommandEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSendCommandEvent was null") }
    event_command_SendCommandEvent { env: self.env, object: ret }
  }

  pub fn create_tab_complete_event_chat(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: jobject) -> event_command_TabCompleteEvent_Chat {
    let ret = java_method!(self.env, "createTabCompleteEventChat", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Ljava/util/List;Ljava/lang/String;)Lorg/spongepowered/api/event/command/TabCompleteEvent$Chat;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTabCompleteEventChat was null") }
    event_command_TabCompleteEvent_Chat { env: self.env, object: ret }
  }

  pub fn create_tab_complete_event_command(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: jobject, param_5: jobject, param_6: jobject) -> event_command_TabCompleteEvent_Command {
    let ret = java_method!(self.env, "createTabCompleteEventCommand", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/spongepowered/api/event/command/TabCompleteEvent$Command;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTabCompleteEventCommand was null") }
    event_command_TabCompleteEvent_Command { env: self.env, object: ret }
  }

  pub fn create_change_data_holder_event_value_change(param_1: event_cause_Cause, param_2: data_DataTransactionResult, param_3: data_DataHolder) -> event_data_ChangeDataHolderEvent_ValueChange {
    let ret = java_method!(self.env, "createChangeDataHolderEventValueChange", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/DataTransactionResult;Lorg/spongepowered/api/data/DataHolder;)Lorg/spongepowered/api/event/data/ChangeDataHolderEvent$ValueChange;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeDataHolderEventValueChange was null") }
    event_data_ChangeDataHolderEvent_ValueChange { env: self.env, object: ret }
  }

  pub fn create_economy_transaction_event(param_1: event_cause_Cause, param_2: service_economy_transaction_TransactionResult) -> event_economy_EconomyTransactionEvent {
    let ret = java_method!(self.env, "createEconomyTransactionEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/service/economy/transaction/TransactionResult;)Lorg/spongepowered/api/event/economy/EconomyTransactionEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createEconomyTransactionEvent was null") }
    event_economy_EconomyTransactionEvent { env: self.env, object: ret }
  }

  pub fn create_affect_entity_event(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_entity_AffectEntityEvent {
    let ret = java_method!(self.env, "createAffectEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/entity/AffectEntityEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createAffectEntityEvent was null") }
    event_entity_AffectEntityEvent { env: self.env, object: ret }
  }

  pub fn create_attack_entity_event(param_1: event_cause_Cause, param_2: jobject, param_3: entity_Entity, param_4: i32, param_5: f64) -> event_entity_AttackEntityEvent {
    let ret = java_method!(self.env, "createAttackEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/entity/Entity;ID)Lorg/spongepowered/api/event/entity/AttackEntityEvent;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createAttackEntityEvent was null") }
    event_entity_AttackEntityEvent { env: self.env, object: ret }
  }

  pub fn create_breed_entity_event_breed(param_1: event_cause_Cause, param_2: jobject, param_3: entity_living_Ageable, param_4: entity_Entity) -> event_entity_BreedEntityEvent_Breed {
    let ret = java_method!(self.env, "createBreedEntityEventBreed", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Lorg/spongepowered/api/entity/living/Ageable;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/BreedEntityEvent$Breed;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createBreedEntityEventBreed was null") }
    event_entity_BreedEntityEvent_Breed { env: self.env, object: ret }
  }

  pub fn create_breed_entity_event_find_mate(param_1: event_cause_Cause, param_2: event_TristateResult_Result, param_3: event_TristateResult_Result, param_4: jobject, param_5: entity_Entity, param_6: bool) -> event_entity_BreedEntityEvent_FindMate {
    let ret = java_method!(self.env, "createBreedEntityEventFindMate", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/event/TristateResult$Result;Lorg/spongepowered/api/event/TristateResult$Result;Ljava/util/Optional;Lorg/spongepowered/api/entity/Entity;Z)Lorg/spongepowered/api/event/entity/BreedEntityEvent$FindMate;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createBreedEntityEventFindMate was null") }
    event_entity_BreedEntityEvent_FindMate { env: self.env, object: ret }
  }

  pub fn create_change_entity_equipment_event(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: entity_Entity, param_5: item_inventory_Slot) -> event_entity_ChangeEntityEquipmentEvent {
    let ret = java_method!(self.env, "createChangeEntityEquipmentEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Ljava/util/Optional;Lorg/spongepowered/api/entity/Entity;Lorg/spongepowered/api/item/inventory/Slot;)Lorg/spongepowered/api/event/entity/ChangeEntityEquipmentEvent;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeEntityEquipmentEvent was null") }
    event_entity_ChangeEntityEquipmentEvent { env: self.env, object: ret }
  }

  pub fn create_change_entity_equipment_event_target_humanoid(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: entity_living_Humanoid, param_5: item_inventory_Slot) -> event_entity_ChangeEntityEquipmentEvent_TargetHumanoid {
    let ret = java_method!(self.env, "createChangeEntityEquipmentEventTargetHumanoid", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Ljava/util/Optional;Lorg/spongepowered/api/entity/living/Humanoid;Lorg/spongepowered/api/item/inventory/Slot;)Lorg/spongepowered/api/event/entity/ChangeEntityEquipmentEvent$TargetHumanoid;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeEntityEquipmentEventTargetHumanoid was null") }
    event_entity_ChangeEntityEquipmentEvent_TargetHumanoid { env: self.env, object: ret }
  }

  pub fn create_change_entity_equipment_event_target_living(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: entity_living_Living, param_5: item_inventory_Slot) -> event_entity_ChangeEntityEquipmentEvent_TargetLiving {
    let ret = java_method!(self.env, "createChangeEntityEquipmentEventTargetLiving", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Ljava/util/Optional;Lorg/spongepowered/api/entity/living/Living;Lorg/spongepowered/api/item/inventory/Slot;)Lorg/spongepowered/api/event/entity/ChangeEntityEquipmentEvent$TargetLiving;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeEntityEquipmentEventTargetLiving was null") }
    event_entity_ChangeEntityEquipmentEvent_TargetLiving { env: self.env, object: ret }
  }

  pub fn create_change_entity_equipment_event_target_player(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: entity_living_player_Player, param_5: item_inventory_Slot) -> event_entity_ChangeEntityEquipmentEvent_TargetPlayer {
    let ret = java_method!(self.env, "createChangeEntityEquipmentEventTargetPlayer", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Ljava/util/Optional;Lorg/spongepowered/api/entity/living/player/Player;Lorg/spongepowered/api/item/inventory/Slot;)Lorg/spongepowered/api/event/entity/ChangeEntityEquipmentEvent$TargetPlayer;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeEntityEquipmentEventTargetPlayer was null") }
    event_entity_ChangeEntityEquipmentEvent_TargetPlayer { env: self.env, object: ret }
  }

  pub fn create_change_entity_experience_event(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: entity_Entity) -> event_entity_ChangeEntityExperienceEvent {
    let ret = java_method!(self.env, "createChangeEntityExperienceEvent", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/ChangeEntityExperienceEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeEntityExperienceEvent was null") }
    event_entity_ChangeEntityExperienceEvent { env: self.env, object: ret }
  }

  pub fn create_change_entity_potion_effect_event_expire(param_1: event_cause_Cause, param_2: jobject, param_3: effect_potion_PotionEffect, param_4: entity_Entity) -> event_entity_ChangeEntityPotionEffectEvent_Expire {
    let ret = java_method!(self.env, "createChangeEntityPotionEffectEventExpire", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/effect/potion/PotionEffect;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/ChangeEntityPotionEffectEvent$Expire;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeEntityPotionEffectEventExpire was null") }
    event_entity_ChangeEntityPotionEffectEvent_Expire { env: self.env, object: ret }
  }

  pub fn create_change_entity_potion_effect_event_gain(param_1: event_cause_Cause, param_2: jobject, param_3: effect_potion_PotionEffect, param_4: entity_Entity) -> event_entity_ChangeEntityPotionEffectEvent_Gain {
    let ret = java_method!(self.env, "createChangeEntityPotionEffectEventGain", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/effect/potion/PotionEffect;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/ChangeEntityPotionEffectEvent$Gain;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeEntityPotionEffectEventGain was null") }
    event_entity_ChangeEntityPotionEffectEvent_Gain { env: self.env, object: ret }
  }

  pub fn create_change_entity_potion_effect_event_remove(param_1: event_cause_Cause, param_2: jobject, param_3: effect_potion_PotionEffect, param_4: entity_Entity) -> event_entity_ChangeEntityPotionEffectEvent_Remove {
    let ret = java_method!(self.env, "createChangeEntityPotionEffectEventRemove", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/effect/potion/PotionEffect;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/ChangeEntityPotionEffectEvent$Remove;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeEntityPotionEffectEventRemove was null") }
    event_entity_ChangeEntityPotionEffectEvent_Remove { env: self.env, object: ret }
  }

  pub fn create_collide_entity_event(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_entity_CollideEntityEvent {
    let ret = java_method!(self.env, "createCollideEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/entity/CollideEntityEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createCollideEntityEvent was null") }
    event_entity_CollideEntityEvent { env: self.env, object: ret }
  }

  pub fn create_collide_entity_event_impact(param_1: event_cause_Cause, param_2: jobject, param_3: world_Location, param_4: world_World) -> event_entity_CollideEntityEvent_Impact {
    let ret = java_method!(self.env, "createCollideEntityEventImpact", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/Location;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/entity/CollideEntityEvent$Impact;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createCollideEntityEventImpact was null") }
    event_entity_CollideEntityEvent_Impact { env: self.env, object: ret }
  }

  pub fn create_construct_entity_event_post(param_1: event_cause_Cause, param_2: entity_Entity, param_3: entity_EntityType, param_4: entity_Transform) -> event_entity_ConstructEntityEvent_Post {
    let ret = java_method!(self.env, "createConstructEntityEventPost", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Entity;Lorg/spongepowered/api/entity/EntityType;Lorg/spongepowered/api/entity/Transform;)Lorg/spongepowered/api/event/entity/ConstructEntityEvent$Post;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createConstructEntityEventPost was null") }
    event_entity_ConstructEntityEvent_Post { env: self.env, object: ret }
  }

  pub fn create_construct_entity_event_pre(param_1: event_cause_Cause, param_2: entity_EntityType, param_3: entity_Transform) -> event_entity_ConstructEntityEvent_Pre {
    let ret = java_method!(self.env, "createConstructEntityEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/EntityType;Lorg/spongepowered/api/entity/Transform;)Lorg/spongepowered/api/event/entity/ConstructEntityEvent$Pre;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createConstructEntityEventPre was null") }
    event_entity_ConstructEntityEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_damage_entity_event(param_1: event_cause_Cause, param_2: jobject, param_3: entity_Entity, param_4: f64) -> event_entity_DamageEntityEvent {
    let ret = java_method!(self.env, "createDamageEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/entity/Entity;D)Lorg/spongepowered/api/event/entity/DamageEntityEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDamageEntityEvent was null") }
    event_entity_DamageEntityEvent { env: self.env, object: ret }
  }

  pub fn create_destruct_entity_event(param_1: event_cause_Cause, param_2: text_channel_MessageChannel, param_3: jobject, param_4: event_message_MessageEvent_MessageFormatter, param_5: entity_Entity, param_6: bool) -> event_entity_DestructEntityEvent {
    let ret = java_method!(self.env, "createDestructEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/text/channel/MessageChannel;Ljava/util/Optional;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Lorg/spongepowered/api/entity/Entity;Z)Lorg/spongepowered/api/event/entity/DestructEntityEvent;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDestructEntityEvent was null") }
    event_entity_DestructEntityEvent { env: self.env, object: ret }
  }

  pub fn create_destruct_entity_event_death(param_1: event_cause_Cause, param_2: text_channel_MessageChannel, param_3: jobject, param_4: event_message_MessageEvent_MessageFormatter, param_5: entity_living_Living, param_6: bool) -> event_entity_DestructEntityEvent_Death {
    let ret = java_method!(self.env, "createDestructEntityEventDeath", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/text/channel/MessageChannel;Ljava/util/Optional;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Lorg/spongepowered/api/entity/living/Living;Z)Lorg/spongepowered/api/event/entity/DestructEntityEvent$Death;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDestructEntityEventDeath was null") }
    event_entity_DestructEntityEvent_Death { env: self.env, object: ret }
  }

  pub fn create_dismount_entity_event(param_1: event_cause_Cause, param_2: entity_Entity) -> event_entity_DismountEntityEvent {
    let ret = java_method!(self.env, "createDismountEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/DismountEntityEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDismountEntityEvent was null") }
    event_entity_DismountEntityEvent { env: self.env, object: ret }
  }

  pub fn create_expire_entity_event_target_item(param_1: event_cause_Cause, param_2: entity_Item) -> event_entity_ExpireEntityEvent_TargetItem {
    let ret = java_method!(self.env, "createExpireEntityEventTargetItem", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Item;)Lorg/spongepowered/api/event/entity/ExpireEntityEvent$TargetItem;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createExpireEntityEventTargetItem was null") }
    event_entity_ExpireEntityEvent_TargetItem { env: self.env, object: ret }
  }

  pub fn create_harvest_entity_event_target_humanoid(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: entity_living_Humanoid) -> event_entity_HarvestEntityEvent_TargetHumanoid {
    let ret = java_method!(self.env, "createHarvestEntityEventTargetHumanoid", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/entity/living/Humanoid;)Lorg/spongepowered/api/event/entity/HarvestEntityEvent$TargetHumanoid;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createHarvestEntityEventTargetHumanoid was null") }
    event_entity_HarvestEntityEvent_TargetHumanoid { env: self.env, object: ret }
  }

  pub fn create_harvest_entity_event_target_living(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: entity_living_Living) -> event_entity_HarvestEntityEvent_TargetLiving {
    let ret = java_method!(self.env, "createHarvestEntityEventTargetLiving", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/entity/living/Living;)Lorg/spongepowered/api/event/entity/HarvestEntityEvent$TargetLiving;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createHarvestEntityEventTargetLiving was null") }
    event_entity_HarvestEntityEvent_TargetLiving { env: self.env, object: ret }
  }

  pub fn create_harvest_entity_event_target_player(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: entity_living_player_Player, param_5: bool, param_6: bool, param_7: i32) -> event_entity_HarvestEntityEvent_TargetPlayer {
    let ret = java_method!(self.env, "createHarvestEntityEventTargetPlayer", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/entity/living/player/Player;ZZI)Lorg/spongepowered/api/event/entity/HarvestEntityEvent$TargetPlayer;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createHarvestEntityEventTargetPlayer was null") }
    event_entity_HarvestEntityEvent_TargetPlayer { env: self.env, object: ret }
  }

  pub fn create_heal_entity_event(param_1: event_cause_Cause, param_2: jobject, param_3: entity_Entity, param_4: f64) -> event_entity_HealEntityEvent {
    let ret = java_method!(self.env, "createHealEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/entity/Entity;D)Lorg/spongepowered/api/event/entity/HealEntityEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createHealEntityEvent was null") }
    event_entity_HealEntityEvent { env: self.env, object: ret }
  }

  pub fn create_ignite_entity_event(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: entity_Entity) -> event_entity_IgniteEntityEvent {
    let ret = java_method!(self.env, "createIgniteEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/IgniteEntityEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createIgniteEntityEvent was null") }
    event_entity_IgniteEntityEvent { env: self.env, object: ret }
  }

  pub fn create_interact_entity_event_primary_main_hand(param_1: event_cause_Cause, param_2: jobject, param_3: entity_Entity) -> event_entity_InteractEntityEvent_Primary_MainHand {
    let ret = java_method!(self.env, "createInteractEntityEventPrimaryMainHand", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/InteractEntityEvent$Primary$MainHand;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractEntityEventPrimaryMainHand was null") }
    event_entity_InteractEntityEvent_Primary_MainHand { env: self.env, object: ret }
  }

  pub fn create_interact_entity_event_primary_off_hand(param_1: event_cause_Cause, param_2: jobject, param_3: entity_Entity) -> event_entity_InteractEntityEvent_Primary_OffHand {
    let ret = java_method!(self.env, "createInteractEntityEventPrimaryOffHand", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/InteractEntityEvent$Primary$OffHand;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractEntityEventPrimaryOffHand was null") }
    event_entity_InteractEntityEvent_Primary_OffHand { env: self.env, object: ret }
  }

  pub fn create_interact_entity_event_secondary_main_hand(param_1: event_cause_Cause, param_2: jobject, param_3: entity_Entity) -> event_entity_InteractEntityEvent_Secondary_MainHand {
    let ret = java_method!(self.env, "createInteractEntityEventSecondaryMainHand", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/InteractEntityEvent$Secondary$MainHand;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractEntityEventSecondaryMainHand was null") }
    event_entity_InteractEntityEvent_Secondary_MainHand { env: self.env, object: ret }
  }

  pub fn create_interact_entity_event_secondary_off_hand(param_1: event_cause_Cause, param_2: jobject, param_3: entity_Entity) -> event_entity_InteractEntityEvent_Secondary_OffHand {
    let ret = java_method!(self.env, "createInteractEntityEventSecondaryOffHand", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Optional;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/InteractEntityEvent$Secondary$OffHand;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractEntityEventSecondaryOffHand was null") }
    event_entity_InteractEntityEvent_Secondary_OffHand { env: self.env, object: ret }
  }

  pub fn create_leash_entity_event(param_1: event_cause_Cause, param_2: entity_Entity) -> event_entity_LeashEntityEvent {
    let ret = java_method!(self.env, "createLeashEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/LeashEntityEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createLeashEntityEvent was null") }
    event_entity_LeashEntityEvent { env: self.env, object: ret }
  }

  pub fn create_mount_entity_event(param_1: event_cause_Cause, param_2: entity_Entity) -> event_entity_MountEntityEvent {
    let ret = java_method!(self.env, "createMountEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/MountEntityEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createMountEntityEvent was null") }
    event_entity_MountEntityEvent { env: self.env, object: ret }
  }

  pub fn create_move_entity_event(param_1: event_cause_Cause, param_2: entity_Transform, param_3: entity_Transform, param_4: entity_Entity) -> event_entity_MoveEntityEvent {
    let ret = java_method!(self.env, "createMoveEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/MoveEntityEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createMoveEntityEvent was null") }
    event_entity_MoveEntityEvent { env: self.env, object: ret }
  }

  pub fn create_move_entity_event_teleport(param_1: event_cause_Cause, param_2: entity_Transform, param_3: entity_Transform, param_4: entity_Entity) -> event_entity_MoveEntityEvent_Teleport {
    let ret = java_method!(self.env, "createMoveEntityEventTeleport", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/MoveEntityEvent$Teleport;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createMoveEntityEventTeleport was null") }
    event_entity_MoveEntityEvent_Teleport { env: self.env, object: ret }
  }

  pub fn create_move_entity_event_teleport_portal(param_1: event_cause_Cause, param_2: entity_Transform, param_3: entity_Transform, param_4: world_PortalAgent, param_5: entity_Entity, param_6: bool) -> event_entity_MoveEntityEvent_Teleport_Portal {
    let ret = java_method!(self.env, "createMoveEntityEventTeleportPortal", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/world/PortalAgent;Lorg/spongepowered/api/entity/Entity;Z)Lorg/spongepowered/api/event/entity/MoveEntityEvent$Teleport$Portal;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createMoveEntityEventTeleportPortal was null") }
    event_entity_MoveEntityEvent_Teleport_Portal { env: self.env, object: ret }
  }

  pub fn create_spawn_entity_event(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_entity_SpawnEntityEvent {
    let ret = java_method!(self.env, "createSpawnEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/entity/SpawnEntityEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSpawnEntityEvent was null") }
    event_entity_SpawnEntityEvent { env: self.env, object: ret }
  }

  pub fn create_spawn_entity_event_chunk_load(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_entity_SpawnEntityEvent_ChunkLoad {
    let ret = java_method!(self.env, "createSpawnEntityEventChunkLoad", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/entity/SpawnEntityEvent$ChunkLoad;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSpawnEntityEventChunkLoad was null") }
    event_entity_SpawnEntityEvent_ChunkLoad { env: self.env, object: ret }
  }

  pub fn create_spawn_entity_event_custom(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_entity_SpawnEntityEvent_Custom {
    let ret = java_method!(self.env, "createSpawnEntityEventCustom", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/entity/SpawnEntityEvent$Custom;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSpawnEntityEventCustom was null") }
    event_entity_SpawnEntityEvent_Custom { env: self.env, object: ret }
  }

  pub fn create_spawn_entity_event_spawner(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_entity_SpawnEntityEvent_Spawner {
    let ret = java_method!(self.env, "createSpawnEntityEventSpawner", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/entity/SpawnEntityEvent$Spawner;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSpawnEntityEventSpawner was null") }
    event_entity_SpawnEntityEvent_Spawner { env: self.env, object: ret }
  }

  pub fn create_tame_entity_event(param_1: event_cause_Cause, param_2: entity_Entity) -> event_entity_TameEntityEvent {
    let ret = java_method!(self.env, "createTameEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/TameEntityEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTameEntityEvent was null") }
    event_entity_TameEntityEvent { env: self.env, object: ret }
  }

  pub fn create_target_entity_event(param_1: event_cause_Cause, param_2: entity_Entity) -> event_entity_TargetEntityEvent {
    let ret = java_method!(self.env, "createTargetEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/TargetEntityEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetEntityEvent was null") }
    event_entity_TargetEntityEvent { env: self.env, object: ret }
  }

  pub fn create_unleash_entity_event(param_1: event_cause_Cause, param_2: entity_Entity) -> event_entity_UnleashEntityEvent {
    let ret = java_method!(self.env, "createUnleashEntityEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/event/entity/UnleashEntityEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUnleashEntityEvent was null") }
    event_entity_UnleashEntityEvent { env: self.env, object: ret }
  }

  pub fn create_a_i_task_event_add(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: entity_ai_Goal, param_5: entity_living_Agent, param_6: entity_ai_task_AITask) -> event_entity_ai_AITaskEvent_Add {
    let ret = java_method!(self.env, "createAITaskEventAdd", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/entity/ai/Goal;Lorg/spongepowered/api/entity/living/Agent;Lorg/spongepowered/api/entity/ai/task/AITask;)Lorg/spongepowered/api/event/entity/ai/AITaskEvent$Add;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createAITaskEventAdd was null") }
    event_entity_ai_AITaskEvent_Add { env: self.env, object: ret }
  }

  pub fn create_a_i_task_event_remove(param_1: event_cause_Cause, param_2: entity_ai_Goal, param_3: entity_living_Agent, param_4: entity_ai_task_AITask, param_5: i32) -> event_entity_ai_AITaskEvent_Remove {
    let ret = java_method!(self.env, "createAITaskEventRemove", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/ai/Goal;Lorg/spongepowered/api/entity/living/Agent;Lorg/spongepowered/api/entity/ai/task/AITask;I)Lorg/spongepowered/api/event/entity/ai/AITaskEvent$Remove;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createAITaskEventRemove was null") }
    event_entity_ai_AITaskEvent_Remove { env: self.env, object: ret }
  }

  pub fn create_defuse_explosive_event_post(param_1: event_cause_Cause, param_2: entity_explosive_FusedExplosive) -> event_entity_explosive_DefuseExplosiveEvent_Post {
    let ret = java_method!(self.env, "createDefuseExplosiveEventPost", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/explosive/FusedExplosive;)Lorg/spongepowered/api/event/entity/explosive/DefuseExplosiveEvent$Post;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDefuseExplosiveEventPost was null") }
    event_entity_explosive_DefuseExplosiveEvent_Post { env: self.env, object: ret }
  }

  pub fn create_defuse_explosive_event_pre(param_1: event_cause_Cause, param_2: entity_explosive_FusedExplosive) -> event_entity_explosive_DefuseExplosiveEvent_Pre {
    let ret = java_method!(self.env, "createDefuseExplosiveEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/explosive/FusedExplosive;)Lorg/spongepowered/api/event/entity/explosive/DefuseExplosiveEvent$Pre;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDefuseExplosiveEventPre was null") }
    event_entity_explosive_DefuseExplosiveEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_detonate_explosive_event(param_1: event_cause_Cause, param_2: world_explosion_Explosion_Builder, param_3: world_explosion_Explosion, param_4: entity_explosive_Explosive) -> event_entity_explosive_DetonateExplosiveEvent {
    let ret = java_method!(self.env, "createDetonateExplosiveEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/explosion/Explosion$Builder;Lorg/spongepowered/api/world/explosion/Explosion;Lorg/spongepowered/api/entity/explosive/Explosive;)Lorg/spongepowered/api/event/entity/explosive/DetonateExplosiveEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDetonateExplosiveEvent was null") }
    event_entity_explosive_DetonateExplosiveEvent { env: self.env, object: ret }
  }

  pub fn create_prime_explosive_event_post(param_1: event_cause_Cause, param_2: entity_explosive_FusedExplosive) -> event_entity_explosive_PrimeExplosiveEvent_Post {
    let ret = java_method!(self.env, "createPrimeExplosiveEventPost", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/explosive/FusedExplosive;)Lorg/spongepowered/api/event/entity/explosive/PrimeExplosiveEvent$Post;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createPrimeExplosiveEventPost was null") }
    event_entity_explosive_PrimeExplosiveEvent_Post { env: self.env, object: ret }
  }

  pub fn create_prime_explosive_event_pre(param_1: event_cause_Cause, param_2: entity_explosive_FusedExplosive) -> event_entity_explosive_PrimeExplosiveEvent_Pre {
    let ret = java_method!(self.env, "createPrimeExplosiveEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/explosive/FusedExplosive;)Lorg/spongepowered/api/event/entity/explosive/PrimeExplosiveEvent$Pre;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createPrimeExplosiveEventPre was null") }
    event_entity_explosive_PrimeExplosiveEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_target_explosive_event(param_1: event_cause_Cause, param_2: entity_explosive_Explosive) -> event_entity_explosive_TargetExplosiveEvent {
    let ret = java_method!(self.env, "createTargetExplosiveEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/explosive/Explosive;)Lorg/spongepowered/api/event/entity/explosive/TargetExplosiveEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetExplosiveEvent was null") }
    event_entity_explosive_TargetExplosiveEvent { env: self.env, object: ret }
  }

  pub fn create_target_fused_explosive_event(param_1: event_cause_Cause, param_2: entity_explosive_FusedExplosive) -> event_entity_explosive_TargetFusedExplosiveEvent {
    let ret = java_method!(self.env, "createTargetFusedExplosiveEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/explosive/FusedExplosive;)Lorg/spongepowered/api/event/entity/explosive/TargetFusedExplosiveEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetFusedExplosiveEvent was null") }
    event_entity_explosive_TargetFusedExplosiveEvent { env: self.env, object: ret }
  }

  pub fn create_item_merge_item_event(param_1: event_cause_Cause, param_2: entity_Item, param_3: entity_Item) -> event_entity_item_ItemMergeItemEvent {
    let ret = java_method!(self.env, "createItemMergeItemEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Item;Lorg/spongepowered/api/entity/Item;)Lorg/spongepowered/api/event/entity/item/ItemMergeItemEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createItemMergeItemEvent was null") }
    event_entity_item_ItemMergeItemEvent { env: self.env, object: ret }
  }

  pub fn create_target_item_event(param_1: event_cause_Cause, param_2: entity_Item) -> event_entity_item_TargetItemEvent {
    let ret = java_method!(self.env, "createTargetItemEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Item;)Lorg/spongepowered/api/event/entity/item/TargetItemEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetItemEvent was null") }
    event_entity_item_TargetItemEvent { env: self.env, object: ret }
  }

  pub fn create_target_agent_event(param_1: event_cause_Cause, param_2: entity_living_Agent) -> event_entity_living_TargetAgentEvent {
    let ret = java_method!(self.env, "createTargetAgentEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/living/Agent;)Lorg/spongepowered/api/event/entity/living/TargetAgentEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetAgentEvent was null") }
    event_entity_living_TargetAgentEvent { env: self.env, object: ret }
  }

  pub fn create_target_living_event(param_1: event_cause_Cause, param_2: entity_living_Living) -> event_entity_living_TargetLivingEvent {
    let ret = java_method!(self.env, "createTargetLivingEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/living/Living;)Lorg/spongepowered/api/event/entity/living/TargetLivingEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetLivingEvent was null") }
    event_entity_living_TargetLivingEvent { env: self.env, object: ret }
  }

  pub fn create_change_game_mode_event(param_1: event_cause_Cause, param_2: entity_living_player_gamemode_GameMode, param_3: entity_living_player_gamemode_GameMode, param_4: entity_living_Humanoid) -> event_entity_living_humanoid_ChangeGameModeEvent {
    let ret = java_method!(self.env, "createChangeGameModeEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;Lorg/spongepowered/api/entity/living/Humanoid;)Lorg/spongepowered/api/event/entity/living/humanoid/ChangeGameModeEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeGameModeEvent was null") }
    event_entity_living_humanoid_ChangeGameModeEvent { env: self.env, object: ret }
  }

  pub fn create_change_game_mode_event_target_player(param_1: event_cause_Cause, param_2: entity_living_player_gamemode_GameMode, param_3: entity_living_player_gamemode_GameMode, param_4: entity_living_player_Player) -> event_entity_living_humanoid_ChangeGameModeEvent_TargetPlayer {
    let ret = java_method!(self.env, "createChangeGameModeEventTargetPlayer", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;Lorg/spongepowered/api/entity/living/player/Player;)Lorg/spongepowered/api/event/entity/living/humanoid/ChangeGameModeEvent$TargetPlayer;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeGameModeEventTargetPlayer was null") }
    event_entity_living_humanoid_ChangeGameModeEvent_TargetPlayer { env: self.env, object: ret }
  }

  pub fn create_change_level_event(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: entity_living_Humanoid) -> event_entity_living_humanoid_ChangeLevelEvent {
    let ret = java_method!(self.env, "createChangeLevelEvent", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/entity/living/Humanoid;)Lorg/spongepowered/api/event/entity/living/humanoid/ChangeLevelEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeLevelEvent was null") }
    event_entity_living_humanoid_ChangeLevelEvent { env: self.env, object: ret }
  }

  pub fn create_change_level_event_target_player(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: entity_living_player_Player) -> event_entity_living_humanoid_ChangeLevelEvent_TargetPlayer {
    let ret = java_method!(self.env, "createChangeLevelEventTargetPlayer", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/entity/living/player/Player;)Lorg/spongepowered/api/event/entity/living/humanoid/ChangeLevelEvent$TargetPlayer;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeLevelEventTargetPlayer was null") }
    event_entity_living_humanoid_ChangeLevelEvent_TargetPlayer { env: self.env, object: ret }
  }

  pub fn create_target_humanoid_event(param_1: event_cause_Cause, param_2: entity_living_Humanoid) -> event_entity_living_humanoid_TargetHumanoidEvent {
    let ret = java_method!(self.env, "createTargetHumanoidEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/living/Humanoid;)Lorg/spongepowered/api/event/entity/living/humanoid/TargetHumanoidEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetHumanoidEvent was null") }
    event_entity_living_humanoid_TargetHumanoidEvent { env: self.env, object: ret }
  }

  pub fn create_kick_player_event(param_1: event_cause_Cause, param_2: text_channel_MessageChannel, param_3: jobject, param_4: event_message_MessageEvent_MessageFormatter, param_5: entity_living_player_Player, param_6: bool) -> event_entity_living_humanoid_player_KickPlayerEvent {
    let ret = java_method!(self.env, "createKickPlayerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/text/channel/MessageChannel;Ljava/util/Optional;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Lorg/spongepowered/api/entity/living/player/Player;Z)Lorg/spongepowered/api/event/entity/living/humanoid/player/KickPlayerEvent;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createKickPlayerEvent was null") }
    event_entity_living_humanoid_player_KickPlayerEvent { env: self.env, object: ret }
  }

  pub fn create_player_change_client_settings_event(param_1: event_cause_Cause, param_2: text_chat_ChatVisibility, param_3: jobject, param_4: jobject, param_5: entity_living_player_Player, param_6: bool, param_7: i32) -> event_entity_living_humanoid_player_PlayerChangeClientSettingsEvent {
    let ret = java_method!(self.env, "createPlayerChangeClientSettingsEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/text/chat/ChatVisibility;Ljava/util/Set;Ljava/util/Locale;Lorg/spongepowered/api/entity/living/player/Player;ZI)Lorg/spongepowered/api/event/entity/living/humanoid/player/PlayerChangeClientSettingsEvent;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createPlayerChangeClientSettingsEvent was null") }
    event_entity_living_humanoid_player_PlayerChangeClientSettingsEvent { env: self.env, object: ret }
  }

  pub fn create_resource_pack_status_event(param_1: event_cause_Cause, param_2: resourcepack_ResourcePack, param_3: entity_living_player_Player, param_4: event_entity_living_humanoid_player_ResourcePackStatusEvent_ResourcePackStatus) -> event_entity_living_humanoid_player_ResourcePackStatusEvent {
    let ret = java_method!(self.env, "createResourcePackStatusEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/resourcepack/ResourcePack;Lorg/spongepowered/api/entity/living/player/Player;Lorg/spongepowered/api/event/entity/living/humanoid/player/ResourcePackStatusEvent$ResourcePackStatus;)Lorg/spongepowered/api/event/entity/living/humanoid/player/ResourcePackStatusEvent;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createResourcePackStatusEvent was null") }
    event_entity_living_humanoid_player_ResourcePackStatusEvent { env: self.env, object: ret }
  }

  pub fn create_respawn_player_event(param_1: event_cause_Cause, param_2: entity_Transform, param_3: entity_Transform, param_4: entity_living_player_Player, param_5: bool) -> event_entity_living_humanoid_player_RespawnPlayerEvent {
    let ret = java_method!(self.env, "createRespawnPlayerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/entity/living/player/Player;Z)Lorg/spongepowered/api/event/entity/living/humanoid/player/RespawnPlayerEvent;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createRespawnPlayerEvent was null") }
    event_entity_living_humanoid_player_RespawnPlayerEvent { env: self.env, object: ret }
  }

  pub fn create_target_player_event(param_1: event_cause_Cause, param_2: entity_living_player_Player) -> event_entity_living_humanoid_player_TargetPlayerEvent {
    let ret = java_method!(self.env, "createTargetPlayerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/living/player/Player;)Lorg/spongepowered/api/event/entity/living/humanoid/player/TargetPlayerEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetPlayerEvent was null") }
    event_entity_living_humanoid_player_TargetPlayerEvent { env: self.env, object: ret }
  }

  pub fn create_launch_projectile_event(param_1: event_cause_Cause, param_2: entity_projectile_Projectile) -> event_entity_projectile_LaunchProjectileEvent {
    let ret = java_method!(self.env, "createLaunchProjectileEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/projectile/Projectile;)Lorg/spongepowered/api/event/entity/projectile/LaunchProjectileEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createLaunchProjectileEvent was null") }
    event_entity_projectile_LaunchProjectileEvent { env: self.env, object: ret }
  }

  pub fn create_target_projectile_event(param_1: event_cause_Cause, param_2: entity_projectile_Projectile) -> event_entity_projectile_TargetProjectileEvent {
    let ret = java_method!(self.env, "createTargetProjectileEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/projectile/Projectile;)Lorg/spongepowered/api/event/entity/projectile/TargetProjectileEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetProjectileEvent was null") }
    event_entity_projectile_TargetProjectileEvent { env: self.env, object: ret }
  }

  pub fn create_game_reload_event(param_1: event_cause_Cause) -> event_game_GameReloadEvent {
    let ret = java_method!(self.env, "createGameReloadEvent", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/event/game/GameReloadEvent;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameReloadEvent was null") }
    event_game_GameReloadEvent { env: self.env, object: ret }
  }

  pub fn create_game_about_to_start_server_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameAboutToStartServerEvent {
    let ret = java_method!(self.env, "createGameAboutToStartServerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameAboutToStartServerEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameAboutToStartServerEvent was null") }
    event_game_state_GameAboutToStartServerEvent { env: self.env, object: ret }
  }

  pub fn create_game_construction_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameConstructionEvent {
    let ret = java_method!(self.env, "createGameConstructionEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameConstructionEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameConstructionEvent was null") }
    event_game_state_GameConstructionEvent { env: self.env, object: ret }
  }

  pub fn create_game_initialization_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameInitializationEvent {
    let ret = java_method!(self.env, "createGameInitializationEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameInitializationEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameInitializationEvent was null") }
    event_game_state_GameInitializationEvent { env: self.env, object: ret }
  }

  pub fn create_game_load_complete_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameLoadCompleteEvent {
    let ret = java_method!(self.env, "createGameLoadCompleteEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameLoadCompleteEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameLoadCompleteEvent was null") }
    event_game_state_GameLoadCompleteEvent { env: self.env, object: ret }
  }

  pub fn create_game_post_initialization_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GamePostInitializationEvent {
    let ret = java_method!(self.env, "createGamePostInitializationEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GamePostInitializationEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGamePostInitializationEvent was null") }
    event_game_state_GamePostInitializationEvent { env: self.env, object: ret }
  }

  pub fn create_game_pre_initialization_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GamePreInitializationEvent {
    let ret = java_method!(self.env, "createGamePreInitializationEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GamePreInitializationEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGamePreInitializationEvent was null") }
    event_game_state_GamePreInitializationEvent { env: self.env, object: ret }
  }

  pub fn create_game_started_server_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameStartedServerEvent {
    let ret = java_method!(self.env, "createGameStartedServerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameStartedServerEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameStartedServerEvent was null") }
    event_game_state_GameStartedServerEvent { env: self.env, object: ret }
  }

  pub fn create_game_starting_server_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameStartingServerEvent {
    let ret = java_method!(self.env, "createGameStartingServerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameStartingServerEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameStartingServerEvent was null") }
    event_game_state_GameStartingServerEvent { env: self.env, object: ret }
  }

  pub fn create_game_state_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameStateEvent {
    let ret = java_method!(self.env, "createGameStateEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameStateEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameStateEvent was null") }
    event_game_state_GameStateEvent { env: self.env, object: ret }
  }

  pub fn create_game_stopped_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameStoppedEvent {
    let ret = java_method!(self.env, "createGameStoppedEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameStoppedEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameStoppedEvent was null") }
    event_game_state_GameStoppedEvent { env: self.env, object: ret }
  }

  pub fn create_game_stopped_server_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameStoppedServerEvent {
    let ret = java_method!(self.env, "createGameStoppedServerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameStoppedServerEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameStoppedServerEvent was null") }
    event_game_state_GameStoppedServerEvent { env: self.env, object: ret }
  }

  pub fn create_game_stopping_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameStoppingEvent {
    let ret = java_method!(self.env, "createGameStoppingEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameStoppingEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameStoppingEvent was null") }
    event_game_state_GameStoppingEvent { env: self.env, object: ret }
  }

  pub fn create_game_stopping_server_event(param_1: event_cause_Cause, param_2: GameState) -> event_game_state_GameStoppingServerEvent {
    let ret = java_method!(self.env, "createGameStoppingServerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/GameState;)Lorg/spongepowered/api/event/game/state/GameStoppingServerEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGameStoppingServerEvent was null") }
    event_game_state_GameStoppingServerEvent { env: self.env, object: ret }
  }

  pub fn create_affect_item_stack_event(param_1: event_cause_Cause, param_2: jobject) -> event_item_inventory_AffectItemStackEvent {
    let ret = java_method!(self.env, "createAffectItemStackEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/AffectItemStackEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createAffectItemStackEvent was null") }
    event_item_inventory_AffectItemStackEvent { env: self.env, object: ret }
  }

  pub fn create_affect_slot_event(param_1: event_cause_Cause, param_2: jobject) -> event_item_inventory_AffectSlotEvent {
    let ret = java_method!(self.env, "createAffectSlotEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/AffectSlotEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createAffectSlotEvent was null") }
    event_item_inventory_AffectSlotEvent { env: self.env, object: ret }
  }

  pub fn create_change_inventory_event_equipment(param_1: event_cause_Cause, param_2: item_inventory_Inventory, param_3: jobject) -> event_item_inventory_ChangeInventoryEvent_Equipment {
    let ret = java_method!(self.env, "createChangeInventoryEventEquipment", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/Inventory;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ChangeInventoryEvent$Equipment;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeInventoryEventEquipment was null") }
    event_item_inventory_ChangeInventoryEvent_Equipment { env: self.env, object: ret }
  }

  pub fn create_change_inventory_event_held(param_1: event_cause_Cause, param_2: item_inventory_Inventory, param_3: jobject) -> event_item_inventory_ChangeInventoryEvent_Held {
    let ret = java_method!(self.env, "createChangeInventoryEventHeld", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/Inventory;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ChangeInventoryEvent$Held;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeInventoryEventHeld was null") }
    event_item_inventory_ChangeInventoryEvent_Held { env: self.env, object: ret }
  }

  pub fn create_change_inventory_event_pickup(param_1: event_cause_Cause, param_2: item_inventory_Inventory, param_3: jobject) -> event_item_inventory_ChangeInventoryEvent_Pickup {
    let ret = java_method!(self.env, "createChangeInventoryEventPickup", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/Inventory;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ChangeInventoryEvent$Pickup;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeInventoryEventPickup was null") }
    event_item_inventory_ChangeInventoryEvent_Pickup { env: self.env, object: ret }
  }

  pub fn create_change_inventory_event_transfer(param_1: event_cause_Cause, param_2: item_inventory_Inventory, param_3: jobject) -> event_item_inventory_ChangeInventoryEvent_Transfer {
    let ret = java_method!(self.env, "createChangeInventoryEventTransfer", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/Inventory;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ChangeInventoryEvent$Transfer;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeInventoryEventTransfer was null") }
    event_item_inventory_ChangeInventoryEvent_Transfer { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_creative(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_ClickInventoryEvent_Creative {
    let ret = java_method!(self.env, "createClickInventoryEventCreative", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Creative;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventCreative was null") }
    event_item_inventory_ClickInventoryEvent_Creative { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_double(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_ClickInventoryEvent_Double {
    let ret = java_method!(self.env, "createClickInventoryEventDouble", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Double;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventDouble was null") }
    event_item_inventory_ClickInventoryEvent_Double { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_drag_primary(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_ClickInventoryEvent_Drag_Primary {
    let ret = java_method!(self.env, "createClickInventoryEventDragPrimary", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Drag$Primary;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventDragPrimary was null") }
    event_item_inventory_ClickInventoryEvent_Drag_Primary { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_drag_secondary(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_ClickInventoryEvent_Drag_Secondary {
    let ret = java_method!(self.env, "createClickInventoryEventDragSecondary", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Drag$Secondary;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventDragSecondary was null") }
    event_item_inventory_ClickInventoryEvent_Drag_Secondary { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_drop_full(param_1: event_cause_Cause, param_2: data_Transaction, param_3: jobject, param_4: item_inventory_Container, param_5: world_World, param_6: jobject) -> event_item_inventory_ClickInventoryEvent_Drop_Full {
    let ret = java_method!(self.env, "createClickInventoryEventDropFull", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Ljava/util/List;Lorg/spongepowered/api/item/inventory/Container;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Drop$Full;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventDropFull was null") }
    event_item_inventory_ClickInventoryEvent_Drop_Full { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_drop_outside_primary(param_1: event_cause_Cause, param_2: data_Transaction, param_3: jobject, param_4: item_inventory_Container, param_5: world_World, param_6: jobject) -> event_item_inventory_ClickInventoryEvent_Drop_Outside_Primary {
    let ret = java_method!(self.env, "createClickInventoryEventDropOutsidePrimary", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Ljava/util/List;Lorg/spongepowered/api/item/inventory/Container;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Drop$Outside$Primary;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventDropOutsidePrimary was null") }
    event_item_inventory_ClickInventoryEvent_Drop_Outside_Primary { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_drop_outside_secondary(param_1: event_cause_Cause, param_2: data_Transaction, param_3: jobject, param_4: item_inventory_Container, param_5: world_World, param_6: jobject) -> event_item_inventory_ClickInventoryEvent_Drop_Outside_Secondary {
    let ret = java_method!(self.env, "createClickInventoryEventDropOutsideSecondary", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Ljava/util/List;Lorg/spongepowered/api/item/inventory/Container;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Drop$Outside$Secondary;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventDropOutsideSecondary was null") }
    event_item_inventory_ClickInventoryEvent_Drop_Outside_Secondary { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_drop_single(param_1: event_cause_Cause, param_2: data_Transaction, param_3: jobject, param_4: item_inventory_Container, param_5: world_World, param_6: jobject) -> event_item_inventory_ClickInventoryEvent_Drop_Single {
    let ret = java_method!(self.env, "createClickInventoryEventDropSingle", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Ljava/util/List;Lorg/spongepowered/api/item/inventory/Container;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Drop$Single;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventDropSingle was null") }
    event_item_inventory_ClickInventoryEvent_Drop_Single { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_middle(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_ClickInventoryEvent_Middle {
    let ret = java_method!(self.env, "createClickInventoryEventMiddle", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Middle;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventMiddle was null") }
    event_item_inventory_ClickInventoryEvent_Middle { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_number_press(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject, param_5: i32) -> event_item_inventory_ClickInventoryEvent_NumberPress {
    let ret = java_method!(self.env, "createClickInventoryEventNumberPress", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;I)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$NumberPress;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventNumberPress was null") }
    event_item_inventory_ClickInventoryEvent_NumberPress { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_primary(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_ClickInventoryEvent_Primary {
    let ret = java_method!(self.env, "createClickInventoryEventPrimary", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Primary;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventPrimary was null") }
    event_item_inventory_ClickInventoryEvent_Primary { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_secondary(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_ClickInventoryEvent_Secondary {
    let ret = java_method!(self.env, "createClickInventoryEventSecondary", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Secondary;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventSecondary was null") }
    event_item_inventory_ClickInventoryEvent_Secondary { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_shift_primary(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_ClickInventoryEvent_Shift_Primary {
    let ret = java_method!(self.env, "createClickInventoryEventShiftPrimary", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Shift$Primary;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventShiftPrimary was null") }
    event_item_inventory_ClickInventoryEvent_Shift_Primary { env: self.env, object: ret }
  }

  pub fn create_click_inventory_event_shift_secondary(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_ClickInventoryEvent_Shift_Secondary {
    let ret = java_method!(self.env, "createClickInventoryEventShiftSecondary", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/ClickInventoryEvent$Shift$Secondary;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClickInventoryEventShiftSecondary was null") }
    event_item_inventory_ClickInventoryEvent_Shift_Secondary { env: self.env, object: ret }
  }

  pub fn create_creative_inventory_event_click(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container, param_4: jobject) -> event_item_inventory_CreativeInventoryEvent_Click {
    let ret = java_method!(self.env, "createCreativeInventoryEventClick", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/CreativeInventoryEvent$Click;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createCreativeInventoryEventClick was null") }
    event_item_inventory_CreativeInventoryEvent_Click { env: self.env, object: ret }
  }

  pub fn create_creative_inventory_event_drop(param_1: event_cause_Cause, param_2: data_Transaction, param_3: jobject, param_4: item_inventory_Container, param_5: world_World, param_6: jobject) -> event_item_inventory_CreativeInventoryEvent_Drop {
    let ret = java_method!(self.env, "createCreativeInventoryEventDrop", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Ljava/util/List;Lorg/spongepowered/api/item/inventory/Container;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/CreativeInventoryEvent$Drop;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createCreativeInventoryEventDrop was null") }
    event_item_inventory_CreativeInventoryEvent_Drop { env: self.env, object: ret }
  }

  pub fn create_drop_item_event_custom(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_item_inventory_DropItemEvent_Custom {
    let ret = java_method!(self.env, "createDropItemEventCustom", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/item/inventory/DropItemEvent$Custom;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDropItemEventCustom was null") }
    event_item_inventory_DropItemEvent_Custom { env: self.env, object: ret }
  }

  pub fn create_drop_item_event_destruct(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_item_inventory_DropItemEvent_Destruct {
    let ret = java_method!(self.env, "createDropItemEventDestruct", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/item/inventory/DropItemEvent$Destruct;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDropItemEventDestruct was null") }
    event_item_inventory_DropItemEvent_Destruct { env: self.env, object: ret }
  }

  pub fn create_drop_item_event_dispense(param_1: event_cause_Cause, param_2: jobject, param_3: world_World) -> event_item_inventory_DropItemEvent_Dispense {
    let ret = java_method!(self.env, "createDropItemEventDispense", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/item/inventory/DropItemEvent$Dispense;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDropItemEventDispense was null") }
    event_item_inventory_DropItemEvent_Dispense { env: self.env, object: ret }
  }

  pub fn create_drop_item_event_pre(param_1: event_cause_Cause, param_2: jobject, param_3: jobject) -> event_item_inventory_DropItemEvent_Pre {
    let ret = java_method!(self.env, "createDropItemEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Ljava/util/List;)Lorg/spongepowered/api/event/item/inventory/DropItemEvent$Pre;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createDropItemEventPre was null") }
    event_item_inventory_DropItemEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_interact_inventory_event_close(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container) -> event_item_inventory_InteractInventoryEvent_Close {
    let ret = java_method!(self.env, "createInteractInventoryEventClose", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;)Lorg/spongepowered/api/event/item/inventory/InteractInventoryEvent$Close;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractInventoryEventClose was null") }
    event_item_inventory_InteractInventoryEvent_Close { env: self.env, object: ret }
  }

  pub fn create_interact_inventory_event_open(param_1: event_cause_Cause, param_2: data_Transaction, param_3: item_inventory_Container) -> event_item_inventory_InteractInventoryEvent_Open {
    let ret = java_method!(self.env, "createInteractInventoryEventOpen", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/data/Transaction;Lorg/spongepowered/api/item/inventory/Container;)Lorg/spongepowered/api/event/item/inventory/InteractInventoryEvent$Open;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createInteractInventoryEventOpen was null") }
    event_item_inventory_InteractInventoryEvent_Open { env: self.env, object: ret }
  }

  pub fn create_target_container_event(param_1: event_cause_Cause, param_2: item_inventory_Container) -> event_item_inventory_TargetContainerEvent {
    let ret = java_method!(self.env, "createTargetContainerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/Container;)Lorg/spongepowered/api/event/item/inventory/TargetContainerEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetContainerEvent was null") }
    event_item_inventory_TargetContainerEvent { env: self.env, object: ret }
  }

  pub fn create_target_inventory_event(param_1: event_cause_Cause, param_2: item_inventory_Inventory) -> event_item_inventory_TargetInventoryEvent {
    let ret = java_method!(self.env, "createTargetInventoryEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/item/inventory/Inventory;)Lorg/spongepowered/api/event/item/inventory/TargetInventoryEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetInventoryEvent was null") }
    event_item_inventory_TargetInventoryEvent { env: self.env, object: ret }
  }

  pub fn create_use_item_stack_event_finish(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: item_inventory_ItemStackSnapshot) -> event_item_inventory_UseItemStackEvent_Finish {
    let ret = java_method!(self.env, "createUseItemStackEventFinish", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Lorg/spongepowered/api/event/item/inventory/UseItemStackEvent$Finish;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUseItemStackEventFinish was null") }
    event_item_inventory_UseItemStackEvent_Finish { env: self.env, object: ret }
  }

  pub fn create_use_item_stack_event_replace(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: item_inventory_ItemStackSnapshot, param_5: data_Transaction) -> event_item_inventory_UseItemStackEvent_Replace {
    let ret = java_method!(self.env, "createUseItemStackEventReplace", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/item/inventory/ItemStackSnapshot;Lorg/spongepowered/api/data/Transaction;)Lorg/spongepowered/api/event/item/inventory/UseItemStackEvent$Replace;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUseItemStackEventReplace was null") }
    event_item_inventory_UseItemStackEvent_Replace { env: self.env, object: ret }
  }

  pub fn create_use_item_stack_event_reset(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: item_inventory_ItemStackSnapshot) -> event_item_inventory_UseItemStackEvent_Reset {
    let ret = java_method!(self.env, "createUseItemStackEventReset", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Lorg/spongepowered/api/event/item/inventory/UseItemStackEvent$Reset;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUseItemStackEventReset was null") }
    event_item_inventory_UseItemStackEvent_Reset { env: self.env, object: ret }
  }

  pub fn create_use_item_stack_event_start(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: item_inventory_ItemStackSnapshot) -> event_item_inventory_UseItemStackEvent_Start {
    let ret = java_method!(self.env, "createUseItemStackEventStart", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Lorg/spongepowered/api/event/item/inventory/UseItemStackEvent$Start;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUseItemStackEventStart was null") }
    event_item_inventory_UseItemStackEvent_Start { env: self.env, object: ret }
  }

  pub fn create_use_item_stack_event_stop(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: item_inventory_ItemStackSnapshot) -> event_item_inventory_UseItemStackEvent_Stop {
    let ret = java_method!(self.env, "createUseItemStackEventStop", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Lorg/spongepowered/api/event/item/inventory/UseItemStackEvent$Stop;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUseItemStackEventStop was null") }
    event_item_inventory_UseItemStackEvent_Stop { env: self.env, object: ret }
  }

  pub fn create_use_item_stack_event_tick(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: item_inventory_ItemStackSnapshot) -> event_item_inventory_UseItemStackEvent_Tick {
    let ret = java_method!(self.env, "createUseItemStackEventTick", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Lorg/spongepowered/api/event/item/inventory/UseItemStackEvent$Tick;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUseItemStackEventTick was null") }
    event_item_inventory_UseItemStackEvent_Tick { env: self.env, object: ret }
  }

  pub fn create_message_channel_event(param_1: event_cause_Cause, param_2: text_channel_MessageChannel, param_3: jobject, param_4: event_message_MessageEvent_MessageFormatter, param_5: bool) -> event_message_MessageChannelEvent {
    let ret = java_method!(self.env, "createMessageChannelEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/text/channel/MessageChannel;Ljava/util/Optional;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Z)Lorg/spongepowered/api/event/message/MessageChannelEvent;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createMessageChannelEvent was null") }
    event_message_MessageChannelEvent { env: self.env, object: ret }
  }

  pub fn create_message_channel_event_chat(param_1: event_cause_Cause, param_2: text_channel_MessageChannel, param_3: jobject, param_4: event_message_MessageEvent_MessageFormatter, param_5: text_Text, param_6: bool) -> event_message_MessageChannelEvent_Chat {
    let ret = java_method!(self.env, "createMessageChannelEventChat", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/text/channel/MessageChannel;Ljava/util/Optional;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Lorg/spongepowered/api/text/Text;Z)Lorg/spongepowered/api/event/message/MessageChannelEvent$Chat;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createMessageChannelEventChat was null") }
    event_message_MessageChannelEvent_Chat { env: self.env, object: ret }
  }

  pub fn create_ban_ip_event(param_1: event_cause_Cause, param_2: util_ban_Ban_Ip) -> event_network_BanIpEvent {
    let ret = java_method!(self.env, "createBanIpEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/util/ban/Ban$Ip;)Lorg/spongepowered/api/event/network/BanIpEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createBanIpEvent was null") }
    event_network_BanIpEvent { env: self.env, object: ret }
  }

  pub fn create_channel_registration_event_register(param_1: event_cause_Cause, param_2: jobject) -> event_network_ChannelRegistrationEvent_Register {
    let ret = java_method!(self.env, "createChannelRegistrationEventRegister", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/lang/String;)Lorg/spongepowered/api/event/network/ChannelRegistrationEvent$Register;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChannelRegistrationEventRegister was null") }
    event_network_ChannelRegistrationEvent_Register { env: self.env, object: ret }
  }

  pub fn create_channel_registration_event_unregister(param_1: event_cause_Cause, param_2: jobject) -> event_network_ChannelRegistrationEvent_Unregister {
    let ret = java_method!(self.env, "createChannelRegistrationEventUnregister", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/lang/String;)Lorg/spongepowered/api/event/network/ChannelRegistrationEvent$Unregister;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChannelRegistrationEventUnregister was null") }
    event_network_ChannelRegistrationEvent_Unregister { env: self.env, object: ret }
  }

  pub fn create_client_connection_event_auth(param_1: event_cause_Cause, param_2: network_RemoteConnection, param_3: event_message_MessageEvent_MessageFormatter, param_4: profile_GameProfile, param_5: bool) -> event_network_ClientConnectionEvent_Auth {
    let ret = java_method!(self.env, "createClientConnectionEventAuth", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/network/RemoteConnection;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Lorg/spongepowered/api/profile/GameProfile;Z)Lorg/spongepowered/api/event/network/ClientConnectionEvent$Auth;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClientConnectionEventAuth was null") }
    event_network_ClientConnectionEvent_Auth { env: self.env, object: ret }
  }

  pub fn create_client_connection_event_disconnect(param_1: event_cause_Cause, param_2: text_channel_MessageChannel, param_3: jobject, param_4: event_message_MessageEvent_MessageFormatter, param_5: entity_living_player_Player, param_6: bool) -> event_network_ClientConnectionEvent_Disconnect {
    let ret = java_method!(self.env, "createClientConnectionEventDisconnect", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/text/channel/MessageChannel;Ljava/util/Optional;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Lorg/spongepowered/api/entity/living/player/Player;Z)Lorg/spongepowered/api/event/network/ClientConnectionEvent$Disconnect;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClientConnectionEventDisconnect was null") }
    event_network_ClientConnectionEvent_Disconnect { env: self.env, object: ret }
  }

  pub fn create_client_connection_event_join(param_1: event_cause_Cause, param_2: text_channel_MessageChannel, param_3: jobject, param_4: event_message_MessageEvent_MessageFormatter, param_5: entity_living_player_Player, param_6: bool) -> event_network_ClientConnectionEvent_Join {
    let ret = java_method!(self.env, "createClientConnectionEventJoin", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/text/channel/MessageChannel;Ljava/util/Optional;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Lorg/spongepowered/api/entity/living/player/Player;Z)Lorg/spongepowered/api/event/network/ClientConnectionEvent$Join;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClientConnectionEventJoin was null") }
    event_network_ClientConnectionEvent_Join { env: self.env, object: ret }
  }

  pub fn create_client_connection_event_login(param_1: event_cause_Cause, param_2: entity_Transform, param_3: entity_Transform, param_4: network_RemoteConnection, param_5: event_message_MessageEvent_MessageFormatter, param_6: profile_GameProfile, param_7: entity_living_player_User, param_8: bool) -> event_network_ClientConnectionEvent_Login {
    let ret = java_method!(self.env, "createClientConnectionEventLogin", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/entity/Transform;Lorg/spongepowered/api/network/RemoteConnection;Lorg/spongepowered/api/event/message/MessageEvent$MessageFormatter;Lorg/spongepowered/api/profile/GameProfile;Lorg/spongepowered/api/entity/living/player/User;Z)Lorg/spongepowered/api/event/network/ClientConnectionEvent$Login;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6, param_7);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClientConnectionEventLogin was null") }
    event_network_ClientConnectionEvent_Login { env: self.env, object: ret }
  }

  pub fn create_pardon_ip_event(param_1: event_cause_Cause, param_2: util_ban_Ban_Ip) -> event_network_PardonIpEvent {
    let ret = java_method!(self.env, "createPardonIpEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/util/ban/Ban$Ip;)Lorg/spongepowered/api/event/network/PardonIpEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createPardonIpEvent was null") }
    event_network_PardonIpEvent { env: self.env, object: ret }
  }

  pub fn create_rcon_connection_event_connect(param_1: event_cause_Cause, param_2: command_source_RconSource) -> event_network_rcon_RconConnectionEvent_Connect {
    let ret = java_method!(self.env, "createRconConnectionEventConnect", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/command/source/RconSource;)Lorg/spongepowered/api/event/network/rcon/RconConnectionEvent$Connect;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createRconConnectionEventConnect was null") }
    event_network_rcon_RconConnectionEvent_Connect { env: self.env, object: ret }
  }

  pub fn create_rcon_connection_event_disconnect(param_1: event_cause_Cause, param_2: command_source_RconSource) -> event_network_rcon_RconConnectionEvent_Disconnect {
    let ret = java_method!(self.env, "createRconConnectionEventDisconnect", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/command/source/RconSource;)Lorg/spongepowered/api/event/network/rcon/RconConnectionEvent$Disconnect;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createRconConnectionEventDisconnect was null") }
    event_network_rcon_RconConnectionEvent_Disconnect { env: self.env, object: ret }
  }

  pub fn create_rcon_connection_event_login(param_1: event_cause_Cause, param_2: command_source_RconSource) -> event_network_rcon_RconConnectionEvent_Login {
    let ret = java_method!(self.env, "createRconConnectionEventLogin", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/command/source/RconSource;)Lorg/spongepowered/api/event/network/rcon/RconConnectionEvent$Login;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createRconConnectionEventLogin was null") }
    event_network_rcon_RconConnectionEvent_Login { env: self.env, object: ret }
  }

  pub fn create_client_ping_server_event(param_1: event_cause_Cause, param_2: network_status_StatusClient, param_3: event_server_ClientPingServerEvent_Response) -> event_server_ClientPingServerEvent {
    let ret = java_method!(self.env, "createClientPingServerEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/network/status/StatusClient;Lorg/spongepowered/api/event/server/ClientPingServerEvent$Response;)Lorg/spongepowered/api/event/server/ClientPingServerEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClientPingServerEvent was null") }
    event_server_ClientPingServerEvent { env: self.env, object: ret }
  }

  pub fn create_client_ping_server_event_response_players(param_1: jobject, param_2: i32, param_3: i32) -> event_server_ClientPingServerEvent_Response_Players {
    let ret = java_method!(self.env, "createClientPingServerEventResponsePlayers", "(Ljava/util/List;II)Lorg/spongepowered/api/event/server/ClientPingServerEvent$Response$Players;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createClientPingServerEventResponsePlayers was null") }
    event_server_ClientPingServerEvent_Response_Players { env: self.env, object: ret }
  }

  pub fn create_query_server_event_basic(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: jobject, param_5: jobject, param_6: i32, param_7: i32, param_8: i32, param_9: i32) -> event_server_query_QueryServerEvent_Basic {
    let ret = java_method!(self.env, "createQueryServerEventBasic", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/net/InetSocketAddress;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIII)Lorg/spongepowered/api/event/server/query/QueryServerEvent$Basic;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createQueryServerEventBasic was null") }
    event_server_query_QueryServerEvent_Basic { env: self.env, object: ret }
  }

  pub fn create_query_server_event_full(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: jobject, param_5: jobject, param_6: jobject, param_7: jobject, param_8: jobject, param_9: jobject, param_10: jobject, param_11: i32, param_12: i32, param_13: i32, param_14: i32) -> event_server_query_QueryServerEvent_Full {
    let ret = java_method!(self.env, "createQueryServerEventFull", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/net/InetSocketAddress;Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;IIII)Lorg/spongepowered/api/event/server/query/QueryServerEvent$Full;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8, param_9, param_10, param_11, param_12, param_13);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createQueryServerEventFull was null") }
    event_server_query_QueryServerEvent_Full { env: self.env, object: ret }
  }

  pub fn create_change_service_provider_event(param_1: event_cause_Cause, param_2: service_ProviderRegistration, param_3: jobject) -> event_service_ChangeServiceProviderEvent {
    let ret = java_method!(self.env, "createChangeServiceProviderEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/service/ProviderRegistration;Ljava/util/Optional;)Lorg/spongepowered/api/event/service/ChangeServiceProviderEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeServiceProviderEvent was null") }
    event_service_ChangeServiceProviderEvent { env: self.env, object: ret }
  }

  pub fn create_change_statistic_event_target_player(param_1: event_cause_Cause, param_2: i64, param_3: i64, param_4: statistic_Statistic, param_5: entity_living_player_Player) -> event_statistic_ChangeStatisticEvent_TargetPlayer {
    let ret = java_method!(self.env, "createChangeStatisticEventTargetPlayer", "(Lorg/spongepowered/api/event/cause/Cause;JJLorg/spongepowered/api/statistic/Statistic;Lorg/spongepowered/api/entity/living/player/Player;)Lorg/spongepowered/api/event/statistic/ChangeStatisticEvent$TargetPlayer;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeStatisticEventTargetPlayer was null") }
    event_statistic_ChangeStatisticEvent_TargetPlayer { env: self.env, object: ret }
  }

  pub fn create_ban_user_event(param_1: event_cause_Cause, param_2: util_ban_Ban_Profile, param_3: entity_living_player_User) -> event_user_BanUserEvent {
    let ret = java_method!(self.env, "createBanUserEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/util/ban/Ban$Profile;Lorg/spongepowered/api/entity/living/player/User;)Lorg/spongepowered/api/event/user/BanUserEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createBanUserEvent was null") }
    event_user_BanUserEvent { env: self.env, object: ret }
  }

  pub fn create_ban_user_event_target_player(param_1: event_cause_Cause, param_2: util_ban_Ban_Profile, param_3: entity_living_player_Player, param_4: entity_living_player_User) -> event_user_BanUserEvent_TargetPlayer {
    let ret = java_method!(self.env, "createBanUserEventTargetPlayer", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/util/ban/Ban$Profile;Lorg/spongepowered/api/entity/living/player/Player;Lorg/spongepowered/api/entity/living/player/User;)Lorg/spongepowered/api/event/user/BanUserEvent$TargetPlayer;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createBanUserEventTargetPlayer was null") }
    event_user_BanUserEvent_TargetPlayer { env: self.env, object: ret }
  }

  pub fn create_pardon_user_event(param_1: event_cause_Cause, param_2: util_ban_Ban_Profile, param_3: entity_living_player_User) -> event_user_PardonUserEvent {
    let ret = java_method!(self.env, "createPardonUserEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/util/ban/Ban$Profile;Lorg/spongepowered/api/entity/living/player/User;)Lorg/spongepowered/api/event/user/PardonUserEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createPardonUserEvent was null") }
    event_user_PardonUserEvent { env: self.env, object: ret }
  }

  pub fn create_pardon_user_event_target_player(param_1: event_cause_Cause, param_2: util_ban_Ban_Profile, param_3: entity_living_player_Player, param_4: entity_living_player_Player) -> event_user_PardonUserEvent_TargetPlayer {
    let ret = java_method!(self.env, "createPardonUserEventTargetPlayer", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/util/ban/Ban$Profile;Lorg/spongepowered/api/entity/living/player/Player;Lorg/spongepowered/api/entity/living/player/Player;)Lorg/spongepowered/api/event/user/PardonUserEvent$TargetPlayer;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createPardonUserEventTargetPlayer was null") }
    event_user_PardonUserEvent_TargetPlayer { env: self.env, object: ret }
  }

  pub fn create_target_user_event(param_1: event_cause_Cause, param_2: entity_living_player_User) -> event_user_TargetUserEvent {
    let ret = java_method!(self.env, "createTargetUserEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/entity/living/player/User;)Lorg/spongepowered/api/event/user/TargetUserEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetUserEvent was null") }
    event_user_TargetUserEvent { env: self.env, object: ret }
  }

  pub fn create_change_world_game_rule_event(param_1: event_cause_Cause, param_2: jobject, param_3: jobject, param_4: jobject, param_5: world_World) -> event_world_ChangeWorldGameRuleEvent {
    let ret = java_method!(self.env, "createChangeWorldGameRuleEvent", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/ChangeWorldGameRuleEvent;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeWorldGameRuleEvent was null") }
    event_world_ChangeWorldGameRuleEvent { env: self.env, object: ret }
  }

  pub fn create_change_world_weather_event(param_1: event_cause_Cause, param_2: i32, param_3: i32, param_4: world_weather_Weather, param_5: world_weather_Weather, param_6: world_weather_Weather, param_7: world_World) -> event_world_ChangeWorldWeatherEvent {
    let ret = java_method!(self.env, "createChangeWorldWeatherEvent", "(Lorg/spongepowered/api/event/cause/Cause;IILorg/spongepowered/api/world/weather/Weather;Lorg/spongepowered/api/world/weather/Weather;Lorg/spongepowered/api/world/weather/Weather;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/ChangeWorldWeatherEvent;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createChangeWorldWeatherEvent was null") }
    event_world_ChangeWorldWeatherEvent { env: self.env, object: ret }
  }

  pub fn create_construct_portal_event(param_1: event_cause_Cause, param_2: world_Location) -> event_world_ConstructPortalEvent {
    let ret = java_method!(self.env, "createConstructPortalEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/event/world/ConstructPortalEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createConstructPortalEvent was null") }
    event_world_ConstructPortalEvent { env: self.env, object: ret }
  }

  pub fn create_construct_world_properties_event(param_1: event_cause_Cause, param_2: world_WorldArchetype, param_3: world_storage_WorldProperties) -> event_world_ConstructWorldPropertiesEvent {
    let ret = java_method!(self.env, "createConstructWorldPropertiesEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/WorldArchetype;Lorg/spongepowered/api/world/storage/WorldProperties;)Lorg/spongepowered/api/event/world/ConstructWorldPropertiesEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createConstructWorldPropertiesEvent was null") }
    event_world_ConstructWorldPropertiesEvent { env: self.env, object: ret }
  }

  pub fn create_explosion_event_detonate(param_1: event_cause_Cause, param_2: jobject, param_3: world_explosion_Explosion, param_4: world_World, param_5: jobject) -> event_world_ExplosionEvent_Detonate {
    let ret = java_method!(self.env, "createExplosionEventDetonate", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/explosion/Explosion;Lorg/spongepowered/api/world/World;Ljava/util/List;)Lorg/spongepowered/api/event/world/ExplosionEvent$Detonate;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createExplosionEventDetonate was null") }
    event_world_ExplosionEvent_Detonate { env: self.env, object: ret }
  }

  pub fn create_explosion_event_post(param_1: event_cause_Cause, param_2: world_explosion_Explosion, param_3: world_World) -> event_world_ExplosionEvent_Post {
    let ret = java_method!(self.env, "createExplosionEventPost", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/explosion/Explosion;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/ExplosionEvent$Post;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createExplosionEventPost was null") }
    event_world_ExplosionEvent_Post { env: self.env, object: ret }
  }

  pub fn create_explosion_event_pre(param_1: event_cause_Cause, param_2: world_explosion_Explosion, param_3: world_World) -> event_world_ExplosionEvent_Pre {
    let ret = java_method!(self.env, "createExplosionEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/explosion/Explosion;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/ExplosionEvent$Pre;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createExplosionEventPre was null") }
    event_world_ExplosionEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_generate_chunk_event_post(param_1: event_cause_Cause, param_2: world_Chunk) -> event_world_GenerateChunkEvent_Post {
    let ret = java_method!(self.env, "createGenerateChunkEventPost", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/Chunk;)Lorg/spongepowered/api/event/world/GenerateChunkEvent$Post;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGenerateChunkEventPost was null") }
    event_world_GenerateChunkEvent_Post { env: self.env, object: ret }
  }

  pub fn create_generate_chunk_event_pre(param_1: event_cause_Cause, param_2: world_Chunk) -> event_world_GenerateChunkEvent_Pre {
    let ret = java_method!(self.env, "createGenerateChunkEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/Chunk;)Lorg/spongepowered/api/event/world/GenerateChunkEvent$Pre;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createGenerateChunkEventPre was null") }
    event_world_GenerateChunkEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_load_world_event(param_1: event_cause_Cause, param_2: world_World) -> event_world_LoadWorldEvent {
    let ret = java_method!(self.env, "createLoadWorldEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/LoadWorldEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createLoadWorldEvent was null") }
    event_world_LoadWorldEvent { env: self.env, object: ret }
  }

  pub fn create_save_world_event(param_1: event_cause_Cause, param_2: world_World) -> event_world_SaveWorldEvent {
    let ret = java_method!(self.env, "createSaveWorldEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/SaveWorldEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSaveWorldEvent was null") }
    event_world_SaveWorldEvent { env: self.env, object: ret }
  }

  pub fn create_save_world_event_post(param_1: event_cause_Cause, param_2: world_World) -> event_world_SaveWorldEvent_Post {
    let ret = java_method!(self.env, "createSaveWorldEventPost", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/SaveWorldEvent$Post;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSaveWorldEventPost was null") }
    event_world_SaveWorldEvent_Post { env: self.env, object: ret }
  }

  pub fn create_save_world_event_pre(param_1: event_cause_Cause, param_2: world_World) -> event_world_SaveWorldEvent_Pre {
    let ret = java_method!(self.env, "createSaveWorldEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/SaveWorldEvent$Pre;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createSaveWorldEventPre was null") }
    event_world_SaveWorldEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_target_world_event(param_1: event_cause_Cause, param_2: world_World) -> event_world_TargetWorldEvent {
    let ret = java_method!(self.env, "createTargetWorldEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/TargetWorldEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetWorldEvent was null") }
    event_world_TargetWorldEvent { env: self.env, object: ret }
  }

  pub fn create_unload_world_event(param_1: event_cause_Cause, param_2: world_World) -> event_world_UnloadWorldEvent {
    let ret = java_method!(self.env, "createUnloadWorldEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/event/world/UnloadWorldEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUnloadWorldEvent was null") }
    event_world_UnloadWorldEvent { env: self.env, object: ret }
  }

  pub fn create_forced_chunk_event(param_1: event_cause_Cause, param_2: jobject, param_3: world_ChunkTicketManager_LoadingTicket) -> event_world_chunk_ForcedChunkEvent {
    let ret = java_method!(self.env, "createForcedChunkEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/world/ChunkTicketManager$LoadingTicket;)Lorg/spongepowered/api/event/world/chunk/ForcedChunkEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createForcedChunkEvent was null") }
    event_world_chunk_ForcedChunkEvent { env: self.env, object: ret }
  }

  pub fn create_load_chunk_event(param_1: event_cause_Cause, param_2: world_Chunk) -> event_world_chunk_LoadChunkEvent {
    let ret = java_method!(self.env, "createLoadChunkEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/Chunk;)Lorg/spongepowered/api/event/world/chunk/LoadChunkEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createLoadChunkEvent was null") }
    event_world_chunk_LoadChunkEvent { env: self.env, object: ret }
  }

  pub fn create_populate_chunk_event_populate(param_1: event_cause_Cause, param_2: world_gen_Populator, param_3: world_Chunk) -> event_world_chunk_PopulateChunkEvent_Populate {
    let ret = java_method!(self.env, "createPopulateChunkEventPopulate", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/gen/Populator;Lorg/spongepowered/api/world/Chunk;)Lorg/spongepowered/api/event/world/chunk/PopulateChunkEvent$Populate;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createPopulateChunkEventPopulate was null") }
    event_world_chunk_PopulateChunkEvent_Populate { env: self.env, object: ret }
  }

  pub fn create_populate_chunk_event_post(param_1: event_cause_Cause, param_2: jobject, param_3: world_Chunk) -> event_world_chunk_PopulateChunkEvent_Post {
    let ret = java_method!(self.env, "createPopulateChunkEventPost", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/Chunk;)Lorg/spongepowered/api/event/world/chunk/PopulateChunkEvent$Post;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createPopulateChunkEventPost was null") }
    event_world_chunk_PopulateChunkEvent_Post { env: self.env, object: ret }
  }

  pub fn create_populate_chunk_event_pre(param_1: event_cause_Cause, param_2: jobject, param_3: world_Chunk) -> event_world_chunk_PopulateChunkEvent_Pre {
    let ret = java_method!(self.env, "createPopulateChunkEventPre", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/List;Lorg/spongepowered/api/world/Chunk;)Lorg/spongepowered/api/event/world/chunk/PopulateChunkEvent$Pre;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createPopulateChunkEventPre was null") }
    event_world_chunk_PopulateChunkEvent_Pre { env: self.env, object: ret }
  }

  pub fn create_target_chunk_event(param_1: event_cause_Cause, param_2: world_Chunk) -> event_world_chunk_TargetChunkEvent {
    let ret = java_method!(self.env, "createTargetChunkEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/Chunk;)Lorg/spongepowered/api/event/world/chunk/TargetChunkEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createTargetChunkEvent was null") }
    event_world_chunk_TargetChunkEvent { env: self.env, object: ret }
  }

  pub fn create_unforced_chunk_event(param_1: event_cause_Cause, param_2: jobject, param_3: world_ChunkTicketManager_LoadingTicket) -> event_world_chunk_UnforcedChunkEvent {
    let ret = java_method!(self.env, "createUnforcedChunkEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/world/ChunkTicketManager$LoadingTicket;)Lorg/spongepowered/api/event/world/chunk/UnforcedChunkEvent;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUnforcedChunkEvent was null") }
    event_world_chunk_UnforcedChunkEvent { env: self.env, object: ret }
  }

  pub fn create_unload_chunk_event(param_1: event_cause_Cause, param_2: world_Chunk) -> event_world_chunk_UnloadChunkEvent {
    let ret = java_method!(self.env, "createUnloadChunkEvent", "(Lorg/spongepowered/api/event/cause/Cause;Lorg/spongepowered/api/world/Chunk;)Lorg/spongepowered/api/event/world/chunk/UnloadChunkEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactory#createUnloadChunkEvent was null") }
    event_world_chunk_UnloadChunkEvent { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_SpongeEventFactoryUtils_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_SpongeEventFactoryUtils_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_SpongeEventFactoryUtils_1 {
      env: env,
      object: object
    }
  }

  pub fn load(&self, param_1: jobject) -> util_generator_event_factory_EventFactory {
    let ret = java_method!(self.env, self.object, "load", "(Ljava/lang/Class;)Lorg/spongepowered/api/util/generator/event/factory/EventFactory;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactoryUtils$1#load was null") }
    util_generator_event_factory_EventFactory { env: self.env, object: ret }
  }

  pub fn load_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "load", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactoryUtils$1#load was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_SpongeEventFactoryUtils {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_SpongeEventFactoryUtils {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_SpongeEventFactoryUtils {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> event_SpongeEventFactoryUtils {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/event/SpongeEventFactoryUtils", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactoryUtils#<init> was null") }
    event_SpongeEventFactoryUtils { env: self.env, object: ret }
  }

  pub fn create_event_impl(param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "createEventImpl", "(Ljava/lang/Class;Ljava/util/Map;)Ljava/lang/Object;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactoryUtils#createEventImpl was null") }
    ret
  }

  pub fn create_state(param_1: jobject, param_2: Game) -> event_game_state_GameStateEvent {
    let ret = java_method!(self.env, "createState", "(Ljava/lang/Class;Lorg/spongepowered/api/Game;)Lorg/spongepowered/api/event/game/state/GameStateEvent;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/event/SpongeEventFactoryUtils#createState was null") }
    event_game_state_GameStateEvent { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_statistic_ChangeStatisticEvent_TargetPlayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_statistic_ChangeStatisticEvent_TargetPlayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_statistic_ChangeStatisticEvent_TargetPlayer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_statistic_ChangeStatisticEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_statistic_ChangeStatisticEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_statistic_ChangeStatisticEvent {
      env: env,
      object: object
    }
  }

  pub fn get_statistic(&self) -> statistic_Statistic {
    let ret = java_method!(self.env, self.object, "getStatistic", "()Lorg/spongepowered/api/statistic/Statistic;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/statistic/ChangeStatisticEvent#getStatistic was null") }
    statistic_Statistic { env: self.env, object: ret }
  }

  pub fn get_original_value(&self) -> i64 {
    java_method!(self.env, self.object, "getOriginalValue", "()J", CallLongMethod)
  }

  pub fn get_value(&self) -> i64 {
    java_method!(self.env, self.object, "getValue", "()J", CallLongMethod)
  }

  pub fn set_value(&self, param_1: i64) {
    java_method!(self.env, self.object, "setValue", "(J)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_TristateResult_Result {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_TristateResult_Result {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_TristateResult_Result {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[event_TristateResult_Result] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> event_TristateResult_Result {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/event/TristateResult$Result;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/TristateResult$Result#valueOf was null") }
    event_TristateResult_Result { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_TristateResult {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_TristateResult {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_TristateResult {
      env: env,
      object: object
    }
  }

  pub fn has_allow_result(&self) -> bool {
    java_method!(self.env, self.object, "hasAllowResult", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_original_result(&self) -> event_TristateResult_Result {
    let ret = java_method!(self.env, self.object, "getOriginalResult", "()Lorg/spongepowered/api/event/TristateResult$Result;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/TristateResult#getOriginalResult was null") }
    event_TristateResult_Result { env: self.env, object: ret }
  }

  pub fn get_result(&self) -> event_TristateResult_Result {
    let ret = java_method!(self.env, self.object, "getResult", "()Lorg/spongepowered/api/event/TristateResult$Result;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/TristateResult#getResult was null") }
    event_TristateResult_Result { env: self.env, object: ret }
  }

  pub fn set_result(&self, param_1: event_TristateResult_Result) {
    java_method!(self.env, self.object, "setResult", "(Lorg/spongepowered/api/event/TristateResult$Result;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_user_BanUserEvent_TargetPlayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_user_BanUserEvent_TargetPlayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_user_BanUserEvent_TargetPlayer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_user_BanUserEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_user_BanUserEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_user_BanUserEvent {
      env: env,
      object: object
    }
  }

  pub fn get_ban(&self) -> util_ban_Ban_Profile {
    let ret = java_method!(self.env, self.object, "getBan", "()Lorg/spongepowered/api/util/ban/Ban$Profile;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/user/BanUserEvent#getBan was null") }
    util_ban_Ban_Profile { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct event_user_PardonUserEvent_TargetPlayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_user_PardonUserEvent_TargetPlayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_user_PardonUserEvent_TargetPlayer {
      env: env,
      object: object
    }
  }

  pub fn get_target_user(&self) -> entity_living_player_Player {
    let ret = java_method!(self.env, self.object, "getTargetUser", "()Lorg/spongepowered/api/entity/living/player/Player;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/user/PardonUserEvent$TargetPlayer#getTargetUser was null") }
    entity_living_player_Player { env: self.env, object: ret }
  }

  pub fn get_target_user_1(&self) -> entity_living_player_User {
    let ret = java_method!(self.env, self.object, "getTargetUser", "()Lorg/spongepowered/api/entity/living/player/User;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/user/PardonUserEvent$TargetPlayer#getTargetUser was null") }
    entity_living_player_User { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_user_PardonUserEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_user_PardonUserEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_user_PardonUserEvent {
      env: env,
      object: object
    }
  }

  pub fn get_ban(&self) -> util_ban_Ban_Profile {
    let ret = java_method!(self.env, self.object, "getBan", "()Lorg/spongepowered/api/util/ban/Ban$Profile;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/user/PardonUserEvent#getBan was null") }
    util_ban_Ban_Profile { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_user_TargetUserEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_user_TargetUserEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_user_TargetUserEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_user(&self) -> entity_living_player_User {
    let ret = java_method!(self.env, self.object, "getTargetUser", "()Lorg/spongepowered/api/entity/living/player/User;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/user/TargetUserEvent#getTargetUser was null") }
    entity_living_player_User { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_world_ChangeWorldGameRuleEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_ChangeWorldGameRuleEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_ChangeWorldGameRuleEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOriginalValue", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ChangeWorldGameRuleEvent#getOriginalValue was null") }
    ret
  }

  pub fn get_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValue", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ChangeWorldGameRuleEvent#getValue was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ChangeWorldGameRuleEvent#getName was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_world_ChangeWorldWeatherEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_ChangeWorldWeatherEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_ChangeWorldWeatherEvent {
      env: env,
      object: object
    }
  }

  pub fn get_original_weather(&self) -> world_weather_Weather {
    let ret = java_method!(self.env, self.object, "getOriginalWeather", "()Lorg/spongepowered/api/world/weather/Weather;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ChangeWorldWeatherEvent#getOriginalWeather was null") }
    world_weather_Weather { env: self.env, object: ret }
  }

  pub fn get_initial_weather(&self) -> world_weather_Weather {
    let ret = java_method!(self.env, self.object, "getInitialWeather", "()Lorg/spongepowered/api/world/weather/Weather;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ChangeWorldWeatherEvent#getInitialWeather was null") }
    world_weather_Weather { env: self.env, object: ret }
  }

  pub fn get_weather(&self) -> world_weather_Weather {
    let ret = java_method!(self.env, self.object, "getWeather", "()Lorg/spongepowered/api/world/weather/Weather;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ChangeWorldWeatherEvent#getWeather was null") }
    world_weather_Weather { env: self.env, object: ret }
  }

  pub fn set_weather(&self, param_1: world_weather_Weather) {
    java_method!(self.env, self.object, "setWeather", "(Lorg/spongepowered/api/world/weather/Weather;)V", CallVoidMethodA, param_1);
  }

  pub fn get_original_duration(&self) -> i32 {
    java_method!(self.env, self.object, "getOriginalDuration", "()I", CallIntMethod)
  }

  pub fn get_duration(&self) -> i32 {
    java_method!(self.env, self.object, "getDuration", "()I", CallIntMethod)
  }

  pub fn set_duration(&self, param_1: i32) {
    java_method!(self.env, self.object, "setDuration", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_world_chunk_ForcedChunkEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_chunk_ForcedChunkEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_chunk_ForcedChunkEvent {
      env: env,
      object: object
    }
  }

  pub fn get_ticket(&self) -> world_ChunkTicketManager_LoadingTicket {
    let ret = java_method!(self.env, self.object, "getTicket", "()Lorg/spongepowered/api/world/ChunkTicketManager$LoadingTicket;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/chunk/ForcedChunkEvent#getTicket was null") }
    world_ChunkTicketManager_LoadingTicket { env: self.env, object: ret }
  }

  pub fn get_chunk_coords(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getChunkCoords", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/chunk/ForcedChunkEvent#getChunkCoords was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_world_chunk_LoadChunkEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_chunk_LoadChunkEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_chunk_LoadChunkEvent {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_world_chunk_PopulateChunkEvent_Populate {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_chunk_PopulateChunkEvent_Populate {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_chunk_PopulateChunkEvent_Populate {
      env: env,
      object: object
    }
  }

  pub fn get_populator(&self) -> world_gen_Populator {
    let ret = java_method!(self.env, self.object, "getPopulator", "()Lorg/spongepowered/api/world/gen/Populator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/chunk/PopulateChunkEvent$Populate#getPopulator was null") }
    world_gen_Populator { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_world_chunk_PopulateChunkEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_chunk_PopulateChunkEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_chunk_PopulateChunkEvent_Post {
      env: env,
      object: object
    }
  }

  pub fn get_applied_populators(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAppliedPopulators", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/chunk/PopulateChunkEvent$Post#getAppliedPopulators was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_world_chunk_PopulateChunkEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_chunk_PopulateChunkEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_chunk_PopulateChunkEvent_Pre {
      env: env,
      object: object
    }
  }

  pub fn get_pending_populators(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPendingPopulators", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/chunk/PopulateChunkEvent$Pre#getPendingPopulators was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_world_chunk_PopulateChunkEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_chunk_PopulateChunkEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_chunk_PopulateChunkEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_chunk_TargetChunkEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_chunk_TargetChunkEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_chunk_TargetChunkEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_chunk(&self) -> world_Chunk {
    let ret = java_method!(self.env, self.object, "getTargetChunk", "()Lorg/spongepowered/api/world/Chunk;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/chunk/TargetChunkEvent#getTargetChunk was null") }
    world_Chunk { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_world_chunk_UnforcedChunkEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_chunk_UnforcedChunkEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_chunk_UnforcedChunkEvent {
      env: env,
      object: object
    }
  }

  pub fn get_ticket(&self) -> world_ChunkTicketManager_LoadingTicket {
    let ret = java_method!(self.env, self.object, "getTicket", "()Lorg/spongepowered/api/world/ChunkTicketManager$LoadingTicket;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/chunk/UnforcedChunkEvent#getTicket was null") }
    world_ChunkTicketManager_LoadingTicket { env: self.env, object: ret }
  }

  pub fn get_chunk_coords(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getChunkCoords", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/chunk/UnforcedChunkEvent#getChunkCoords was null") }
    ret
  }

}

#[derive(Debug)]
pub struct event_world_chunk_UnloadChunkEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_chunk_UnloadChunkEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_chunk_UnloadChunkEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_ConstructPortalEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_ConstructPortalEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_ConstructPortalEvent {
      env: env,
      object: object
    }
  }

  pub fn get_portal_location(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getPortalLocation", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ConstructPortalEvent#getPortalLocation was null") }
    world_Location { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_world_ConstructWorldPropertiesEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_ConstructWorldPropertiesEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_ConstructWorldPropertiesEvent {
      env: env,
      object: object
    }
  }

  pub fn get_world_properties(&self) -> world_storage_WorldProperties {
    let ret = java_method!(self.env, self.object, "getWorldProperties", "()Lorg/spongepowered/api/world/storage/WorldProperties;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ConstructWorldPropertiesEvent#getWorldProperties was null") }
    world_storage_WorldProperties { env: self.env, object: ret }
  }

  pub fn get_world_archetype(&self) -> world_WorldArchetype {
    let ret = java_method!(self.env, self.object, "getWorldArchetype", "()Lorg/spongepowered/api/world/WorldArchetype;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ConstructWorldPropertiesEvent#getWorldArchetype was null") }
    world_WorldArchetype { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_world_ExplosionEvent_Detonate {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_ExplosionEvent_Detonate {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_ExplosionEvent_Detonate {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_ExplosionEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_ExplosionEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_ExplosionEvent_Post {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_ExplosionEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_ExplosionEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_ExplosionEvent_Pre {
      env: env,
      object: object
    }
  }

  pub fn set_explosion(&self, param_1: world_explosion_Explosion) {
    java_method!(self.env, self.object, "setExplosion", "(Lorg/spongepowered/api/world/explosion/Explosion;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct event_world_ExplosionEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_ExplosionEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_ExplosionEvent {
      env: env,
      object: object
    }
  }

  pub fn get_explosion(&self) -> world_explosion_Explosion {
    let ret = java_method!(self.env, self.object, "getExplosion", "()Lorg/spongepowered/api/world/explosion/Explosion;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/ExplosionEvent#getExplosion was null") }
    world_explosion_Explosion { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_world_GenerateChunkEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_GenerateChunkEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_GenerateChunkEvent_Post {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_GenerateChunkEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_GenerateChunkEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_GenerateChunkEvent_Pre {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_GenerateChunkEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_GenerateChunkEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_GenerateChunkEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_LoadWorldEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_LoadWorldEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_LoadWorldEvent {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct event_world_SaveWorldEvent_Post {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_SaveWorldEvent_Post {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_SaveWorldEvent_Post {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_SaveWorldEvent_Pre {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_SaveWorldEvent_Pre {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_SaveWorldEvent_Pre {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_SaveWorldEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_SaveWorldEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_SaveWorldEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct event_world_TargetWorldEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_TargetWorldEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_TargetWorldEvent {
      env: env,
      object: object
    }
  }

  pub fn get_target_world(&self) -> world_World {
    let ret = java_method!(self.env, self.object, "getTargetWorld", "()Lorg/spongepowered/api/world/World;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/event/world/TargetWorldEvent#getTargetWorld was null") }
    world_World { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct event_world_UnloadWorldEvent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl event_world_UnloadWorldEvent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    event_world_UnloadWorldEvent {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct extra_fluid_data_manipulator_immutable_ImmutableFluidItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_data_manipulator_immutable_ImmutableFluidItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_data_manipulator_immutable_ImmutableFluidItemData {
      env: env,
      object: object
    }
  }

  pub fn fluid(&self) -> data_value_immutable_ImmutableValue {
    let ret = java_method!(self.env, self.object, "fluid", "()Lorg/spongepowered/api/data/value/immutable/ImmutableValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/manipulator/immutable/ImmutableFluidItemData#fluid was null") }
    data_value_immutable_ImmutableValue { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct extra_fluid_data_manipulator_immutable_ImmutableFluidTankData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_data_manipulator_immutable_ImmutableFluidTankData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_data_manipulator_immutable_ImmutableFluidTankData {
      env: env,
      object: object
    }
  }

  pub fn fluids(&self) -> data_value_immutable_ImmutableMapValue {
    let ret = java_method!(self.env, self.object, "fluids", "()Lorg/spongepowered/api/data/value/immutable/ImmutableMapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/manipulator/immutable/ImmutableFluidTankData#fluids was null") }
    data_value_immutable_ImmutableMapValue { env: self.env, object: ret }
  }

  pub fn fluid_at_direction(&self, param_1: util_Direction) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "fluidAtDirection", "(Lorg/spongepowered/api/util/Direction;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/manipulator/immutable/ImmutableFluidTankData#fluidAtDirection was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}


#[derive(Debug)]
pub struct extra_fluid_data_manipulator_mutable_FluidItemData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_data_manipulator_mutable_FluidItemData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_data_manipulator_mutable_FluidItemData {
      env: env,
      object: object
    }
  }

  pub fn fluid(&self) -> data_value_mutable_Value {
    let ret = java_method!(self.env, self.object, "fluid", "()Lorg/spongepowered/api/data/value/mutable/Value;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/manipulator/mutable/FluidItemData#fluid was null") }
    data_value_mutable_Value { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct extra_fluid_data_manipulator_mutable_FluidTankData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_data_manipulator_mutable_FluidTankData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_data_manipulator_mutable_FluidTankData {
      env: env,
      object: object
    }
  }

  pub fn fluids(&self) -> data_value_mutable_MapValue {
    let ret = java_method!(self.env, self.object, "fluids", "()Lorg/spongepowered/api/data/value/mutable/MapValue;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/manipulator/mutable/FluidTankData#fluids was null") }
    data_value_mutable_MapValue { env: self.env, object: ret }
  }

  pub fn fluid_at_direction(&self, param_1: util_Direction) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "fluidAtDirection", "(Lorg/spongepowered/api/util/Direction;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/manipulator/mutable/FluidTankData#fluidAtDirection was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}



#[derive(Debug)]
pub struct extra_fluid_data_property_FluidTemperatureProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_data_property_FluidTemperatureProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_data_property_FluidTemperatureProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> extra_fluid_data_property_FluidTemperatureProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/extra/fluid/data/property/FluidTemperatureProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/property/FluidTemperatureProperty#<init> was null") }
    extra_fluid_data_property_FluidTemperatureProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> extra_fluid_data_property_FluidTemperatureProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/extra/fluid/data/property/FluidTemperatureProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/property/FluidTemperatureProperty#<init> was null") }
    extra_fluid_data_property_FluidTemperatureProperty { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct extra_fluid_data_property_FluidViscosityProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_data_property_FluidViscosityProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_data_property_FluidViscosityProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> extra_fluid_data_property_FluidViscosityProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/extra/fluid/data/property/FluidViscosityProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/property/FluidViscosityProperty#<init> was null") }
    extra_fluid_data_property_FluidViscosityProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> extra_fluid_data_property_FluidViscosityProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/extra/fluid/data/property/FluidViscosityProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/data/property/FluidViscosityProperty#<init> was null") }
    extra_fluid_data_property_FluidViscosityProperty { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct extra_fluid_FluidStack_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_FluidStack_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_FluidStack_Builder {
      env: env,
      object: object
    }
  }

  pub fn fluid(&self, param_1: extra_fluid_FluidType) -> extra_fluid_FluidStack_Builder {
    let ret = java_method!(self.env, self.object, "fluid", "(Lorg/spongepowered/api/extra/fluid/FluidType;)Lorg/spongepowered/api/extra/fluid/FluidStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#fluid was null") }
    extra_fluid_FluidStack_Builder { env: self.env, object: ret }
  }

  pub fn volume(&self, param_1: i32) -> extra_fluid_FluidStack_Builder {
    let ret = java_method!(self.env, self.object, "volume", "(I)Lorg/spongepowered/api/extra/fluid/FluidStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#volume was null") }
    extra_fluid_FluidStack_Builder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: extra_fluid_FluidStackSnapshot) -> extra_fluid_FluidStack_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/extra/fluid/FluidStackSnapshot;)Lorg/spongepowered/api/extra/fluid/FluidStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#from was null") }
    extra_fluid_FluidStack_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> extra_fluid_FluidStack {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/extra/fluid/FluidStack;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#build was null") }
    extra_fluid_FluidStack { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: extra_fluid_FluidStack) -> extra_fluid_FluidStack_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/extra/fluid/FluidStack;)Lorg/spongepowered/api/extra/fluid/FluidStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#from was null") }
    extra_fluid_FluidStack_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> extra_fluid_FluidStack_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/extra/fluid/FluidStack$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#reset was null") }
    extra_fluid_FluidStack_Builder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: data_DataSerializable) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/data/DataSerializable;)Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#from was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#reset was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_4(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct extra_fluid_FluidStack {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_FluidStack {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_FluidStack {
      env: env,
      object: object
    }
  }

  pub fn builder() -> extra_fluid_FluidStack_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/extra/fluid/FluidStack$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack#builder was null") }
    extra_fluid_FluidStack_Builder { env: self.env, object: ret }
  }

  pub fn get_fluid(&self) -> extra_fluid_FluidType {
    let ret = java_method!(self.env, self.object, "getFluid", "()Lorg/spongepowered/api/extra/fluid/FluidType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack#getFluid was null") }
    extra_fluid_FluidType { env: self.env, object: ret }
  }

  pub fn get_volume(&self) -> i32 {
    java_method!(self.env, self.object, "getVolume", "()I", CallIntMethod)
  }

  pub fn set_volume(&self, param_1: i32) -> extra_fluid_FluidStack {
    let ret = java_method!(self.env, self.object, "setVolume", "(I)Lorg/spongepowered/api/extra/fluid/FluidStack;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack#setVolume was null") }
    extra_fluid_FluidStack { env: self.env, object: ret }
  }

  pub fn create_snapshot(&self) -> extra_fluid_FluidStackSnapshot {
    let ret = java_method!(self.env, self.object, "createSnapshot", "()Lorg/spongepowered/api/extra/fluid/FluidStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStack#createSnapshot was null") }
    extra_fluid_FluidStackSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct extra_fluid_FluidStackSnapshot_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_FluidStackSnapshot_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_FluidStackSnapshot_Builder {
      env: env,
      object: object
    }
  }

  pub fn fluid(&self, param_1: extra_fluid_FluidType) -> extra_fluid_FluidStackSnapshot_Builder {
    let ret = java_method!(self.env, self.object, "fluid", "(Lorg/spongepowered/api/extra/fluid/FluidType;)Lorg/spongepowered/api/extra/fluid/FluidStackSnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStackSnapshot$Builder#fluid was null") }
    extra_fluid_FluidStackSnapshot_Builder { env: self.env, object: ret }
  }

  pub fn volume(&self, param_1: i32) -> extra_fluid_FluidStackSnapshot_Builder {
    let ret = java_method!(self.env, self.object, "volume", "(I)Lorg/spongepowered/api/extra/fluid/FluidStackSnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStackSnapshot$Builder#volume was null") }
    extra_fluid_FluidStackSnapshot_Builder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: extra_fluid_FluidStack) -> extra_fluid_FluidStackSnapshot_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/extra/fluid/FluidStack;)Lorg/spongepowered/api/extra/fluid/FluidStackSnapshot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStackSnapshot$Builder#from was null") }
    extra_fluid_FluidStackSnapshot_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct extra_fluid_FluidStackSnapshot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_FluidStackSnapshot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_FluidStackSnapshot {
      env: env,
      object: object
    }
  }

  pub fn builder() -> extra_fluid_FluidStackSnapshot_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/extra/fluid/FluidStackSnapshot$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStackSnapshot#builder was null") }
    extra_fluid_FluidStackSnapshot_Builder { env: self.env, object: ret }
  }

  pub fn get_fluid(&self) -> extra_fluid_FluidType {
    let ret = java_method!(self.env, self.object, "getFluid", "()Lorg/spongepowered/api/extra/fluid/FluidType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStackSnapshot#getFluid was null") }
    extra_fluid_FluidType { env: self.env, object: ret }
  }

  pub fn get_volume(&self) -> i32 {
    java_method!(self.env, self.object, "getVolume", "()I", CallIntMethod)
  }

  pub fn create_stack(&self) -> extra_fluid_FluidStack {
    let ret = java_method!(self.env, self.object, "createStack", "()Lorg/spongepowered/api/extra/fluid/FluidStack;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidStackSnapshot#createStack was null") }
    extra_fluid_FluidStack { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct extra_fluid_FluidType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_FluidType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_FluidType {
      env: env,
      object: object
    }
  }

  pub fn get_block_type_base(&self) -> Option<block_BlockType> {
    let ret = java_method!(self.env, self.object, "getBlockTypeBase", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/fluid/FluidType#getBlockTypeBase was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(block_BlockType { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct extra_fluid_FluidTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_fluid_FluidTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_fluid_FluidTypes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct extra_modifier_empty_VoidWorldGeneratorModifier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_empty_VoidWorldGeneratorModifier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_empty_VoidWorldGeneratorModifier {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> extra_modifier_empty_VoidWorldGeneratorModifier {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/extra/modifier/empty/VoidWorldGeneratorModifier", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/empty/VoidWorldGeneratorModifier#<init> was null") }
    extra_modifier_empty_VoidWorldGeneratorModifier { env: self.env, object: ret }
  }

  pub fn modify_world_generator(&self, param_1: world_storage_WorldProperties, param_2: data_DataContainer, param_3: world_gen_WorldGenerator) {
    java_method!(self.env, self.object, "modifyWorldGenerator", "(Lorg/spongepowered/api/world/storage/WorldProperties;Lorg/spongepowered/api/data/DataContainer;Lorg/spongepowered/api/world/gen/WorldGenerator;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/empty/VoidWorldGeneratorModifier#getId was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/empty/VoidWorldGeneratorModifier#getName was null") }
    ret
  }

}


#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsBiomeGenerator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsBiomeGenerator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsBiomeGenerator {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> extra_modifier_skylands_SkylandsBiomeGenerator {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/extra/modifier/skylands/SkylandsBiomeGenerator", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/skylands/SkylandsBiomeGenerator#<init> was null") }
    extra_modifier_skylands_SkylandsBiomeGenerator { env: self.env, object: ret }
  }

  pub fn generate_biomes(&self, param_1: world_extent_MutableBiomeArea) {
    java_method!(self.env, self.object, "generateBiomes", "(Lorg/spongepowered/api/world/extent/MutableBiomeArea;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsGrassPopulator_Flower {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsGrassPopulator_Flower {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsGrassPopulator_Flower {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsGrassPopulator_RarityCurve {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsGrassPopulator_RarityCurve {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsGrassPopulator_RarityCurve {
      env: env,
      object: object
    }
  }

  pub fn get_source_module_count(&self) -> i32 {
    java_method!(self.env, self.object, "getSourceModuleCount", "()I", CallIntMethod)
  }

  pub fn get_value(&self, param_1: f64, param_2: f64, param_3: f64) -> f64 {
    java_method!(self.env, self.object, "getValue", "(DDD)D", CallDoubleMethodA, param_1, param_2, param_3)
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsGrassPopulator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsGrassPopulator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsGrassPopulator {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> extra_modifier_skylands_SkylandsGrassPopulator {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/extra/modifier/skylands/SkylandsGrassPopulator", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/skylands/SkylandsGrassPopulator#<init> was null") }
    extra_modifier_skylands_SkylandsGrassPopulator { env: self.env, object: ret }
  }

  pub fn populate(&self, param_1: world_World, param_2: world_extent_MutableBlockVolume, param_3: world_extent_ImmutableBiomeArea) {
    java_method!(self.env, self.object, "populate", "(Lorg/spongepowered/api/world/World;Lorg/spongepowered/api/world/extent/MutableBlockVolume;Lorg/spongepowered/api/world/extent/ImmutableBiomeArea;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsGroundCoverPopulator_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsGroundCoverPopulator_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsGroundCoverPopulator_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsGroundCoverPopulator_GroundCoverLayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsGroundCoverPopulator_GroundCoverLayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsGroundCoverPopulator_GroundCoverLayer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsGroundCoverPopulator_UniformGroundCoverLayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsGroundCoverPopulator_UniformGroundCoverLayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsGroundCoverPopulator_UniformGroundCoverLayer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsGroundCoverPopulator_VariableGroundCoverLayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsGroundCoverPopulator_VariableGroundCoverLayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsGroundCoverPopulator_VariableGroundCoverLayer {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsGroundCoverPopulator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsGroundCoverPopulator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsGroundCoverPopulator {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> extra_modifier_skylands_SkylandsGroundCoverPopulator {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/extra/modifier/skylands/SkylandsGroundCoverPopulator", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/skylands/SkylandsGroundCoverPopulator#<init> was null") }
    extra_modifier_skylands_SkylandsGroundCoverPopulator { env: self.env, object: ret }
  }

  pub fn populate(&self, param_1: world_World, param_2: world_extent_MutableBlockVolume, param_3: world_extent_ImmutableBiomeArea) {
    java_method!(self.env, self.object, "populate", "(Lorg/spongepowered/api/world/World;Lorg/spongepowered/api/world/extent/MutableBlockVolume;Lorg/spongepowered/api/world/extent/ImmutableBiomeArea;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsTerrainGenerator_OreNoise {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsTerrainGenerator_OreNoise {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsTerrainGenerator_OreNoise {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsTerrainGenerator_VerticalScaling {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsTerrainGenerator_VerticalScaling {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsTerrainGenerator_VerticalScaling {
      env: env,
      object: object
    }
  }

  pub fn get_source_module_count(&self) -> i32 {
    java_method!(self.env, self.object, "getSourceModuleCount", "()I", CallIntMethod)
  }

  pub fn get_value(&self, param_1: f64, param_2: f64, param_3: f64) -> f64 {
    java_method!(self.env, self.object, "getValue", "(DDD)D", CallDoubleMethodA, param_1, param_2, param_3)
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsTerrainGenerator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsTerrainGenerator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsTerrainGenerator {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> extra_modifier_skylands_SkylandsTerrainGenerator {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/extra/modifier/skylands/SkylandsTerrainGenerator", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/skylands/SkylandsTerrainGenerator#<init> was null") }
    extra_modifier_skylands_SkylandsTerrainGenerator { env: self.env, object: ret }
  }

  pub fn populate(&self, param_1: world_World, param_2: world_extent_MutableBlockVolume, param_3: world_extent_ImmutableBiomeArea) {
    java_method!(self.env, self.object, "populate", "(Lorg/spongepowered/api/world/World;Lorg/spongepowered/api/world/extent/MutableBlockVolume;Lorg/spongepowered/api/world/extent/ImmutableBiomeArea;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsUtil {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsUtil {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsUtil {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct extra_modifier_skylands_SkylandsWorldGeneratorModifier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl extra_modifier_skylands_SkylandsWorldGeneratorModifier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    extra_modifier_skylands_SkylandsWorldGeneratorModifier {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> extra_modifier_skylands_SkylandsWorldGeneratorModifier {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/extra/modifier/skylands/SkylandsWorldGeneratorModifier", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/skylands/SkylandsWorldGeneratorModifier#<init> was null") }
    extra_modifier_skylands_SkylandsWorldGeneratorModifier { env: self.env, object: ret }
  }

  pub fn modify_world_generator(&self, param_1: world_storage_WorldProperties, param_2: data_DataContainer, param_3: world_gen_WorldGenerator) {
    java_method!(self.env, self.object, "modifyWorldGenerator", "(Lorg/spongepowered/api/world/storage/WorldProperties;Lorg/spongepowered/api/data/DataContainer;Lorg/spongepowered/api/world/gen/WorldGenerator;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/skylands/SkylandsWorldGeneratorModifier#getId was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/extra/modifier/skylands/SkylandsWorldGeneratorModifier#getName was null") }
    ret
  }

}


#[derive(Debug)]
pub struct Game {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl Game {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    Game {
      env: env,
      object: object
    }
  }

  pub fn get_platform(&self) -> Platform {
    let ret = java_method!(self.env, self.object, "getPlatform", "()Lorg/spongepowered/api/Platform;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getPlatform was null") }
    Platform { env: self.env, object: ret }
  }

  pub fn is_server_available(&self) -> bool {
    java_method!(self.env, self.object, "isServerAvailable", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_server(&self) -> Server {
    let ret = java_method!(self.env, self.object, "getServer", "()Lorg/spongepowered/api/Server;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getServer was null") }
    Server { env: self.env, object: ret }
  }

  pub fn get_plugin_manager(&self) -> plugin_PluginManager {
    let ret = java_method!(self.env, self.object, "getPluginManager", "()Lorg/spongepowered/api/plugin/PluginManager;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getPluginManager was null") }
    plugin_PluginManager { env: self.env, object: ret }
  }

  pub fn get_event_manager(&self) -> event_EventManager {
    let ret = java_method!(self.env, self.object, "getEventManager", "()Lorg/spongepowered/api/event/EventManager;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getEventManager was null") }
    event_EventManager { env: self.env, object: ret }
  }

  pub fn get_asset_manager(&self) -> asset_AssetManager {
    let ret = java_method!(self.env, self.object, "getAssetManager", "()Lorg/spongepowered/api/asset/AssetManager;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getAssetManager was null") }
    asset_AssetManager { env: self.env, object: ret }
  }

  pub fn get_registry(&self) -> GameRegistry {
    let ret = java_method!(self.env, self.object, "getRegistry", "()Lorg/spongepowered/api/GameRegistry;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getRegistry was null") }
    GameRegistry { env: self.env, object: ret }
  }

  pub fn get_game_dictionary(&self) -> GameDictionary {
    let ret = java_method!(self.env, self.object, "getGameDictionary", "()Lorg/spongepowered/api/GameDictionary;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getGameDictionary was null") }
    GameDictionary { env: self.env, object: ret }
  }

  pub fn get_service_manager(&self) -> service_ServiceManager {
    let ret = java_method!(self.env, self.object, "getServiceManager", "()Lorg/spongepowered/api/service/ServiceManager;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getServiceManager was null") }
    service_ServiceManager { env: self.env, object: ret }
  }

  pub fn get_scheduler(&self) -> scheduler_Scheduler {
    let ret = java_method!(self.env, self.object, "getScheduler", "()Lorg/spongepowered/api/scheduler/Scheduler;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getScheduler was null") }
    scheduler_Scheduler { env: self.env, object: ret }
  }

  pub fn get_data_manager(&self) -> data_DataManager {
    let ret = java_method!(self.env, self.object, "getDataManager", "()Lorg/spongepowered/api/data/DataManager;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getDataManager was null") }
    data_DataManager { env: self.env, object: ret }
  }

  pub fn get_property_registry(&self) -> data_property_PropertyRegistry {
    let ret = java_method!(self.env, self.object, "getPropertyRegistry", "()Lorg/spongepowered/api/data/property/PropertyRegistry;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getPropertyRegistry was null") }
    data_property_PropertyRegistry { env: self.env, object: ret }
  }

  pub fn get_command_manager(&self) -> command_CommandManager {
    let ret = java_method!(self.env, self.object, "getCommandManager", "()Lorg/spongepowered/api/command/CommandManager;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getCommandManager was null") }
    command_CommandManager { env: self.env, object: ret }
  }

  pub fn get_teleport_helper(&self) -> world_TeleportHelper {
    let ret = java_method!(self.env, self.object, "getTeleportHelper", "()Lorg/spongepowered/api/world/TeleportHelper;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getTeleportHelper was null") }
    world_TeleportHelper { env: self.env, object: ret }
  }

  pub fn get_config_manager(&self) -> config_ConfigManager {
    let ret = java_method!(self.env, self.object, "getConfigManager", "()Lorg/spongepowered/api/config/ConfigManager;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getConfigManager was null") }
    config_ConfigManager { env: self.env, object: ret }
  }

  pub fn get_game_directory(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGameDirectory", "()Ljava/nio/file/Path;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getGameDirectory was null") }
    ret
  }

  pub fn get_saves_directory(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSavesDirectory", "()Ljava/nio/file/Path;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getSavesDirectory was null") }
    ret
  }

  pub fn get_state(&self) -> GameState {
    let ret = java_method!(self.env, self.object, "getState", "()Lorg/spongepowered/api/GameState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getState was null") }
    GameState { env: self.env, object: ret }
  }

  pub fn get_channel_registrar(&self) -> network_ChannelRegistrar {
    let ret = java_method!(self.env, self.object, "getChannelRegistrar", "()Lorg/spongepowered/api/network/ChannelRegistrar;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Game#getChannelRegistrar was null") }
    network_ChannelRegistrar { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct GameDictionary_Entry {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl GameDictionary_Entry {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    GameDictionary_Entry {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> item_ItemType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/item/ItemType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameDictionary$Entry#getType was null") }
    item_ItemType { env: self.env, object: ret }
  }

  pub fn matches(&self, param_1: item_inventory_ItemStack) -> bool {
    java_method!(self.env, self.object, "matches", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_specific(&self) -> bool {
    java_method!(self.env, self.object, "isSpecific", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_template(&self) -> item_inventory_ItemStackSnapshot {
    let ret = java_method!(self.env, self.object, "getTemplate", "()Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameDictionary$Entry#getTemplate was null") }
    item_inventory_ItemStackSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct GameDictionary {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl GameDictionary {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    GameDictionary {
      env: env,
      object: object
    }
  }

  pub fn register(&self, param_1: jobject, param_2: GameDictionary_Entry) {
    java_method!(self.env, self.object, "register", "(Ljava/lang/String;Lorg/spongepowered/api/GameDictionary$Entry;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameDictionary#get was null") }
    ret
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Lcom/google/common/collect/SetMultimap;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameDictionary#getAll was null") }
    ret
  }

}

#[derive(Debug)]
pub struct GameRegistry {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl GameRegistry {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    GameRegistry {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getType", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getType was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_all_of(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllOf", "(Ljava/lang/Class;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getAllOf was null") }
    ret
  }

  pub fn get_all_for(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllFor", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/Collection;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getAllFor was null") }
    ret
  }

  pub fn get_all_for_minecraft(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllForMinecraft", "(Ljava/lang/Class;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getAllForMinecraft was null") }
    ret
  }

  pub fn get_all_for_sponge(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllForSponge", "(Ljava/lang/Class;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getAllForSponge was null") }
    ret
  }

  pub fn register_module(&self, param_1: jobject, param_2: registry_CatalogRegistryModule) -> GameRegistry {
    let ret = java_method!(self.env, self.object, "registerModule", "(Ljava/lang/Class;Lorg/spongepowered/api/registry/CatalogRegistryModule;)Lorg/spongepowered/api/GameRegistry;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#registerModule was null") }
    GameRegistry { env: self.env, object: ret }
  }

  pub fn register_module_1(&self, param_1: registry_RegistryModule) -> GameRegistry {
    let ret = java_method!(self.env, self.object, "registerModule", "(Lorg/spongepowered/api/registry/RegistryModule;)Lorg/spongepowered/api/GameRegistry;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#registerModule was null") }
    GameRegistry { env: self.env, object: ret }
  }

  pub fn register_builder_supplier(&self, param_1: jobject, param_2: jobject) -> GameRegistry {
    let ret = java_method!(self.env, self.object, "registerBuilderSupplier", "(Ljava/lang/Class;Ljava/util/function/Supplier;)Lorg/spongepowered/api/GameRegistry;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#registerBuilderSupplier was null") }
    GameRegistry { env: self.env, object: ret }
  }

  pub fn create_builder(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "createBuilder", "(Ljava/lang/Class;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#createBuilder was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn register(&self, param_1: jobject, param_2: CatalogType) -> CatalogType {
    let ret = java_method!(self.env, self.object, "register", "(Ljava/lang/Class;Lorg/spongepowered/api/CatalogType;)Lorg/spongepowered/api/CatalogType;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#register was null") }
    CatalogType { env: self.env, object: ret }
  }

  pub fn get_default_game_rules(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDefaultGameRules", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getDefaultGameRules was null") }
    ret
  }

  pub fn get_entity_statistic(&self, param_1: statistic_StatisticGroup, param_2: entity_EntityType) -> Option<statistic_EntityStatistic> {
    let ret = java_method!(self.env, self.object, "getEntityStatistic", "(Lorg/spongepowered/api/statistic/StatisticGroup;Lorg/spongepowered/api/entity/EntityType;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getEntityStatistic was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(statistic_EntityStatistic { env: self.env, object: unwrapped }) }
  }

  pub fn get_item_statistic(&self, param_1: statistic_StatisticGroup, param_2: item_ItemType) -> Option<statistic_ItemStatistic> {
    let ret = java_method!(self.env, self.object, "getItemStatistic", "(Lorg/spongepowered/api/statistic/StatisticGroup;Lorg/spongepowered/api/item/ItemType;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getItemStatistic was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(statistic_ItemStatistic { env: self.env, object: unwrapped }) }
  }

  pub fn get_block_statistic(&self, param_1: statistic_StatisticGroup, param_2: block_BlockType) -> Option<statistic_BlockStatistic> {
    let ret = java_method!(self.env, self.object, "getBlockStatistic", "(Lorg/spongepowered/api/statistic/StatisticGroup;Lorg/spongepowered/api/block/BlockType;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getBlockStatistic was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(statistic_BlockStatistic { env: self.env, object: unwrapped }) }
  }

  pub fn get_team_statistic(&self, param_1: statistic_StatisticGroup, param_2: text_format_TextColor) -> Option<statistic_TeamStatistic> {
    let ret = java_method!(self.env, self.object, "getTeamStatistic", "(Lorg/spongepowered/api/statistic/StatisticGroup;Lorg/spongepowered/api/text/format/TextColor;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getTeamStatistic was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(statistic_TeamStatistic { env: self.env, object: unwrapped }) }
  }

  pub fn get_statistics(&self, param_1: statistic_StatisticGroup) -> jobject {
    let ret = java_method!(self.env, self.object, "getStatistics", "(Lorg/spongepowered/api/statistic/StatisticGroup;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getStatistics was null") }
    ret
  }

  pub fn get_rotation_from_degree(&self, param_1: i32) -> Option<util_rotation_Rotation> {
    let ret = java_method!(self.env, self.object, "getRotationFromDegree", "(I)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getRotationFromDegree was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_rotation_Rotation { env: self.env, object: unwrapped }) }
  }

  pub fn load_favicon(&self, param_1: jobject) -> network_status_Favicon {
    let ret = java_method!(self.env, self.object, "loadFavicon", "(Ljava/lang/String;)Lorg/spongepowered/api/network/status/Favicon;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#loadFavicon was null") }
    network_status_Favicon { env: self.env, object: ret }
  }

  pub fn load_favicon_1(&self, param_1: jobject) -> network_status_Favicon {
    let ret = java_method!(self.env, self.object, "loadFavicon", "(Ljava/nio/file/Path;)Lorg/spongepowered/api/network/status/Favicon;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#loadFavicon was null") }
    network_status_Favicon { env: self.env, object: ret }
  }

  pub fn load_favicon_2(&self, param_1: jobject) -> network_status_Favicon {
    let ret = java_method!(self.env, self.object, "loadFavicon", "(Ljava/net/URL;)Lorg/spongepowered/api/network/status/Favicon;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#loadFavicon was null") }
    network_status_Favicon { env: self.env, object: ret }
  }

  pub fn load_favicon_3(&self, param_1: jobject) -> network_status_Favicon {
    let ret = java_method!(self.env, self.object, "loadFavicon", "(Ljava/io/InputStream;)Lorg/spongepowered/api/network/status/Favicon;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#loadFavicon was null") }
    network_status_Favicon { env: self.env, object: ret }
  }

  pub fn load_favicon_4(&self, param_1: jobject) -> network_status_Favicon {
    let ret = java_method!(self.env, self.object, "loadFavicon", "(Ljava/awt/image/BufferedImage;)Lorg/spongepowered/api/network/status/Favicon;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#loadFavicon was null") }
    network_status_Favicon { env: self.env, object: ret }
  }

  pub fn get_recipe_registry(&self) -> item_recipe_RecipeRegistry {
    let ret = java_method!(self.env, self.object, "getRecipeRegistry", "()Lorg/spongepowered/api/item/recipe/RecipeRegistry;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getRecipeRegistry was null") }
    item_recipe_RecipeRegistry { env: self.env, object: ret }
  }

  pub fn get_resource_pack_by_id(&self, param_1: jobject) -> Option<resourcepack_ResourcePack> {
    let ret = java_method!(self.env, self.object, "getResourcePackById", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getResourcePackById was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(resourcepack_ResourcePack { env: self.env, object: unwrapped }) }
  }

  pub fn get_display_slot_for_color(&self, param_1: text_format_TextColor) -> Option<scoreboard_displayslot_DisplaySlot> {
    let ret = java_method!(self.env, self.object, "getDisplaySlotForColor", "(Lorg/spongepowered/api/text/format/TextColor;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getDisplaySlotForColor was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(scoreboard_displayslot_DisplaySlot { env: self.env, object: unwrapped }) }
  }

  pub fn register_a_i_task_type(&self, param_1: jobject, param_2: jobject, param_3: jobject, param_4: jobject) -> entity_ai_task_AITaskType {
    let ret = java_method!(self.env, self.object, "registerAITaskType", "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/spongepowered/api/entity/ai/task/AITaskType;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#registerAITaskType was null") }
    entity_ai_task_AITaskType { env: self.env, object: ret }
  }

  pub fn get_extent_buffer_factory(&self) -> world_extent_ExtentBufferFactory {
    let ret = java_method!(self.env, self.object, "getExtentBufferFactory", "()Lorg/spongepowered/api/world/extent/ExtentBufferFactory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getExtentBufferFactory was null") }
    world_extent_ExtentBufferFactory { env: self.env, object: ret }
  }

  pub fn get_value_factory(&self) -> data_value_ValueFactory {
    let ret = java_method!(self.env, self.object, "getValueFactory", "()Lorg/spongepowered/api/data/value/ValueFactory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getValueFactory was null") }
    data_value_ValueFactory { env: self.env, object: ret }
  }

  pub fn get_villager_registry(&self) -> item_merchant_VillagerRegistry {
    let ret = java_method!(self.env, self.object, "getVillagerRegistry", "()Lorg/spongepowered/api/item/merchant/VillagerRegistry;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getVillagerRegistry was null") }
    item_merchant_VillagerRegistry { env: self.env, object: ret }
  }

  pub fn get_text_serializer_factory(&self) -> text_serializer_TextSerializerFactory {
    let ret = java_method!(self.env, self.object, "getTextSerializerFactory", "()Lorg/spongepowered/api/text/serializer/TextSerializerFactory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getTextSerializerFactory was null") }
    text_serializer_TextSerializerFactory { env: self.env, object: ret }
  }

  pub fn get_selector_factory(&self) -> text_selector_SelectorFactory {
    let ret = java_method!(self.env, self.object, "getSelectorFactory", "()Lorg/spongepowered/api/text/selector/SelectorFactory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getSelectorFactory was null") }
    text_selector_SelectorFactory { env: self.env, object: ret }
  }

  pub fn get_locale(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getLocale", "(Ljava/lang/String;)Ljava/util/Locale;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getLocale was null") }
    ret
  }

  pub fn get_translation_by_id(&self, param_1: jobject) -> Option<text_translation_Translation> {
    let ret = java_method!(self.env, self.object, "getTranslationById", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/GameRegistry#getTranslationById was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_translation_Translation { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct GameState {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl GameState {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    GameState {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[GameState] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> GameState {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/GameState;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/GameState#valueOf was null") }
    GameState { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_Enchantment {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_Enchantment {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_Enchantment {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/Enchantment#getName was null") }
    ret
  }

  pub fn get_weight(&self) -> i32 {
    java_method!(self.env, self.object, "getWeight", "()I", CallIntMethod)
  }

  pub fn get_minimum_level(&self) -> i32 {
    java_method!(self.env, self.object, "getMinimumLevel", "()I", CallIntMethod)
  }

  pub fn get_maximum_level(&self) -> i32 {
    java_method!(self.env, self.object, "getMaximumLevel", "()I", CallIntMethod)
  }

  pub fn get_minimum_enchantability_for_level(&self, param_1: i32) -> i32 {
    java_method!(self.env, self.object, "getMinimumEnchantabilityForLevel", "(I)I", CallIntMethodA, param_1)
  }

  pub fn get_maximum_enchantability_for_level(&self, param_1: i32) -> i32 {
    java_method!(self.env, self.object, "getMaximumEnchantabilityForLevel", "(I)I", CallIntMethodA, param_1)
  }

  pub fn can_be_applied_to_stack(&self, param_1: item_inventory_ItemStack) -> bool {
    java_method!(self.env, self.object, "canBeAppliedToStack", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn can_be_applied_by_table(&self, param_1: item_inventory_ItemStack) -> bool {
    java_method!(self.env, self.object, "canBeAppliedByTable", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_compatible_with(&self, param_1: item_Enchantment) -> bool {
    java_method!(self.env, self.object, "isCompatibleWith", "(Lorg/spongepowered/api/item/Enchantment;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct item_Enchantments {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_Enchantments {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_Enchantments {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_FireworkEffect_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_FireworkEffect_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_FireworkEffect_Builder {
      env: env,
      object: object
    }
  }

  pub fn trail(&self, param_1: bool) -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, self.object, "trail", "(Z)Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#trail was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn flicker(&self, param_1: bool) -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, self.object, "flicker", "(Z)Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#flicker was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: util_Color) -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/util/Color;)Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#color was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn colors(&self, param_1: &[util_Color]) -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, self.object, "colors", "([Lorg/spongepowered/api/util/Color;)Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#colors was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn colors_1(&self, param_1: jobject) -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, self.object, "colors", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#colors was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn fade(&self, param_1: util_Color) -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, self.object, "fade", "(Lorg/spongepowered/api/util/Color;)Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#fade was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn fades(&self, param_1: &[util_Color]) -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, self.object, "fades", "([Lorg/spongepowered/api/util/Color;)Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#fades was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn fades_1(&self, param_1: jobject) -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, self.object, "fades", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#fades was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn shape(&self, param_1: item_FireworkShape) -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, self.object, "shape", "(Lorg/spongepowered/api/item/FireworkShape;)Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#shape was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> item_FireworkEffect {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/item/FireworkEffect;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect$Builder#build was null") }
    item_FireworkEffect { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_FireworkEffect {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_FireworkEffect {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_FireworkEffect {
      env: env,
      object: object
    }
  }

  pub fn builder() -> item_FireworkEffect_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/item/FireworkEffect$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect#builder was null") }
    item_FireworkEffect_Builder { env: self.env, object: ret }
  }

  pub fn flickers(&self) -> bool {
    java_method!(self.env, self.object, "flickers", "()Z", CallBooleanMethod) == 1
  }

  pub fn has_trail(&self) -> bool {
    java_method!(self.env, self.object, "hasTrail", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_colors(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getColors", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect#getColors was null") }
    ret
  }

  pub fn get_fade_colors(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getFadeColors", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect#getFadeColors was null") }
    ret
  }

  pub fn get_shape(&self) -> item_FireworkShape {
    let ret = java_method!(self.env, self.object, "getShape", "()Lorg/spongepowered/api/item/FireworkShape;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/FireworkEffect#getShape was null") }
    item_FireworkShape { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_FireworkShape {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_FireworkShape {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_FireworkShape {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_FireworkShapes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_FireworkShapes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_FireworkShapes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_Carrier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_Carrier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_Carrier {
      env: env,
      object: object
    }
  }

  pub fn get_inventory(&self) -> item_inventory_type_CarriedInventory {
    let ret = java_method!(self.env, self.object, "getInventory", "()Lorg/spongepowered/api/item/inventory/type/CarriedInventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Carrier#getInventory was null") }
    item_inventory_type_CarriedInventory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_Container {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_Container {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_Container {
      env: env,
      object: object
    }
  }

  pub fn get_viewers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getViewers", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Container#getViewers was null") }
    ret
  }

  pub fn has_viewers(&self) -> bool {
    java_method!(self.env, self.object, "hasViewers", "()Z", CallBooleanMethod) == 1
  }

  pub fn open(&self, param_1: entity_living_player_Player) {
    java_method!(self.env, self.object, "open", "(Lorg/spongepowered/api/entity/living/player/Player;)V", CallVoidMethodA, param_1);
  }

  pub fn close(&self, param_1: entity_living_player_Player) {
    java_method!(self.env, self.object, "close", "(Lorg/spongepowered/api/entity/living/player/Player;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct item_inventory_crafting_CraftingInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_crafting_CraftingInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_crafting_CraftingInventory {
      env: env,
      object: object
    }
  }

  pub fn get_crafting_grid(&self) -> item_inventory_type_GridInventory {
    let ret = java_method!(self.env, self.object, "getCraftingGrid", "()Lorg/spongepowered/api/item/inventory/type/GridInventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/crafting/CraftingInventory#getCraftingGrid was null") }
    item_inventory_type_GridInventory { env: self.env, object: ret }
  }

  pub fn get_result(&self) -> item_inventory_crafting_CraftingOutput {
    let ret = java_method!(self.env, self.object, "getResult", "()Lorg/spongepowered/api/item/inventory/crafting/CraftingOutput;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/crafting/CraftingInventory#getResult was null") }
    item_inventory_crafting_CraftingOutput { env: self.env, object: ret }
  }

  pub fn get_recipe(&self) -> Option<item_recipe_Recipe> {
    let ret = java_method!(self.env, self.object, "getRecipe", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/crafting/CraftingInventory#getRecipe was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_recipe_Recipe { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct item_inventory_crafting_CraftingOutput {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_crafting_CraftingOutput {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_crafting_CraftingOutput {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct item_inventory_custom_CustomInventory_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_custom_CustomInventory_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_custom_CustomInventory_Builder {
      env: env,
      object: object
    }
  }

  pub fn name(&self, param_1: text_translation_Translation) -> item_inventory_custom_CustomInventory_Builder {
    let ret = java_method!(self.env, self.object, "name", "(Lorg/spongepowered/api/text/translation/Translation;)Lorg/spongepowered/api/item/inventory/custom/CustomInventory$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/custom/CustomInventory$Builder#name was null") }
    item_inventory_custom_CustomInventory_Builder { env: self.env, object: ret }
  }

  pub fn size(&self, param_1: i32) -> item_inventory_custom_CustomInventory_Builder {
    let ret = java_method!(self.env, self.object, "size", "(I)Lorg/spongepowered/api/item/inventory/custom/CustomInventory$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/custom/CustomInventory$Builder#size was null") }
    item_inventory_custom_CustomInventory_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> item_inventory_custom_CustomInventory {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/item/inventory/custom/CustomInventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/custom/CustomInventory$Builder#build was null") }
    item_inventory_custom_CustomInventory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_custom_CustomInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_custom_CustomInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_custom_CustomInventory {
      env: env,
      object: object
    }
  }

  pub fn builder() -> item_inventory_custom_CustomInventory_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/item/inventory/custom/CustomInventory$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/custom/CustomInventory#builder was null") }
    item_inventory_custom_CustomInventory_Builder { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct item_inventory_EmptyInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_EmptyInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_EmptyInventory {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_entity_Hotbar {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_entity_Hotbar {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_entity_Hotbar {
      env: env,
      object: object
    }
  }

  pub fn get_selected_slot_index(&self) -> i32 {
    java_method!(self.env, self.object, "getSelectedSlotIndex", "()I", CallIntMethod)
  }

  pub fn set_selected_slot_index(&self, param_1: i32) {
    java_method!(self.env, self.object, "setSelectedSlotIndex", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct item_inventory_entity_HumanInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_entity_HumanInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_entity_HumanInventory {
      env: env,
      object: object
    }
  }

  pub fn get_hotbar(&self) -> item_inventory_entity_Hotbar {
    let ret = java_method!(self.env, self.object, "getHotbar", "()Lorg/spongepowered/api/item/inventory/entity/Hotbar;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/entity/HumanInventory#getHotbar was null") }
    item_inventory_entity_Hotbar { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct item_inventory_equipment_EquipmentInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_equipment_EquipmentInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_equipment_EquipmentInventory {
      env: env,
      object: object
    }
  }

  pub fn poll(&self, param_1: item_inventory_property_EquipmentSlotType) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn poll_1(&self, param_1: item_inventory_property_EquipmentSlotType, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn poll_2(&self, param_1: item_inventory_equipment_EquipmentType) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn poll_3(&self, param_1: item_inventory_equipment_EquipmentType, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek(&self, param_1: item_inventory_property_EquipmentSlotType) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek_1(&self, param_1: item_inventory_property_EquipmentSlotType, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek_2(&self, param_1: item_inventory_equipment_EquipmentType) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek_3(&self, param_1: item_inventory_equipment_EquipmentType, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn set(&self, param_1: item_inventory_property_EquipmentSlotType, param_2: item_inventory_ItemStack) -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType;Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#set was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn set_1(&self, param_1: item_inventory_equipment_EquipmentType, param_2: item_inventory_ItemStack) -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#set was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn get_slot(&self, param_1: item_inventory_property_EquipmentSlotType) -> Option<item_inventory_Slot> {
    let ret = java_method!(self.env, self.object, "getSlot", "(Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#getSlot was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_Slot { env: self.env, object: unwrapped }) }
  }

  pub fn get_slot_1(&self, param_1: item_inventory_equipment_EquipmentType) -> Option<item_inventory_Slot> {
    let ret = java_method!(self.env, self.object, "getSlot", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/equipment/EquipmentInventory#getSlot was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_Slot { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct item_inventory_equipment_EquipmentType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_equipment_EquipmentType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_equipment_EquipmentType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_equipment_EquipmentTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_equipment_EquipmentTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_equipment_EquipmentTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_equipment_EquipmentTypeWorn {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_equipment_EquipmentTypeWorn {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_equipment_EquipmentTypeWorn {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct item_inventory_Inventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_Inventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_Inventory {
      env: env,
      object: object
    }
  }

  pub fn parent(&self) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "parent", "()Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#parent was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

  pub fn slots(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "slots", "()Ljava/lang/Iterable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#slots was null") }
    ret
  }

  pub fn first(&self) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "first", "()Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#first was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

  pub fn next(&self) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "next", "()Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#next was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

  pub fn poll(&self) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn poll_1(&self, param_1: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(I)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek(&self) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek_1(&self, param_1: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(I)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn offer(&self, param_1: item_inventory_ItemStack) -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#offer was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn set(&self, param_1: item_inventory_ItemStack) -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#set was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn clear(&self) {
    java_method!(self.env, self.object, "clear", "()V", CallVoidMethod);
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn total_items(&self) -> i32 {
    java_method!(self.env, self.object, "totalItems", "()I", CallIntMethod)
  }

  pub fn capacity(&self) -> i32 {
    java_method!(self.env, self.object, "capacity", "()I", CallIntMethod)
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn contains(&self, param_1: item_inventory_ItemStack) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_1(&self, param_1: item_ItemType) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/item/ItemType;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_max_stack_size(&self) -> i32 {
    java_method!(self.env, self.object, "getMaxStackSize", "()I", CallIntMethod)
  }

  pub fn set_max_stack_size(&self, param_1: i32) {
    java_method!(self.env, self.object, "setMaxStackSize", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_properties(&self, param_1: item_inventory_Inventory, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getProperties", "(Lorg/spongepowered/api/item/inventory/Inventory;Ljava/lang/Class;)Ljava/util/Collection;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#getProperties was null") }
    ret
  }

  pub fn get_properties_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getProperties", "(Ljava/lang/Class;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#getProperties was null") }
    ret
  }

  pub fn get_property(&self, param_1: item_inventory_Inventory, param_2: jobject, param_3: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getProperty", "(Lorg/spongepowered/api/item/inventory/Inventory;Ljava/lang/Class;Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#getProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_property_1(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getProperty", "(Ljava/lang/Class;Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#getProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn query(&self, param_1: &[jobject]) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "query", "([Ljava/lang/Class;)Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#query was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

  pub fn query_1(&self, param_1: &[item_ItemType]) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "query", "([Lorg/spongepowered/api/item/ItemType;)Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#query was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

  pub fn query_2(&self, param_1: &[item_inventory_ItemStack]) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "query", "([Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#query was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

  pub fn query_3(&self, param_1: &[item_inventory_InventoryProperty]) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "query", "([Lorg/spongepowered/api/item/inventory/InventoryProperty;)Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#query was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

  pub fn query_4(&self, param_1: &[text_translation_Translation]) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "query", "([Lorg/spongepowered/api/text/translation/Translation;)Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#query was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

  pub fn query_5(&self, param_1: &[jobject]) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "query", "([Ljava/lang/String;)Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#query was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

  pub fn query_6(&self, param_1: &[jobject]) -> item_inventory_Inventory {
    let ret = java_method!(self.env, self.object, "query", "([Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/Inventory;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/Inventory#query was null") }
    item_inventory_Inventory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_InventoryProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_InventoryProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_InventoryProperty {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStack_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStack_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStack_Builder {
      env: env,
      object: object
    }
  }

  pub fn item_type(&self, param_1: item_ItemType) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "itemType", "(Lorg/spongepowered/api/item/ItemType;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#itemType was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn quantity(&self, param_1: i32) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "quantity", "(I)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#quantity was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn key_value(&self, param_1: data_key_Key, param_2: jobject) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "keyValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#keyValue was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn item_data(&self, param_1: data_manipulator_DataManipulator) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "itemData", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#itemData was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn item_data_1(&self, param_1: data_manipulator_ImmutableDataManipulator) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "itemData", "(Lorg/spongepowered/api/data/manipulator/ImmutableDataManipulator;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#itemData was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn add(&self, param_1: data_key_Key, param_2: jobject) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#add was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn from_item_stack(&self, param_1: item_inventory_ItemStack) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "fromItemStack", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#fromItemStack was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn from_block_state(&self, param_1: block_BlockState) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "fromBlockState", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#fromBlockState was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn from_container(&self, param_1: data_DataView) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "fromContainer", "(Lorg/spongepowered/api/data/DataView;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#fromContainer was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn from_snapshot(&self, param_1: item_inventory_ItemStackSnapshot) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "fromSnapshot", "(Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#fromSnapshot was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn from_block_snapshot(&self, param_1: block_BlockSnapshot) -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, self.object, "fromBlockSnapshot", "(Lorg/spongepowered/api/block/BlockSnapshot;)Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#fromBlockSnapshot was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> item_inventory_ItemStack {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/item/inventory/ItemStack;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack$Builder#build was null") }
    item_inventory_ItemStack { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStack {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStack {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStack {
      env: env,
      object: object
    }
  }

  pub fn builder() -> item_inventory_ItemStack_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/item/inventory/ItemStack$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack#builder was null") }
    item_inventory_ItemStack_Builder { env: self.env, object: ret }
  }

  pub fn of(param_1: item_ItemType, param_2: i32) -> item_inventory_ItemStack {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/item/ItemType;I)Lorg/spongepowered/api/item/inventory/ItemStack;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack#of was null") }
    item_inventory_ItemStack { env: self.env, object: ret }
  }

  pub fn get_item(&self) -> item_ItemType {
    let ret = java_method!(self.env, self.object, "getItem", "()Lorg/spongepowered/api/item/ItemType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack#getItem was null") }
    item_ItemType { env: self.env, object: ret }
  }

  pub fn get_quantity(&self) -> i32 {
    java_method!(self.env, self.object, "getQuantity", "()I", CallIntMethod)
  }

  pub fn set_quantity(&self, param_1: i32) {
    java_method!(self.env, self.object, "setQuantity", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_max_stack_quantity(&self) -> i32 {
    java_method!(self.env, self.object, "getMaxStackQuantity", "()I", CallIntMethod)
  }

  pub fn create_snapshot(&self) -> item_inventory_ItemStackSnapshot {
    let ret = java_method!(self.env, self.object, "createSnapshot", "()Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack#createSnapshot was null") }
    item_inventory_ItemStackSnapshot { env: self.env, object: ret }
  }

  pub fn equal_to(&self, param_1: item_inventory_ItemStack) -> bool {
    java_method!(self.env, self.object, "equalTo", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn copy(&self) -> item_inventory_ItemStack {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/item/inventory/ItemStack;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack#copy was null") }
    item_inventory_ItemStack { env: self.env, object: ret }
  }

  pub fn copy_1(&self) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStack#copy was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStackBuilderPopulators {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStackBuilderPopulators {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStackBuilderPopulators {
      env: env,
      object: object
    }
  }

  pub fn item_stack(param_1: item_inventory_ItemStackSnapshot) -> jobject {
    let ret = java_method!(self.env, "itemStack", "(Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#itemStack was null") }
    ret
  }

  pub fn item_stacks(param_1: item_inventory_ItemStackSnapshot, param_2: &[item_inventory_ItemStackSnapshot]) -> jobject {
    let ret = java_method!(self.env, "itemStacks", "(Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;[Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#itemStacks was null") }
    ret
  }

  pub fn item(param_1: item_ItemType) -> jobject {
    let ret = java_method!(self.env, "item", "(Lorg/spongepowered/api/item/ItemType;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#item was null") }
    ret
  }

  pub fn item_1(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "item", "(Ljava/util/function/Supplier;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#item was null") }
    ret
  }

  pub fn items(param_1: item_ItemType, param_2: &[item_ItemType]) -> jobject {
    let ret = java_method!(self.env, "items", "(Lorg/spongepowered/api/item/ItemType;[Lorg/spongepowered/api/item/ItemType;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#items was null") }
    ret
  }

  pub fn items_1(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "items", "(Ljava/util/Collection;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#items was null") }
    ret
  }

  pub fn quantity(param_1: util_weighted_VariableAmount) -> jobject {
    let ret = java_method!(self.env, "quantity", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#quantity was null") }
    ret
  }

  pub fn quantity_1(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "quantity", "(Ljava/util/function/Supplier;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#quantity was null") }
    ret
  }

  pub fn key_value(param_1: data_key_Key, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "keyValue", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#keyValue was null") }
    ret
  }

  pub fn key_values(param_1: data_key_Key, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "keyValues", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Iterable;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#keyValues was null") }
    ret
  }

  pub fn list_values(param_1: data_key_Key, param_2: jobject, param_3: util_weighted_VariableAmount) -> jobject {
    let ret = java_method!(self.env, "listValues", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/List;Lorg/spongepowered/api/util/weighted/VariableAmount;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#listValues was null") }
    ret
  }

  pub fn list_values_1(param_1: data_key_Key, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "listValues", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/List;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#listValues was null") }
    ret
  }

  pub fn list_values_2(param_1: data_key_Key, param_2: util_weighted_WeightedTable) -> jobject {
    let ret = java_method!(self.env, "listValues", "(Lorg/spongepowered/api/data/key/Key;Lorg/spongepowered/api/util/weighted/WeightedTable;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#listValues was null") }
    ret
  }

  pub fn list_value_suppliers(param_1: data_key_Key, param_2: util_weighted_WeightedTable) -> jobject {
    let ret = java_method!(self.env, "listValueSuppliers", "(Lorg/spongepowered/api/data/key/Key;Lorg/spongepowered/api/util/weighted/WeightedTable;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#listValueSuppliers was null") }
    ret
  }

  pub fn set_values(param_1: data_key_Key, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "setValues", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/Set;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#setValues was null") }
    ret
  }

  pub fn set_values_1(param_1: data_key_Key, param_2: jobject, param_3: util_weighted_VariableAmount) -> jobject {
    let ret = java_method!(self.env, "setValues", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/Set;Lorg/spongepowered/api/util/weighted/VariableAmount;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#setValues was null") }
    ret
  }

  pub fn set_values_2(param_1: data_key_Key, param_2: util_weighted_WeightedTable) -> jobject {
    let ret = java_method!(self.env, "setValues", "(Lorg/spongepowered/api/data/key/Key;Lorg/spongepowered/api/util/weighted/WeightedTable;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#setValues was null") }
    ret
  }

  pub fn value(param_1: data_value_BaseValue) -> jobject {
    let ret = java_method!(self.env, "value", "(Lorg/spongepowered/api/data/value/BaseValue;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#value was null") }
    ret
  }

  pub fn values(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "values", "(Ljava/lang/Iterable;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#values was null") }
    ret
  }

  pub fn data(param_1: data_manipulator_DataManipulator) -> jobject {
    let ret = java_method!(self.env, "data", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#data was null") }
    ret
  }

  pub fn data_1(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "data", "(Ljava/util/Collection;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#data was null") }
    ret
  }

  pub fn data_2(param_1: jobject, param_2: util_weighted_VariableAmount) -> jobject {
    let ret = java_method!(self.env, "data", "(Ljava/util/Collection;Lorg/spongepowered/api/util/weighted/VariableAmount;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#data was null") }
    ret
  }

  pub fn data_3(param_1: util_weighted_WeightedTable) -> jobject {
    let ret = java_method!(self.env, "data", "(Lorg/spongepowered/api/util/weighted/WeightedTable;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#data was null") }
    ret
  }

  pub fn enchantment(param_1: item_Enchantment) -> jobject {
    let ret = java_method!(self.env, "enchantment", "(Lorg/spongepowered/api/item/Enchantment;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#enchantment was null") }
    ret
  }

  pub fn enchantment_1(param_1: util_weighted_VariableAmount, param_2: item_Enchantment) -> jobject {
    let ret = java_method!(self.env, "enchantment", "(Lorg/spongepowered/api/util/weighted/VariableAmount;Lorg/spongepowered/api/item/Enchantment;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#enchantment was null") }
    ret
  }

  pub fn enchantments_with_vanilla_level_variance(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "enchantmentsWithVanillaLevelVariance", "(Ljava/util/Collection;)Ljava/util/function/BiConsumer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#enchantmentsWithVanillaLevelVariance was null") }
    ret
  }

  pub fn enchantments_with_vanilla_level_variance_1(param_1: util_weighted_VariableAmount, param_2: item_Enchantment, param_3: &[item_Enchantment]) -> jobject {
    let ret = java_method!(self.env, "enchantmentsWithVanillaLevelVariance", "(Lorg/spongepowered/api/util/weighted/VariableAmount;Lorg/spongepowered/api/item/Enchantment;[Lorg/spongepowered/api/item/Enchantment;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#enchantmentsWithVanillaLevelVariance was null") }
    ret
  }

  pub fn enchantments_with_vanilla_level_variance_2(param_1: util_weighted_VariableAmount, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "enchantmentsWithVanillaLevelVariance", "(Lorg/spongepowered/api/util/weighted/VariableAmount;Ljava/util/Collection;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#enchantmentsWithVanillaLevelVariance was null") }
    ret
  }

  pub fn enchantments(param_1: util_weighted_VariableAmount, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "enchantments", "(Lorg/spongepowered/api/util/weighted/VariableAmount;Ljava/util/Collection;)Ljava/util/function/BiConsumer;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackBuilderPopulators#enchantments was null") }
    ret
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStackComparators_ItemDataComparator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStackComparators_ItemDataComparator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStackComparators_ItemDataComparator {
      env: env,
      object: object
    }
  }

  pub fn compare(&self, param_1: item_inventory_ItemStack, param_2: item_inventory_ItemStack) -> i32 {
    java_method!(self.env, self.object, "compare", "(Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/item/inventory/ItemStack;)I", CallIntMethodA, param_1, param_2)
  }

  pub fn compare_1(&self, param_1: jobject, param_2: jobject) -> i32 {
    java_method!(self.env, self.object, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I", CallIntMethodA, param_1, param_2)
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStackComparators_Properties {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStackComparators_Properties {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStackComparators_Properties {
      env: env,
      object: object
    }
  }

  pub fn compare(&self, param_1: item_inventory_ItemStack, param_2: item_inventory_ItemStack) -> i32 {
    java_method!(self.env, self.object, "compare", "(Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/item/inventory/ItemStack;)I", CallIntMethodA, param_1, param_2)
  }

  pub fn compare_1(&self, param_1: jobject, param_2: jobject) -> i32 {
    java_method!(self.env, self.object, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I", CallIntMethodA, param_1, param_2)
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStackComparators_Size {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStackComparators_Size {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStackComparators_Size {
      env: env,
      object: object
    }
  }

  pub fn compare(&self, param_1: item_inventory_ItemStack, param_2: item_inventory_ItemStack) -> i32 {
    java_method!(self.env, self.object, "compare", "(Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/item/inventory/ItemStack;)I", CallIntMethodA, param_1, param_2)
  }

  pub fn compare_1(&self, param_1: jobject, param_2: jobject) -> i32 {
    java_method!(self.env, self.object, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I", CallIntMethodA, param_1, param_2)
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStackComparators_Type {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStackComparators_Type {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStackComparators_Type {
      env: env,
      object: object
    }
  }

  pub fn compare(&self, param_1: item_inventory_ItemStack, param_2: item_inventory_ItemStack) -> i32 {
    java_method!(self.env, self.object, "compare", "(Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/item/inventory/ItemStack;)I", CallIntMethodA, param_1, param_2)
  }

  pub fn compare_1(&self, param_1: jobject, param_2: jobject) -> i32 {
    java_method!(self.env, self.object, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I", CallIntMethodA, param_1, param_2)
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStackComparators {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStackComparators {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStackComparators {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStackGenerator_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStackGenerator_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStackGenerator_Builder {
      env: env,
      object: object
    }
  }

  pub fn add(&self, param_1: jobject) -> item_inventory_ItemStackGenerator_Builder {
    let ret = java_method!(self.env, self.object, "add", "(Ljava/util/function/BiConsumer;)Lorg/spongepowered/api/item/inventory/ItemStackGenerator$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackGenerator$Builder#add was null") }
    item_inventory_ItemStackGenerator_Builder { env: self.env, object: ret }
  }

  pub fn add_all(&self, param_1: jobject) -> item_inventory_ItemStackGenerator_Builder {
    let ret = java_method!(self.env, self.object, "addAll", "(Ljava/util/Collection;)Lorg/spongepowered/api/item/inventory/ItemStackGenerator$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackGenerator$Builder#addAll was null") }
    item_inventory_ItemStackGenerator_Builder { env: self.env, object: ret }
  }

  pub fn base_item(&self, param_1: item_ItemType) -> item_inventory_ItemStackGenerator_Builder {
    let ret = java_method!(self.env, self.object, "baseItem", "(Lorg/spongepowered/api/item/ItemType;)Lorg/spongepowered/api/item/inventory/ItemStackGenerator$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackGenerator$Builder#baseItem was null") }
    item_inventory_ItemStackGenerator_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> item_inventory_ItemStackGenerator {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/item/inventory/ItemStackGenerator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackGenerator$Builder#build was null") }
    item_inventory_ItemStackGenerator { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStackGenerator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStackGenerator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStackGenerator {
      env: env,
      object: object
    }
  }

  pub fn builder() -> item_inventory_ItemStackGenerator_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/item/inventory/ItemStackGenerator$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackGenerator#builder was null") }
    item_inventory_ItemStackGenerator_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_ItemStackSnapshot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_ItemStackSnapshot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_ItemStackSnapshot {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> item_ItemType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/item/ItemType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackSnapshot#getType was null") }
    item_ItemType { env: self.env, object: ret }
  }

  pub fn get_count(&self) -> i32 {
    java_method!(self.env, self.object, "getCount", "()I", CallIntMethod)
  }

  pub fn create_stack(&self) -> item_inventory_ItemStack {
    let ret = java_method!(self.env, self.object, "createStack", "()Lorg/spongepowered/api/item/inventory/ItemStack;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackSnapshot#createStack was null") }
    item_inventory_ItemStack { env: self.env, object: ret }
  }

  pub fn create_game_dictionary_entry(&self) -> GameDictionary_Entry {
    let ret = java_method!(self.env, self.object, "createGameDictionaryEntry", "()Lorg/spongepowered/api/GameDictionary$Entry;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/ItemStackSnapshot#createGameDictionaryEntry was null") }
    GameDictionary_Entry { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct item_inventory_property_AbstractInventoryProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_AbstractInventoryProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_AbstractInventoryProperty {
      env: env,
      object: object
    }
  }

  pub fn get_key(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKey", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/AbstractInventoryProperty#getKey was null") }
    ret
  }

  pub fn get_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValue", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/AbstractInventoryProperty#getValue was null") }
    ret
  }

  pub fn get_operator(&self) -> data_Property_Operator {
    let ret = java_method!(self.env, self.object, "getOperator", "()Lorg/spongepowered/api/data/Property$Operator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/AbstractInventoryProperty#getOperator was null") }
    data_Property_Operator { env: self.env, object: ret }
  }

  pub fn matches(&self, param_1: data_Property) -> bool {
    java_method!(self.env, self.object, "matches", "(Lorg/spongepowered/api/data/Property;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct item_inventory_property_AcceptsItems {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_AcceptsItems {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_AcceptsItems {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> item_inventory_property_AcceptsItems {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Collection;)Lorg/spongepowered/api/item/inventory/property/AcceptsItems", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/AcceptsItems#<init> was null") }
    item_inventory_property_AcceptsItems { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_AcceptsItems {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Collection;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/AcceptsItems", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/AcceptsItems#<init> was null") }
    item_inventory_property_AcceptsItems { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_AcceptsItems {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/AcceptsItems", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/AcceptsItems#<init> was null") }
    item_inventory_property_AcceptsItems { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn of(param_1: &[jobject]) -> item_inventory_property_AcceptsItems {
    let ret = java_method!(self.env, "of", "([Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/AcceptsItems;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/AcceptsItems#of was null") }
    item_inventory_property_AcceptsItems { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct item_inventory_property_ArmorSlotType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_ArmorSlotType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_ArmorSlotType {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: item_inventory_equipment_EquipmentTypeWorn) -> item_inventory_property_ArmorSlotType {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentTypeWorn;)Lorg/spongepowered/api/item/inventory/property/ArmorSlotType", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/ArmorSlotType#<init> was null") }
    item_inventory_property_ArmorSlotType { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: item_inventory_equipment_EquipmentTypeWorn, param_2: data_Property_Operator) -> item_inventory_property_ArmorSlotType {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentTypeWorn;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/ArmorSlotType", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/ArmorSlotType#<init> was null") }
    item_inventory_property_ArmorSlotType { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_ArmorSlotType {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/ArmorSlotType", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/ArmorSlotType#<init> was null") }
    item_inventory_property_ArmorSlotType { env: self.env, object: ret }
  }

  pub fn of(param_1: jobject) -> item_inventory_property_ArmorSlotType {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/ArmorSlotType;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/ArmorSlotType#of was null") }
    item_inventory_property_ArmorSlotType { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> item_inventory_property_ArmorSlotType {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/ArmorSlotType;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/ArmorSlotType#not was null") }
    item_inventory_property_ArmorSlotType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_property_EquipmentSlotType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_EquipmentSlotType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_EquipmentSlotType {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: item_inventory_equipment_EquipmentType) -> item_inventory_property_EquipmentSlotType {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;)Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/EquipmentSlotType#<init> was null") }
    item_inventory_property_EquipmentSlotType { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: item_inventory_equipment_EquipmentType, param_2: data_Property_Operator) -> item_inventory_property_EquipmentSlotType {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/EquipmentSlotType#<init> was null") }
    item_inventory_property_EquipmentSlotType { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_EquipmentSlotType {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/EquipmentSlotType#<init> was null") }
    item_inventory_property_EquipmentSlotType { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject) -> item_inventory_property_EquipmentSlotType {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/EquipmentSlotType#of was null") }
    item_inventory_property_EquipmentSlotType { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> item_inventory_property_EquipmentSlotType {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/EquipmentSlotType;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/EquipmentSlotType#not was null") }
    item_inventory_property_EquipmentSlotType { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct item_inventory_property_IntProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_IntProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_IntProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> item_inventory_property_IntProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/item/inventory/property/IntProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/IntProperty#<init> was null") }
    item_inventory_property_IntProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> item_inventory_property_IntProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/IntProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/IntProperty#<init> was null") }
    item_inventory_property_IntProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_IntProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/IntProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/IntProperty#<init> was null") }
    item_inventory_property_IntProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject) -> item_inventory_property_IntProperty {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/IntProperty#of was null") }
    item_inventory_property_IntProperty { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> item_inventory_property_IntProperty {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/IntProperty#not was null") }
    item_inventory_property_IntProperty { env: self.env, object: ret }
  }

  pub fn greater_than(param_1: jobject) -> item_inventory_property_IntProperty {
    let ret = java_method!(self.env, "greaterThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/IntProperty#greaterThan was null") }
    item_inventory_property_IntProperty { env: self.env, object: ret }
  }

  pub fn greater_than_or_equal(param_1: jobject) -> item_inventory_property_IntProperty {
    let ret = java_method!(self.env, "greaterThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/IntProperty#greaterThanOrEqual was null") }
    item_inventory_property_IntProperty { env: self.env, object: ret }
  }

  pub fn less_than(param_1: jobject) -> item_inventory_property_IntProperty {
    let ret = java_method!(self.env, "lessThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/IntProperty#lessThan was null") }
    item_inventory_property_IntProperty { env: self.env, object: ret }
  }

  pub fn less_than_or_equal(param_1: jobject) -> item_inventory_property_IntProperty {
    let ret = java_method!(self.env, "lessThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/IntProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/IntProperty#lessThanOrEqual was null") }
    item_inventory_property_IntProperty { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct item_inventory_property_InventorySize {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_InventorySize {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_InventorySize {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/item/inventory/property/InventorySize", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#<init> was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: i32) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, self.object, "<init>", "(II)Lorg/spongepowered/api/item/inventory/property/InventorySize", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#<init> was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vector2i;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/InventorySize", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#<init> was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: i32, param_2: i32, param_3: data_Property_Operator) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, self.object, "<init>", "(IILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/InventorySize", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#<init> was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn new_4(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/InventorySize", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#<init> was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn get_columns(&self) -> i32 {
    java_method!(self.env, self.object, "getColumns", "()I", CallIntMethod)
  }

  pub fn get_rows(&self) -> i32 {
    java_method!(self.env, self.object, "getRows", "()I", CallIntMethod)
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/InventorySize;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#of was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn of_1(param_1: i32, param_2: i32) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, "of", "(II)Lorg/spongepowered/api/item/inventory/property/InventorySize;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#of was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/InventorySize;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#not was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn greater_than(param_1: jobject) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, "greaterThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/InventorySize;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#greaterThan was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn greater_than_or_equal(param_1: jobject) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, "greaterThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/InventorySize;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#greaterThanOrEqual was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn less_than(param_1: jobject) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, "lessThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/InventorySize;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#lessThan was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn less_than_or_equal(param_1: jobject) -> item_inventory_property_InventorySize {
    let ret = java_method!(self.env, "lessThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/InventorySize;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/InventorySize#lessThanOrEqual was null") }
    item_inventory_property_InventorySize { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct item_inventory_property_MappedIntProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_MappedIntProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_MappedIntProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject) -> item_inventory_property_MappedIntProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Integer;Ljava/lang/Integer;)Lorg/spongepowered/api/item/inventory/property/MappedIntProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/MappedIntProperty#<init> was null") }
    item_inventory_property_MappedIntProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: jobject, param_3: data_Property_Operator) -> item_inventory_property_MappedIntProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Integer;Ljava/lang/Integer;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/MappedIntProperty", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/MappedIntProperty#<init> was null") }
    item_inventory_property_MappedIntProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject, param_3: data_Property_Operator) -> item_inventory_property_MappedIntProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/MappedIntProperty", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/MappedIntProperty#<init> was null") }
    item_inventory_property_MappedIntProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject, param_2: jobject) -> item_inventory_property_MappedIntProperty {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/MappedIntProperty;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/MappedIntProperty#of was null") }
    item_inventory_property_MappedIntProperty { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject, param_2: jobject) -> item_inventory_property_MappedIntProperty {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/MappedIntProperty;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/MappedIntProperty#not was null") }
    item_inventory_property_MappedIntProperty { env: self.env, object: ret }
  }

  pub fn greater_than(param_1: jobject, param_2: jobject) -> item_inventory_property_MappedIntProperty {
    let ret = java_method!(self.env, "greaterThan", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/MappedIntProperty;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/MappedIntProperty#greaterThan was null") }
    item_inventory_property_MappedIntProperty { env: self.env, object: ret }
  }

  pub fn greater_than_or_equal(param_1: jobject, param_2: jobject) -> item_inventory_property_MappedIntProperty {
    let ret = java_method!(self.env, "greaterThanOrEqual", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/MappedIntProperty;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/MappedIntProperty#greaterThanOrEqual was null") }
    item_inventory_property_MappedIntProperty { env: self.env, object: ret }
  }

  pub fn less_than(param_1: jobject, param_2: jobject) -> item_inventory_property_MappedIntProperty {
    let ret = java_method!(self.env, "lessThan", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/MappedIntProperty;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/MappedIntProperty#lessThan was null") }
    item_inventory_property_MappedIntProperty { env: self.env, object: ret }
  }

  pub fn less_than_or_equal(param_1: jobject, param_2: jobject) -> item_inventory_property_MappedIntProperty {
    let ret = java_method!(self.env, "lessThanOrEqual", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/MappedIntProperty;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/MappedIntProperty#lessThanOrEqual was null") }
    item_inventory_property_MappedIntProperty { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}


#[derive(Debug)]
pub struct item_inventory_property_SlotIndex {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_SlotIndex {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_SlotIndex {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> item_inventory_property_SlotIndex {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/item/inventory/property/SlotIndex", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotIndex#<init> was null") }
    item_inventory_property_SlotIndex { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: data_Property_Operator) -> item_inventory_property_SlotIndex {
    let ret = java_method!(self.env, self.object, "<init>", "(ILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/SlotIndex", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotIndex#<init> was null") }
    item_inventory_property_SlotIndex { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_SlotIndex {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/SlotIndex", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotIndex#<init> was null") }
    item_inventory_property_SlotIndex { env: self.env, object: ret }
  }

  pub fn of(param_1: jobject) -> item_inventory_property_SlotIndex {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotIndex;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotIndex#of was null") }
    item_inventory_property_SlotIndex { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> item_inventory_property_SlotIndex {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotIndex;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotIndex#not was null") }
    item_inventory_property_SlotIndex { env: self.env, object: ret }
  }

  pub fn greater_than(param_1: jobject) -> item_inventory_property_SlotIndex {
    let ret = java_method!(self.env, "greaterThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotIndex;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotIndex#greaterThan was null") }
    item_inventory_property_SlotIndex { env: self.env, object: ret }
  }

  pub fn greater_than_or_equal(param_1: jobject) -> item_inventory_property_SlotIndex {
    let ret = java_method!(self.env, "greaterThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotIndex;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotIndex#greaterThanOrEqual was null") }
    item_inventory_property_SlotIndex { env: self.env, object: ret }
  }

  pub fn less_than(param_1: jobject) -> item_inventory_property_SlotIndex {
    let ret = java_method!(self.env, "lessThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotIndex;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotIndex#lessThan was null") }
    item_inventory_property_SlotIndex { env: self.env, object: ret }
  }

  pub fn less_than_or_equal(param_1: jobject) -> item_inventory_property_SlotIndex {
    let ret = java_method!(self.env, "lessThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotIndex;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotIndex#lessThanOrEqual was null") }
    item_inventory_property_SlotIndex { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_property_SlotPos {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_SlotPos {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_SlotPos {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/item/inventory/property/SlotPos", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#<init> was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32, param_2: i32) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, self.object, "<init>", "(II)Lorg/spongepowered/api/item/inventory/property/SlotPos", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#<init> was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vector2i;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/SlotPos", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#<init> was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: i32, param_2: i32, param_3: data_Property_Operator) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, self.object, "<init>", "(IILorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/SlotPos", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#<init> was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn new_4(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/SlotPos", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#<init> was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn get_x(&self) -> i32 {
    java_method!(self.env, self.object, "getX", "()I", CallIntMethod)
  }

  pub fn get_y(&self) -> i32 {
    java_method!(self.env, self.object, "getY", "()I", CallIntMethod)
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotPos;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#of was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn of_1(param_1: i32, param_2: i32) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, "of", "(II)Lorg/spongepowered/api/item/inventory/property/SlotPos;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#of was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotPos;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#not was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn greater_than(param_1: jobject) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, "greaterThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotPos;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#greaterThan was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn greater_than_or_equal(param_1: jobject) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, "greaterThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotPos;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#greaterThanOrEqual was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn less_than(param_1: jobject) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, "lessThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotPos;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#lessThan was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn less_than_or_equal(param_1: jobject) -> item_inventory_property_SlotPos {
    let ret = java_method!(self.env, "lessThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotPos;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotPos#lessThanOrEqual was null") }
    item_inventory_property_SlotPos { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct item_inventory_property_SlotSide {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_SlotSide {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_SlotSide {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: util_Direction) -> item_inventory_property_SlotSide {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/util/Direction;)Lorg/spongepowered/api/item/inventory/property/SlotSide", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotSide#<init> was null") }
    item_inventory_property_SlotSide { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: util_Direction, param_2: data_Property_Operator) -> item_inventory_property_SlotSide {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/util/Direction;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/SlotSide", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotSide#<init> was null") }
    item_inventory_property_SlotSide { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_SlotSide {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/SlotSide", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotSide#<init> was null") }
    item_inventory_property_SlotSide { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject) -> item_inventory_property_SlotSide {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotSide;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotSide#of was null") }
    item_inventory_property_SlotSide { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> item_inventory_property_SlotSide {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/SlotSide;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/SlotSide#not was null") }
    item_inventory_property_SlotSide { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct item_inventory_property_StringProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_property_StringProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_property_StringProperty {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> item_inventory_property_StringProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/item/inventory/property/StringProperty", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/StringProperty#<init> was null") }
    item_inventory_property_StringProperty { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_StringProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/StringProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/StringProperty#<init> was null") }
    item_inventory_property_StringProperty { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: data_Property_Operator) -> item_inventory_property_StringProperty {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Lorg/spongepowered/api/data/Property$Operator;)Lorg/spongepowered/api/item/inventory/property/StringProperty", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/StringProperty#<init> was null") }
    item_inventory_property_StringProperty { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: data_Property) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/data/Property;)I", CallIntMethodA, param_1)
  }

  pub fn of(param_1: jobject) -> item_inventory_property_StringProperty {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/StringProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/StringProperty#of was null") }
    item_inventory_property_StringProperty { env: self.env, object: ret }
  }

  pub fn not(param_1: jobject) -> item_inventory_property_StringProperty {
    let ret = java_method!(self.env, "not", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/StringProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/StringProperty#not was null") }
    item_inventory_property_StringProperty { env: self.env, object: ret }
  }

  pub fn greater_than(param_1: jobject) -> item_inventory_property_StringProperty {
    let ret = java_method!(self.env, "greaterThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/StringProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/StringProperty#greaterThan was null") }
    item_inventory_property_StringProperty { env: self.env, object: ret }
  }

  pub fn greater_than_or_equal(param_1: jobject) -> item_inventory_property_StringProperty {
    let ret = java_method!(self.env, "greaterThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/StringProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/StringProperty#greaterThanOrEqual was null") }
    item_inventory_property_StringProperty { env: self.env, object: ret }
  }

  pub fn less_than(param_1: jobject) -> item_inventory_property_StringProperty {
    let ret = java_method!(self.env, "lessThan", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/StringProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/StringProperty#lessThan was null") }
    item_inventory_property_StringProperty { env: self.env, object: ret }
  }

  pub fn less_than_or_equal(param_1: jobject) -> item_inventory_property_StringProperty {
    let ret = java_method!(self.env, "lessThanOrEqual", "(Ljava/lang/Object;)Lorg/spongepowered/api/item/inventory/property/StringProperty;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/property/StringProperty#lessThanOrEqual was null") }
    item_inventory_property_StringProperty { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct item_inventory_slot_EquipmentSlot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_slot_EquipmentSlot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_slot_EquipmentSlot {
      env: env,
      object: object
    }
  }

  pub fn is_valid_item(&self, param_1: item_inventory_equipment_EquipmentType) -> bool {
    java_method!(self.env, self.object, "isValidItem", "(Lorg/spongepowered/api/item/inventory/equipment/EquipmentType;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct item_inventory_slot_FilteringSlot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_slot_FilteringSlot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_slot_FilteringSlot {
      env: env,
      object: object
    }
  }

  pub fn is_valid_item(&self, param_1: item_inventory_ItemStack) -> bool {
    java_method!(self.env, self.object, "isValidItem", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_valid_item_1(&self, param_1: item_ItemType) -> bool {
    java_method!(self.env, self.object, "isValidItem", "(Lorg/spongepowered/api/item/ItemType;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct item_inventory_slot_FuelSlot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_slot_FuelSlot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_slot_FuelSlot {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_slot_InputSlot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_slot_InputSlot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_slot_InputSlot {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_slot_OutputSlot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_slot_OutputSlot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_slot_OutputSlot {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct item_inventory_slot_SidedSlot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_slot_SidedSlot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_slot_SidedSlot {
      env: env,
      object: object
    }
  }

  pub fn can_accept(&self, param_1: item_inventory_ItemStack, param_2: util_Direction) -> bool {
    java_method!(self.env, self.object, "canAccept", "(Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/util/Direction;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn offer(&self, param_1: item_inventory_ItemStack, param_2: util_Direction) -> bool {
    java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/util/Direction;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn can_get(&self, param_1: item_inventory_ItemStack, param_2: util_Direction) -> bool {
    java_method!(self.env, self.object, "canGet", "(Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/util/Direction;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

}

#[derive(Debug)]
pub struct item_inventory_Slot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_Slot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_Slot {
      env: env,
      object: object
    }
  }

  pub fn get_stack_size(&self) -> i32 {
    java_method!(self.env, self.object, "getStackSize", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct item_inventory_transaction_InventoryTransactionResult_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_transaction_InventoryTransactionResult_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_transaction_InventoryTransactionResult_Builder {
      env: env,
      object: object
    }
  }

  pub fn type_(&self, param_1: item_inventory_transaction_InventoryTransactionResult_Type) -> item_inventory_transaction_InventoryTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Type;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder#type was null") }
    item_inventory_transaction_InventoryTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn reject(&self, param_1: &[item_inventory_ItemStack]) -> item_inventory_transaction_InventoryTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "reject", "([Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder#reject was null") }
    item_inventory_transaction_InventoryTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn replace(&self, param_1: &[item_inventory_ItemStack]) -> item_inventory_transaction_InventoryTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "replace", "([Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder#replace was null") }
    item_inventory_transaction_InventoryTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder#build was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: item_inventory_transaction_InventoryTransactionResult) -> item_inventory_transaction_InventoryTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder#from was null") }
    item_inventory_transaction_InventoryTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> item_inventory_transaction_InventoryTransactionResult_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder#reset was null") }
    item_inventory_transaction_InventoryTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_transaction_InventoryTransactionResult_Type {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_transaction_InventoryTransactionResult_Type {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_transaction_InventoryTransactionResult_Type {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[item_inventory_transaction_InventoryTransactionResult_Type] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> item_inventory_transaction_InventoryTransactionResult_Type {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Type;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Type#valueOf was null") }
    item_inventory_transaction_InventoryTransactionResult_Type { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_inventory_transaction_InventoryTransactionResult {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_transaction_InventoryTransactionResult {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_transaction_InventoryTransactionResult {
      env: env,
      object: object
    }
  }

  pub fn builder() -> item_inventory_transaction_InventoryTransactionResult_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult#builder was null") }
    item_inventory_transaction_InventoryTransactionResult_Builder { env: self.env, object: ret }
  }

  pub fn success_no_transactions() -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, "successNoTransactions", "()Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult#successNoTransactions was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn fail_no_transactions() -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, "failNoTransactions", "()Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult#failNoTransactions was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> item_inventory_transaction_InventoryTransactionResult_Type {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult$Type;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult#getType was null") }
    item_inventory_transaction_InventoryTransactionResult_Type { env: self.env, object: ret }
  }

  pub fn get_rejected_items(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRejectedItems", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult#getRejectedItems was null") }
    ret
  }

  pub fn get_replaced_items(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getReplacedItems", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/InventoryTransactionResult#getReplacedItems was null") }
    ret
  }

}


#[derive(Debug)]
pub struct item_inventory_transaction_SlotTransaction {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_transaction_SlotTransaction {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_transaction_SlotTransaction {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: item_inventory_Slot, param_2: item_inventory_ItemStackSnapshot, param_3: item_inventory_ItemStackSnapshot) -> item_inventory_transaction_SlotTransaction {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/item/inventory/Slot;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;)Lorg/spongepowered/api/item/inventory/transaction/SlotTransaction", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/SlotTransaction#<init> was null") }
    item_inventory_transaction_SlotTransaction { env: self.env, object: ret }
  }

  pub fn set_custom(&self, param_1: item_inventory_ItemStack) {
    java_method!(self.env, self.object, "setCustom", "(Lorg/spongepowered/api/item/inventory/ItemStack;)V", CallVoidMethodA, param_1);
  }

  pub fn get_slot(&self) -> item_inventory_Slot {
    let ret = java_method!(self.env, self.object, "getSlot", "()Lorg/spongepowered/api/item/inventory/Slot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/SlotTransaction#getSlot was null") }
    item_inventory_Slot { env: self.env, object: ret }
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/transaction/SlotTransaction#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct item_inventory_type_CarriedInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_type_CarriedInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_type_CarriedInventory {
      env: env,
      object: object
    }
  }

  pub fn get_carrier(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCarrier", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/CarriedInventory#getCarrier was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct item_inventory_type_GridInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_type_GridInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_type_GridInventory {
      env: env,
      object: object
    }
  }

  pub fn get_columns(&self) -> i32 {
    java_method!(self.env, self.object, "getColumns", "()I", CallIntMethod)
  }

  pub fn get_rows(&self) -> i32 {
    java_method!(self.env, self.object, "getRows", "()I", CallIntMethod)
  }

  pub fn get_dimensions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDimensions", "()Lcom/flowpowered/math/vector/Vector2i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/GridInventory#getDimensions was null") }
    ret
  }

  pub fn poll(&self, param_1: i32, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(II)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/GridInventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn poll_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/GridInventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek(&self, param_1: i32, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(II)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/GridInventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/GridInventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn set(&self, param_1: i32, param_2: i32, param_3: item_inventory_ItemStack) -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, self.object, "set", "(IILorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/GridInventory#set was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn get_slot(&self, param_1: i32, param_2: i32) -> Option<item_inventory_Slot> {
    let ret = java_method!(self.env, self.object, "getSlot", "(II)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/GridInventory#getSlot was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_Slot { env: self.env, object: unwrapped }) }
  }

  pub fn get_row(&self, param_1: i32) -> Option<item_inventory_type_InventoryRow> {
    let ret = java_method!(self.env, self.object, "getRow", "(I)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/GridInventory#getRow was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_type_InventoryRow { env: self.env, object: unwrapped }) }
  }

  pub fn get_column(&self, param_1: i32) -> Option<item_inventory_type_InventoryColumn> {
    let ret = java_method!(self.env, self.object, "getColumn", "(I)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/GridInventory#getColumn was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_type_InventoryColumn { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct item_inventory_type_Interactable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_type_Interactable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_type_Interactable {
      env: env,
      object: object
    }
  }

  pub fn can_interact_with(&self, param_1: entity_living_player_Player) -> bool {
    java_method!(self.env, self.object, "canInteractWith", "(Lorg/spongepowered/api/entity/living/player/Player;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct item_inventory_type_Inventory2D {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_type_Inventory2D {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_type_Inventory2D {
      env: env,
      object: object
    }
  }

  pub fn poll(&self, param_1: item_inventory_property_SlotPos) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(Lorg/spongepowered/api/item/inventory/property/SlotPos;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/Inventory2D#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn poll_1(&self, param_1: item_inventory_property_SlotPos, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(Lorg/spongepowered/api/item/inventory/property/SlotPos;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/Inventory2D#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek(&self, param_1: item_inventory_property_SlotPos) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(Lorg/spongepowered/api/item/inventory/property/SlotPos;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/Inventory2D#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek_1(&self, param_1: item_inventory_property_SlotPos, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(Lorg/spongepowered/api/item/inventory/property/SlotPos;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/Inventory2D#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn set(&self, param_1: item_inventory_property_SlotPos, param_2: item_inventory_ItemStack) -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/item/inventory/property/SlotPos;Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/Inventory2D#set was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn get_slot(&self, param_1: item_inventory_property_SlotPos) -> Option<item_inventory_Slot> {
    let ret = java_method!(self.env, self.object, "getSlot", "(Lorg/spongepowered/api/item/inventory/property/SlotPos;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/Inventory2D#getSlot was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_Slot { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct item_inventory_type_InventoryColumn {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_type_InventoryColumn {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_type_InventoryColumn {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_type_InventoryRow {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_type_InventoryRow {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_type_InventoryRow {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_inventory_type_OrderedInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_type_OrderedInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_type_OrderedInventory {
      env: env,
      object: object
    }
  }

  pub fn poll(&self, param_1: item_inventory_property_SlotIndex) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(Lorg/spongepowered/api/item/inventory/property/SlotIndex;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/OrderedInventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn poll_1(&self, param_1: item_inventory_property_SlotIndex, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "poll", "(Lorg/spongepowered/api/item/inventory/property/SlotIndex;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/OrderedInventory#poll was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek(&self, param_1: item_inventory_property_SlotIndex) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(Lorg/spongepowered/api/item/inventory/property/SlotIndex;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/OrderedInventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn peek_1(&self, param_1: item_inventory_property_SlotIndex, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "peek", "(Lorg/spongepowered/api/item/inventory/property/SlotIndex;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/OrderedInventory#peek was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn set(&self, param_1: item_inventory_property_SlotIndex, param_2: item_inventory_ItemStack) -> item_inventory_transaction_InventoryTransactionResult {
    let ret = java_method!(self.env, self.object, "set", "(Lorg/spongepowered/api/item/inventory/property/SlotIndex;Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/inventory/transaction/InventoryTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/OrderedInventory#set was null") }
    item_inventory_transaction_InventoryTransactionResult { env: self.env, object: ret }
  }

  pub fn get_slot(&self, param_1: item_inventory_property_SlotIndex) -> Option<item_inventory_Slot> {
    let ret = java_method!(self.env, self.object, "getSlot", "(Lorg/spongepowered/api/item/inventory/property/SlotIndex;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/OrderedInventory#getSlot was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_Slot { env: self.env, object: unwrapped }) }
  }

}


#[derive(Debug)]
pub struct item_inventory_type_PersistentInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_type_PersistentInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_type_PersistentInventory {
      env: env,
      object: object
    }
  }

  pub fn mark_dirty(&self) {
    java_method!(self.env, self.object, "markDirty", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct item_inventory_type_TileEntityInventory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_inventory_type_TileEntityInventory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_inventory_type_TileEntityInventory {
      env: env,
      object: object
    }
  }

  pub fn get_tile_entity(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getTileEntity", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/inventory/type/TileEntityInventory#getTileEntity was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct item_ItemType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_ItemType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_ItemType {
      env: env,
      object: object
    }
  }

  pub fn get_block(&self) -> Option<block_BlockType> {
    let ret = java_method!(self.env, self.object, "getBlock", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/ItemType#getBlock was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(block_BlockType { env: self.env, object: unwrapped }) }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/ItemType#getName was null") }
    ret
  }

  pub fn get_max_stack_quantity(&self) -> i32 {
    java_method!(self.env, self.object, "getMaxStackQuantity", "()I", CallIntMethod)
  }

  pub fn get_default_property(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getDefaultProperty", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/ItemType#getDefaultProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_type(&self) -> item_ItemType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/item/ItemType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/ItemType#getType was null") }
    item_ItemType { env: self.env, object: ret }
  }

  pub fn matches(&self, param_1: item_inventory_ItemStack) -> bool {
    java_method!(self.env, self.object, "matches", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_specific(&self) -> bool {
    java_method!(self.env, self.object, "isSpecific", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_template(&self) -> item_inventory_ItemStackSnapshot {
    let ret = java_method!(self.env, self.object, "getTemplate", "()Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/ItemType#getTemplate was null") }
    item_inventory_ItemStackSnapshot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_ItemTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_ItemTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_ItemTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct item_merchant_Merchant {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_merchant_Merchant {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_merchant_Merchant {
      env: env,
      object: object
    }
  }

  pub fn get_customer(&self) -> Option<entity_living_Humanoid> {
    let ret = java_method!(self.env, self.object, "getCustomer", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/Merchant#getCustomer was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_Humanoid { env: self.env, object: unwrapped }) }
  }

  pub fn set_customer(&self, param_1: entity_living_Humanoid) {
    java_method!(self.env, self.object, "setCustomer", "(Lorg/spongepowered/api/entity/living/Humanoid;)V", CallVoidMethodA, param_1);
  }

  pub fn get_trade_offer_data(&self) -> data_manipulator_mutable_entity_TradeOfferData {
    let ret = java_method!(self.env, self.object, "getTradeOfferData", "()Lorg/spongepowered/api/data/manipulator/mutable/entity/TradeOfferData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/Merchant#getTradeOfferData was null") }
    data_manipulator_mutable_entity_TradeOfferData { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct item_merchant_TradeOffer_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_merchant_TradeOffer_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_merchant_TradeOffer_Builder {
      env: env,
      object: object
    }
  }

  pub fn first_buying_item(&self, param_1: item_inventory_ItemStack) -> item_merchant_TradeOffer_Builder {
    let ret = java_method!(self.env, self.object, "firstBuyingItem", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/merchant/TradeOffer$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#firstBuyingItem was null") }
    item_merchant_TradeOffer_Builder { env: self.env, object: ret }
  }

  pub fn second_buying_item(&self, param_1: item_inventory_ItemStack) -> item_merchant_TradeOffer_Builder {
    let ret = java_method!(self.env, self.object, "secondBuyingItem", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/merchant/TradeOffer$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#secondBuyingItem was null") }
    item_merchant_TradeOffer_Builder { env: self.env, object: ret }
  }

  pub fn selling_item(&self, param_1: item_inventory_ItemStack) -> item_merchant_TradeOffer_Builder {
    let ret = java_method!(self.env, self.object, "sellingItem", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/merchant/TradeOffer$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#sellingItem was null") }
    item_merchant_TradeOffer_Builder { env: self.env, object: ret }
  }

  pub fn uses(&self, param_1: i32) -> item_merchant_TradeOffer_Builder {
    let ret = java_method!(self.env, self.object, "uses", "(I)Lorg/spongepowered/api/item/merchant/TradeOffer$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#uses was null") }
    item_merchant_TradeOffer_Builder { env: self.env, object: ret }
  }

  pub fn max_uses(&self, param_1: i32) -> item_merchant_TradeOffer_Builder {
    let ret = java_method!(self.env, self.object, "maxUses", "(I)Lorg/spongepowered/api/item/merchant/TradeOffer$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#maxUses was null") }
    item_merchant_TradeOffer_Builder { env: self.env, object: ret }
  }

  pub fn can_grant_experience(&self, param_1: bool) -> item_merchant_TradeOffer_Builder {
    let ret = java_method!(self.env, self.object, "canGrantExperience", "(Z)Lorg/spongepowered/api/item/merchant/TradeOffer$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#canGrantExperience was null") }
    item_merchant_TradeOffer_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> item_merchant_TradeOffer {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/item/merchant/TradeOffer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#build was null") }
    item_merchant_TradeOffer { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: item_merchant_TradeOffer) -> item_merchant_TradeOffer_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/item/merchant/TradeOffer;)Lorg/spongepowered/api/item/merchant/TradeOffer$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#from was null") }
    item_merchant_TradeOffer_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> item_merchant_TradeOffer_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/item/merchant/TradeOffer$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#reset was null") }
    item_merchant_TradeOffer_Builder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: data_DataSerializable) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/data/DataSerializable;)Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#from was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#reset was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_merchant_TradeOffer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_merchant_TradeOffer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_merchant_TradeOffer {
      env: env,
      object: object
    }
  }

  pub fn builder() -> item_merchant_TradeOffer_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/item/merchant/TradeOffer$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer#builder was null") }
    item_merchant_TradeOffer_Builder { env: self.env, object: ret }
  }

  pub fn get_first_buying_item(&self) -> item_inventory_ItemStackSnapshot {
    let ret = java_method!(self.env, self.object, "getFirstBuyingItem", "()Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer#getFirstBuyingItem was null") }
    item_inventory_ItemStackSnapshot { env: self.env, object: ret }
  }

  pub fn has_second_item(&self) -> bool {
    java_method!(self.env, self.object, "hasSecondItem", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_second_buying_item(&self) -> Option<item_inventory_ItemStackSnapshot> {
    let ret = java_method!(self.env, self.object, "getSecondBuyingItem", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer#getSecondBuyingItem was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStackSnapshot { env: self.env, object: unwrapped }) }
  }

  pub fn get_selling_item(&self) -> item_inventory_ItemStackSnapshot {
    let ret = java_method!(self.env, self.object, "getSellingItem", "()Lorg/spongepowered/api/item/inventory/ItemStackSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOffer#getSellingItem was null") }
    item_inventory_ItemStackSnapshot { env: self.env, object: ret }
  }

  pub fn get_uses(&self) -> i32 {
    java_method!(self.env, self.object, "getUses", "()I", CallIntMethod)
  }

  pub fn get_max_uses(&self) -> i32 {
    java_method!(self.env, self.object, "getMaxUses", "()I", CallIntMethod)
  }

  pub fn has_expired(&self) -> bool {
    java_method!(self.env, self.object, "hasExpired", "()Z", CallBooleanMethod) == 1
  }

  pub fn does_grant_experience(&self) -> bool {
    java_method!(self.env, self.object, "doesGrantExperience", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct item_merchant_TradeOfferGenerator_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_merchant_TradeOfferGenerator_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_merchant_TradeOfferGenerator_Builder {
      env: env,
      object: object
    }
  }

  pub fn set_primary_item_generator(&self, param_1: item_inventory_ItemStackGenerator) -> item_merchant_TradeOfferGenerator_Builder {
    let ret = java_method!(self.env, self.object, "setPrimaryItemGenerator", "(Lorg/spongepowered/api/item/inventory/ItemStackGenerator;)Lorg/spongepowered/api/item/merchant/TradeOfferGenerator$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOfferGenerator$Builder#setPrimaryItemGenerator was null") }
    item_merchant_TradeOfferGenerator_Builder { env: self.env, object: ret }
  }

  pub fn set_second_item_generator(&self, param_1: item_inventory_ItemStackGenerator) -> item_merchant_TradeOfferGenerator_Builder {
    let ret = java_method!(self.env, self.object, "setSecondItemGenerator", "(Lorg/spongepowered/api/item/inventory/ItemStackGenerator;)Lorg/spongepowered/api/item/merchant/TradeOfferGenerator$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOfferGenerator$Builder#setSecondItemGenerator was null") }
    item_merchant_TradeOfferGenerator_Builder { env: self.env, object: ret }
  }

  pub fn set_selling_generator(&self, param_1: item_inventory_ItemStackGenerator) -> item_merchant_TradeOfferGenerator_Builder {
    let ret = java_method!(self.env, self.object, "setSellingGenerator", "(Lorg/spongepowered/api/item/inventory/ItemStackGenerator;)Lorg/spongepowered/api/item/merchant/TradeOfferGenerator$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOfferGenerator$Builder#setSellingGenerator was null") }
    item_merchant_TradeOfferGenerator_Builder { env: self.env, object: ret }
  }

  pub fn experience_chance(&self, param_1: f64) -> item_merchant_TradeOfferGenerator_Builder {
    let ret = java_method!(self.env, self.object, "experienceChance", "(D)Lorg/spongepowered/api/item/merchant/TradeOfferGenerator$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOfferGenerator$Builder#experienceChance was null") }
    item_merchant_TradeOfferGenerator_Builder { env: self.env, object: ret }
  }

  pub fn starting_uses(&self, param_1: util_weighted_VariableAmount) -> item_merchant_TradeOfferGenerator_Builder {
    let ret = java_method!(self.env, self.object, "startingUses", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/item/merchant/TradeOfferGenerator$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOfferGenerator$Builder#startingUses was null") }
    item_merchant_TradeOfferGenerator_Builder { env: self.env, object: ret }
  }

  pub fn max_uses(&self, param_1: util_weighted_VariableAmount) -> item_merchant_TradeOfferGenerator_Builder {
    let ret = java_method!(self.env, self.object, "maxUses", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/item/merchant/TradeOfferGenerator$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOfferGenerator$Builder#maxUses was null") }
    item_merchant_TradeOfferGenerator_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> item_merchant_TradeOfferGenerator {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/item/merchant/TradeOfferGenerator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOfferGenerator$Builder#build was null") }
    item_merchant_TradeOfferGenerator { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_merchant_TradeOfferGenerator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_merchant_TradeOfferGenerator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_merchant_TradeOfferGenerator {
      env: env,
      object: object
    }
  }

  pub fn builder() -> item_merchant_TradeOfferGenerator_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/item/merchant/TradeOfferGenerator$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/TradeOfferGenerator#builder was null") }
    item_merchant_TradeOfferGenerator_Builder { env: self.env, object: ret }
  }

  pub fn accept(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "accept", "(Ljava/util/List;Ljava/util/Random;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn accept_1(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "accept", "(Ljava/lang/Object;Ljava/lang/Object;)V", CallVoidMethodA, param_1, param_2);
  }

}

#[derive(Debug)]
pub struct item_merchant_TradeOfferListMutator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_merchant_TradeOfferListMutator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_merchant_TradeOfferListMutator {
      env: env,
      object: object
    }
  }

  pub fn accept(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "accept", "(Ljava/util/List;Ljava/util/Random;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn accept_1(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "accept", "(Ljava/lang/Object;Ljava/lang/Object;)V", CallVoidMethodA, param_1, param_2);
  }

}

#[derive(Debug)]
pub struct item_merchant_VillagerRegistry {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_merchant_VillagerRegistry {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_merchant_VillagerRegistry {
      env: env,
      object: object
    }
  }

  pub fn get_trade_offer_level_map(&self, param_1: data_type_Career) -> jobject {
    let ret = java_method!(self.env, self.object, "getTradeOfferLevelMap", "(Lorg/spongepowered/api/data/type/Career;)Lcom/google/common/collect/Multimap;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/VillagerRegistry#getTradeOfferLevelMap was null") }
    ret
  }

  pub fn get_mutators_for_career(&self, param_1: data_type_Career, param_2: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "getMutatorsForCareer", "(Lorg/spongepowered/api/data/type/Career;I)Ljava/util/Collection;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/VillagerRegistry#getMutatorsForCareer was null") }
    ret
  }

  pub fn add_mutator(&self, param_1: data_type_Career, param_2: i32, param_3: item_merchant_TradeOfferListMutator) -> item_merchant_VillagerRegistry {
    let ret = java_method!(self.env, self.object, "addMutator", "(Lorg/spongepowered/api/data/type/Career;ILorg/spongepowered/api/item/merchant/TradeOfferListMutator;)Lorg/spongepowered/api/item/merchant/VillagerRegistry;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/VillagerRegistry#addMutator was null") }
    item_merchant_VillagerRegistry { env: self.env, object: ret }
  }

  pub fn add_mutators(&self, param_1: data_type_Career, param_2: i32, param_3: item_merchant_TradeOfferListMutator, param_4: &[item_merchant_TradeOfferListMutator]) -> item_merchant_VillagerRegistry {
    let ret = java_method!(self.env, self.object, "addMutators", "(Lorg/spongepowered/api/data/type/Career;ILorg/spongepowered/api/item/merchant/TradeOfferListMutator;[Lorg/spongepowered/api/item/merchant/TradeOfferListMutator;)Lorg/spongepowered/api/item/merchant/VillagerRegistry;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/VillagerRegistry#addMutators was null") }
    item_merchant_VillagerRegistry { env: self.env, object: ret }
  }

  pub fn set_mutators(&self, param_1: data_type_Career, param_2: i32, param_3: jobject) -> item_merchant_VillagerRegistry {
    let ret = java_method!(self.env, self.object, "setMutators", "(Lorg/spongepowered/api/data/type/Career;ILjava/util/List;)Lorg/spongepowered/api/item/merchant/VillagerRegistry;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/VillagerRegistry#setMutators was null") }
    item_merchant_VillagerRegistry { env: self.env, object: ret }
  }

  pub fn set_mutators_1(&self, param_1: data_type_Career, param_2: jobject) -> item_merchant_VillagerRegistry {
    let ret = java_method!(self.env, self.object, "setMutators", "(Lorg/spongepowered/api/data/type/Career;Lcom/google/common/collect/Multimap;)Lorg/spongepowered/api/item/merchant/VillagerRegistry;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/VillagerRegistry#setMutators was null") }
    item_merchant_VillagerRegistry { env: self.env, object: ret }
  }

  pub fn generate_trade_offers(&self, param_1: data_type_Career, param_2: i32, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "generateTradeOffers", "(Lorg/spongepowered/api/data/type/Career;ILjava/util/Random;)Ljava/util/Collection;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/VillagerRegistry#generateTradeOffers was null") }
    ret
  }

  pub fn populate_offers(&self, param_1: jobject, param_2: data_type_Career, param_3: i32, param_4: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "populateOffers", "(Ljava/util/List;Lorg/spongepowered/api/data/type/Career;ILjava/util/Random;)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/item/merchant/VillagerRegistry#populateOffers was null") }
    ret
  }

}



#[derive(Debug)]
pub struct item_recipe_Recipe {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_recipe_Recipe {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_recipe_Recipe {
      env: env,
      object: object
    }
  }

  pub fn get_result_types(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getResultTypes", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/Recipe#getResultTypes was null") }
    ret
  }

  pub fn is_valid(&self, param_1: item_inventory_type_GridInventory) -> bool {
    java_method!(self.env, self.object, "isValid", "(Lorg/spongepowered/api/item/inventory/type/GridInventory;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_results(&self, param_1: item_inventory_type_GridInventory) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getResults", "(Lorg/spongepowered/api/item/inventory/type/GridInventory;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/Recipe#getResults was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct item_recipe_RecipeRegistry {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_recipe_RecipeRegistry {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_recipe_RecipeRegistry {
      env: env,
      object: object
    }
  }

  pub fn register(&self, param_1: item_recipe_Recipe) {
    java_method!(self.env, self.object, "register", "(Lorg/spongepowered/api/item/recipe/Recipe;)V", CallVoidMethodA, param_1);
  }

  pub fn remove(&self, param_1: item_recipe_Recipe) {
    java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/item/recipe/Recipe;)V", CallVoidMethodA, param_1);
  }

  pub fn get_recipes(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRecipes", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/RecipeRegistry#getRecipes was null") }
    ret
  }

}

#[derive(Debug)]
pub struct item_recipe_ShapedRecipe_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_recipe_ShapedRecipe_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_recipe_ShapedRecipe_Builder {
      env: env,
      object: object
    }
  }

  pub fn width(&self, param_1: i32) -> item_recipe_ShapedRecipe_Builder {
    let ret = java_method!(self.env, self.object, "width", "(I)Lorg/spongepowered/api/item/recipe/ShapedRecipe$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe$Builder#width was null") }
    item_recipe_ShapedRecipe_Builder { env: self.env, object: ret }
  }

  pub fn height(&self, param_1: i32) -> item_recipe_ShapedRecipe_Builder {
    let ret = java_method!(self.env, self.object, "height", "(I)Lorg/spongepowered/api/item/recipe/ShapedRecipe$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe$Builder#height was null") }
    item_recipe_ShapedRecipe_Builder { env: self.env, object: ret }
  }

  pub fn dimensions(&self, param_1: jobject) -> item_recipe_ShapedRecipe_Builder {
    let ret = java_method!(self.env, self.object, "dimensions", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/item/recipe/ShapedRecipe$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe$Builder#dimensions was null") }
    item_recipe_ShapedRecipe_Builder { env: self.env, object: ret }
  }

  pub fn ingredient(&self, param_1: i32, param_2: i32, param_3: item_inventory_ItemStack) -> item_recipe_ShapedRecipe_Builder {
    let ret = java_method!(self.env, self.object, "ingredient", "(IILorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/recipe/ShapedRecipe$Builder;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe$Builder#ingredient was null") }
    item_recipe_ShapedRecipe_Builder { env: self.env, object: ret }
  }

  pub fn ingredient_1(&self, param_1: jobject, param_2: item_inventory_ItemStack) -> item_recipe_ShapedRecipe_Builder {
    let ret = java_method!(self.env, self.object, "ingredient", "(Lcom/flowpowered/math/vector/Vector2i;Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/recipe/ShapedRecipe$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe$Builder#ingredient was null") }
    item_recipe_ShapedRecipe_Builder { env: self.env, object: ret }
  }

  pub fn row(&self, param_1: i32, param_2: &[item_inventory_ItemStack]) -> item_recipe_ShapedRecipe_Builder {
    let ret = java_method!(self.env, self.object, "row", "(I[Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/recipe/ShapedRecipe$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe$Builder#row was null") }
    item_recipe_ShapedRecipe_Builder { env: self.env, object: ret }
  }

  pub fn add_result(&self, param_1: item_inventory_ItemStack) -> item_recipe_ShapedRecipe_Builder {
    let ret = java_method!(self.env, self.object, "addResult", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/recipe/ShapedRecipe$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe$Builder#addResult was null") }
    item_recipe_ShapedRecipe_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> item_recipe_ShapedRecipe {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/item/recipe/ShapedRecipe;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe$Builder#build was null") }
    item_recipe_ShapedRecipe { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_recipe_ShapedRecipe {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_recipe_ShapedRecipe {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_recipe_ShapedRecipe {
      env: env,
      object: object
    }
  }

  pub fn get_width(&self) -> i32 {
    java_method!(self.env, self.object, "getWidth", "()I", CallIntMethod)
  }

  pub fn get_height(&self) -> i32 {
    java_method!(self.env, self.object, "getHeight", "()I", CallIntMethod)
  }

  pub fn get_ingredient(&self, param_1: i32, param_2: i32) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "getIngredient", "(II)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe#getIngredient was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

  pub fn get_ingredient_1(&self, param_1: jobject) -> Option<item_inventory_ItemStack> {
    let ret = java_method!(self.env, self.object, "getIngredient", "(Lcom/flowpowered/math/vector/Vector2i;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapedRecipe#getIngredient was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(item_inventory_ItemStack { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct item_recipe_ShapelessRecipe_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_recipe_ShapelessRecipe_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_recipe_ShapelessRecipe_Builder {
      env: env,
      object: object
    }
  }

  pub fn add_ingredient(&self, param_1: item_inventory_ItemStack) -> item_recipe_ShapelessRecipe_Builder {
    let ret = java_method!(self.env, self.object, "addIngredient", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/recipe/ShapelessRecipe$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapelessRecipe$Builder#addIngredient was null") }
    item_recipe_ShapelessRecipe_Builder { env: self.env, object: ret }
  }

  pub fn add_result(&self, param_1: item_inventory_ItemStack) -> item_recipe_ShapelessRecipe_Builder {
    let ret = java_method!(self.env, self.object, "addResult", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/item/recipe/ShapelessRecipe$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapelessRecipe$Builder#addResult was null") }
    item_recipe_ShapelessRecipe_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> item_recipe_ShapelessRecipe {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/item/recipe/ShapelessRecipe;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapelessRecipe$Builder#build was null") }
    item_recipe_ShapelessRecipe { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct item_recipe_ShapelessRecipe {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl item_recipe_ShapelessRecipe {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    item_recipe_ShapelessRecipe {
      env: env,
      object: object
    }
  }

  pub fn builder() -> item_recipe_ShapelessRecipe_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/item/recipe/ShapelessRecipe$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapelessRecipe#builder was null") }
    item_recipe_ShapelessRecipe_Builder { env: self.env, object: ret }
  }

  pub fn get_ingredients(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getIngredients", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/item/recipe/ShapelessRecipe#getIngredients was null") }
    ret
  }

}

#[derive(Debug)]
pub struct MinecraftVersion {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl MinecraftVersion {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    MinecraftVersion {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/MinecraftVersion#getName was null") }
    ret
  }

  pub fn is_legacy(&self) -> bool {
    java_method!(self.env, self.object, "isLegacy", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct Nameable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl Nameable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    Nameable {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> text_translation_Translation {
    let ret = java_method!(self.env, self.object, "getName", "()Lorg/spongepowered/api/text/translation/Translation;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Nameable#getName was null") }
    text_translation_Translation { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct network_ChannelBinding_IndexedMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_ChannelBinding_IndexedMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_ChannelBinding_IndexedMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn register_message(&self, param_1: jobject, param_2: i32) {
    java_method!(self.env, self.object, "registerMessage", "(Ljava/lang/Class;I)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn register_message_1(&self, param_1: jobject, param_2: i32, param_3: network_MessageHandler) {
    java_method!(self.env, self.object, "registerMessage", "(Ljava/lang/Class;ILorg/spongepowered/api/network/MessageHandler;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn register_message_2(&self, param_1: jobject, param_2: i32, param_3: Platform_Type, param_4: network_MessageHandler) {
    java_method!(self.env, self.object, "registerMessage", "(Ljava/lang/Class;ILorg/spongepowered/api/Platform$Type;Lorg/spongepowered/api/network/MessageHandler;)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

  pub fn add_handler(&self, param_1: jobject, param_2: Platform_Type, param_3: network_MessageHandler) {
    java_method!(self.env, self.object, "addHandler", "(Ljava/lang/Class;Lorg/spongepowered/api/Platform$Type;Lorg/spongepowered/api/network/MessageHandler;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn add_handler_1(&self, param_1: jobject, param_2: network_MessageHandler) {
    java_method!(self.env, self.object, "addHandler", "(Ljava/lang/Class;Lorg/spongepowered/api/network/MessageHandler;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_to(&self, param_1: entity_living_player_Player, param_2: network_Message) {
    java_method!(self.env, self.object, "sendTo", "(Lorg/spongepowered/api/entity/living/player/Player;Lorg/spongepowered/api/network/Message;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_to_server(&self, param_1: network_Message) {
    java_method!(self.env, self.object, "sendToServer", "(Lorg/spongepowered/api/network/Message;)V", CallVoidMethodA, param_1);
  }

  pub fn send_to_all(&self, param_1: network_Message) {
    java_method!(self.env, self.object, "sendToAll", "(Lorg/spongepowered/api/network/Message;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct network_ChannelBinding_RawDataChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_ChannelBinding_RawDataChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_ChannelBinding_RawDataChannel {
      env: env,
      object: object
    }
  }

  pub fn add_listener(&self, param_1: network_RawDataListener) {
    java_method!(self.env, self.object, "addListener", "(Lorg/spongepowered/api/network/RawDataListener;)V", CallVoidMethodA, param_1);
  }

  pub fn add_listener_1(&self, param_1: Platform_Type, param_2: network_RawDataListener) {
    java_method!(self.env, self.object, "addListener", "(Lorg/spongepowered/api/Platform$Type;Lorg/spongepowered/api/network/RawDataListener;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn remove_listener(&self, param_1: network_RawDataListener) {
    java_method!(self.env, self.object, "removeListener", "(Lorg/spongepowered/api/network/RawDataListener;)V", CallVoidMethodA, param_1);
  }

  pub fn send_to(&self, param_1: entity_living_player_Player, param_2: jobject) {
    java_method!(self.env, self.object, "sendTo", "(Lorg/spongepowered/api/entity/living/player/Player;Ljava/util/function/Consumer;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_to_server(&self, param_1: jobject) {
    java_method!(self.env, self.object, "sendToServer", "(Ljava/util/function/Consumer;)V", CallVoidMethodA, param_1);
  }

  pub fn send_to_all(&self, param_1: jobject) {
    java_method!(self.env, self.object, "sendToAll", "(Ljava/util/function/Consumer;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct network_ChannelBinding {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_ChannelBinding {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_ChannelBinding {
      env: env,
      object: object
    }
  }

  pub fn get_registrar(&self) -> network_ChannelRegistrar {
    let ret = java_method!(self.env, self.object, "getRegistrar", "()Lorg/spongepowered/api/network/ChannelRegistrar;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBinding#getRegistrar was null") }
    network_ChannelRegistrar { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBinding#getName was null") }
    ret
  }

  pub fn get_owner(&self) -> plugin_PluginContainer {
    let ret = java_method!(self.env, self.object, "getOwner", "()Lorg/spongepowered/api/plugin/PluginContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBinding#getOwner was null") }
    plugin_PluginContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct network_ChannelBuf {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_ChannelBuf {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_ChannelBuf {
      env: env,
      object: object
    }
  }

  pub fn get_capacity(&self) -> i32 {
    java_method!(self.env, self.object, "getCapacity", "()I", CallIntMethod)
  }

  pub fn available(&self) -> i32 {
    java_method!(self.env, self.object, "available", "()I", CallIntMethod)
  }

  pub fn order(&self, param_1: jobject) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "order", "(Ljava/nio/ByteOrder;)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#order was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn get_byte_order(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getByteOrder", "()Ljava/nio/ByteOrder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#getByteOrder was null") }
    ret
  }

  pub fn reader_index(&self) -> i32 {
    java_method!(self.env, self.object, "readerIndex", "()I", CallIntMethod)
  }

  pub fn set_read_index(&self, param_1: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setReadIndex", "(I)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setReadIndex was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn writer_index(&self) -> i32 {
    java_method!(self.env, self.object, "writerIndex", "()I", CallIntMethod)
  }

  pub fn set_write_index(&self, param_1: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setWriteIndex", "(I)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setWriteIndex was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_index(&self, param_1: i32, param_2: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setIndex", "(II)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setIndex was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn clear(&self) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "clear", "()Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#clear was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn mark_read(&self) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "markRead", "()Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#markRead was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn mark_write(&self) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "markWrite", "()Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#markWrite was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn reset_read(&self) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "resetRead", "()Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#resetRead was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn reset_write(&self) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "resetWrite", "()Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#resetWrite was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn slice(&self) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "slice", "()Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#slice was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn slice_1(&self, param_1: i32, param_2: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "slice", "(II)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#slice was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn array(&self) -> &[i8] {
    unimplemented!();
  }
  pub fn write_boolean(&self, param_1: bool) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeBoolean", "(Z)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeBoolean was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_boolean(&self, param_1: i32, param_2: bool) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setBoolean", "(IZ)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setBoolean was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_boolean(&self) -> bool {
    java_method!(self.env, self.object, "readBoolean", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_boolean(&self, param_1: i32) -> bool {
    java_method!(self.env, self.object, "getBoolean", "(I)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn write_byte(&self, param_1: i8) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeByte", "(B)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeByte was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_byte(&self, param_1: i32, param_2: i8) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setByte", "(IB)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setByte was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_byte(&self) -> i8 {
    java_method!(self.env, self.object, "readByte", "()B", CallByteMethod)
  }

  pub fn get_byte(&self, param_1: i32) -> i8 {
    java_method!(self.env, self.object, "getByte", "(I)B", CallByteMethodA, param_1)
  }

  pub fn write_byte_array(&self, param_1: i8) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeByteArray", "([B)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeByteArray was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn write_byte_array_1(&self, param_1: i8, param_2: i32, param_3: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeByteArray", "([BII)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeByteArray was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_byte_array(&self, param_1: i32, param_2: i8) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setByteArray", "(I[B)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setByteArray was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_byte_array_1(&self, param_1: i32, param_2: i8, param_3: i32, param_4: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setByteArray", "(I[BII)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setByteArray was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_byte_array(&self) -> &[i8] {
    unimplemented!();
  }
  pub fn read_byte_array_1(&self, param_1: i32) -> &[i8] {
    java_method!(self.env, self.object, "readByteArray", "(I)[B", CryInsideA, param_1)
  }

  pub fn write_bytes(&self, param_1: i8) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeBytes", "([B)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeBytes was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn write_bytes_1(&self, param_1: i8, param_2: i32, param_3: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeBytes", "([BII)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeBytes was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_bytes(&self, param_1: i32, param_2: i8) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setBytes", "(I[B)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setBytes was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_bytes_1(&self, param_1: i32, param_2: i8, param_3: i32, param_4: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setBytes", "(I[BII)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setBytes was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_bytes(&self, param_1: i32) -> &[i8] {
    java_method!(self.env, self.object, "readBytes", "(I)[B", CryInsideA, param_1)
  }

  pub fn read_bytes_1(&self, param_1: i32, param_2: i32) -> &[i8] {
    java_method!(self.env, self.object, "readBytes", "(II)[B", CryInsideA, param_1, param_2)
  }

  pub fn write_short(&self, param_1: i16) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeShort", "(S)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeShort was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_short(&self, param_1: i32, param_2: i16) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setShort", "(IS)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setShort was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_short(&self) -> i16 {
    java_method!(self.env, self.object, "readShort", "()S", CallShortMethod)
  }

  pub fn get_short(&self, param_1: i32) -> i16 {
    java_method!(self.env, self.object, "getShort", "(I)S", CallShortMethodA, param_1)
  }

  pub fn write_char(&self, param_1: char) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeChar", "(C)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeChar was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_char(&self, param_1: i32, param_2: char) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setChar", "(IC)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setChar was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_char(&self) -> char {
    java_method!(self.env, self.object, "readChar", "()C", CallCharMethod) as u8 as char
  }

  pub fn get_char(&self, param_1: i32) -> char {
    java_method!(self.env, self.object, "getChar", "(I)C", CallCharMethodA, param_1) as u8 as char
  }

  pub fn write_integer(&self, param_1: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeInteger", "(I)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeInteger was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_integer(&self, param_1: i32, param_2: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setInteger", "(II)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setInteger was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_integer(&self) -> i32 {
    java_method!(self.env, self.object, "readInteger", "()I", CallIntMethod)
  }

  pub fn get_integer(&self, param_1: i32) -> i32 {
    java_method!(self.env, self.object, "getInteger", "(I)I", CallIntMethodA, param_1)
  }

  pub fn write_long(&self, param_1: i64) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeLong", "(J)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeLong was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_long(&self, param_1: i32, param_2: i64) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setLong", "(IJ)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setLong was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_long(&self) -> i64 {
    java_method!(self.env, self.object, "readLong", "()J", CallLongMethod)
  }

  pub fn get_long(&self, param_1: i32) -> i64 {
    java_method!(self.env, self.object, "getLong", "(I)J", CallLongMethodA, param_1)
  }

  pub fn write_float(&self, param_1: f32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeFloat", "(F)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeFloat was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_float(&self, param_1: i32, param_2: f32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setFloat", "(IF)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setFloat was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_float(&self) -> f32 {
    java_method!(self.env, self.object, "readFloat", "()F", CallFloatMethod)
  }

  pub fn get_float(&self, param_1: i32) -> f32 {
    java_method!(self.env, self.object, "getFloat", "(I)F", CallFloatMethodA, param_1)
  }

  pub fn write_double(&self, param_1: f64) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeDouble", "(D)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeDouble was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_double(&self, param_1: i32, param_2: f64) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setDouble", "(ID)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setDouble was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_double(&self) -> f64 {
    java_method!(self.env, self.object, "readDouble", "()D", CallDoubleMethod)
  }

  pub fn get_double(&self, param_1: i32) -> f64 {
    java_method!(self.env, self.object, "getDouble", "(I)D", CallDoubleMethodA, param_1)
  }

  pub fn write_var_int(&self, param_1: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeVarInt", "(I)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeVarInt was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_var_int(&self, param_1: i32, param_2: i32) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setVarInt", "(II)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setVarInt was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_var_int(&self) -> i32 {
    java_method!(self.env, self.object, "readVarInt", "()I", CallIntMethod)
  }

  pub fn get_var_int(&self, param_1: i32) -> i32 {
    java_method!(self.env, self.object, "getVarInt", "(I)I", CallIntMethodA, param_1)
  }

  pub fn write_string(&self, param_1: jobject) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeString", "(Ljava/lang/String;)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeString was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_string(&self, param_1: i32, param_2: jobject) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setString", "(ILjava/lang/String;)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setString was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "readString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#readString was null") }
    ret
  }

  pub fn get_string(&self, param_1: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "getString", "(I)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#getString was null") }
    ret
  }

  pub fn write_u_t_f(&self, param_1: jobject) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeUTF", "(Ljava/lang/String;)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeUTF was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_u_t_f(&self, param_1: i32, param_2: jobject) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setUTF", "(ILjava/lang/String;)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setUTF was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_u_t_f(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "readUTF", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#readUTF was null") }
    ret
  }

  pub fn get_u_t_f(&self, param_1: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "getUTF", "(I)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#getUTF was null") }
    ret
  }

  pub fn write_unique_id(&self, param_1: jobject) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeUniqueId", "(Ljava/util/UUID;)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeUniqueId was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_unique_id(&self, param_1: i32, param_2: jobject) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setUniqueId", "(ILjava/util/UUID;)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setUniqueId was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_unique_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "readUniqueId", "()Ljava/util/UUID;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#readUniqueId was null") }
    ret
  }

  pub fn get_unique_id(&self, param_1: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "getUniqueId", "(I)Ljava/util/UUID;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#getUniqueId was null") }
    ret
  }

  pub fn write_data_view(&self, param_1: data_DataView) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "writeDataView", "(Lorg/spongepowered/api/data/DataView;)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#writeDataView was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn set_data_view(&self, param_1: i32, param_2: data_DataView) -> network_ChannelBuf {
    let ret = java_method!(self.env, self.object, "setDataView", "(ILorg/spongepowered/api/data/DataView;)Lorg/spongepowered/api/network/ChannelBuf;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#setDataView was null") }
    network_ChannelBuf { env: self.env, object: ret }
  }

  pub fn read_data_view(&self) -> data_DataView {
    let ret = java_method!(self.env, self.object, "readDataView", "()Lorg/spongepowered/api/data/DataView;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#readDataView was null") }
    data_DataView { env: self.env, object: ret }
  }

  pub fn get_data_view(&self, param_1: i32) -> data_DataView {
    let ret = java_method!(self.env, self.object, "getDataView", "(I)Lorg/spongepowered/api/data/DataView;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelBuf#getDataView was null") }
    data_DataView { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct network_ChannelRegistrar {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_ChannelRegistrar {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_ChannelRegistrar {
      env: env,
      object: object
    }
  }

  pub fn create_channel(&self, param_1: jobject, param_2: jobject) -> network_ChannelBinding_IndexedMessageChannel {
    let ret = java_method!(self.env, self.object, "createChannel", "(Ljava/lang/Object;Ljava/lang/String;)Lorg/spongepowered/api/network/ChannelBinding$IndexedMessageChannel;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelRegistrar#createChannel was null") }
    network_ChannelBinding_IndexedMessageChannel { env: self.env, object: ret }
  }

  pub fn create_raw_channel(&self, param_1: jobject, param_2: jobject) -> network_ChannelBinding_RawDataChannel {
    let ret = java_method!(self.env, self.object, "createRawChannel", "(Ljava/lang/Object;Ljava/lang/String;)Lorg/spongepowered/api/network/ChannelBinding$RawDataChannel;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelRegistrar#createRawChannel was null") }
    network_ChannelBinding_RawDataChannel { env: self.env, object: ret }
  }

  pub fn unbind_channel(&self, param_1: network_ChannelBinding) {
    java_method!(self.env, self.object, "unbindChannel", "(Lorg/spongepowered/api/network/ChannelBinding;)V", CallVoidMethodA, param_1);
  }

  pub fn get_registered_channels(&self, param_1: Platform_Type) -> jobject {
    let ret = java_method!(self.env, self.object, "getRegisteredChannels", "(Lorg/spongepowered/api/Platform$Type;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelRegistrar#getRegisteredChannels was null") }
    ret
  }

  pub fn is_channel_available(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "isChannelAvailable", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct network_ChannelRegistrationException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_ChannelRegistrationException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_ChannelRegistrationException {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> network_ChannelRegistrationException {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/network/ChannelRegistrationException", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelRegistrationException#<init> was null") }
    network_ChannelRegistrationException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> network_ChannelRegistrationException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/network/ChannelRegistrationException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelRegistrationException#<init> was null") }
    network_ChannelRegistrationException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject) -> network_ChannelRegistrationException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/spongepowered/api/network/ChannelRegistrationException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelRegistrationException#<init> was null") }
    network_ChannelRegistrationException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: jobject) -> network_ChannelRegistrationException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Throwable;)Lorg/spongepowered/api/network/ChannelRegistrationException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/network/ChannelRegistrationException#<init> was null") }
    network_ChannelRegistrationException { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct network_Message {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_Message {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_Message {
      env: env,
      object: object
    }
  }

  pub fn read_from(&self, param_1: network_ChannelBuf) {
    java_method!(self.env, self.object, "readFrom", "(Lorg/spongepowered/api/network/ChannelBuf;)V", CallVoidMethodA, param_1);
  }

  pub fn write_to(&self, param_1: network_ChannelBuf) {
    java_method!(self.env, self.object, "writeTo", "(Lorg/spongepowered/api/network/ChannelBuf;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct network_MessageHandler {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_MessageHandler {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_MessageHandler {
      env: env,
      object: object
    }
  }

  pub fn handle_message(&self, param_1: network_Message, param_2: network_RemoteConnection, param_3: Platform_Type) {
    java_method!(self.env, self.object, "handleMessage", "(Lorg/spongepowered/api/network/Message;Lorg/spongepowered/api/network/RemoteConnection;Lorg/spongepowered/api/Platform$Type;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}


#[derive(Debug)]
pub struct network_PlayerConnection {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_PlayerConnection {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_PlayerConnection {
      env: env,
      object: object
    }
  }

  pub fn get_player(&self) -> entity_living_player_Player {
    let ret = java_method!(self.env, self.object, "getPlayer", "()Lorg/spongepowered/api/entity/living/player/Player;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/PlayerConnection#getPlayer was null") }
    entity_living_player_Player { env: self.env, object: ret }
  }

  pub fn get_latency(&self) -> i32 {
    java_method!(self.env, self.object, "getLatency", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct network_RawDataListener {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_RawDataListener {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_RawDataListener {
      env: env,
      object: object
    }
  }

  pub fn handle_payload(&self, param_1: network_ChannelBuf, param_2: network_RemoteConnection, param_3: Platform_Type) {
    java_method!(self.env, self.object, "handlePayload", "(Lorg/spongepowered/api/network/ChannelBuf;Lorg/spongepowered/api/network/RemoteConnection;Lorg/spongepowered/api/Platform$Type;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}

#[derive(Debug)]
pub struct network_RemoteConnection {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_RemoteConnection {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_RemoteConnection {
      env: env,
      object: object
    }
  }

  pub fn get_address(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAddress", "()Ljava/net/InetSocketAddress;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/RemoteConnection#getAddress was null") }
    ret
  }

  pub fn get_virtual_host(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getVirtualHost", "()Ljava/net/InetSocketAddress;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/RemoteConnection#getVirtualHost was null") }
    ret
  }

}

#[derive(Debug)]
pub struct network_status_Favicon {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_status_Favicon {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_status_Favicon {
      env: env,
      object: object
    }
  }

  pub fn get_image(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getImage", "()Ljava/awt/image/BufferedImage;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/status/Favicon#getImage was null") }
    ret
  }

}


#[derive(Debug)]
pub struct network_status_StatusClient {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_status_StatusClient {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_status_StatusClient {
      env: env,
      object: object
    }
  }

  pub fn get_address(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAddress", "()Ljava/net/InetSocketAddress;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/status/StatusClient#getAddress was null") }
    ret
  }

  pub fn get_version(&self) -> MinecraftVersion {
    let ret = java_method!(self.env, self.object, "getVersion", "()Lorg/spongepowered/api/MinecraftVersion;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/status/StatusClient#getVersion was null") }
    MinecraftVersion { env: self.env, object: ret }
  }

  pub fn get_virtual_host(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getVirtualHost", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/status/StatusClient#getVirtualHost was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct network_status_StatusResponse_Players {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_status_StatusResponse_Players {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_status_StatusResponse_Players {
      env: env,
      object: object
    }
  }

  pub fn get_online(&self) -> i32 {
    java_method!(self.env, self.object, "getOnline", "()I", CallIntMethod)
  }

  pub fn get_max(&self) -> i32 {
    java_method!(self.env, self.object, "getMax", "()I", CallIntMethod)
  }

  pub fn get_profiles(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getProfiles", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/status/StatusResponse$Players#getProfiles was null") }
    ret
  }

}

#[derive(Debug)]
pub struct network_status_StatusResponse {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl network_status_StatusResponse {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    network_status_StatusResponse {
      env: env,
      object: object
    }
  }

  pub fn get_description(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getDescription", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/status/StatusResponse#getDescription was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_players(&self) -> Option<network_status_StatusResponse_Players> {
    let ret = java_method!(self.env, self.object, "getPlayers", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/status/StatusResponse#getPlayers was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(network_status_StatusResponse_Players { env: self.env, object: unwrapped }) }
  }

  pub fn get_version(&self) -> MinecraftVersion {
    let ret = java_method!(self.env, self.object, "getVersion", "()Lorg/spongepowered/api/MinecraftVersion;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/status/StatusResponse#getVersion was null") }
    MinecraftVersion { env: self.env, object: ret }
  }

  pub fn get_favicon(&self) -> Option<network_status_Favicon> {
    let ret = java_method!(self.env, self.object, "getFavicon", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/network/status/StatusResponse#getFavicon was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(network_status_Favicon { env: self.env, object: unwrapped }) }
  }

}


#[derive(Debug)]
pub struct Platform_Type {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl Platform_Type {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    Platform_Type {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[Platform_Type] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> Platform_Type {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/Platform$Type;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Platform$Type#valueOf was null") }
    Platform_Type { env: self.env, object: ret }
  }

  pub fn is_server(&self) -> bool {
    java_method!(self.env, self.object, "isServer", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_client(&self) -> bool {
    java_method!(self.env, self.object, "isClient", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_known(&self) -> bool {
    java_method!(self.env, self.object, "isKnown", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct Platform {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl Platform {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    Platform {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> Platform_Type {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/Platform$Type;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Platform#getType was null") }
    Platform_Type { env: self.env, object: ret }
  }

  pub fn get_execution_type(&self) -> Platform_Type {
    let ret = java_method!(self.env, self.object, "getExecutionType", "()Lorg/spongepowered/api/Platform$Type;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Platform#getExecutionType was null") }
    Platform_Type { env: self.env, object: ret }
  }

  pub fn get_api(&self) -> plugin_PluginContainer {
    let ret = java_method!(self.env, self.object, "getApi", "()Lorg/spongepowered/api/plugin/PluginContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Platform#getApi was null") }
    plugin_PluginContainer { env: self.env, object: ret }
  }

  pub fn get_implementation(&self) -> plugin_PluginContainer {
    let ret = java_method!(self.env, self.object, "getImplementation", "()Lorg/spongepowered/api/plugin/PluginContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Platform#getImplementation was null") }
    plugin_PluginContainer { env: self.env, object: ret }
  }

  pub fn get_minecraft_version(&self) -> MinecraftVersion {
    let ret = java_method!(self.env, self.object, "getMinecraftVersion", "()Lorg/spongepowered/api/MinecraftVersion;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Platform#getMinecraftVersion was null") }
    MinecraftVersion { env: self.env, object: ret }
  }

  pub fn as_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asMap", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Platform#asMap was null") }
    ret
  }

}

#[derive(Debug)]
pub struct plugin_Dependency {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl plugin_Dependency {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    plugin_Dependency {
      env: env,
      object: object
    }
  }

  pub fn id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "id", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/Dependency#id was null") }
    ret
  }

  pub fn version(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "version", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/Dependency#version was null") }
    ret
  }

  pub fn optional(&self) -> bool {
    java_method!(self.env, self.object, "optional", "()Z", CallBooleanMethod) == 1
  }

}


#[derive(Debug)]
pub struct plugin_Plugin {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl plugin_Plugin {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    plugin_Plugin {
      env: env,
      object: object
    }
  }

  pub fn id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "id", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/Plugin#id was null") }
    ret
  }

  pub fn name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "name", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/Plugin#name was null") }
    ret
  }

  pub fn version(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "version", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/Plugin#version was null") }
    ret
  }

  pub fn dependencies(&self) -> &[plugin_Dependency] {
    unimplemented!();
  }
  pub fn description(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "description", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/Plugin#description was null") }
    ret
  }

  pub fn url(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "url", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/Plugin#url was null") }
    ret
  }

  pub fn authors(&self) -> &[jobject] {
    unimplemented!();
  }
  pub fn assets(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "assets", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/Plugin#assets was null") }
    ret
  }

}

#[derive(Debug)]
pub struct plugin_PluginContainer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl plugin_PluginContainer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    plugin_PluginContainer {
      env: env,
      object: object
    }
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getId was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getName was null") }
    ret
  }

  pub fn get_version(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getVersion", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getVersion was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_description(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getDescription", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getDescription was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_url(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getUrl", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getUrl was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_authors(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAuthors", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getAuthors was null") }
    ret
  }

  pub fn get_asset_directory(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getAssetDirectory", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getAssetDirectory was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_asset(&self, param_1: jobject) -> Option<asset_Asset> {
    let ret = java_method!(self.env, self.object, "getAsset", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getAsset was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(asset_Asset { env: self.env, object: unwrapped }) }
  }

  pub fn get_source(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSource", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getSource was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_instance(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getInstance", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getInstance was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_logger(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getLogger", "()Lorg/slf4j/Logger;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginContainer#getLogger was null") }
    ret
  }

}

#[derive(Debug)]
pub struct plugin_PluginManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl plugin_PluginManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    plugin_PluginManager {
      env: env,
      object: object
    }
  }

  pub fn from_instance(&self, param_1: jobject) -> Option<plugin_PluginContainer> {
    let ret = java_method!(self.env, self.object, "fromInstance", "(Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginManager#fromInstance was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(plugin_PluginContainer { env: self.env, object: unwrapped }) }
  }

  pub fn get_plugin(&self, param_1: jobject) -> Option<plugin_PluginContainer> {
    let ret = java_method!(self.env, self.object, "getPlugin", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginManager#getPlugin was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(plugin_PluginContainer { env: self.env, object: unwrapped }) }
  }

  pub fn get_plugins(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPlugins", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/plugin/PluginManager#getPlugins was null") }
    ret
  }

  pub fn is_loaded(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "isLoaded", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct profile_GameProfile {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl profile_GameProfile {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    profile_GameProfile {
      env: env,
      object: object
    }
  }

  pub fn of(param_1: jobject, param_2: jobject) -> profile_GameProfile {
    let ret = java_method!(self.env, "of", "(Ljava/util/UUID;Ljava/lang/String;)Lorg/spongepowered/api/profile/GameProfile;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfile#of was null") }
    profile_GameProfile { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfile#getName was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_property_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPropertyMap", "()Lcom/google/common/collect/Multimap;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfile#getPropertyMap was null") }
    ret
  }

  pub fn is_filled(&self) -> bool {
    java_method!(self.env, self.object, "isFilled", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct profile_GameProfileCache {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl profile_GameProfileCache {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    profile_GameProfileCache {
      env: env,
      object: object
    }
  }

  pub fn add(&self, param_1: profile_GameProfile) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/profile/GameProfile;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_1(&self, param_1: profile_GameProfile, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/profile/GameProfile;Ljava/util/Date;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn add_2(&self, param_1: profile_GameProfile, param_2: bool, param_3: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/profile/GameProfile;ZLjava/util/Date;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn remove(&self, param_1: profile_GameProfile) -> bool {
    java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/profile/GameProfile;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#remove was null") }
    ret
  }

  pub fn clear(&self) {
    java_method!(self.env, self.object, "clear", "()V", CallVoidMethod);
  }

  pub fn get_by_id(&self, param_1: jobject) -> Option<profile_GameProfile> {
    let ret = java_method!(self.env, self.object, "getById", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#getById was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(profile_GameProfile { env: self.env, object: unwrapped }) }
  }

  pub fn get_by_ids(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getByIds", "(Ljava/lang/Iterable;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#getByIds was null") }
    ret
  }

  pub fn lookup_by_id(&self, param_1: jobject) -> Option<profile_GameProfile> {
    let ret = java_method!(self.env, self.object, "lookupById", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#lookupById was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(profile_GameProfile { env: self.env, object: unwrapped }) }
  }

  pub fn lookup_by_ids(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "lookupByIds", "(Ljava/lang/Iterable;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#lookupByIds was null") }
    ret
  }

  pub fn get_or_lookup_by_id(&self, param_1: jobject) -> Option<profile_GameProfile> {
    let ret = java_method!(self.env, self.object, "getOrLookupById", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#getOrLookupById was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(profile_GameProfile { env: self.env, object: unwrapped }) }
  }

  pub fn get_or_lookup_by_ids(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getOrLookupByIds", "(Ljava/lang/Iterable;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#getOrLookupByIds was null") }
    ret
  }

  pub fn get_by_name(&self, param_1: jobject) -> Option<profile_GameProfile> {
    let ret = java_method!(self.env, self.object, "getByName", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#getByName was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(profile_GameProfile { env: self.env, object: unwrapped }) }
  }

  pub fn get_by_names(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getByNames", "(Ljava/lang/Iterable;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#getByNames was null") }
    ret
  }

  pub fn lookup_by_name(&self, param_1: jobject) -> Option<profile_GameProfile> {
    let ret = java_method!(self.env, self.object, "lookupByName", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#lookupByName was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(profile_GameProfile { env: self.env, object: unwrapped }) }
  }

  pub fn lookup_by_names(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "lookupByNames", "(Ljava/lang/Iterable;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#lookupByNames was null") }
    ret
  }

  pub fn get_or_lookup_by_name(&self, param_1: jobject) -> Option<profile_GameProfile> {
    let ret = java_method!(self.env, self.object, "getOrLookupByName", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#getOrLookupByName was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(profile_GameProfile { env: self.env, object: unwrapped }) }
  }

  pub fn get_or_lookup_by_names(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getOrLookupByNames", "(Ljava/lang/Iterable;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#getOrLookupByNames was null") }
    ret
  }

  pub fn fill_profile(&self, param_1: profile_GameProfile) -> Option<profile_GameProfile> {
    let ret = java_method!(self.env, self.object, "fillProfile", "(Lorg/spongepowered/api/profile/GameProfile;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#fillProfile was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(profile_GameProfile { env: self.env, object: unwrapped }) }
  }

  pub fn fill_profile_1(&self, param_1: profile_GameProfile, param_2: bool) -> Option<profile_GameProfile> {
    let ret = java_method!(self.env, self.object, "fillProfile", "(Lorg/spongepowered/api/profile/GameProfile;Z)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#fillProfile was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(profile_GameProfile { env: self.env, object: unwrapped }) }
  }

  pub fn get_profiles(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getProfiles", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#getProfiles was null") }
    ret
  }

  pub fn match_(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "match", "(Ljava/lang/String;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileCache#match was null") }
    ret
  }

}

#[derive(Debug)]
pub struct profile_GameProfileManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl profile_GameProfileManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    profile_GameProfileManager {
      env: env,
      object: object
    }
  }

  pub fn create_profile(&self, param_1: jobject, param_2: jobject) -> profile_GameProfile {
    let ret = java_method!(self.env, self.object, "createProfile", "(Ljava/util/UUID;Ljava/lang/String;)Lorg/spongepowered/api/profile/GameProfile;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#createProfile was null") }
    profile_GameProfile { env: self.env, object: ret }
  }

  pub fn create_profile_property(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> profile_property_ProfileProperty {
    let ret = java_method!(self.env, self.object, "createProfileProperty", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/spongepowered/api/profile/property/ProfileProperty;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#createProfileProperty was null") }
    profile_property_ProfileProperty { env: self.env, object: ret }
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/UUID;)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#get was null") }
    ret
  }

  pub fn get_1(&self, param_1: jobject, param_2: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/UUID;Z)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#get was null") }
    ret
  }

  pub fn get_all_by_id(&self, param_1: jobject, param_2: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllById", "(Ljava/lang/Iterable;Z)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#getAllById was null") }
    ret
  }

  pub fn get_2(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#get was null") }
    ret
  }

  pub fn get_3(&self, param_1: jobject, param_2: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;Z)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#get was null") }
    ret
  }

  pub fn get_all_by_name(&self, param_1: jobject, param_2: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllByName", "(Ljava/lang/Iterable;Z)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#getAllByName was null") }
    ret
  }

  pub fn fill(&self, param_1: profile_GameProfile) -> jobject {
    let ret = java_method!(self.env, self.object, "fill", "(Lorg/spongepowered/api/profile/GameProfile;)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#fill was null") }
    ret
  }

  pub fn fill_1(&self, param_1: profile_GameProfile, param_2: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "fill", "(Lorg/spongepowered/api/profile/GameProfile;Z)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#fill was null") }
    ret
  }

  pub fn fill_2(&self, param_1: profile_GameProfile, param_2: bool, param_3: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "fill", "(Lorg/spongepowered/api/profile/GameProfile;ZZ)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#fill was null") }
    ret
  }

  pub fn get_cache(&self) -> profile_GameProfileCache {
    let ret = java_method!(self.env, self.object, "getCache", "()Lorg/spongepowered/api/profile/GameProfileCache;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#getCache was null") }
    profile_GameProfileCache { env: self.env, object: ret }
  }

  pub fn set_cache(&self, param_1: profile_GameProfileCache) {
    java_method!(self.env, self.object, "setCache", "(Lorg/spongepowered/api/profile/GameProfileCache;)V", CallVoidMethodA, param_1);
  }

  pub fn get_default_cache(&self) -> profile_GameProfileCache {
    let ret = java_method!(self.env, self.object, "getDefaultCache", "()Lorg/spongepowered/api/profile/GameProfileCache;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#getDefaultCache was null") }
    profile_GameProfileCache { env: self.env, object: ret }
  }

  pub fn get_cached_profiles(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCachedProfiles", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#getCachedProfiles was null") }
    ret
  }

  pub fn match_(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "match", "(Ljava/lang/String;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/GameProfileManager#match was null") }
    ret
  }

}


#[derive(Debug)]
pub struct profile_ProfileNotFoundException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl profile_ProfileNotFoundException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    profile_ProfileNotFoundException {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> profile_ProfileNotFoundException {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/profile/ProfileNotFoundException", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/ProfileNotFoundException#<init> was null") }
    profile_ProfileNotFoundException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> profile_ProfileNotFoundException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/profile/ProfileNotFoundException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/ProfileNotFoundException#<init> was null") }
    profile_ProfileNotFoundException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject) -> profile_ProfileNotFoundException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Throwable;)Lorg/spongepowered/api/profile/ProfileNotFoundException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/ProfileNotFoundException#<init> was null") }
    profile_ProfileNotFoundException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: jobject, param_2: jobject) -> profile_ProfileNotFoundException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/spongepowered/api/profile/ProfileNotFoundException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/profile/ProfileNotFoundException#<init> was null") }
    profile_ProfileNotFoundException { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct profile_property_ProfileProperty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl profile_property_ProfileProperty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    profile_property_ProfileProperty {
      env: env,
      object: object
    }
  }

  pub fn of(param_1: jobject, param_2: jobject) -> profile_property_ProfileProperty {
    let ret = java_method!(self.env, "of", "(Ljava/lang/String;Ljava/lang/String;)Lorg/spongepowered/api/profile/property/ProfileProperty;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/profile/property/ProfileProperty#of was null") }
    profile_property_ProfileProperty { env: self.env, object: ret }
  }

  pub fn of_1(param_1: jobject, param_2: jobject, param_3: jobject) -> profile_property_ProfileProperty {
    let ret = java_method!(self.env, "of", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/spongepowered/api/profile/property/ProfileProperty;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/profile/property/ProfileProperty#of was null") }
    profile_property_ProfileProperty { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/property/ProfileProperty#getName was null") }
    ret
  }

  pub fn get_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValue", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/property/ProfileProperty#getValue was null") }
    ret
  }

  pub fn get_signature(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSignature", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/profile/property/ProfileProperty#getSignature was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn has_signature(&self) -> bool {
    java_method!(self.env, self.object, "hasSignature", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct registry_AdditionalCatalogRegistryModule {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_AdditionalCatalogRegistryModule {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_AdditionalCatalogRegistryModule {
      env: env,
      object: object
    }
  }

  pub fn register_additional_catalog(&self, param_1: CatalogType) {
    java_method!(self.env, self.object, "registerAdditionalCatalog", "(Lorg/spongepowered/api/CatalogType;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct registry_AlternateCatalogRegistryModule {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_AlternateCatalogRegistryModule {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_AlternateCatalogRegistryModule {
      env: env,
      object: object
    }
  }

  pub fn provide_catalog_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "provideCatalogMap", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/AlternateCatalogRegistryModule#provideCatalogMap was null") }
    ret
  }

}

#[derive(Debug)]
pub struct registry_CatalogRegistryModule {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_CatalogRegistryModule {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_CatalogRegistryModule {
      env: env,
      object: object
    }
  }

  pub fn get_by_id(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getById", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/registry/CatalogRegistryModule#getById was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/CatalogRegistryModule#getAll was null") }
    ret
  }

}

#[derive(Debug)]
pub struct registry_CatalogTypeAlreadyRegisteredException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_CatalogTypeAlreadyRegisteredException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_CatalogTypeAlreadyRegisteredException {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> registry_CatalogTypeAlreadyRegisteredException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/registry/CatalogTypeAlreadyRegisteredException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/registry/CatalogTypeAlreadyRegisteredException#<init> was null") }
    registry_CatalogTypeAlreadyRegisteredException { env: self.env, object: ret }
  }

  pub fn get_already_registered_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAlreadyRegisteredId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/CatalogTypeAlreadyRegisteredException#getAlreadyRegisteredId was null") }
    ret
  }

}

#[derive(Debug)]
pub struct registry_ExtraClassCatalogRegistryModule {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_ExtraClassCatalogRegistryModule {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_ExtraClassCatalogRegistryModule {
      env: env,
      object: object
    }
  }

  pub fn has_registration_for(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "hasRegistrationFor", "(Ljava/lang/Class;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_for_class(&self, param_1: jobject) -> CatalogType {
    let ret = java_method!(self.env, self.object, "getForClass", "(Ljava/lang/Class;)Lorg/spongepowered/api/CatalogType;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/registry/ExtraClassCatalogRegistryModule#getForClass was null") }
    CatalogType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct registry_FactoryRegistry {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_FactoryRegistry {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_FactoryRegistry {
      env: env,
      object: object
    }
  }

  pub fn get_factory_owner(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getFactoryOwner", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/FactoryRegistry#getFactoryOwner was null") }
    ret
  }

  pub fn provide_factory(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "provideFactory", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/FactoryRegistry#provideFactory was null") }
    ret
  }

  pub fn initialize(&self) {
    java_method!(self.env, self.object, "initialize", "()V", CallVoidMethod);
  }

}


#[derive(Debug)]
pub struct registry_RegistrationPhase {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_RegistrationPhase {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_RegistrationPhase {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[registry_RegistrationPhase] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> registry_RegistrationPhase {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/registry/RegistrationPhase;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/RegistrationPhase#valueOf was null") }
    registry_RegistrationPhase { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct registry_RegistryException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_RegistryException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_RegistryException {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> registry_RegistryException {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/registry/RegistryException", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/RegistryException#<init> was null") }
    registry_RegistryException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> registry_RegistryException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/registry/RegistryException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/registry/RegistryException#<init> was null") }
    registry_RegistryException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject) -> registry_RegistryException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/spongepowered/api/registry/RegistryException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/registry/RegistryException#<init> was null") }
    registry_RegistryException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: jobject) -> registry_RegistryException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Throwable;)Lorg/spongepowered/api/registry/RegistryException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/registry/RegistryException#<init> was null") }
    registry_RegistryException { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct registry_RegistryModule {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_RegistryModule {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_RegistryModule {
      env: env,
      object: object
    }
  }

  pub fn register_defaults(&self) {
    java_method!(self.env, self.object, "registerDefaults", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct registry_RegistryModuleAlreadyRegisteredException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_RegistryModuleAlreadyRegisteredException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_RegistryModuleAlreadyRegisteredException {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: registry_RegistryModule) -> registry_RegistryModuleAlreadyRegisteredException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Lorg/spongepowered/api/registry/RegistryModule;)Lorg/spongepowered/api/registry/RegistryModuleAlreadyRegisteredException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/registry/RegistryModuleAlreadyRegisteredException#<init> was null") }
    registry_RegistryModuleAlreadyRegisteredException { env: self.env, object: ret }
  }

  pub fn get_module(&self) -> registry_RegistryModule {
    let ret = java_method!(self.env, self.object, "getModule", "()Lorg/spongepowered/api/registry/RegistryModule;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/RegistryModuleAlreadyRegisteredException#getModule was null") }
    registry_RegistryModule { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct registry_util_AdditionalRegistration {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_util_AdditionalRegistration {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_util_AdditionalRegistration {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> registry_RegistrationPhase {
    let ret = java_method!(self.env, self.object, "value", "()Lorg/spongepowered/api/registry/RegistrationPhase;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/util/AdditionalRegistration#value was null") }
    registry_RegistrationPhase { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct registry_util_CustomCatalogRegistration {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_util_CustomCatalogRegistration {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_util_CustomCatalogRegistration {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct registry_util_DelayedRegistration {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_util_DelayedRegistration {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_util_DelayedRegistration {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> registry_RegistrationPhase {
    let ret = java_method!(self.env, self.object, "value", "()Lorg/spongepowered/api/registry/RegistrationPhase;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/util/DelayedRegistration#value was null") }
    registry_RegistrationPhase { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct registry_util_OverrideRegistration {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_util_OverrideRegistration {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_util_OverrideRegistration {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/util/OverrideRegistration#value was null") }
    ret
  }

}


#[derive(Debug)]
pub struct registry_util_PluginProvidedRegistryModule {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_util_PluginProvidedRegistryModule {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_util_PluginProvidedRegistryModule {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct registry_util_RegisterCatalog {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_util_RegisterCatalog {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_util_RegisterCatalog {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/registry/util/RegisterCatalog#value was null") }
    ret
  }

  pub fn ignored_fields(&self) -> &[jobject] {
    unimplemented!();
  }
}

#[derive(Debug)]
pub struct registry_util_RegistrationDependency {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl registry_util_RegistrationDependency {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    registry_util_RegistrationDependency {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> &[jobject] {
    unimplemented!();
  }
}

#[derive(Debug)]
pub struct resourcepack_ResourcePack {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl resourcepack_ResourcePack {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    resourcepack_ResourcePack {
      env: env,
      object: object
    }
  }

  pub fn get_uri(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getUri", "()Ljava/net/URI;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/resourcepack/ResourcePack#getUri was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/resourcepack/ResourcePack#getName was null") }
    ret
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/resourcepack/ResourcePack#getId was null") }
    ret
  }

  pub fn get_hash(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getHash", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/resourcepack/ResourcePack#getHash was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct resourcepack_ResourcePackFactory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl resourcepack_ResourcePackFactory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    resourcepack_ResourcePackFactory {
      env: env,
      object: object
    }
  }

  pub fn from_uri(&self, param_1: jobject) -> resourcepack_ResourcePack {
    let ret = java_method!(self.env, self.object, "fromUri", "(Ljava/net/URI;)Lorg/spongepowered/api/resourcepack/ResourcePack;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/resourcepack/ResourcePackFactory#fromUri was null") }
    resourcepack_ResourcePack { env: self.env, object: ret }
  }

  pub fn from_uri_unchecked(&self, param_1: jobject) -> resourcepack_ResourcePack {
    let ret = java_method!(self.env, self.object, "fromUriUnchecked", "(Ljava/net/URI;)Lorg/spongepowered/api/resourcepack/ResourcePack;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/resourcepack/ResourcePackFactory#fromUriUnchecked was null") }
    resourcepack_ResourcePack { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct resourcepack_ResourcePacks {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl resourcepack_ResourcePacks {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    resourcepack_ResourcePacks {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> resourcepack_ResourcePacks {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/resourcepack/ResourcePacks", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/resourcepack/ResourcePacks#<init> was null") }
    resourcepack_ResourcePacks { env: self.env, object: ret }
  }

  pub fn from_uri(param_1: jobject) -> resourcepack_ResourcePack {
    let ret = java_method!(self.env, "fromUri", "(Ljava/net/URI;)Lorg/spongepowered/api/resourcepack/ResourcePack;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/resourcepack/ResourcePacks#fromUri was null") }
    resourcepack_ResourcePack { env: self.env, object: ret }
  }

  pub fn from_uri_unchecked(param_1: jobject) -> resourcepack_ResourcePack {
    let ret = java_method!(self.env, "fromUriUnchecked", "(Ljava/net/URI;)Lorg/spongepowered/api/resourcepack/ResourcePack;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/resourcepack/ResourcePacks#fromUriUnchecked was null") }
    resourcepack_ResourcePack { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct scheduler_AsynchronousExecutor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scheduler_AsynchronousExecutor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scheduler_AsynchronousExecutor {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct scheduler_Scheduler {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scheduler_Scheduler {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scheduler_Scheduler {
      env: env,
      object: object
    }
  }

  pub fn create_task_builder(&self) -> scheduler_Task_Builder {
    let ret = java_method!(self.env, self.object, "createTaskBuilder", "()Lorg/spongepowered/api/scheduler/Task$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Scheduler#createTaskBuilder was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn get_task_by_id(&self, param_1: jobject) -> Option<scheduler_Task> {
    let ret = java_method!(self.env, self.object, "getTaskById", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Scheduler#getTaskById was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(scheduler_Task { env: self.env, object: unwrapped }) }
  }

  pub fn get_tasks_by_name(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getTasksByName", "(Ljava/lang/String;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Scheduler#getTasksByName was null") }
    ret
  }

  pub fn get_scheduled_tasks(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getScheduledTasks", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Scheduler#getScheduledTasks was null") }
    ret
  }

  pub fn get_scheduled_tasks_1(&self, param_1: bool) -> jobject {
    let ret = java_method!(self.env, self.object, "getScheduledTasks", "(Z)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Scheduler#getScheduledTasks was null") }
    ret
  }

  pub fn get_scheduled_tasks_2(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getScheduledTasks", "(Ljava/lang/Object;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Scheduler#getScheduledTasks was null") }
    ret
  }

  pub fn get_preferred_tick_interval(&self) -> i32 {
    java_method!(self.env, self.object, "getPreferredTickInterval", "()I", CallIntMethod)
  }

  pub fn create_sync_executor(&self, param_1: jobject) -> scheduler_SpongeExecutorService {
    let ret = java_method!(self.env, self.object, "createSyncExecutor", "(Ljava/lang/Object;)Lorg/spongepowered/api/scheduler/SpongeExecutorService;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Scheduler#createSyncExecutor was null") }
    scheduler_SpongeExecutorService { env: self.env, object: ret }
  }

  pub fn create_async_executor(&self, param_1: jobject) -> scheduler_SpongeExecutorService {
    let ret = java_method!(self.env, self.object, "createAsyncExecutor", "(Ljava/lang/Object;)Lorg/spongepowered/api/scheduler/SpongeExecutorService;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Scheduler#createAsyncExecutor was null") }
    scheduler_SpongeExecutorService { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct scheduler_SpongeExecutorService_SpongeFuture {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scheduler_SpongeExecutorService_SpongeFuture {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scheduler_SpongeExecutorService_SpongeFuture {
      env: env,
      object: object
    }
  }

  pub fn get_task(&self) -> scheduler_Task {
    let ret = java_method!(self.env, self.object, "getTask", "()Lorg/spongepowered/api/scheduler/Task;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/SpongeExecutorService$SpongeFuture#getTask was null") }
    scheduler_Task { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct scheduler_SpongeExecutorService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scheduler_SpongeExecutorService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scheduler_SpongeExecutorService {
      env: env,
      object: object
    }
  }

  pub fn schedule(&self, param_1: jobject, param_2: i64, param_3: jobject) -> scheduler_SpongeExecutorService_SpongeFuture {
    let ret = java_method!(self.env, self.object, "schedule", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/spongepowered/api/scheduler/SpongeExecutorService$SpongeFuture;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/SpongeExecutorService#schedule was null") }
    scheduler_SpongeExecutorService_SpongeFuture { env: self.env, object: ret }
  }

  pub fn schedule_1(&self, param_1: jobject, param_2: i64, param_3: jobject) -> scheduler_SpongeExecutorService_SpongeFuture {
    let ret = java_method!(self.env, self.object, "schedule", "(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Lorg/spongepowered/api/scheduler/SpongeExecutorService$SpongeFuture;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/SpongeExecutorService#schedule was null") }
    scheduler_SpongeExecutorService_SpongeFuture { env: self.env, object: ret }
  }

  pub fn schedule_at_fixed_rate(&self, param_1: jobject, param_2: i64, param_3: i64, param_4: jobject) -> scheduler_SpongeExecutorService_SpongeFuture {
    let ret = java_method!(self.env, self.object, "scheduleAtFixedRate", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lorg/spongepowered/api/scheduler/SpongeExecutorService$SpongeFuture;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/SpongeExecutorService#scheduleAtFixedRate was null") }
    scheduler_SpongeExecutorService_SpongeFuture { env: self.env, object: ret }
  }

  pub fn schedule_with_fixed_delay(&self, param_1: jobject, param_2: i64, param_3: i64, param_4: jobject) -> scheduler_SpongeExecutorService_SpongeFuture {
    let ret = java_method!(self.env, self.object, "scheduleWithFixedDelay", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lorg/spongepowered/api/scheduler/SpongeExecutorService$SpongeFuture;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/SpongeExecutorService#scheduleWithFixedDelay was null") }
    scheduler_SpongeExecutorService_SpongeFuture { env: self.env, object: ret }
  }

  pub fn schedule_with_fixed_delay_1(&self, param_1: jobject, param_2: i64, param_3: i64, param_4: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "scheduleWithFixedDelay", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/SpongeExecutorService#scheduleWithFixedDelay was null") }
    ret
  }

  pub fn schedule_at_fixed_rate_1(&self, param_1: jobject, param_2: i64, param_3: i64, param_4: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "scheduleAtFixedRate", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/SpongeExecutorService#scheduleAtFixedRate was null") }
    ret
  }

  pub fn schedule_2(&self, param_1: jobject, param_2: i64, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "schedule", "(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/SpongeExecutorService#schedule was null") }
    ret
  }

  pub fn schedule_3(&self, param_1: jobject, param_2: i64, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "schedule", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/SpongeExecutorService#schedule was null") }
    ret
  }

}

#[derive(Debug)]
pub struct scheduler_SynchronousExecutor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scheduler_SynchronousExecutor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scheduler_SynchronousExecutor {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct scheduler_Task_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scheduler_Task_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scheduler_Task_Builder {
      env: env,
      object: object
    }
  }

  pub fn async(&self) -> scheduler_Task_Builder {
    let ret = java_method!(self.env, self.object, "async", "()Lorg/spongepowered/api/scheduler/Task$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task$Builder#async was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn execute(&self, param_1: jobject) -> scheduler_Task_Builder {
    let ret = java_method!(self.env, self.object, "execute", "(Ljava/lang/Runnable;)Lorg/spongepowered/api/scheduler/Task$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task$Builder#execute was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn execute_1(&self, param_1: jobject) -> scheduler_Task_Builder {
    let ret = java_method!(self.env, self.object, "execute", "(Ljava/util/function/Consumer;)Lorg/spongepowered/api/scheduler/Task$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task$Builder#execute was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn delay(&self, param_1: i64, param_2: jobject) -> scheduler_Task_Builder {
    let ret = java_method!(self.env, self.object, "delay", "(JLjava/util/concurrent/TimeUnit;)Lorg/spongepowered/api/scheduler/Task$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task$Builder#delay was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn delay_ticks(&self, param_1: i64) -> scheduler_Task_Builder {
    let ret = java_method!(self.env, self.object, "delayTicks", "(J)Lorg/spongepowered/api/scheduler/Task$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task$Builder#delayTicks was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn interval(&self, param_1: i64, param_2: jobject) -> scheduler_Task_Builder {
    let ret = java_method!(self.env, self.object, "interval", "(JLjava/util/concurrent/TimeUnit;)Lorg/spongepowered/api/scheduler/Task$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task$Builder#interval was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn interval_ticks(&self, param_1: i64) -> scheduler_Task_Builder {
    let ret = java_method!(self.env, self.object, "intervalTicks", "(J)Lorg/spongepowered/api/scheduler/Task$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task$Builder#intervalTicks was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn name(&self, param_1: jobject) -> scheduler_Task_Builder {
    let ret = java_method!(self.env, self.object, "name", "(Ljava/lang/String;)Lorg/spongepowered/api/scheduler/Task$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task$Builder#name was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn submit(&self, param_1: jobject) -> scheduler_Task {
    let ret = java_method!(self.env, self.object, "submit", "(Ljava/lang/Object;)Lorg/spongepowered/api/scheduler/Task;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task$Builder#submit was null") }
    scheduler_Task { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct scheduler_Task {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scheduler_Task {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scheduler_Task {
      env: env,
      object: object
    }
  }

  pub fn builder() -> scheduler_Task_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/scheduler/Task$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task#builder was null") }
    scheduler_Task_Builder { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task#getName was null") }
    ret
  }

  pub fn get_owner(&self) -> plugin_PluginContainer {
    let ret = java_method!(self.env, self.object, "getOwner", "()Lorg/spongepowered/api/plugin/PluginContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task#getOwner was null") }
    plugin_PluginContainer { env: self.env, object: ret }
  }

  pub fn get_delay(&self) -> i64 {
    java_method!(self.env, self.object, "getDelay", "()J", CallLongMethod)
  }

  pub fn get_interval(&self) -> i64 {
    java_method!(self.env, self.object, "getInterval", "()J", CallLongMethod)
  }

  pub fn cancel(&self) -> bool {
    java_method!(self.env, self.object, "cancel", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_consumer(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getConsumer", "()Ljava/util/function/Consumer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scheduler/Task#getConsumer was null") }
    ret
  }

  pub fn is_asynchronous(&self) -> bool {
    java_method!(self.env, self.object, "isAsynchronous", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct scoreboard_critieria_Criteria {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_critieria_Criteria {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_critieria_Criteria {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct scoreboard_critieria_Criterion {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_critieria_Criterion {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_critieria_Criterion {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/critieria/Criterion#getName was null") }
    ret
  }

}


#[derive(Debug)]
pub struct scoreboard_displayslot_DisplaySlot_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_displayslot_DisplaySlot_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_displayslot_DisplaySlot_Builder {
      env: env,
      object: object
    }
  }

  pub fn sidebar_team_color(&self, param_1: text_format_TextColor) -> scoreboard_displayslot_DisplaySlot_Builder {
    let ret = java_method!(self.env, self.object, "sidebarTeamColor", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/scoreboard/displayslot/DisplaySlot$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/displayslot/DisplaySlot$Builder#sidebarTeamColor was null") }
    scoreboard_displayslot_DisplaySlot_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> scoreboard_displayslot_DisplaySlot {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/scoreboard/displayslot/DisplaySlot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/displayslot/DisplaySlot$Builder#build was null") }
    scoreboard_displayslot_DisplaySlot { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct scoreboard_displayslot_DisplaySlot {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_displayslot_DisplaySlot {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_displayslot_DisplaySlot {
      env: env,
      object: object
    }
  }

  pub fn get_team_color(&self) -> Option<text_format_TextColor> {
    let ret = java_method!(self.env, self.object, "getTeamColor", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/displayslot/DisplaySlot#getTeamColor was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_format_TextColor { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct scoreboard_displayslot_DisplaySlots {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_displayslot_DisplaySlots {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_displayslot_DisplaySlots {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct scoreboard_objective_displaymode_ObjectiveDisplayMode {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_objective_displaymode_ObjectiveDisplayMode {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_objective_displaymode_ObjectiveDisplayMode {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct scoreboard_objective_displaymode_ObjectiveDisplayModes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_objective_displaymode_ObjectiveDisplayModes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_objective_displaymode_ObjectiveDisplayModes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct scoreboard_objective_Objective_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_objective_Objective_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_objective_Objective_Builder {
      env: env,
      object: object
    }
  }

  pub fn name(&self, param_1: jobject) -> scoreboard_objective_Objective_Builder {
    let ret = java_method!(self.env, self.object, "name", "(Ljava/lang/String;)Lorg/spongepowered/api/scoreboard/objective/Objective$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective$Builder#name was null") }
    scoreboard_objective_Objective_Builder { env: self.env, object: ret }
  }

  pub fn display_name(&self, param_1: text_Text) -> scoreboard_objective_Objective_Builder {
    let ret = java_method!(self.env, self.object, "displayName", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/scoreboard/objective/Objective$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective$Builder#displayName was null") }
    scoreboard_objective_Objective_Builder { env: self.env, object: ret }
  }

  pub fn criterion(&self, param_1: scoreboard_critieria_Criterion) -> scoreboard_objective_Objective_Builder {
    let ret = java_method!(self.env, self.object, "criterion", "(Lorg/spongepowered/api/scoreboard/critieria/Criterion;)Lorg/spongepowered/api/scoreboard/objective/Objective$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective$Builder#criterion was null") }
    scoreboard_objective_Objective_Builder { env: self.env, object: ret }
  }

  pub fn objective_display_mode(&self, param_1: scoreboard_objective_displaymode_ObjectiveDisplayMode) -> scoreboard_objective_Objective_Builder {
    let ret = java_method!(self.env, self.object, "objectiveDisplayMode", "(Lorg/spongepowered/api/scoreboard/objective/displaymode/ObjectiveDisplayMode;)Lorg/spongepowered/api/scoreboard/objective/Objective$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective$Builder#objectiveDisplayMode was null") }
    scoreboard_objective_Objective_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> scoreboard_objective_Objective {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/scoreboard/objective/Objective;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective$Builder#build was null") }
    scoreboard_objective_Objective { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct scoreboard_objective_Objective {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_objective_Objective {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_objective_Objective {
      env: env,
      object: object
    }
  }

  pub fn builder() -> scoreboard_objective_Objective_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/scoreboard/objective/Objective$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective#builder was null") }
    scoreboard_objective_Objective_Builder { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective#getName was null") }
    ret
  }

  pub fn get_display_name(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getDisplayName", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective#getDisplayName was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn set_display_name(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "setDisplayName", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn get_criterion(&self) -> scoreboard_critieria_Criterion {
    let ret = java_method!(self.env, self.object, "getCriterion", "()Lorg/spongepowered/api/scoreboard/critieria/Criterion;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective#getCriterion was null") }
    scoreboard_critieria_Criterion { env: self.env, object: ret }
  }

  pub fn get_display_mode(&self) -> scoreboard_objective_displaymode_ObjectiveDisplayMode {
    let ret = java_method!(self.env, self.object, "getDisplayMode", "()Lorg/spongepowered/api/scoreboard/objective/displaymode/ObjectiveDisplayMode;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective#getDisplayMode was null") }
    scoreboard_objective_displaymode_ObjectiveDisplayMode { env: self.env, object: ret }
  }

  pub fn set_display_mode(&self, param_1: scoreboard_objective_displaymode_ObjectiveDisplayMode) {
    java_method!(self.env, self.object, "setDisplayMode", "(Lorg/spongepowered/api/scoreboard/objective/displaymode/ObjectiveDisplayMode;)V", CallVoidMethodA, param_1);
  }

  pub fn get_scores(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getScores", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective#getScores was null") }
    ret
  }

  pub fn has_score(&self, param_1: text_Text) -> bool {
    java_method!(self.env, self.object, "hasScore", "(Lorg/spongepowered/api/text/Text;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_score(&self, param_1: scoreboard_Score) {
    java_method!(self.env, self.object, "addScore", "(Lorg/spongepowered/api/scoreboard/Score;)V", CallVoidMethodA, param_1);
  }

  pub fn get_score(&self, param_1: text_Text) -> Option<scoreboard_Score> {
    let ret = java_method!(self.env, self.object, "getScore", "(Lorg/spongepowered/api/text/Text;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective#getScore was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(scoreboard_Score { env: self.env, object: unwrapped }) }
  }

  pub fn get_or_create_score(&self, param_1: text_Text) -> scoreboard_Score {
    let ret = java_method!(self.env, self.object, "getOrCreateScore", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/scoreboard/Score;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective#getOrCreateScore was null") }
    scoreboard_Score { env: self.env, object: ret }
  }

  pub fn remove_score(&self, param_1: scoreboard_Score) -> bool {
    java_method!(self.env, self.object, "removeScore", "(Lorg/spongepowered/api/scoreboard/Score;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_score_1(&self, param_1: text_Text) -> bool {
    java_method!(self.env, self.object, "removeScore", "(Lorg/spongepowered/api/text/Text;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_scoreboards(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getScoreboards", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/objective/Objective#getScoreboards was null") }
    ret
  }

}



#[derive(Debug)]
pub struct scoreboard_Score {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_Score {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_Score {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getName", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Score#getName was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_score(&self) -> i32 {
    java_method!(self.env, self.object, "getScore", "()I", CallIntMethod)
  }

  pub fn set_score(&self, param_1: i32) {
    java_method!(self.env, self.object, "setScore", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_objectives(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getObjectives", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Score#getObjectives was null") }
    ret
  }

}

#[derive(Debug)]
pub struct scoreboard_Scoreboard_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_Scoreboard_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_Scoreboard_Builder {
      env: env,
      object: object
    }
  }

  pub fn objectives(&self, param_1: jobject) -> scoreboard_Scoreboard_Builder {
    let ret = java_method!(self.env, self.object, "objectives", "(Ljava/util/List;)Lorg/spongepowered/api/scoreboard/Scoreboard$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard$Builder#objectives was null") }
    scoreboard_Scoreboard_Builder { env: self.env, object: ret }
  }

  pub fn teams(&self, param_1: jobject) -> scoreboard_Scoreboard_Builder {
    let ret = java_method!(self.env, self.object, "teams", "(Ljava/util/List;)Lorg/spongepowered/api/scoreboard/Scoreboard$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard$Builder#teams was null") }
    scoreboard_Scoreboard_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> scoreboard_Scoreboard {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/scoreboard/Scoreboard;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard$Builder#build was null") }
    scoreboard_Scoreboard { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct scoreboard_Scoreboard {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_Scoreboard {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_Scoreboard {
      env: env,
      object: object
    }
  }

  pub fn builder() -> scoreboard_Scoreboard_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/scoreboard/Scoreboard$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#builder was null") }
    scoreboard_Scoreboard_Builder { env: self.env, object: ret }
  }

  pub fn get_objective(&self, param_1: jobject) -> Option<scoreboard_objective_Objective> {
    let ret = java_method!(self.env, self.object, "getObjective", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#getObjective was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(scoreboard_objective_Objective { env: self.env, object: unwrapped }) }
  }

  pub fn get_objective_1(&self, param_1: scoreboard_displayslot_DisplaySlot) -> Option<scoreboard_objective_Objective> {
    let ret = java_method!(self.env, self.object, "getObjective", "(Lorg/spongepowered/api/scoreboard/displayslot/DisplaySlot;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#getObjective was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(scoreboard_objective_Objective { env: self.env, object: unwrapped }) }
  }

  pub fn add_objective(&self, param_1: scoreboard_objective_Objective) {
    java_method!(self.env, self.object, "addObjective", "(Lorg/spongepowered/api/scoreboard/objective/Objective;)V", CallVoidMethodA, param_1);
  }

  pub fn update_display_slot(&self, param_1: scoreboard_objective_Objective, param_2: scoreboard_displayslot_DisplaySlot) {
    java_method!(self.env, self.object, "updateDisplaySlot", "(Lorg/spongepowered/api/scoreboard/objective/Objective;Lorg/spongepowered/api/scoreboard/displayslot/DisplaySlot;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn clear_slot(&self, param_1: scoreboard_displayslot_DisplaySlot) {
    java_method!(self.env, self.object, "clearSlot", "(Lorg/spongepowered/api/scoreboard/displayslot/DisplaySlot;)V", CallVoidMethodA, param_1);
  }

  pub fn get_objectives_by_criteria(&self, param_1: scoreboard_critieria_Criterion) -> jobject {
    let ret = java_method!(self.env, self.object, "getObjectivesByCriteria", "(Lorg/spongepowered/api/scoreboard/critieria/Criterion;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#getObjectivesByCriteria was null") }
    ret
  }

  pub fn get_objectives(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getObjectives", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#getObjectives was null") }
    ret
  }

  pub fn remove_objective(&self, param_1: scoreboard_objective_Objective) {
    java_method!(self.env, self.object, "removeObjective", "(Lorg/spongepowered/api/scoreboard/objective/Objective;)V", CallVoidMethodA, param_1);
  }

  pub fn get_scores(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getScores", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#getScores was null") }
    ret
  }

  pub fn get_scores_1(&self, param_1: text_Text) -> jobject {
    let ret = java_method!(self.env, self.object, "getScores", "(Lorg/spongepowered/api/text/Text;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#getScores was null") }
    ret
  }

  pub fn remove_scores(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "removeScores", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn get_team(&self, param_1: jobject) -> Option<scoreboard_Team> {
    let ret = java_method!(self.env, self.object, "getTeam", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#getTeam was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(scoreboard_Team { env: self.env, object: unwrapped }) }
  }

  pub fn register_team(&self, param_1: scoreboard_Team) {
    java_method!(self.env, self.object, "registerTeam", "(Lorg/spongepowered/api/scoreboard/Team;)V", CallVoidMethodA, param_1);
  }

  pub fn get_teams(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTeams", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#getTeams was null") }
    ret
  }

  pub fn get_member_team(&self, param_1: text_Text) -> Option<scoreboard_Team> {
    let ret = java_method!(self.env, self.object, "getMemberTeam", "(Lorg/spongepowered/api/text/Text;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Scoreboard#getMemberTeam was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(scoreboard_Team { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct scoreboard_Team_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_Team_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_Team_Builder {
      env: env,
      object: object
    }
  }

  pub fn name(&self, param_1: jobject) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "name", "(Ljava/lang/String;)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#name was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: text_format_TextColor) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#color was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn display_name(&self, param_1: text_Text) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "displayName", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#displayName was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn prefix(&self, param_1: text_Text) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "prefix", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#prefix was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn suffix(&self, param_1: text_Text) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "suffix", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#suffix was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn allow_friendly_fire(&self, param_1: bool) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "allowFriendlyFire", "(Z)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#allowFriendlyFire was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn can_see_friendly_invisibles(&self, param_1: bool) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "canSeeFriendlyInvisibles", "(Z)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#canSeeFriendlyInvisibles was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn name_tag_visibility(&self, param_1: scoreboard_Visibility) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "nameTagVisibility", "(Lorg/spongepowered/api/scoreboard/Visibility;)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#nameTagVisibility was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn death_text_visibility(&self, param_1: scoreboard_Visibility) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "deathTextVisibility", "(Lorg/spongepowered/api/scoreboard/Visibility;)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#deathTextVisibility was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn members(&self, param_1: jobject) -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, self.object, "members", "(Ljava/util/Set;)Lorg/spongepowered/api/scoreboard/Team$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#members was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> scoreboard_Team {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/scoreboard/Team;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team$Builder#build was null") }
    scoreboard_Team { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct scoreboard_Team {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_Team {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_Team {
      env: env,
      object: object
    }
  }

  pub fn builder() -> scoreboard_Team_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/scoreboard/Team$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#builder was null") }
    scoreboard_Team_Builder { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#getName was null") }
    ret
  }

  pub fn get_display_name(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getDisplayName", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#getDisplayName was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn set_display_name(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "setDisplayName", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn get_color(&self) -> text_format_TextColor {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/text/format/TextColor;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#getColor was null") }
    text_format_TextColor { env: self.env, object: ret }
  }

  pub fn set_color(&self, param_1: text_format_TextColor) {
    java_method!(self.env, self.object, "setColor", "(Lorg/spongepowered/api/text/format/TextColor;)V", CallVoidMethodA, param_1);
  }

  pub fn get_prefix(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getPrefix", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#getPrefix was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn set_prefix(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "setPrefix", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn get_suffix(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getSuffix", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#getSuffix was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn set_suffix(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "setSuffix", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn allow_friendly_fire(&self) -> bool {
    java_method!(self.env, self.object, "allowFriendlyFire", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_allow_friendly_fire(&self, param_1: bool) {
    java_method!(self.env, self.object, "setAllowFriendlyFire", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn can_see_friendly_invisibles(&self) -> bool {
    java_method!(self.env, self.object, "canSeeFriendlyInvisibles", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_can_see_friendly_invisibles(&self, param_1: bool) {
    java_method!(self.env, self.object, "setCanSeeFriendlyInvisibles", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_name_tag_visibility(&self) -> scoreboard_Visibility {
    let ret = java_method!(self.env, self.object, "getNameTagVisibility", "()Lorg/spongepowered/api/scoreboard/Visibility;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#getNameTagVisibility was null") }
    scoreboard_Visibility { env: self.env, object: ret }
  }

  pub fn set_name_tag_visibility(&self, param_1: scoreboard_Visibility) {
    java_method!(self.env, self.object, "setNameTagVisibility", "(Lorg/spongepowered/api/scoreboard/Visibility;)V", CallVoidMethodA, param_1);
  }

  pub fn get_death_message_visibility(&self) -> scoreboard_Visibility {
    let ret = java_method!(self.env, self.object, "getDeathMessageVisibility", "()Lorg/spongepowered/api/scoreboard/Visibility;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#getDeathMessageVisibility was null") }
    scoreboard_Visibility { env: self.env, object: ret }
  }

  pub fn set_death_message_visibility(&self, param_1: scoreboard_Visibility) {
    java_method!(self.env, self.object, "setDeathMessageVisibility", "(Lorg/spongepowered/api/scoreboard/Visibility;)V", CallVoidMethodA, param_1);
  }

  pub fn get_members(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMembers", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#getMembers was null") }
    ret
  }

  pub fn add_member(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "addMember", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn remove_member(&self, param_1: text_Text) -> bool {
    java_method!(self.env, self.object, "removeMember", "(Lorg/spongepowered/api/text/Text;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_scoreboard(&self) -> Option<scoreboard_Scoreboard> {
    let ret = java_method!(self.env, self.object, "getScoreboard", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/Team#getScoreboard was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(scoreboard_Scoreboard { env: self.env, object: unwrapped }) }
  }

  pub fn unregister(&self) -> bool {
    java_method!(self.env, self.object, "unregister", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct scoreboard_TeamMember {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_TeamMember {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_TeamMember {
      env: env,
      object: object
    }
  }

  pub fn get_team_representation(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getTeamRepresentation", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/scoreboard/TeamMember#getTeamRepresentation was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct scoreboard_Visibilities {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_Visibilities {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_Visibilities {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct scoreboard_Visibility {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl scoreboard_Visibility {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    scoreboard_Visibility {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct Server {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl Server {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    Server {
      env: env,
      object: object
    }
  }

  pub fn get_online_players(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOnlinePlayers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getOnlinePlayers was null") }
    ret
  }

  pub fn get_max_players(&self) -> i32 {
    java_method!(self.env, self.object, "getMaxPlayers", "()I", CallIntMethod)
  }

  pub fn get_player(&self, param_1: jobject) -> Option<entity_living_player_Player> {
    let ret = java_method!(self.env, self.object, "getPlayer", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getPlayer was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_player_Player { env: self.env, object: unwrapped }) }
  }

  pub fn get_player_1(&self, param_1: jobject) -> Option<entity_living_player_Player> {
    let ret = java_method!(self.env, self.object, "getPlayer", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getPlayer was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_player_Player { env: self.env, object: unwrapped }) }
  }

  pub fn get_worlds(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getWorlds", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getWorlds was null") }
    ret
  }

  pub fn get_unloaded_worlds(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getUnloadedWorlds", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getUnloadedWorlds was null") }
    ret
  }

  pub fn get_all_world_properties(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllWorldProperties", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getAllWorldProperties was null") }
    ret
  }

  pub fn get_world(&self, param_1: jobject) -> Option<world_World> {
    let ret = java_method!(self.env, self.object, "getWorld", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_World { env: self.env, object: unwrapped }) }
  }

  pub fn get_world_1(&self, param_1: jobject) -> Option<world_World> {
    let ret = java_method!(self.env, self.object, "getWorld", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_World { env: self.env, object: unwrapped }) }
  }

  pub fn get_default_world(&self) -> Option<world_storage_WorldProperties> {
    let ret = java_method!(self.env, self.object, "getDefaultWorld", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getDefaultWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_storage_WorldProperties { env: self.env, object: unwrapped }) }
  }

  pub fn get_default_world_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDefaultWorldName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getDefaultWorldName was null") }
    ret
  }

  pub fn load_world(&self, param_1: jobject) -> Option<world_World> {
    let ret = java_method!(self.env, self.object, "loadWorld", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#loadWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_World { env: self.env, object: unwrapped }) }
  }

  pub fn load_world_1(&self, param_1: jobject) -> Option<world_World> {
    let ret = java_method!(self.env, self.object, "loadWorld", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#loadWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_World { env: self.env, object: unwrapped }) }
  }

  pub fn load_world_2(&self, param_1: world_storage_WorldProperties) -> Option<world_World> {
    let ret = java_method!(self.env, self.object, "loadWorld", "(Lorg/spongepowered/api/world/storage/WorldProperties;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#loadWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_World { env: self.env, object: unwrapped }) }
  }

  pub fn get_world_properties(&self, param_1: jobject) -> Option<world_storage_WorldProperties> {
    let ret = java_method!(self.env, self.object, "getWorldProperties", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getWorldProperties was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_storage_WorldProperties { env: self.env, object: unwrapped }) }
  }

  pub fn get_world_properties_1(&self, param_1: jobject) -> Option<world_storage_WorldProperties> {
    let ret = java_method!(self.env, self.object, "getWorldProperties", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getWorldProperties was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_storage_WorldProperties { env: self.env, object: unwrapped }) }
  }

  pub fn unload_world(&self, param_1: world_World) -> bool {
    java_method!(self.env, self.object, "unloadWorld", "(Lorg/spongepowered/api/world/World;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn create_world_properties(&self, param_1: jobject, param_2: world_WorldArchetype) -> world_storage_WorldProperties {
    let ret = java_method!(self.env, self.object, "createWorldProperties", "(Ljava/lang/String;Lorg/spongepowered/api/world/WorldArchetype;)Lorg/spongepowered/api/world/storage/WorldProperties;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/Server#createWorldProperties was null") }
    world_storage_WorldProperties { env: self.env, object: ret }
  }

  pub fn copy_world(&self, param_1: world_storage_WorldProperties, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "copyWorld", "(Lorg/spongepowered/api/world/storage/WorldProperties;Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/Server#copyWorld was null") }
    ret
  }

  pub fn rename_world(&self, param_1: world_storage_WorldProperties, param_2: jobject) -> Option<world_storage_WorldProperties> {
    let ret = java_method!(self.env, self.object, "renameWorld", "(Lorg/spongepowered/api/world/storage/WorldProperties;Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/Server#renameWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_storage_WorldProperties { env: self.env, object: unwrapped }) }
  }

  pub fn delete_world(&self, param_1: world_storage_WorldProperties) -> jobject {
    let ret = java_method!(self.env, self.object, "deleteWorld", "(Lorg/spongepowered/api/world/storage/WorldProperties;)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/Server#deleteWorld was null") }
    ret
  }

  pub fn save_world_properties(&self, param_1: world_storage_WorldProperties) -> bool {
    java_method!(self.env, self.object, "saveWorldProperties", "(Lorg/spongepowered/api/world/storage/WorldProperties;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_server_scoreboard(&self) -> Option<scoreboard_Scoreboard> {
    let ret = java_method!(self.env, self.object, "getServerScoreboard", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getServerScoreboard was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(scoreboard_Scoreboard { env: self.env, object: unwrapped }) }
  }

  pub fn get_chunk_layout(&self) -> world_storage_ChunkLayout {
    let ret = java_method!(self.env, self.object, "getChunkLayout", "()Lorg/spongepowered/api/world/storage/ChunkLayout;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getChunkLayout was null") }
    world_storage_ChunkLayout { env: self.env, object: ret }
  }

  pub fn get_running_time_ticks(&self) -> i32 {
    java_method!(self.env, self.object, "getRunningTimeTicks", "()I", CallIntMethod)
  }

  pub fn get_broadcast_channel(&self) -> text_channel_MessageChannel {
    let ret = java_method!(self.env, self.object, "getBroadcastChannel", "()Lorg/spongepowered/api/text/channel/MessageChannel;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getBroadcastChannel was null") }
    text_channel_MessageChannel { env: self.env, object: ret }
  }

  pub fn set_broadcast_channel(&self, param_1: text_channel_MessageChannel) {
    java_method!(self.env, self.object, "setBroadcastChannel", "(Lorg/spongepowered/api/text/channel/MessageChannel;)V", CallVoidMethodA, param_1);
  }

  pub fn get_bound_address(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getBoundAddress", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getBoundAddress was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn has_whitelist(&self) -> bool {
    java_method!(self.env, self.object, "hasWhitelist", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_has_whitelist(&self, param_1: bool) {
    java_method!(self.env, self.object, "setHasWhitelist", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_online_mode(&self) -> bool {
    java_method!(self.env, self.object, "getOnlineMode", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_motd(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getMotd", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getMotd was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn shutdown(&self) {
    java_method!(self.env, self.object, "shutdown", "()V", CallVoidMethod);
  }

  pub fn shutdown_1(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "shutdown", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn get_console(&self) -> command_source_ConsoleSource {
    let ret = java_method!(self.env, self.object, "getConsole", "()Lorg/spongepowered/api/command/source/ConsoleSource;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getConsole was null") }
    command_source_ConsoleSource { env: self.env, object: ret }
  }

  pub fn get_chunk_ticket_manager(&self) -> world_ChunkTicketManager {
    let ret = java_method!(self.env, self.object, "getChunkTicketManager", "()Lorg/spongepowered/api/world/ChunkTicketManager;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getChunkTicketManager was null") }
    world_ChunkTicketManager { env: self.env, object: ret }
  }

  pub fn get_game_profile_manager(&self) -> profile_GameProfileManager {
    let ret = java_method!(self.env, self.object, "getGameProfileManager", "()Lorg/spongepowered/api/profile/GameProfileManager;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getGameProfileManager was null") }
    profile_GameProfileManager { env: self.env, object: ret }
  }

  pub fn get_ticks_per_second(&self) -> f64 {
    java_method!(self.env, self.object, "getTicksPerSecond", "()D", CallDoubleMethod)
  }

  pub fn get_default_resource_pack(&self) -> Option<resourcepack_ResourcePack> {
    let ret = java_method!(self.env, self.object, "getDefaultResourcePack", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Server#getDefaultResourcePack was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(resourcepack_ResourcePack { env: self.env, object: unwrapped }) }
  }

  pub fn get_player_idle_timeout(&self) -> i32 {
    java_method!(self.env, self.object, "getPlayerIdleTimeout", "()I", CallIntMethod)
  }

  pub fn set_player_idle_timeout(&self, param_1: i32) {
    java_method!(self.env, self.object, "setPlayerIdleTimeout", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct service_ban_BanService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_ban_BanService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_ban_BanService {
      env: env,
      object: object
    }
  }

  pub fn get_bans(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBans", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/ban/BanService#getBans was null") }
    ret
  }

  pub fn get_profile_bans(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getProfileBans", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/ban/BanService#getProfileBans was null") }
    ret
  }

  pub fn get_ip_bans(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getIpBans", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/ban/BanService#getIpBans was null") }
    ret
  }

  pub fn get_ban_for(&self, param_1: profile_GameProfile) -> Option<util_ban_Ban_Profile> {
    let ret = java_method!(self.env, self.object, "getBanFor", "(Lorg/spongepowered/api/profile/GameProfile;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/ban/BanService#getBanFor was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_ban_Ban_Profile { env: self.env, object: unwrapped }) }
  }

  pub fn get_ban_for_1(&self, param_1: jobject) -> Option<util_ban_Ban_Ip> {
    let ret = java_method!(self.env, self.object, "getBanFor", "(Ljava/net/InetAddress;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/ban/BanService#getBanFor was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_ban_Ban_Ip { env: self.env, object: unwrapped }) }
  }

  pub fn is_banned(&self, param_1: profile_GameProfile) -> bool {
    java_method!(self.env, self.object, "isBanned", "(Lorg/spongepowered/api/profile/GameProfile;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_banned_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "isBanned", "(Ljava/net/InetAddress;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn pardon(&self, param_1: profile_GameProfile) -> bool {
    java_method!(self.env, self.object, "pardon", "(Lorg/spongepowered/api/profile/GameProfile;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn pardon_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "pardon", "(Ljava/net/InetAddress;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_ban(&self, param_1: util_ban_Ban) -> bool {
    java_method!(self.env, self.object, "removeBan", "(Lorg/spongepowered/api/util/ban/Ban;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_ban(&self, param_1: util_ban_Ban) -> Option<util_ban_Ban> {
    let ret = java_method!(self.env, self.object, "addBan", "(Lorg/spongepowered/api/util/ban/Ban;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/ban/BanService#addBan was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_ban_Ban { env: self.env, object: unwrapped }) }
  }

  pub fn has_ban(&self, param_1: util_ban_Ban) -> bool {
    java_method!(self.env, self.object, "hasBan", "(Lorg/spongepowered/api/util/ban/Ban;)Z", CallBooleanMethodA, param_1) == 1
  }

}


#[derive(Debug)]
pub struct service_context_Context {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_context_Context {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_context_Context {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject) -> service_context_Context {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/String;)Lorg/spongepowered/api/service/context/Context", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#<init> was null") }
    service_context_Context { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getType", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#getType was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#getName was null") }
    ret
  }

  pub fn get_key(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKey", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#getKey was null") }
    ret
  }

  pub fn get_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValue", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#getValue was null") }
    ret
  }

  pub fn set_value(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "setValue", "(Ljava/lang/String;)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#setValue was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#toString was null") }
    ret
  }

  pub fn set_value_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#setValue was null") }
    ret
  }

  pub fn get_value_1(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValue", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#getValue was null") }
    ret
  }

  pub fn get_key_1(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKey", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Context#getKey was null") }
    ret
  }

}

#[derive(Debug)]
pub struct service_context_ContextCalculator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_context_ContextCalculator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_context_ContextCalculator {
      env: env,
      object: object
    }
  }

  pub fn accumulate_contexts(&self, param_1: service_context_Contextual, param_2: jobject) {
    java_method!(self.env, self.object, "accumulateContexts", "(Lorg/spongepowered/api/service/context/Contextual;Ljava/util/Set;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn matches(&self, param_1: service_context_Context, param_2: service_context_Contextual) -> bool {
    java_method!(self.env, self.object, "matches", "(Lorg/spongepowered/api/service/context/Context;Lorg/spongepowered/api/service/context/Contextual;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

}

#[derive(Debug)]
pub struct service_context_ContextSource {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_context_ContextSource {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_context_ContextSource {
      env: env,
      object: object
    }
  }

  pub fn get_context(&self) -> service_context_Context {
    let ret = java_method!(self.env, self.object, "getContext", "()Lorg/spongepowered/api/service/context/Context;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/ContextSource#getContext was null") }
    service_context_Context { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_context_Contextual {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_context_Contextual {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_context_Contextual {
      env: env,
      object: object
    }
  }

  pub fn get_identifier(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getIdentifier", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Contextual#getIdentifier was null") }
    ret
  }

  pub fn get_active_contexts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getActiveContexts", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/context/Contextual#getActiveContexts was null") }
    ret
  }

}

#[derive(Debug)]
pub struct service_context_ContextualService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_context_ContextualService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_context_ContextualService {
      env: env,
      object: object
    }
  }

  pub fn register_context_calculator(&self, param_1: service_context_ContextCalculator) {
    java_method!(self.env, self.object, "registerContextCalculator", "(Lorg/spongepowered/api/service/context/ContextCalculator;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct service_economy_account_Account {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_account_Account {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_account_Account {
      env: env,
      object: object
    }
  }

  pub fn get_display_name(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getDisplayName", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#getDisplayName was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_default_balance(&self, param_1: service_economy_Currency) -> jobject {
    let ret = java_method!(self.env, self.object, "getDefaultBalance", "(Lorg/spongepowered/api/service/economy/Currency;)Ljava/math/BigDecimal;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#getDefaultBalance was null") }
    ret
  }

  pub fn has_balance(&self, param_1: service_economy_Currency, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "hasBalance", "(Lorg/spongepowered/api/service/economy/Currency;Ljava/util/Set;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn has_balance_1(&self, param_1: service_economy_Currency) -> bool {
    java_method!(self.env, self.object, "hasBalance", "(Lorg/spongepowered/api/service/economy/Currency;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_balance(&self, param_1: service_economy_Currency, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getBalance", "(Lorg/spongepowered/api/service/economy/Currency;Ljava/util/Set;)Ljava/math/BigDecimal;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#getBalance was null") }
    ret
  }

  pub fn get_balance_1(&self, param_1: service_economy_Currency) -> jobject {
    let ret = java_method!(self.env, self.object, "getBalance", "(Lorg/spongepowered/api/service/economy/Currency;)Ljava/math/BigDecimal;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#getBalance was null") }
    ret
  }

  pub fn get_balances(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getBalances", "(Ljava/util/Set;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#getBalances was null") }
    ret
  }

  pub fn get_balances_1(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBalances", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#getBalances was null") }
    ret
  }

  pub fn set_balance(&self, param_1: service_economy_Currency, param_2: jobject, param_3: event_cause_Cause, param_4: jobject) -> service_economy_transaction_TransactionResult {
    let ret = java_method!(self.env, self.object, "setBalance", "(Lorg/spongepowered/api/service/economy/Currency;Ljava/math/BigDecimal;Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Set;)Lorg/spongepowered/api/service/economy/transaction/TransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#setBalance was null") }
    service_economy_transaction_TransactionResult { env: self.env, object: ret }
  }

  pub fn set_balance_1(&self, param_1: service_economy_Currency, param_2: jobject, param_3: event_cause_Cause) -> service_economy_transaction_TransactionResult {
    let ret = java_method!(self.env, self.object, "setBalance", "(Lorg/spongepowered/api/service/economy/Currency;Ljava/math/BigDecimal;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/service/economy/transaction/TransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#setBalance was null") }
    service_economy_transaction_TransactionResult { env: self.env, object: ret }
  }

  pub fn reset_balances(&self, param_1: event_cause_Cause, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "resetBalances", "(Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Set;)Ljava/util/Map;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#resetBalances was null") }
    ret
  }

  pub fn reset_balances_1(&self, param_1: event_cause_Cause) -> jobject {
    let ret = java_method!(self.env, self.object, "resetBalances", "(Lorg/spongepowered/api/event/cause/Cause;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#resetBalances was null") }
    ret
  }

  pub fn reset_balance(&self, param_1: service_economy_Currency, param_2: event_cause_Cause, param_3: jobject) -> service_economy_transaction_TransactionResult {
    let ret = java_method!(self.env, self.object, "resetBalance", "(Lorg/spongepowered/api/service/economy/Currency;Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Set;)Lorg/spongepowered/api/service/economy/transaction/TransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#resetBalance was null") }
    service_economy_transaction_TransactionResult { env: self.env, object: ret }
  }

  pub fn reset_balance_1(&self, param_1: service_economy_Currency, param_2: event_cause_Cause) -> service_economy_transaction_TransactionResult {
    let ret = java_method!(self.env, self.object, "resetBalance", "(Lorg/spongepowered/api/service/economy/Currency;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/service/economy/transaction/TransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#resetBalance was null") }
    service_economy_transaction_TransactionResult { env: self.env, object: ret }
  }

  pub fn deposit(&self, param_1: service_economy_Currency, param_2: jobject, param_3: event_cause_Cause, param_4: jobject) -> service_economy_transaction_TransactionResult {
    let ret = java_method!(self.env, self.object, "deposit", "(Lorg/spongepowered/api/service/economy/Currency;Ljava/math/BigDecimal;Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Set;)Lorg/spongepowered/api/service/economy/transaction/TransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#deposit was null") }
    service_economy_transaction_TransactionResult { env: self.env, object: ret }
  }

  pub fn deposit_1(&self, param_1: service_economy_Currency, param_2: jobject, param_3: event_cause_Cause) -> service_economy_transaction_TransactionResult {
    let ret = java_method!(self.env, self.object, "deposit", "(Lorg/spongepowered/api/service/economy/Currency;Ljava/math/BigDecimal;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/service/economy/transaction/TransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#deposit was null") }
    service_economy_transaction_TransactionResult { env: self.env, object: ret }
  }

  pub fn withdraw(&self, param_1: service_economy_Currency, param_2: jobject, param_3: event_cause_Cause, param_4: jobject) -> service_economy_transaction_TransactionResult {
    let ret = java_method!(self.env, self.object, "withdraw", "(Lorg/spongepowered/api/service/economy/Currency;Ljava/math/BigDecimal;Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Set;)Lorg/spongepowered/api/service/economy/transaction/TransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#withdraw was null") }
    service_economy_transaction_TransactionResult { env: self.env, object: ret }
  }

  pub fn withdraw_1(&self, param_1: service_economy_Currency, param_2: jobject, param_3: event_cause_Cause) -> service_economy_transaction_TransactionResult {
    let ret = java_method!(self.env, self.object, "withdraw", "(Lorg/spongepowered/api/service/economy/Currency;Ljava/math/BigDecimal;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/service/economy/transaction/TransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#withdraw was null") }
    service_economy_transaction_TransactionResult { env: self.env, object: ret }
  }

  pub fn transfer(&self, param_1: service_economy_account_Account, param_2: service_economy_Currency, param_3: jobject, param_4: event_cause_Cause, param_5: jobject) -> service_economy_transaction_TransferResult {
    let ret = java_method!(self.env, self.object, "transfer", "(Lorg/spongepowered/api/service/economy/account/Account;Lorg/spongepowered/api/service/economy/Currency;Ljava/math/BigDecimal;Lorg/spongepowered/api/event/cause/Cause;Ljava/util/Set;)Lorg/spongepowered/api/service/economy/transaction/TransferResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#transfer was null") }
    service_economy_transaction_TransferResult { env: self.env, object: ret }
  }

  pub fn transfer_1(&self, param_1: service_economy_account_Account, param_2: service_economy_Currency, param_3: jobject, param_4: event_cause_Cause) -> service_economy_transaction_TransferResult {
    let ret = java_method!(self.env, self.object, "transfer", "(Lorg/spongepowered/api/service/economy/account/Account;Lorg/spongepowered/api/service/economy/Currency;Ljava/math/BigDecimal;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/service/economy/transaction/TransferResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/account/Account#transfer was null") }
    service_economy_transaction_TransferResult { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_economy_account_UniqueAccount {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_account_UniqueAccount {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_account_UniqueAccount {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct service_economy_account_VirtualAccount {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_account_VirtualAccount {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_account_VirtualAccount {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct service_economy_Currency {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_Currency {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_Currency {
      env: env,
      object: object
    }
  }

  pub fn get_display_name(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getDisplayName", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/Currency#getDisplayName was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_plural_display_name(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getPluralDisplayName", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/Currency#getPluralDisplayName was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_symbol(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getSymbol", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/Currency#getSymbol was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn format(&self, param_1: jobject) -> text_Text {
    let ret = java_method!(self.env, self.object, "format", "(Ljava/math/BigDecimal;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/Currency#format was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn format_1(&self, param_1: jobject, param_2: i32) -> text_Text {
    let ret = java_method!(self.env, self.object, "format", "(Ljava/math/BigDecimal;I)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/Currency#format was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_default_fraction_digits(&self) -> i32 {
    java_method!(self.env, self.object, "getDefaultFractionDigits", "()I", CallIntMethod)
  }

  pub fn is_default(&self) -> bool {
    java_method!(self.env, self.object, "isDefault", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct service_economy_EconomyService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_EconomyService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_EconomyService {
      env: env,
      object: object
    }
  }

  pub fn get_default_currency(&self) -> service_economy_Currency {
    let ret = java_method!(self.env, self.object, "getDefaultCurrency", "()Lorg/spongepowered/api/service/economy/Currency;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/EconomyService#getDefaultCurrency was null") }
    service_economy_Currency { env: self.env, object: ret }
  }

  pub fn get_currencies(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCurrencies", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/EconomyService#getCurrencies was null") }
    ret
  }

  pub fn has_account(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "hasAccount", "(Ljava/util/UUID;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn has_account_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "hasAccount", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_or_create_account(&self, param_1: jobject) -> Option<service_economy_account_UniqueAccount> {
    let ret = java_method!(self.env, self.object, "getOrCreateAccount", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/EconomyService#getOrCreateAccount was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(service_economy_account_UniqueAccount { env: self.env, object: unwrapped }) }
  }

  pub fn get_or_create_account_1(&self, param_1: jobject) -> Option<service_economy_account_Account> {
    let ret = java_method!(self.env, self.object, "getOrCreateAccount", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/EconomyService#getOrCreateAccount was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(service_economy_account_Account { env: self.env, object: unwrapped }) }
  }

}


#[derive(Debug)]
pub struct service_economy_transaction_ResultType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_transaction_ResultType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_transaction_ResultType {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[service_economy_transaction_ResultType] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> service_economy_transaction_ResultType {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/service/economy/transaction/ResultType;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/transaction/ResultType#valueOf was null") }
    service_economy_transaction_ResultType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_economy_transaction_TransactionResult {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_transaction_TransactionResult {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_transaction_TransactionResult {
      env: env,
      object: object
    }
  }

  pub fn get_account(&self) -> service_economy_account_Account {
    let ret = java_method!(self.env, self.object, "getAccount", "()Lorg/spongepowered/api/service/economy/account/Account;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/transaction/TransactionResult#getAccount was null") }
    service_economy_account_Account { env: self.env, object: ret }
  }

  pub fn get_currency(&self) -> service_economy_Currency {
    let ret = java_method!(self.env, self.object, "getCurrency", "()Lorg/spongepowered/api/service/economy/Currency;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/transaction/TransactionResult#getCurrency was null") }
    service_economy_Currency { env: self.env, object: ret }
  }

  pub fn get_amount(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAmount", "()Ljava/math/BigDecimal;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/transaction/TransactionResult#getAmount was null") }
    ret
  }

  pub fn get_contexts(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getContexts", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/transaction/TransactionResult#getContexts was null") }
    ret
  }

  pub fn get_result(&self) -> service_economy_transaction_ResultType {
    let ret = java_method!(self.env, self.object, "getResult", "()Lorg/spongepowered/api/service/economy/transaction/ResultType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/transaction/TransactionResult#getResult was null") }
    service_economy_transaction_ResultType { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> service_economy_transaction_TransactionType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/service/economy/transaction/TransactionType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/transaction/TransactionResult#getType was null") }
    service_economy_transaction_TransactionType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_economy_transaction_TransactionType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_transaction_TransactionType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_transaction_TransactionType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct service_economy_transaction_TransactionTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_transaction_TransactionTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_transaction_TransactionTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct service_economy_transaction_TransferResult {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_economy_transaction_TransferResult {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_economy_transaction_TransferResult {
      env: env,
      object: object
    }
  }

  pub fn get_account_to(&self) -> service_economy_account_Account {
    let ret = java_method!(self.env, self.object, "getAccountTo", "()Lorg/spongepowered/api/service/economy/account/Account;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/economy/transaction/TransferResult#getAccountTo was null") }
    service_economy_account_Account { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct service_pagination_PaginationList_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_pagination_PaginationList_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_pagination_PaginationList_Builder {
      env: env,
      object: object
    }
  }

  pub fn contents(&self, param_1: jobject) -> service_pagination_PaginationList_Builder {
    let ret = java_method!(self.env, self.object, "contents", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/service/pagination/PaginationList$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList$Builder#contents was null") }
    service_pagination_PaginationList_Builder { env: self.env, object: ret }
  }

  pub fn contents_1(&self, param_1: &[text_Text]) -> service_pagination_PaginationList_Builder {
    let ret = java_method!(self.env, self.object, "contents", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/service/pagination/PaginationList$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList$Builder#contents was null") }
    service_pagination_PaginationList_Builder { env: self.env, object: ret }
  }

  pub fn title(&self, param_1: text_Text) -> service_pagination_PaginationList_Builder {
    let ret = java_method!(self.env, self.object, "title", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/service/pagination/PaginationList$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList$Builder#title was null") }
    service_pagination_PaginationList_Builder { env: self.env, object: ret }
  }

  pub fn header(&self, param_1: text_Text) -> service_pagination_PaginationList_Builder {
    let ret = java_method!(self.env, self.object, "header", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/service/pagination/PaginationList$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList$Builder#header was null") }
    service_pagination_PaginationList_Builder { env: self.env, object: ret }
  }

  pub fn footer(&self, param_1: text_Text) -> service_pagination_PaginationList_Builder {
    let ret = java_method!(self.env, self.object, "footer", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/service/pagination/PaginationList$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList$Builder#footer was null") }
    service_pagination_PaginationList_Builder { env: self.env, object: ret }
  }

  pub fn padding(&self, param_1: text_Text) -> service_pagination_PaginationList_Builder {
    let ret = java_method!(self.env, self.object, "padding", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/service/pagination/PaginationList$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList$Builder#padding was null") }
    service_pagination_PaginationList_Builder { env: self.env, object: ret }
  }

  pub fn lines_per_page(&self, param_1: i32) -> service_pagination_PaginationList_Builder {
    let ret = java_method!(self.env, self.object, "linesPerPage", "(I)Lorg/spongepowered/api/service/pagination/PaginationList$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList$Builder#linesPerPage was null") }
    service_pagination_PaginationList_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> service_pagination_PaginationList {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/service/pagination/PaginationList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList$Builder#build was null") }
    service_pagination_PaginationList { env: self.env, object: ret }
  }

  pub fn send_to(&self, param_1: text_channel_MessageReceiver) {
    java_method!(self.env, self.object, "sendTo", "(Lorg/spongepowered/api/text/channel/MessageReceiver;)V", CallVoidMethodA, param_1);
  }

  pub fn send_to_1(&self, param_1: text_channel_MessageChannel) {
    java_method!(self.env, self.object, "sendTo", "(Lorg/spongepowered/api/text/channel/MessageChannel;)V", CallVoidMethodA, param_1);
  }

  pub fn send_to_2(&self, param_1: jobject) {
    java_method!(self.env, self.object, "sendTo", "(Ljava/lang/Iterable;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct service_pagination_PaginationList {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_pagination_PaginationList {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_pagination_PaginationList {
      env: env,
      object: object
    }
  }

  pub fn builder() -> service_pagination_PaginationList_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/service/pagination/PaginationList$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList#builder was null") }
    service_pagination_PaginationList_Builder { env: self.env, object: ret }
  }

  pub fn get_contents(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getContents", "()Ljava/lang/Iterable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList#getContents was null") }
    ret
  }

  pub fn get_title(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getTitle", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList#getTitle was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_header(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getHeader", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList#getHeader was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_footer(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getFooter", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList#getFooter was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_padding(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getPadding", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationList#getPadding was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_lines_per_page(&self) -> i32 {
    java_method!(self.env, self.object, "getLinesPerPage", "()I", CallIntMethod)
  }

  pub fn send_to(&self, param_1: text_channel_MessageReceiver) {
    java_method!(self.env, self.object, "sendTo", "(Lorg/spongepowered/api/text/channel/MessageReceiver;)V", CallVoidMethodA, param_1);
  }

  pub fn send_to_1(&self, param_1: text_channel_MessageChannel) {
    java_method!(self.env, self.object, "sendTo", "(Lorg/spongepowered/api/text/channel/MessageChannel;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct service_pagination_PaginationService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_pagination_PaginationService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_pagination_PaginationService {
      env: env,
      object: object
    }
  }

  pub fn builder(&self) -> service_pagination_PaginationList_Builder {
    let ret = java_method!(self.env, self.object, "builder", "()Lorg/spongepowered/api/service/pagination/PaginationList$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/pagination/PaginationService#builder was null") }
    service_pagination_PaginationList_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_permission_MemorySubjectData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_permission_MemorySubjectData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_permission_MemorySubjectData {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: service_permission_PermissionService) -> service_permission_MemorySubjectData {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/service/permission/PermissionService;)Lorg/spongepowered/api/service/permission/MemorySubjectData", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/MemorySubjectData#<init> was null") }
    service_permission_MemorySubjectData { env: self.env, object: ret }
  }

  pub fn get_all_permissions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllPermissions", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/MemorySubjectData#getAllPermissions was null") }
    ret
  }

  pub fn get_node_tree(&self, param_1: jobject) -> service_permission_NodeTree {
    let ret = java_method!(self.env, self.object, "getNodeTree", "(Ljava/util/Set;)Lorg/spongepowered/api/service/permission/NodeTree;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/MemorySubjectData#getNodeTree was null") }
    service_permission_NodeTree { env: self.env, object: ret }
  }

  pub fn get_permissions(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getPermissions", "(Ljava/util/Set;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/MemorySubjectData#getPermissions was null") }
    ret
  }

  pub fn set_permission(&self, param_1: jobject, param_2: jobject, param_3: util_Tristate) -> bool {
    java_method!(self.env, self.object, "setPermission", "(Ljava/util/Set;Ljava/lang/String;Lorg/spongepowered/api/util/Tristate;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn clear_permissions(&self) -> bool {
    java_method!(self.env, self.object, "clearPermissions", "()Z", CallBooleanMethod) == 1
  }

  pub fn clear_permissions_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "clearPermissions", "(Ljava/util/Set;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_all_parents(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllParents", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/MemorySubjectData#getAllParents was null") }
    ret
  }

  pub fn get_parents(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getParents", "(Ljava/util/Set;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/MemorySubjectData#getParents was null") }
    ret
  }

  pub fn add_parent(&self, param_1: jobject, param_2: service_permission_Subject) -> bool {
    java_method!(self.env, self.object, "addParent", "(Ljava/util/Set;Lorg/spongepowered/api/service/permission/Subject;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn remove_parent(&self, param_1: jobject, param_2: service_permission_Subject) -> bool {
    java_method!(self.env, self.object, "removeParent", "(Ljava/util/Set;Lorg/spongepowered/api/service/permission/Subject;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn clear_parents(&self) -> bool {
    java_method!(self.env, self.object, "clearParents", "()Z", CallBooleanMethod) == 1
  }

  pub fn clear_parents_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "clearParents", "(Ljava/util/Set;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_all_options(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllOptions", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/MemorySubjectData#getAllOptions was null") }
    ret
  }

  pub fn get_options(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getOptions", "(Ljava/util/Set;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/MemorySubjectData#getOptions was null") }
    ret
  }

  pub fn set_option(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> bool {
    java_method!(self.env, self.object, "setOption", "(Ljava/util/Set;Ljava/lang/String;Ljava/lang/String;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn clear_options(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "clearOptions", "(Ljava/util/Set;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear_options_1(&self) -> bool {
    java_method!(self.env, self.object, "clearOptions", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct service_permission_NodeTree_Node {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_permission_NodeTree_Node {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_permission_NodeTree_Node {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct service_permission_NodeTree {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_permission_NodeTree {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_permission_NodeTree {
      env: env,
      object: object
    }
  }

  pub fn of(param_1: jobject) -> service_permission_NodeTree {
    let ret = java_method!(self.env, "of", "(Ljava/util/Map;)Lorg/spongepowered/api/service/permission/NodeTree;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/NodeTree#of was null") }
    service_permission_NodeTree { env: self.env, object: ret }
  }

  pub fn of_1(param_1: jobject, param_2: util_Tristate) -> service_permission_NodeTree {
    let ret = java_method!(self.env, "of", "(Ljava/util/Map;Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/service/permission/NodeTree;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/NodeTree#of was null") }
    service_permission_NodeTree { env: self.env, object: ret }
  }

  pub fn get(&self, param_1: jobject) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/NodeTree#get was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn as_map(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asMap", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/NodeTree#asMap was null") }
    ret
  }

  pub fn with_value(&self, param_1: jobject, param_2: util_Tristate) -> service_permission_NodeTree {
    let ret = java_method!(self.env, self.object, "withValue", "(Ljava/lang/String;Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/service/permission/NodeTree;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/NodeTree#withValue was null") }
    service_permission_NodeTree { env: self.env, object: ret }
  }

  pub fn with_all(&self, param_1: jobject) -> service_permission_NodeTree {
    let ret = java_method!(self.env, self.object, "withAll", "(Ljava/util/Map;)Lorg/spongepowered/api/service/permission/NodeTree;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/NodeTree#withAll was null") }
    service_permission_NodeTree { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct service_permission_PermissionDescription_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_permission_PermissionDescription_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_permission_PermissionDescription_Builder {
      env: env,
      object: object
    }
  }

  pub fn id(&self, param_1: jobject) -> service_permission_PermissionDescription_Builder {
    let ret = java_method!(self.env, self.object, "id", "(Ljava/lang/String;)Lorg/spongepowered/api/service/permission/PermissionDescription$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionDescription$Builder#id was null") }
    service_permission_PermissionDescription_Builder { env: self.env, object: ret }
  }

  pub fn description(&self, param_1: text_Text) -> service_permission_PermissionDescription_Builder {
    let ret = java_method!(self.env, self.object, "description", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/service/permission/PermissionDescription$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionDescription$Builder#description was null") }
    service_permission_PermissionDescription_Builder { env: self.env, object: ret }
  }

  pub fn assign(&self, param_1: jobject, param_2: bool) -> service_permission_PermissionDescription_Builder {
    let ret = java_method!(self.env, self.object, "assign", "(Ljava/lang/String;Z)Lorg/spongepowered/api/service/permission/PermissionDescription$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionDescription$Builder#assign was null") }
    service_permission_PermissionDescription_Builder { env: self.env, object: ret }
  }

  pub fn register(&self) -> service_permission_PermissionDescription {
    let ret = java_method!(self.env, self.object, "register", "()Lorg/spongepowered/api/service/permission/PermissionDescription;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionDescription$Builder#register was null") }
    service_permission_PermissionDescription { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_permission_PermissionDescription {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_permission_PermissionDescription {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_permission_PermissionDescription {
      env: env,
      object: object
    }
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionDescription#getId was null") }
    ret
  }

  pub fn get_description(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getDescription", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionDescription#getDescription was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_assigned_subjects(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAssignedSubjects", "(Ljava/lang/String;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionDescription#getAssignedSubjects was null") }
    ret
  }

  pub fn get_owner(&self) -> plugin_PluginContainer {
    let ret = java_method!(self.env, self.object, "getOwner", "()Lorg/spongepowered/api/plugin/PluginContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionDescription#getOwner was null") }
    plugin_PluginContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_permission_PermissionService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_permission_PermissionService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_permission_PermissionService {
      env: env,
      object: object
    }
  }

  pub fn get_user_subjects(&self) -> service_permission_SubjectCollection {
    let ret = java_method!(self.env, self.object, "getUserSubjects", "()Lorg/spongepowered/api/service/permission/SubjectCollection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionService#getUserSubjects was null") }
    service_permission_SubjectCollection { env: self.env, object: ret }
  }

  pub fn get_group_subjects(&self) -> service_permission_SubjectCollection {
    let ret = java_method!(self.env, self.object, "getGroupSubjects", "()Lorg/spongepowered/api/service/permission/SubjectCollection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionService#getGroupSubjects was null") }
    service_permission_SubjectCollection { env: self.env, object: ret }
  }

  pub fn get_defaults(&self) -> service_permission_Subject {
    let ret = java_method!(self.env, self.object, "getDefaults", "()Lorg/spongepowered/api/service/permission/Subject;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionService#getDefaults was null") }
    service_permission_Subject { env: self.env, object: ret }
  }

  pub fn get_subjects(&self, param_1: jobject) -> service_permission_SubjectCollection {
    let ret = java_method!(self.env, self.object, "getSubjects", "(Ljava/lang/String;)Lorg/spongepowered/api/service/permission/SubjectCollection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionService#getSubjects was null") }
    service_permission_SubjectCollection { env: self.env, object: ret }
  }

  pub fn get_known_subjects(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKnownSubjects", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionService#getKnownSubjects was null") }
    ret
  }

  pub fn new_description_builder(&self, param_1: jobject) -> Option<service_permission_PermissionDescription_Builder> {
    let ret = java_method!(self.env, self.object, "newDescriptionBuilder", "(Ljava/lang/Object;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionService#newDescriptionBuilder was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(service_permission_PermissionDescription_Builder { env: self.env, object: unwrapped }) }
  }

  pub fn get_description(&self, param_1: jobject) -> Option<service_permission_PermissionDescription> {
    let ret = java_method!(self.env, self.object, "getDescription", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionService#getDescription was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(service_permission_PermissionDescription { env: self.env, object: unwrapped }) }
  }

  pub fn get_descriptions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDescriptions", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/PermissionService#getDescriptions was null") }
    ret
  }

}

#[derive(Debug)]
pub struct service_permission_Subject {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_permission_Subject {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_permission_Subject {
      env: env,
      object: object
    }
  }

  pub fn get_command_source(&self) -> Option<command_CommandSource> {
    let ret = java_method!(self.env, self.object, "getCommandSource", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/Subject#getCommandSource was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandSource { env: self.env, object: unwrapped }) }
  }

  pub fn get_containing_collection(&self) -> service_permission_SubjectCollection {
    let ret = java_method!(self.env, self.object, "getContainingCollection", "()Lorg/spongepowered/api/service/permission/SubjectCollection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/Subject#getContainingCollection was null") }
    service_permission_SubjectCollection { env: self.env, object: ret }
  }

  pub fn get_subject_data(&self) -> service_permission_SubjectData {
    let ret = java_method!(self.env, self.object, "getSubjectData", "()Lorg/spongepowered/api/service/permission/SubjectData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/Subject#getSubjectData was null") }
    service_permission_SubjectData { env: self.env, object: ret }
  }

  pub fn get_transient_subject_data(&self) -> service_permission_SubjectData {
    let ret = java_method!(self.env, self.object, "getTransientSubjectData", "()Lorg/spongepowered/api/service/permission/SubjectData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/Subject#getTransientSubjectData was null") }
    service_permission_SubjectData { env: self.env, object: ret }
  }

  pub fn has_permission(&self, param_1: jobject, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "hasPermission", "(Ljava/util/Set;Ljava/lang/String;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn has_permission_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "hasPermission", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_permission_value(&self, param_1: jobject, param_2: jobject) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "getPermissionValue", "(Ljava/util/Set;Ljava/lang/String;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/Subject#getPermissionValue was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn is_child_of(&self, param_1: service_permission_Subject) -> bool {
    java_method!(self.env, self.object, "isChildOf", "(Lorg/spongepowered/api/service/permission/Subject;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_child_of_1(&self, param_1: jobject, param_2: service_permission_Subject) -> bool {
    java_method!(self.env, self.object, "isChildOf", "(Ljava/util/Set;Lorg/spongepowered/api/service/permission/Subject;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn get_parents(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getParents", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/Subject#getParents was null") }
    ret
  }

  pub fn get_parents_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getParents", "(Ljava/util/Set;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/Subject#getParents was null") }
    ret
  }

  pub fn get_option(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOption", "(Ljava/util/Set;Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/Subject#getOption was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_option_1(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOption", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/Subject#getOption was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct service_permission_SubjectCollection {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_permission_SubjectCollection {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_permission_SubjectCollection {
      env: env,
      object: object
    }
  }

  pub fn get_identifier(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getIdentifier", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectCollection#getIdentifier was null") }
    ret
  }

  pub fn get(&self, param_1: jobject) -> service_permission_Subject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;)Lorg/spongepowered/api/service/permission/Subject;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectCollection#get was null") }
    service_permission_Subject { env: self.env, object: ret }
  }

  pub fn has_registered(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "hasRegistered", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_all_subjects(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllSubjects", "()Ljava/lang/Iterable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectCollection#getAllSubjects was null") }
    ret
  }

  pub fn get_all_with_permission(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllWithPermission", "(Ljava/lang/String;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectCollection#getAllWithPermission was null") }
    ret
  }

  pub fn get_all_with_permission_1(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllWithPermission", "(Ljava/util/Set;Ljava/lang/String;)Ljava/util/Map;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectCollection#getAllWithPermission was null") }
    ret
  }

  pub fn get_defaults(&self) -> service_permission_Subject {
    let ret = java_method!(self.env, self.object, "getDefaults", "()Lorg/spongepowered/api/service/permission/Subject;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectCollection#getDefaults was null") }
    service_permission_Subject { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_permission_SubjectData {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_permission_SubjectData {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_permission_SubjectData {
      env: env,
      object: object
    }
  }

  pub fn get_all_permissions(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllPermissions", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectData#getAllPermissions was null") }
    ret
  }

  pub fn get_permissions(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getPermissions", "(Ljava/util/Set;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectData#getPermissions was null") }
    ret
  }

  pub fn set_permission(&self, param_1: jobject, param_2: jobject, param_3: util_Tristate) -> bool {
    java_method!(self.env, self.object, "setPermission", "(Ljava/util/Set;Ljava/lang/String;Lorg/spongepowered/api/util/Tristate;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn clear_permissions(&self) -> bool {
    java_method!(self.env, self.object, "clearPermissions", "()Z", CallBooleanMethod) == 1
  }

  pub fn clear_permissions_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "clearPermissions", "(Ljava/util/Set;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_all_parents(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllParents", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectData#getAllParents was null") }
    ret
  }

  pub fn get_parents(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getParents", "(Ljava/util/Set;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectData#getParents was null") }
    ret
  }

  pub fn add_parent(&self, param_1: jobject, param_2: service_permission_Subject) -> bool {
    java_method!(self.env, self.object, "addParent", "(Ljava/util/Set;Lorg/spongepowered/api/service/permission/Subject;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn remove_parent(&self, param_1: jobject, param_2: service_permission_Subject) -> bool {
    java_method!(self.env, self.object, "removeParent", "(Ljava/util/Set;Lorg/spongepowered/api/service/permission/Subject;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn clear_parents(&self) -> bool {
    java_method!(self.env, self.object, "clearParents", "()Z", CallBooleanMethod) == 1
  }

  pub fn clear_parents_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "clearParents", "(Ljava/util/Set;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_all_options(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAllOptions", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectData#getAllOptions was null") }
    ret
  }

  pub fn get_options(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getOptions", "(Ljava/util/Set;)Ljava/util/Map;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/permission/SubjectData#getOptions was null") }
    ret
  }

  pub fn set_option(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> bool {
    java_method!(self.env, self.object, "setOption", "(Ljava/util/Set;Ljava/lang/String;Ljava/lang/String;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn clear_options(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "clearOptions", "(Ljava/util/Set;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear_options_1(&self) -> bool {
    java_method!(self.env, self.object, "clearOptions", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct service_ProviderRegistration {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_ProviderRegistration {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_ProviderRegistration {
      env: env,
      object: object
    }
  }

  pub fn get_service(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getService", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/ProviderRegistration#getService was null") }
    ret
  }

  pub fn get_provider(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getProvider", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/ProviderRegistration#getProvider was null") }
    ret
  }

  pub fn get_plugin(&self) -> plugin_PluginContainer {
    let ret = java_method!(self.env, self.object, "getPlugin", "()Lorg/spongepowered/api/plugin/PluginContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/ProviderRegistration#getPlugin was null") }
    plugin_PluginContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_ProvisioningException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_ProvisioningException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_ProvisioningException {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> service_ProvisioningException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Class;)Lorg/spongepowered/api/service/ProvisioningException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/ProvisioningException#<init> was null") }
    service_ProvisioningException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: jobject) -> service_ProvisioningException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/Class;)Lorg/spongepowered/api/service/ProvisioningException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/ProvisioningException#<init> was null") }
    service_ProvisioningException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> service_ProvisioningException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/Class;)Lorg/spongepowered/api/service/ProvisioningException", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/service/ProvisioningException#<init> was null") }
    service_ProvisioningException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: jobject, param_2: jobject) -> service_ProvisioningException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Throwable;Ljava/lang/Class;)Lorg/spongepowered/api/service/ProvisioningException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/ProvisioningException#<init> was null") }
    service_ProvisioningException { env: self.env, object: ret }
  }

  pub fn get_service(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getService", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/ProvisioningException#getService was null") }
    ret
  }

}

#[derive(Debug)]
pub struct service_rcon_RconService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_rcon_RconService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_rcon_RconService {
      env: env,
      object: object
    }
  }

  pub fn is_rcon_enabled(&self) -> bool {
    java_method!(self.env, self.object, "isRconEnabled", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_rcon_password(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getRconPassword", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/rcon/RconService#getRconPassword was null") }
    ret
  }

}

#[derive(Debug)]
pub struct service_ServiceManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_ServiceManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_ServiceManager {
      env: env,
      object: object
    }
  }

  pub fn set_provider(&self, param_1: jobject, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "setProvider", "(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Object;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn provide(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "provide", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/ServiceManager#provide was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_registration(&self, param_1: jobject) -> Option<service_ProviderRegistration> {
    let ret = java_method!(self.env, self.object, "getRegistration", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/ServiceManager#getRegistration was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(service_ProviderRegistration { env: self.env, object: unwrapped }) }
  }

  pub fn is_registered(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "isRegistered", "(Ljava/lang/Class;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn provide_unchecked(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "provideUnchecked", "(Ljava/lang/Class;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/ServiceManager#provideUnchecked was null") }
    ret
  }

}

#[derive(Debug)]
pub struct service_SimpleServiceManager_Provider {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_SimpleServiceManager_Provider {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_SimpleServiceManager_Provider {
      env: env,
      object: object
    }
  }

  pub fn get_service(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getService", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/SimpleServiceManager$Provider#getService was null") }
    ret
  }

  pub fn get_provider(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getProvider", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/SimpleServiceManager$Provider#getProvider was null") }
    ret
  }

  pub fn get_plugin(&self) -> plugin_PluginContainer {
    let ret = java_method!(self.env, self.object, "getPlugin", "()Lorg/spongepowered/api/plugin/PluginContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/SimpleServiceManager$Provider#getPlugin was null") }
    plugin_PluginContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct service_SimpleServiceManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_SimpleServiceManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_SimpleServiceManager {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: plugin_PluginManager) -> service_SimpleServiceManager {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/plugin/PluginManager;)Lorg/spongepowered/api/service/SimpleServiceManager", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/SimpleServiceManager#<init> was null") }
    service_SimpleServiceManager { env: self.env, object: ret }
  }

  pub fn set_provider(&self, param_1: jobject, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "setProvider", "(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Object;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn provide(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "provide", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/SimpleServiceManager#provide was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_registration(&self, param_1: jobject) -> Option<service_ProviderRegistration> {
    let ret = java_method!(self.env, self.object, "getRegistration", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/SimpleServiceManager#getRegistration was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(service_ProviderRegistration { env: self.env, object: unwrapped }) }
  }

  pub fn provide_unchecked(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "provideUnchecked", "(Ljava/lang/Class;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/SimpleServiceManager#provideUnchecked was null") }
    ret
  }

}


#[derive(Debug)]
pub struct service_sql_SqlService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_sql_SqlService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_sql_SqlService {
      env: env,
      object: object
    }
  }

  pub fn get_data_source(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getDataSource", "(Ljava/lang/String;)Ljavax/sql/DataSource;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/sql/SqlService#getDataSource was null") }
    ret
  }

  pub fn get_data_source_1(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getDataSource", "(Ljava/lang/Object;Ljava/lang/String;)Ljavax/sql/DataSource;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/service/sql/SqlService#getDataSource was null") }
    ret
  }

  pub fn get_connection_url_from_alias(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getConnectionUrlFromAlias", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/sql/SqlService#getConnectionUrlFromAlias was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct service_user_UserStorageService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_user_UserStorageService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_user_UserStorageService {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: jobject) -> Option<entity_living_player_User> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/user/UserStorageService#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_player_User { env: self.env, object: unwrapped }) }
  }

  pub fn get_1(&self, param_1: jobject) -> Option<entity_living_player_User> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/user/UserStorageService#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_player_User { env: self.env, object: unwrapped }) }
  }

  pub fn get_2(&self, param_1: profile_GameProfile) -> Option<entity_living_player_User> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/profile/GameProfile;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/user/UserStorageService#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_living_player_User { env: self.env, object: unwrapped }) }
  }

  pub fn get_or_create(&self, param_1: profile_GameProfile) -> entity_living_player_User {
    let ret = java_method!(self.env, self.object, "getOrCreate", "(Lorg/spongepowered/api/profile/GameProfile;)Lorg/spongepowered/api/entity/living/player/User;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/user/UserStorageService#getOrCreate was null") }
    entity_living_player_User { env: self.env, object: ret }
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/user/UserStorageService#getAll was null") }
    ret
  }

  pub fn delete(&self, param_1: profile_GameProfile) -> bool {
    java_method!(self.env, self.object, "delete", "(Lorg/spongepowered/api/profile/GameProfile;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn delete_1(&self, param_1: entity_living_player_User) -> bool {
    java_method!(self.env, self.object, "delete", "(Lorg/spongepowered/api/entity/living/player/User;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn match_(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "match", "(Ljava/lang/String;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/service/user/UserStorageService#match was null") }
    ret
  }

}

#[derive(Debug)]
pub struct service_whitelist_WhitelistService {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl service_whitelist_WhitelistService {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    service_whitelist_WhitelistService {
      env: env,
      object: object
    }
  }

  pub fn get_whitelisted_profiles(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getWhitelistedProfiles", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/service/whitelist/WhitelistService#getWhitelistedProfiles was null") }
    ret
  }

  pub fn is_whitelisted(&self, param_1: profile_GameProfile) -> bool {
    java_method!(self.env, self.object, "isWhitelisted", "(Lorg/spongepowered/api/profile/GameProfile;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_profile(&self, param_1: profile_GameProfile) -> bool {
    java_method!(self.env, self.object, "addProfile", "(Lorg/spongepowered/api/profile/GameProfile;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_profile(&self, param_1: profile_GameProfile) -> bool {
    java_method!(self.env, self.object, "removeProfile", "(Lorg/spongepowered/api/profile/GameProfile;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct Sponge {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl Sponge {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    Sponge {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> Sponge {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/Sponge", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#<init> was null") }
    Sponge { env: self.env, object: ret }
  }

  pub fn get_game() -> Game {
    let ret = java_method!(self.env, "getGame", "()Lorg/spongepowered/api/Game;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getGame was null") }
    Game { env: self.env, object: ret }
  }

  pub fn get_registry() -> GameRegistry {
    let ret = java_method!(self.env, "getRegistry", "()Lorg/spongepowered/api/GameRegistry;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getRegistry was null") }
    GameRegistry { env: self.env, object: ret }
  }

  pub fn get_service_manager() -> service_ServiceManager {
    let ret = java_method!(self.env, "getServiceManager", "()Lorg/spongepowered/api/service/ServiceManager;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getServiceManager was null") }
    service_ServiceManager { env: self.env, object: ret }
  }

  pub fn get_event_manager() -> event_EventManager {
    let ret = java_method!(self.env, "getEventManager", "()Lorg/spongepowered/api/event/EventManager;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getEventManager was null") }
    event_EventManager { env: self.env, object: ret }
  }

  pub fn get_asset_manager() -> asset_AssetManager {
    let ret = java_method!(self.env, "getAssetManager", "()Lorg/spongepowered/api/asset/AssetManager;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getAssetManager was null") }
    asset_AssetManager { env: self.env, object: ret }
  }

  pub fn get_scheduler() -> scheduler_Scheduler {
    let ret = java_method!(self.env, "getScheduler", "()Lorg/spongepowered/api/scheduler/Scheduler;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getScheduler was null") }
    scheduler_Scheduler { env: self.env, object: ret }
  }

  pub fn get_data_manager() -> data_DataManager {
    let ret = java_method!(self.env, "getDataManager", "()Lorg/spongepowered/api/data/DataManager;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getDataManager was null") }
    data_DataManager { env: self.env, object: ret }
  }

  pub fn get_plugin_manager() -> plugin_PluginManager {
    let ret = java_method!(self.env, "getPluginManager", "()Lorg/spongepowered/api/plugin/PluginManager;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getPluginManager was null") }
    plugin_PluginManager { env: self.env, object: ret }
  }

  pub fn get_platform() -> Platform {
    let ret = java_method!(self.env, "getPlatform", "()Lorg/spongepowered/api/Platform;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getPlatform was null") }
    Platform { env: self.env, object: ret }
  }

  pub fn is_server_available() -> bool {
    java_method!(self.env, "isServerAvailable", "()Z", CallStaticBooleanMethod) == 1
  }

  pub fn get_server() -> Server {
    let ret = java_method!(self.env, "getServer", "()Lorg/spongepowered/api/Server;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getServer was null") }
    Server { env: self.env, object: ret }
  }

  pub fn get_dictionary() -> GameDictionary {
    let ret = java_method!(self.env, "getDictionary", "()Lorg/spongepowered/api/GameDictionary;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getDictionary was null") }
    GameDictionary { env: self.env, object: ret }
  }

  pub fn get_command_manager() -> command_CommandManager {
    let ret = java_method!(self.env, "getCommandManager", "()Lorg/spongepowered/api/command/CommandManager;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getCommandManager was null") }
    command_CommandManager { env: self.env, object: ret }
  }

  pub fn get_channel_registrar() -> network_ChannelRegistrar {
    let ret = java_method!(self.env, "getChannelRegistrar", "()Lorg/spongepowered/api/network/ChannelRegistrar;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/Sponge#getChannelRegistrar was null") }
    network_ChannelRegistrar { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_achievement_Achievement_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_achievement_Achievement_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_achievement_Achievement_Builder {
      env: env,
      object: object
    }
  }

  pub fn name(&self, param_1: jobject) -> statistic_achievement_Achievement_Builder {
    let ret = java_method!(self.env, self.object, "name", "(Ljava/lang/String;)Lorg/spongepowered/api/statistic/achievement/Achievement$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement$Builder#name was null") }
    statistic_achievement_Achievement_Builder { env: self.env, object: ret }
  }

  pub fn translation(&self, param_1: text_translation_Translation) -> statistic_achievement_Achievement_Builder {
    let ret = java_method!(self.env, self.object, "translation", "(Lorg/spongepowered/api/text/translation/Translation;)Lorg/spongepowered/api/statistic/achievement/Achievement$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement$Builder#translation was null") }
    statistic_achievement_Achievement_Builder { env: self.env, object: ret }
  }

  pub fn description(&self, param_1: text_translation_Translation) -> statistic_achievement_Achievement_Builder {
    let ret = java_method!(self.env, self.object, "description", "(Lorg/spongepowered/api/text/translation/Translation;)Lorg/spongepowered/api/statistic/achievement/Achievement$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement$Builder#description was null") }
    statistic_achievement_Achievement_Builder { env: self.env, object: ret }
  }

  pub fn parent(&self, param_1: statistic_achievement_Achievement) -> statistic_achievement_Achievement_Builder {
    let ret = java_method!(self.env, self.object, "parent", "(Lorg/spongepowered/api/statistic/achievement/Achievement;)Lorg/spongepowered/api/statistic/achievement/Achievement$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement$Builder#parent was null") }
    statistic_achievement_Achievement_Builder { env: self.env, object: ret }
  }

  pub fn source_statistic(&self, param_1: statistic_Statistic) -> statistic_achievement_Achievement_Builder {
    let ret = java_method!(self.env, self.object, "sourceStatistic", "(Lorg/spongepowered/api/statistic/Statistic;)Lorg/spongepowered/api/statistic/achievement/Achievement$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement$Builder#sourceStatistic was null") }
    statistic_achievement_Achievement_Builder { env: self.env, object: ret }
  }

  pub fn target_value(&self, param_1: i64) -> statistic_achievement_Achievement_Builder {
    let ret = java_method!(self.env, self.object, "targetValue", "(J)Lorg/spongepowered/api/statistic/achievement/Achievement$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement$Builder#targetValue was null") }
    statistic_achievement_Achievement_Builder { env: self.env, object: ret }
  }

  pub fn build_and_register(&self) -> statistic_achievement_Achievement {
    let ret = java_method!(self.env, self.object, "buildAndRegister", "()Lorg/spongepowered/api/statistic/achievement/Achievement;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement$Builder#buildAndRegister was null") }
    statistic_achievement_Achievement { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_achievement_Achievement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_achievement_Achievement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_achievement_Achievement {
      env: env,
      object: object
    }
  }

  pub fn builder() -> statistic_achievement_Achievement_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/statistic/achievement/Achievement$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement#builder was null") }
    statistic_achievement_Achievement_Builder { env: self.env, object: ret }
  }

  pub fn get_description(&self) -> text_translation_Translation {
    let ret = java_method!(self.env, self.object, "getDescription", "()Lorg/spongepowered/api/text/translation/Translation;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement#getDescription was null") }
    text_translation_Translation { env: self.env, object: ret }
  }

  pub fn get_parent(&self) -> Option<statistic_achievement_Achievement> {
    let ret = java_method!(self.env, self.object, "getParent", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement#getParent was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(statistic_achievement_Achievement { env: self.env, object: unwrapped }) }
  }

  pub fn get_children(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getChildren", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement#getChildren was null") }
    ret
  }

  pub fn get_source_statistic(&self) -> Option<statistic_Statistic> {
    let ret = java_method!(self.env, self.object, "getSourceStatistic", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement#getSourceStatistic was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(statistic_Statistic { env: self.env, object: unwrapped }) }
  }

  pub fn get_statistic_target_value(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getStatisticTargetValue", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/achievement/Achievement#getStatisticTargetValue was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}

#[derive(Debug)]
pub struct statistic_achievement_Achievements {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_achievement_Achievements {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_achievement_Achievements {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct statistic_BlockStatistic_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_BlockStatistic_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_BlockStatistic_Builder {
      env: env,
      object: object
    }
  }

  pub fn block(&self, param_1: block_BlockType) -> statistic_BlockStatistic_Builder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/block/BlockType;)Lorg/spongepowered/api/statistic/BlockStatistic$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/BlockStatistic$Builder#block was null") }
    statistic_BlockStatistic_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_BlockStatistic {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_BlockStatistic {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_BlockStatistic {
      env: env,
      object: object
    }
  }

  pub fn get_block_type(&self) -> block_BlockType {
    let ret = java_method!(self.env, self.object, "getBlockType", "()Lorg/spongepowered/api/block/BlockType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/BlockStatistic#getBlockType was null") }
    block_BlockType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_EntityStatistic_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_EntityStatistic_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_EntityStatistic_Builder {
      env: env,
      object: object
    }
  }

  pub fn entity(&self, param_1: entity_EntityType) -> statistic_EntityStatistic_Builder {
    let ret = java_method!(self.env, self.object, "entity", "(Lorg/spongepowered/api/entity/EntityType;)Lorg/spongepowered/api/statistic/EntityStatistic$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/EntityStatistic$Builder#entity was null") }
    statistic_EntityStatistic_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_EntityStatistic {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_EntityStatistic {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_EntityStatistic {
      env: env,
      object: object
    }
  }

  pub fn get_entity_type(&self) -> entity_EntityType {
    let ret = java_method!(self.env, self.object, "getEntityType", "()Lorg/spongepowered/api/entity/EntityType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/EntityStatistic#getEntityType was null") }
    entity_EntityType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_ItemStatistic_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_ItemStatistic_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_ItemStatistic_Builder {
      env: env,
      object: object
    }
  }

  pub fn item(&self, param_1: item_ItemType) -> statistic_ItemStatistic_Builder {
    let ret = java_method!(self.env, self.object, "item", "(Lorg/spongepowered/api/item/ItemType;)Lorg/spongepowered/api/statistic/ItemStatistic$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/ItemStatistic$Builder#item was null") }
    statistic_ItemStatistic_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_ItemStatistic {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_ItemStatistic {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_ItemStatistic {
      env: env,
      object: object
    }
  }

  pub fn get_item_type(&self) -> item_ItemType {
    let ret = java_method!(self.env, self.object, "getItemType", "()Lorg/spongepowered/api/item/ItemType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/ItemStatistic#getItemType was null") }
    item_ItemType { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct statistic_Statistic_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_Statistic_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_Statistic_Builder {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct statistic_Statistic_StatisticBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_Statistic_StatisticBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_Statistic_StatisticBuilder {
      env: env,
      object: object
    }
  }

  pub fn name(&self, param_1: jobject) -> statistic_Statistic_StatisticBuilder {
    let ret = java_method!(self.env, self.object, "name", "(Ljava/lang/String;)Lorg/spongepowered/api/statistic/Statistic$StatisticBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic$StatisticBuilder#name was null") }
    statistic_Statistic_StatisticBuilder { env: self.env, object: ret }
  }

  pub fn translation(&self, param_1: text_translation_Translation) -> statistic_Statistic_StatisticBuilder {
    let ret = java_method!(self.env, self.object, "translation", "(Lorg/spongepowered/api/text/translation/Translation;)Lorg/spongepowered/api/statistic/Statistic$StatisticBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic$StatisticBuilder#translation was null") }
    statistic_Statistic_StatisticBuilder { env: self.env, object: ret }
  }

  pub fn format(&self, param_1: statistic_StatisticFormat) -> statistic_Statistic_StatisticBuilder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/statistic/StatisticFormat;)Lorg/spongepowered/api/statistic/Statistic$StatisticBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic$StatisticBuilder#format was null") }
    statistic_Statistic_StatisticBuilder { env: self.env, object: ret }
  }

  pub fn group(&self, param_1: statistic_StatisticGroup) -> statistic_Statistic_StatisticBuilder {
    let ret = java_method!(self.env, self.object, "group", "(Lorg/spongepowered/api/statistic/StatisticGroup;)Lorg/spongepowered/api/statistic/Statistic$StatisticBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic$StatisticBuilder#group was null") }
    statistic_Statistic_StatisticBuilder { env: self.env, object: ret }
  }

  pub fn build_and_register(&self) -> statistic_Statistic {
    let ret = java_method!(self.env, self.object, "buildAndRegister", "()Lorg/spongepowered/api/statistic/Statistic;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic$StatisticBuilder#buildAndRegister was null") }
    statistic_Statistic { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: statistic_Statistic) -> statistic_Statistic_StatisticBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/statistic/Statistic;)Lorg/spongepowered/api/statistic/Statistic$StatisticBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic$StatisticBuilder#from was null") }
    statistic_Statistic_StatisticBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> statistic_Statistic_StatisticBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/statistic/Statistic$StatisticBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic$StatisticBuilder#reset was null") }
    statistic_Statistic_StatisticBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic$StatisticBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic$StatisticBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_Statistic {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_Statistic {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_Statistic {
      env: env,
      object: object
    }
  }

  pub fn builder() -> statistic_Statistic_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/statistic/Statistic$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic#builder was null") }
    statistic_Statistic_Builder { env: self.env, object: ret }
  }

  pub fn get_statistic_format(&self) -> Option<statistic_StatisticFormat> {
    let ret = java_method!(self.env, self.object, "getStatisticFormat", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic#getStatisticFormat was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(statistic_StatisticFormat { env: self.env, object: unwrapped }) }
  }

  pub fn get_group(&self) -> statistic_StatisticGroup {
    let ret = java_method!(self.env, self.object, "getGroup", "()Lorg/spongepowered/api/statistic/StatisticGroup;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/Statistic#getGroup was null") }
    statistic_StatisticGroup { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_StatisticFormat {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_StatisticFormat {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_StatisticFormat {
      env: env,
      object: object
    }
  }

  pub fn format(&self, param_1: i64) -> jobject {
    let ret = java_method!(self.env, self.object, "format", "(J)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/StatisticFormat#format was null") }
    ret
  }

}

#[derive(Debug)]
pub struct statistic_StatisticFormats {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_StatisticFormats {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_StatisticFormats {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct statistic_StatisticGroup {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_StatisticGroup {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_StatisticGroup {
      env: env,
      object: object
    }
  }

  pub fn get_default_statistic_format(&self) -> statistic_StatisticFormat {
    let ret = java_method!(self.env, self.object, "getDefaultStatisticFormat", "()Lorg/spongepowered/api/statistic/StatisticFormat;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/StatisticGroup#getDefaultStatisticFormat was null") }
    statistic_StatisticFormat { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_StatisticGroups {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_StatisticGroups {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_StatisticGroups {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct statistic_Statistics {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_Statistics {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_Statistics {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct statistic_TeamStatistic_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_TeamStatistic_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_TeamStatistic_Builder {
      env: env,
      object: object
    }
  }

  pub fn team_color(&self, param_1: text_format_TextColor) -> statistic_TeamStatistic_Builder {
    let ret = java_method!(self.env, self.object, "teamColor", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/statistic/TeamStatistic$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/TeamStatistic$Builder#teamColor was null") }
    statistic_TeamStatistic_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct statistic_TeamStatistic {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl statistic_TeamStatistic {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    statistic_TeamStatistic {
      env: env,
      object: object
    }
  }

  pub fn get_team_color(&self) -> text_format_TextColor {
    let ret = java_method!(self.env, self.object, "getTeamColor", "()Lorg/spongepowered/api/text/format/TextColor;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/statistic/TeamStatistic#getTeamColor was null") }
    text_format_TextColor { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_action_ClickAction_ChangePage {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_ClickAction_ChangePage {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_ClickAction_ChangePage {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_ClickAction_ExecuteCallback {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_ClickAction_ExecuteCallback {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_ClickAction_ExecuteCallback {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_ClickAction_OpenUrl {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_ClickAction_OpenUrl {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_ClickAction_OpenUrl {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_ClickAction_RunCommand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_ClickAction_RunCommand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_ClickAction_RunCommand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_ClickAction_SuggestCommand {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_ClickAction_SuggestCommand {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_ClickAction_SuggestCommand {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_ClickAction {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_ClickAction {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_ClickAction {
      env: env,
      object: object
    }
  }

  pub fn apply_to(&self, param_1: text_Text_Builder) {
    java_method!(self.env, self.object, "applyTo", "(Lorg/spongepowered/api/text/Text$Builder;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct text_action_HoverAction_ShowAchievement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_HoverAction_ShowAchievement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_HoverAction_ShowAchievement {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_HoverAction_ShowEntity_Ref {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_HoverAction_ShowEntity_Ref {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_HoverAction_ShowEntity_Ref {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject, param_3: entity_EntityType) -> text_action_HoverAction_ShowEntity_Ref {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/UUID;Ljava/lang/String;Lorg/spongepowered/api/entity/EntityType;)Lorg/spongepowered/api/text/action/HoverAction$ShowEntity$Ref", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/HoverAction$ShowEntity$Ref#<init> was null") }
    text_action_HoverAction_ShowEntity_Ref { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: jobject) -> text_action_HoverAction_ShowEntity_Ref {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/UUID;Ljava/lang/String;)Lorg/spongepowered/api/text/action/HoverAction$ShowEntity$Ref", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/HoverAction$ShowEntity$Ref#<init> was null") }
    text_action_HoverAction_ShowEntity_Ref { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: entity_Entity, param_2: jobject) -> text_action_HoverAction_ShowEntity_Ref {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/entity/Entity;Ljava/lang/String;)Lorg/spongepowered/api/text/action/HoverAction$ShowEntity$Ref", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/HoverAction$ShowEntity$Ref#<init> was null") }
    text_action_HoverAction_ShowEntity_Ref { env: self.env, object: ret }
  }

  pub fn get_unique_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getUniqueId", "()Ljava/util/UUID;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/HoverAction$ShowEntity$Ref#getUniqueId was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/HoverAction$ShowEntity$Ref#getName was null") }
    ret
  }

  pub fn get_type(&self) -> Option<entity_EntityType> {
    let ret = java_method!(self.env, self.object, "getType", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/HoverAction$ShowEntity$Ref#getType was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_EntityType { env: self.env, object: unwrapped }) }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/HoverAction$ShowEntity$Ref#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_action_HoverAction_ShowEntity {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_HoverAction_ShowEntity {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_HoverAction_ShowEntity {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_HoverAction_ShowItem {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_HoverAction_ShowItem {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_HoverAction_ShowItem {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_HoverAction_ShowText {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_HoverAction_ShowText {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_HoverAction_ShowText {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_HoverAction {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_HoverAction {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_HoverAction {
      env: env,
      object: object
    }
  }

  pub fn apply_to(&self, param_1: text_Text_Builder) {
    java_method!(self.env, self.object, "applyTo", "(Lorg/spongepowered/api/text/Text$Builder;)V", CallVoidMethodA, param_1);
  }

}


#[derive(Debug)]
pub struct text_action_ShiftClickAction_InsertText {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_ShiftClickAction_InsertText {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_ShiftClickAction_InsertText {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_action_ShiftClickAction {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_ShiftClickAction {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_ShiftClickAction {
      env: env,
      object: object
    }
  }

  pub fn apply_to(&self, param_1: text_Text_Builder) {
    java_method!(self.env, self.object, "applyTo", "(Lorg/spongepowered/api/text/Text$Builder;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct text_action_TextAction {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_TextAction {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_TextAction {
      env: env,
      object: object
    }
  }

  pub fn get_result(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getResult", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextAction#getResult was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextAction#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_action_TextActions {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_action_TextActions {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_action_TextActions {
      env: env,
      object: object
    }
  }

  pub fn open_url(param_1: jobject) -> text_action_ClickAction_OpenUrl {
    let ret = java_method!(self.env, "openUrl", "(Ljava/net/URL;)Lorg/spongepowered/api/text/action/ClickAction$OpenUrl;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#openUrl was null") }
    text_action_ClickAction_OpenUrl { env: self.env, object: ret }
  }

  pub fn run_command(param_1: jobject) -> text_action_ClickAction_RunCommand {
    let ret = java_method!(self.env, "runCommand", "(Ljava/lang/String;)Lorg/spongepowered/api/text/action/ClickAction$RunCommand;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#runCommand was null") }
    text_action_ClickAction_RunCommand { env: self.env, object: ret }
  }

  pub fn change_page(param_1: i32) -> text_action_ClickAction_ChangePage {
    let ret = java_method!(self.env, "changePage", "(I)Lorg/spongepowered/api/text/action/ClickAction$ChangePage;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#changePage was null") }
    text_action_ClickAction_ChangePage { env: self.env, object: ret }
  }

  pub fn suggest_command(param_1: jobject) -> text_action_ClickAction_SuggestCommand {
    let ret = java_method!(self.env, "suggestCommand", "(Ljava/lang/String;)Lorg/spongepowered/api/text/action/ClickAction$SuggestCommand;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#suggestCommand was null") }
    text_action_ClickAction_SuggestCommand { env: self.env, object: ret }
  }

  pub fn execute_callback(param_1: jobject) -> text_action_ClickAction_ExecuteCallback {
    let ret = java_method!(self.env, "executeCallback", "(Ljava/util/function/Consumer;)Lorg/spongepowered/api/text/action/ClickAction$ExecuteCallback;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#executeCallback was null") }
    text_action_ClickAction_ExecuteCallback { env: self.env, object: ret }
  }

  pub fn show_text(param_1: text_Text) -> text_action_HoverAction_ShowText {
    let ret = java_method!(self.env, "showText", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/action/HoverAction$ShowText;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#showText was null") }
    text_action_HoverAction_ShowText { env: self.env, object: ret }
  }

  pub fn show_item(param_1: item_inventory_ItemStack) -> text_action_HoverAction_ShowItem {
    let ret = java_method!(self.env, "showItem", "(Lorg/spongepowered/api/item/inventory/ItemStack;)Lorg/spongepowered/api/text/action/HoverAction$ShowItem;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#showItem was null") }
    text_action_HoverAction_ShowItem { env: self.env, object: ret }
  }

  pub fn show_achievement(param_1: statistic_achievement_Achievement) -> text_action_HoverAction_ShowAchievement {
    let ret = java_method!(self.env, "showAchievement", "(Lorg/spongepowered/api/statistic/achievement/Achievement;)Lorg/spongepowered/api/text/action/HoverAction$ShowAchievement;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#showAchievement was null") }
    text_action_HoverAction_ShowAchievement { env: self.env, object: ret }
  }

  pub fn show_entity(param_1: text_action_HoverAction_ShowEntity_Ref) -> text_action_HoverAction_ShowEntity {
    let ret = java_method!(self.env, "showEntity", "(Lorg/spongepowered/api/text/action/HoverAction$ShowEntity$Ref;)Lorg/spongepowered/api/text/action/HoverAction$ShowEntity;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#showEntity was null") }
    text_action_HoverAction_ShowEntity { env: self.env, object: ret }
  }

  pub fn show_entity_1(param_1: jobject, param_2: jobject, param_3: entity_EntityType) -> text_action_HoverAction_ShowEntity {
    let ret = java_method!(self.env, "showEntity", "(Ljava/util/UUID;Ljava/lang/String;Lorg/spongepowered/api/entity/EntityType;)Lorg/spongepowered/api/text/action/HoverAction$ShowEntity;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#showEntity was null") }
    text_action_HoverAction_ShowEntity { env: self.env, object: ret }
  }

  pub fn show_entity_2(param_1: jobject, param_2: jobject) -> text_action_HoverAction_ShowEntity {
    let ret = java_method!(self.env, "showEntity", "(Ljava/util/UUID;Ljava/lang/String;)Lorg/spongepowered/api/text/action/HoverAction$ShowEntity;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#showEntity was null") }
    text_action_HoverAction_ShowEntity { env: self.env, object: ret }
  }

  pub fn show_entity_3(param_1: entity_Entity, param_2: jobject) -> text_action_HoverAction_ShowEntity {
    let ret = java_method!(self.env, "showEntity", "(Lorg/spongepowered/api/entity/Entity;Ljava/lang/String;)Lorg/spongepowered/api/text/action/HoverAction$ShowEntity;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#showEntity was null") }
    text_action_HoverAction_ShowEntity { env: self.env, object: ret }
  }

  pub fn insert_text(param_1: jobject) -> text_action_ShiftClickAction_InsertText {
    let ret = java_method!(self.env, "insertText", "(Ljava/lang/String;)Lorg/spongepowered/api/text/action/ShiftClickAction$InsertText;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/action/TextActions#insertText was null") }
    text_action_ShiftClickAction_InsertText { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_BookView_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_BookView_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_BookView_Builder {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/BookView$Builder", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#<init> was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn title(&self, param_1: text_Text) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "title", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#title was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn author(&self, param_1: text_Text) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "author", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#author was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn add_page(&self, param_1: text_Text) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "addPage", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#addPage was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn add_pages(&self, param_1: jobject) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "addPages", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#addPages was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn add_pages_1(&self, param_1: &[text_Text]) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "addPages", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#addPages was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn insert_page(&self, param_1: i32, param_2: text_Text) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "insertPage", "(ILorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#insertPage was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn insert_pages(&self, param_1: i32, param_2: jobject) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "insertPages", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#insertPages was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn insert_pages_1(&self, param_1: i32, param_2: &[text_Text]) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "insertPages", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#insertPages was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn remove_page(&self, param_1: text_Text) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "removePage", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#removePage was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn remove_page_1(&self, param_1: i32) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "removePage", "(I)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#removePage was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn remove_pages(&self, param_1: jobject) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "removePages", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#removePages was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn remove_pages_1(&self, param_1: &[text_Text]) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "removePages", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#removePages was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn clear_pages(&self) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "clearPages", "()Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#clearPages was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> text_BookView {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/BookView;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#build was null") }
    text_BookView { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: text_BookView) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/text/BookView;)Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#from was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> text_BookView_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/text/BookView$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#reset was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_BookView {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_BookView {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_BookView {
      env: env,
      object: object
    }
  }

  pub fn get_title(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getTitle", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView#getTitle was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_author(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getAuthor", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView#getAuthor was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_pages(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPages", "()Lcom/google/common/collect/ImmutableList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView#getPages was null") }
    ret
  }

  pub fn builder() -> text_BookView_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/text/BookView$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView#builder was null") }
    text_BookView_Builder { env: self.env, object: ret }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/BookView#toString was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct text_channel_AbstractMutableMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_AbstractMutableMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_AbstractMutableMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn add_member(&self, param_1: text_channel_MessageReceiver) -> bool {
    java_method!(self.env, self.object, "addMember", "(Lorg/spongepowered/api/text/channel/MessageReceiver;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_member(&self, param_1: text_channel_MessageReceiver) -> bool {
    java_method!(self.env, self.object, "removeMember", "(Lorg/spongepowered/api/text/channel/MessageReceiver;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear_members(&self) {
    java_method!(self.env, self.object, "clearMembers", "()V", CallVoidMethod);
  }

  pub fn get_members(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMembers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/AbstractMutableMessageChannel#getMembers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_channel_ChatTypeMessageReceiver {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_ChatTypeMessageReceiver {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_ChatTypeMessageReceiver {
      env: env,
      object: object
    }
  }

  pub fn send_message(&self, param_1: text_chat_ChatType, param_2: text_Text) {
    java_method!(self.env, self.object, "sendMessage", "(Lorg/spongepowered/api/text/chat/ChatType;Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_messages(&self, param_1: text_chat_ChatType, param_2: &[text_Text]) {
    java_method!(self.env, self.object, "sendMessages", "(Lorg/spongepowered/api/text/chat/ChatType;[Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_messages_1(&self, param_1: text_chat_ChatType, param_2: jobject) {
    java_method!(self.env, self.object, "sendMessages", "(Lorg/spongepowered/api/text/chat/ChatType;Ljava/lang/Iterable;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_message_1(&self, param_1: text_chat_ChatType, param_2: text_TextTemplate) {
    java_method!(self.env, self.object, "sendMessage", "(Lorg/spongepowered/api/text/chat/ChatType;Lorg/spongepowered/api/text/TextTemplate;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_message_2(&self, param_1: text_chat_ChatType, param_2: text_TextTemplate, param_3: jobject) {
    java_method!(self.env, self.object, "sendMessage", "(Lorg/spongepowered/api/text/chat/ChatType;Lorg/spongepowered/api/text/TextTemplate;Ljava/util/Map;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}

#[derive(Debug)]
pub struct text_channel_impl_DelegateMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_impl_DelegateMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_impl_DelegateMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: text_channel_MessageChannel) -> text_channel_impl_DelegateMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/channel/MessageChannel;)Lorg/spongepowered/api/text/channel/impl/DelegateMessageChannel", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/impl/DelegateMessageChannel#<init> was null") }
    text_channel_impl_DelegateMessageChannel { env: self.env, object: ret }
  }

  pub fn transform_message(&self, param_1: jobject, param_2: text_channel_MessageReceiver, param_3: text_Text, param_4: text_chat_ChatType) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "transformMessage", "(Ljava/lang/Object;Lorg/spongepowered/api/text/channel/MessageReceiver;Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/chat/ChatType;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/impl/DelegateMessageChannel#transformMessage was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_members(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMembers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/impl/DelegateMessageChannel#getMembers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_channel_impl_DelegateMutableMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_impl_DelegateMutableMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_impl_DelegateMutableMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: text_channel_MessageChannel) -> text_channel_impl_DelegateMutableMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/channel/MessageChannel;)Lorg/spongepowered/api/text/channel/impl/DelegateMutableMessageChannel", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/impl/DelegateMutableMessageChannel#<init> was null") }
    text_channel_impl_DelegateMutableMessageChannel { env: self.env, object: ret }
  }

  pub fn transform_message(&self, param_1: jobject, param_2: text_channel_MessageReceiver, param_3: text_Text, param_4: text_chat_ChatType) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "transformMessage", "(Ljava/lang/Object;Lorg/spongepowered/api/text/channel/MessageReceiver;Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/chat/ChatType;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/impl/DelegateMutableMessageChannel#transformMessage was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

}


#[derive(Debug)]
pub struct text_channel_impl_SimpleMutableMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_impl_SimpleMutableMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_impl_SimpleMutableMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> text_channel_impl_SimpleMutableMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/channel/impl/SimpleMutableMessageChannel", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/impl/SimpleMutableMessageChannel#<init> was null") }
    text_channel_impl_SimpleMutableMessageChannel { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> text_channel_impl_SimpleMutableMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/channel/impl/SimpleMutableMessageChannel", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/impl/SimpleMutableMessageChannel#<init> was null") }
    text_channel_impl_SimpleMutableMessageChannel { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_channel_MessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_MessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_MessageChannel {
      env: env,
      object: object
    }
  }

  pub fn permission(param_1: jobject) -> text_channel_MessageChannel {
    let ret = java_method!(self.env, "permission", "(Ljava/lang/String;)Lorg/spongepowered/api/text/channel/MessageChannel;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageChannel#permission was null") }
    text_channel_MessageChannel { env: self.env, object: ret }
  }

  pub fn combined(param_1: &[text_channel_MessageChannel]) -> text_channel_MessageChannel {
    let ret = java_method!(self.env, "combined", "([Lorg/spongepowered/api/text/channel/MessageChannel;)Lorg/spongepowered/api/text/channel/MessageChannel;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageChannel#combined was null") }
    text_channel_MessageChannel { env: self.env, object: ret }
  }

  pub fn combined_1(param_1: jobject) -> text_channel_MessageChannel {
    let ret = java_method!(self.env, "combined", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/channel/MessageChannel;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageChannel#combined was null") }
    text_channel_MessageChannel { env: self.env, object: ret }
  }

  pub fn fixed(param_1: &[text_channel_MessageReceiver]) -> text_channel_MessageChannel {
    let ret = java_method!(self.env, "fixed", "([Lorg/spongepowered/api/text/channel/MessageReceiver;)Lorg/spongepowered/api/text/channel/MessageChannel;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageChannel#fixed was null") }
    text_channel_MessageChannel { env: self.env, object: ret }
  }

  pub fn fixed_1(param_1: jobject) -> text_channel_MessageChannel {
    let ret = java_method!(self.env, "fixed", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/channel/MessageChannel;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageChannel#fixed was null") }
    text_channel_MessageChannel { env: self.env, object: ret }
  }

  pub fn world(param_1: world_World) -> text_channel_MessageChannel {
    let ret = java_method!(self.env, "world", "(Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/text/channel/MessageChannel;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageChannel#world was null") }
    text_channel_MessageChannel { env: self.env, object: ret }
  }

  pub fn send(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "send", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn send_1(&self, param_1: text_Text, param_2: text_chat_ChatType) {
    java_method!(self.env, self.object, "send", "(Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/chat/ChatType;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_2(&self, param_1: jobject, param_2: text_Text) {
    java_method!(self.env, self.object, "send", "(Ljava/lang/Object;Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn send_3(&self, param_1: jobject, param_2: text_Text, param_3: text_chat_ChatType) {
    java_method!(self.env, self.object, "send", "(Ljava/lang/Object;Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/chat/ChatType;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn transform_message(&self, param_1: jobject, param_2: text_channel_MessageReceiver, param_3: text_Text, param_4: text_chat_ChatType) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "transformMessage", "(Ljava/lang/Object;Lorg/spongepowered/api/text/channel/MessageReceiver;Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/chat/ChatType;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageChannel#transformMessage was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_members(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMembers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageChannel#getMembers was null") }
    ret
  }

  pub fn as_mutable(&self) -> text_channel_MutableMessageChannel {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/text/channel/MutableMessageChannel;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageChannel#asMutable was null") }
    text_channel_MutableMessageChannel { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_channel_MessageReceiver {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_MessageReceiver {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_MessageReceiver {
      env: env,
      object: object
    }
  }

  pub fn send_message(&self, param_1: text_Text) {
    java_method!(self.env, self.object, "sendMessage", "(Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn send_messages(&self, param_1: &[text_Text]) {
    java_method!(self.env, self.object, "sendMessages", "([Lorg/spongepowered/api/text/Text;)V", CallVoidMethodA, param_1);
  }

  pub fn send_messages_1(&self, param_1: jobject) {
    java_method!(self.env, self.object, "sendMessages", "(Ljava/lang/Iterable;)V", CallVoidMethodA, param_1);
  }

  pub fn send_message_1(&self, param_1: text_TextTemplate) {
    java_method!(self.env, self.object, "sendMessage", "(Lorg/spongepowered/api/text/TextTemplate;)V", CallVoidMethodA, param_1);
  }

  pub fn send_message_2(&self, param_1: text_TextTemplate, param_2: jobject) {
    java_method!(self.env, self.object, "sendMessage", "(Lorg/spongepowered/api/text/TextTemplate;Ljava/util/Map;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_message_channel(&self) -> text_channel_MessageChannel {
    let ret = java_method!(self.env, self.object, "getMessageChannel", "()Lorg/spongepowered/api/text/channel/MessageChannel;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MessageReceiver#getMessageChannel was null") }
    text_channel_MessageChannel { env: self.env, object: ret }
  }

  pub fn set_message_channel(&self, param_1: text_channel_MessageChannel) {
    java_method!(self.env, self.object, "setMessageChannel", "(Lorg/spongepowered/api/text/channel/MessageChannel;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct text_channel_MutableMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_MutableMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_MutableMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn add_member(&self, param_1: text_channel_MessageReceiver) -> bool {
    java_method!(self.env, self.object, "addMember", "(Lorg/spongepowered/api/text/channel/MessageReceiver;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_member(&self, param_1: text_channel_MessageReceiver) -> bool {
    java_method!(self.env, self.object, "removeMember", "(Lorg/spongepowered/api/text/channel/MessageReceiver;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear_members(&self) {
    java_method!(self.env, self.object, "clearMembers", "()V", CallVoidMethod);
  }

  pub fn as_mutable(&self) -> text_channel_MutableMessageChannel {
    let ret = java_method!(self.env, self.object, "asMutable", "()Lorg/spongepowered/api/text/channel/MutableMessageChannel;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/MutableMessageChannel#asMutable was null") }
    text_channel_MutableMessageChannel { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct text_channel_type_CombinedMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_type_CombinedMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_type_CombinedMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: &[text_channel_MessageChannel]) -> text_channel_type_CombinedMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "([Lorg/spongepowered/api/text/channel/MessageChannel;)Lorg/spongepowered/api/text/channel/type/CombinedMessageChannel", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/CombinedMessageChannel#<init> was null") }
    text_channel_type_CombinedMessageChannel { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> text_channel_type_CombinedMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/channel/type/CombinedMessageChannel", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/CombinedMessageChannel#<init> was null") }
    text_channel_type_CombinedMessageChannel { env: self.env, object: ret }
  }

  pub fn transform_message(&self, param_1: jobject, param_2: text_channel_MessageReceiver, param_3: text_Text, param_4: text_chat_ChatType) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "transformMessage", "(Ljava/lang/Object;Lorg/spongepowered/api/text/channel/MessageReceiver;Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/chat/ChatType;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/CombinedMessageChannel#transformMessage was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_members(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMembers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/CombinedMessageChannel#getMembers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_channel_type_FixedMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_type_FixedMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_type_FixedMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: &[text_channel_MessageReceiver]) -> text_channel_type_FixedMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "([Lorg/spongepowered/api/text/channel/MessageReceiver;)Lorg/spongepowered/api/text/channel/type/FixedMessageChannel", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/FixedMessageChannel#<init> was null") }
    text_channel_type_FixedMessageChannel { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> text_channel_type_FixedMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/channel/type/FixedMessageChannel", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/FixedMessageChannel#<init> was null") }
    text_channel_type_FixedMessageChannel { env: self.env, object: ret }
  }

  pub fn get_members(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMembers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/FixedMessageChannel#getMembers was null") }
    ret
  }

}


#[derive(Debug)]
pub struct text_channel_type_PermissionMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_type_PermissionMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_type_PermissionMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> text_channel_type_PermissionMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/text/channel/type/PermissionMessageChannel", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/PermissionMessageChannel#<init> was null") }
    text_channel_type_PermissionMessageChannel { env: self.env, object: ret }
  }

  pub fn get_permission(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPermission", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/PermissionMessageChannel#getPermission was null") }
    ret
  }

  pub fn get_members(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMembers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/PermissionMessageChannel#getMembers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_channel_type_WorldMessageChannel {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_channel_type_WorldMessageChannel {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_channel_type_WorldMessageChannel {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: world_World) -> text_channel_type_WorldMessageChannel {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/text/channel/type/WorldMessageChannel", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/WorldMessageChannel#<init> was null") }
    text_channel_type_WorldMessageChannel { env: self.env, object: ret }
  }

  pub fn get_members(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMembers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/channel/type/WorldMessageChannel#getMembers was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_chat_ChatType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_chat_ChatType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_chat_ChatType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_chat_ChatTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_chat_ChatTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_chat_ChatTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_chat_ChatVisibilities {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_chat_ChatVisibilities {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_chat_ChatVisibilities {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_chat_ChatVisibility {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_chat_ChatVisibility {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_chat_ChatVisibility {
      env: env,
      object: object
    }
  }

  pub fn is_visible(&self, param_1: text_chat_ChatType) -> bool {
    java_method!(self.env, self.object, "isVisible", "(Lorg/spongepowered/api/text/chat/ChatType;)Z", CallBooleanMethodA, param_1) == 1
  }

}



#[derive(Debug)]
pub struct text_format_TextColor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_format_TextColor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_format_TextColor {
      env: env,
      object: object
    }
  }

  pub fn get_color(&self) -> util_Color {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/util/Color;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextColor#getColor was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn apply_to(&self, param_1: text_Text_Builder) {
    java_method!(self.env, self.object, "applyTo", "(Lorg/spongepowered/api/text/Text$Builder;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct text_format_TextColors_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_format_TextColors_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_format_TextColors_1 {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextColors$1#getName was null") }
    ret
  }

  pub fn get_color(&self) -> util_Color {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/util/Color;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextColors$1#getColor was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextColors$1#getId was null") }
    ret
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextColors$1#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_format_TextColors {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_format_TextColors {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_format_TextColors {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_format_TextFormat {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_format_TextFormat {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_format_TextFormat {
      env: env,
      object: object
    }
  }

  pub fn of() -> text_format_TextFormat {
    let ret = java_method!(self.env, "of", "()Lorg/spongepowered/api/text/format/TextFormat;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#of was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn of_1(param_1: text_format_TextStyle) -> text_format_TextFormat {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/format/TextFormat;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#of was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn of_2(param_1: text_format_TextColor) -> text_format_TextFormat {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/format/TextFormat;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#of was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn of_3(param_1: text_format_TextColor, param_2: text_format_TextStyle) -> text_format_TextFormat {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/text/format/TextColor;Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/format/TextFormat;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#of was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn get_color(&self) -> text_format_TextColor {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/text/format/TextColor;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#getColor was null") }
    text_format_TextColor { env: self.env, object: ret }
  }

  pub fn get_style(&self) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "getStyle", "()Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#getStyle was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: text_format_TextColor) -> text_format_TextFormat {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/format/TextFormat;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#color was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn style(&self, param_1: text_format_TextStyle) -> text_format_TextFormat {
    let ret = java_method!(self.env, self.object, "style", "(Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/format/TextFormat;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#style was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn merge(&self, param_1: text_format_TextFormat) -> text_format_TextFormat {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/format/TextFormat;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#merge was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn apply_to(&self, param_1: text_Text_Builder) {
    java_method!(self.env, self.object, "applyTo", "(Lorg/spongepowered/api/text/Text$Builder;)V", CallVoidMethodA, param_1);
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextFormat#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_format_TextStyle_Base {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_format_TextStyle_Base {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_format_TextStyle_Base {
      env: env,
      object: object
    }
  }

  pub fn is_composite(&self) -> bool {
    java_method!(self.env, self.object, "isComposite", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct text_format_TextStyle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_format_TextStyle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_format_TextStyle {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject, param_3: jobject, param_4: jobject, param_5: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#<init> was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn is_composite(&self) -> bool {
    java_method!(self.env, self.object, "isComposite", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn bold(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "bold", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#bold was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn italic(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "italic", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#italic was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn underline(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "underline", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#underline was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn strikethrough(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "strikethrough", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#strikethrough was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn obfuscated(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "obfuscated", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#obfuscated was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn is_bold(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "isBold", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#isBold was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn is_italic(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "isItalic", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#isItalic was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn has_underline(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "hasUnderline", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#hasUnderline was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn has_strikethrough(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "hasStrikethrough", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#hasStrikethrough was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn is_obfuscated(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "isObfuscated", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#isObfuscated was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn contains(&self, param_1: &[text_format_TextStyle]) -> bool {
    java_method!(self.env, self.object, "contains", "([Lorg/spongepowered/api/text/format/TextStyle;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn negate(&self) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "negate", "()Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#negate was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn and(&self, param_1: &[text_format_TextStyle]) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "and", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#and was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn and_not(&self, param_1: &[text_format_TextStyle]) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "andNot", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#andNot was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn apply_to(&self, param_1: text_Text_Builder) {
    java_method!(self.env, self.object, "applyTo", "(Lorg/spongepowered/api/text/Text$Builder;)V", CallVoidMethodA, param_1);
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyle#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_format_TextStyles_DummyTextStyle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_format_TextStyles_DummyTextStyle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_format_TextStyles_DummyTextStyle {
      env: env,
      object: object
    }
  }

  pub fn is_composite(&self) -> bool {
    java_method!(self.env, self.object, "isComposite", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn bold(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "bold", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#bold was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn italic(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "italic", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#italic was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn underline(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "underline", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#underline was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn strikethrough(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "strikethrough", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#strikethrough was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn obfuscated(&self, param_1: jobject) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "obfuscated", "(Ljava/lang/Boolean;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#obfuscated was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn is_bold(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "isBold", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#isBold was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn is_italic(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "isItalic", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#isItalic was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn has_underline(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "hasUnderline", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#hasUnderline was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn has_strikethrough(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "hasStrikethrough", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#hasStrikethrough was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn is_obfuscated(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "isObfuscated", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#isObfuscated was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn contains(&self, param_1: &[text_format_TextStyle]) -> bool {
    java_method!(self.env, self.object, "contains", "([Lorg/spongepowered/api/text/format/TextStyle;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn negate(&self) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "negate", "()Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#negate was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn and(&self, param_1: &[text_format_TextStyle]) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "and", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#and was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn and_not(&self, param_1: &[text_format_TextStyle]) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "andNot", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#andNot was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn apply_to(&self, param_1: text_Text_Builder) {
    java_method!(self.env, self.object, "applyTo", "(Lorg/spongepowered/api/text/Text$Builder;)V", CallVoidMethodA, param_1);
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#getId was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$DummyTextStyle#getName was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_format_TextStyles_NoneTextStyle {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_format_TextStyles_NoneTextStyle {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_format_TextStyles_NoneTextStyle {
      env: env,
      object: object
    }
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$NoneTextStyle#getId was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles$NoneTextStyle#getName was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_format_TextStyles {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_format_TextStyles {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_format_TextStyles {
      env: env,
      object: object
    }
  }

  pub fn of() -> text_format_TextStyle {
    let ret = java_method!(self.env, "of", "()Lorg/spongepowered/api/text/format/TextStyle;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles#of was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn of_1(param_1: &[text_format_TextStyle]) -> text_format_TextStyle {
    let ret = java_method!(self.env, "of", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/format/TextStyle;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/format/TextStyles#of was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_LiteralText_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_LiteralText_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_LiteralText_Builder {
      env: env,
      object: object
    }
  }

  pub fn get_content(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getContent", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#getContent was null") }
    ret
  }

  pub fn content(&self, param_1: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "content", "(Ljava/lang/String;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#content was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> text_LiteralText {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/LiteralText;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#build was null") }
    text_LiteralText { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn format(&self, param_1: text_format_TextFormat) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#format was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: text_format_TextColor) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#color was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn style(&self, param_1: &[text_format_TextStyle]) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "style", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#style was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn on_click(&self, param_1: text_action_ClickAction) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "onClick", "(Lorg/spongepowered/api/text/action/ClickAction;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#onClick was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn on_hover(&self, param_1: text_action_HoverAction) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "onHover", "(Lorg/spongepowered/api/text/action/HoverAction;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#onHover was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn on_shift_click(&self, param_1: text_action_ShiftClickAction) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "onShiftClick", "(Lorg/spongepowered/api/text/action/ShiftClickAction;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#onShiftClick was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn append(&self, param_1: &[text_Text]) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "append", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#append was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn append_1(&self, param_1: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#append was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn append_2(&self, param_1: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#append was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn append_3(&self, param_1: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#append was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn insert(&self, param_1: i32, param_2: &[text_Text]) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#insert was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn insert_1(&self, param_1: i32, param_2: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#insert was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn insert_2(&self, param_1: i32, param_2: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#insert was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn insert_3(&self, param_1: i32, param_2: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#insert was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: &[text_Text]) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#remove was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#remove was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#remove was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn remove_3(&self, param_1: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#remove was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn remove_all(&self) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "removeAll", "()Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#removeAll was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn build_1(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#build was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn remove_all_1(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "removeAll", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#removeAll was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_4(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_5(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_6(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_7(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_4(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_5(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_6(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_7(&self, param_1: i32, param_2: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_4(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_5(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_6(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_7(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_shift_click_1(&self, param_1: text_action_ShiftClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onShiftClick", "(Lorg/spongepowered/api/text/action/ShiftClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#onShiftClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_hover_1(&self, param_1: text_action_HoverAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onHover", "(Lorg/spongepowered/api/text/action/HoverAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#onHover was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_click_1(&self, param_1: text_action_ClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onClick", "(Lorg/spongepowered/api/text/action/ClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#onClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn style_1(&self, param_1: &[text_format_TextStyle]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "style", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#style was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn color_1(&self, param_1: text_format_TextColor) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#color was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn format_1(&self, param_1: text_format_TextFormat) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText$Builder#format was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_LiteralText {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_LiteralText {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_LiteralText {
      env: env,
      object: object
    }
  }

  pub fn get_content(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getContent", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText#getContent was null") }
    ret
  }

  pub fn to_builder(&self) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/LiteralText$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText#toBuilder was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_builder_1(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/LiteralText#toBuilder was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct text_ScoreText_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_ScoreText_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_ScoreText_Builder {
      env: env,
      object: object
    }
  }

  pub fn get_score(&self) -> scoreboard_Score {
    let ret = java_method!(self.env, self.object, "getScore", "()Lorg/spongepowered/api/scoreboard/Score;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#getScore was null") }
    scoreboard_Score { env: self.env, object: ret }
  }

  pub fn score(&self, param_1: scoreboard_Score) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "score", "(Lorg/spongepowered/api/scoreboard/Score;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#score was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn get_override(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOverride", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#getOverride was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn override_(&self, param_1: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "override", "(Ljava/lang/String;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#override was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> text_ScoreText {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/ScoreText;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#build was null") }
    text_ScoreText { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn format(&self, param_1: text_format_TextFormat) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#format was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: text_format_TextColor) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#color was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn style(&self, param_1: &[text_format_TextStyle]) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "style", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#style was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn on_click(&self, param_1: text_action_ClickAction) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "onClick", "(Lorg/spongepowered/api/text/action/ClickAction;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#onClick was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn on_hover(&self, param_1: text_action_HoverAction) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "onHover", "(Lorg/spongepowered/api/text/action/HoverAction;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#onHover was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn on_shift_click(&self, param_1: text_action_ShiftClickAction) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "onShiftClick", "(Lorg/spongepowered/api/text/action/ShiftClickAction;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#onShiftClick was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn append(&self, param_1: &[text_Text]) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "append", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#append was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn append_1(&self, param_1: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#append was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn append_2(&self, param_1: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#append was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn append_3(&self, param_1: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#append was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn insert(&self, param_1: i32, param_2: &[text_Text]) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#insert was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn insert_1(&self, param_1: i32, param_2: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#insert was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn insert_2(&self, param_1: i32, param_2: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#insert was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn insert_3(&self, param_1: i32, param_2: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#insert was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: &[text_Text]) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#remove was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#remove was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#remove was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn remove_3(&self, param_1: jobject) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#remove was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn remove_all(&self) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "removeAll", "()Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#removeAll was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn build_1(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#build was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn remove_all_1(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "removeAll", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#removeAll was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_4(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_5(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_6(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_7(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_4(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_5(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_6(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_7(&self, param_1: i32, param_2: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_4(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_5(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_6(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_7(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_shift_click_1(&self, param_1: text_action_ShiftClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onShiftClick", "(Lorg/spongepowered/api/text/action/ShiftClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#onShiftClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_hover_1(&self, param_1: text_action_HoverAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onHover", "(Lorg/spongepowered/api/text/action/HoverAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#onHover was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_click_1(&self, param_1: text_action_ClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onClick", "(Lorg/spongepowered/api/text/action/ClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#onClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn style_1(&self, param_1: &[text_format_TextStyle]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "style", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#style was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn color_1(&self, param_1: text_format_TextColor) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#color was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn format_1(&self, param_1: text_format_TextFormat) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText$Builder#format was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_ScoreText {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_ScoreText {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_ScoreText {
      env: env,
      object: object
    }
  }

  pub fn get_score(&self) -> scoreboard_Score {
    let ret = java_method!(self.env, self.object, "getScore", "()Lorg/spongepowered/api/scoreboard/Score;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText#getScore was null") }
    scoreboard_Score { env: self.env, object: ret }
  }

  pub fn get_override(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOverride", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText#getOverride was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_builder(&self) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/ScoreText$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText#toBuilder was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_builder_1(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/ScoreText#toBuilder was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_selector_Argument_Invertible {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_Argument_Invertible {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_Argument_Invertible {
      env: env,
      object: object
    }
  }

  pub fn is_inverted(&self) -> bool {
    java_method!(self.env, self.object, "isInverted", "()Z", CallBooleanMethod) == 1
  }

  pub fn invert(&self) -> text_selector_Argument_Invertible {
    let ret = java_method!(self.env, self.object, "invert", "()Lorg/spongepowered/api/text/selector/Argument$Invertible;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Argument$Invertible#invert was null") }
    text_selector_Argument_Invertible { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_selector_Argument {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_Argument {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_Argument {
      env: env,
      object: object
    }
  }

  pub fn create(param_1: text_selector_ArgumentType, param_2: jobject) -> text_selector_Argument {
    let ret = java_method!(self.env, "create", "(Lorg/spongepowered/api/text/selector/ArgumentType;Ljava/lang/Object;)Lorg/spongepowered/api/text/selector/Argument;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Argument#create was null") }
    text_selector_Argument { env: self.env, object: ret }
  }

  pub fn create_1(param_1: text_selector_ArgumentType_Invertible, param_2: jobject, param_3: bool) -> text_selector_Argument_Invertible {
    let ret = java_method!(self.env, "create", "(Lorg/spongepowered/api/text/selector/ArgumentType$Invertible;Ljava/lang/Object;Z)Lorg/spongepowered/api/text/selector/Argument$Invertible;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Argument#create was null") }
    text_selector_Argument_Invertible { env: self.env, object: ret }
  }

  pub fn create_set(param_1: text_selector_ArgumentHolder, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "createSet", "(Lorg/spongepowered/api/text/selector/ArgumentHolder;Ljava/lang/Object;)Ljava/util/Set;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Argument#createSet was null") }
    ret
  }

  pub fn parse(param_1: jobject) -> text_selector_Argument {
    let ret = java_method!(self.env, "parse", "(Ljava/lang/String;)Lorg/spongepowered/api/text/selector/Argument;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Argument#parse was null") }
    text_selector_Argument { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> text_selector_ArgumentType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/text/selector/ArgumentType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Argument#getType was null") }
    text_selector_ArgumentType { env: self.env, object: ret }
  }

  pub fn get_value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValue", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Argument#getValue was null") }
    ret
  }

  pub fn to_plain(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toPlain", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Argument#toPlain was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_selector_ArgumentHolder_Limit {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_ArgumentHolder_Limit {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_ArgumentHolder_Limit {
      env: env,
      object: object
    }
  }

  pub fn minimum(&self) -> text_selector_ArgumentHolder {
    let ret = java_method!(self.env, self.object, "minimum", "()Lorg/spongepowered/api/text/selector/ArgumentHolder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentHolder$Limit#minimum was null") }
    text_selector_ArgumentHolder { env: self.env, object: ret }
  }

  pub fn maximum(&self) -> text_selector_ArgumentHolder {
    let ret = java_method!(self.env, self.object, "maximum", "()Lorg/spongepowered/api/text/selector/ArgumentHolder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentHolder$Limit#maximum was null") }
    text_selector_ArgumentHolder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_selector_ArgumentHolder_Vector3 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_ArgumentHolder_Vector3 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_ArgumentHolder_Vector3 {
      env: env,
      object: object
    }
  }

  pub fn x(&self) -> text_selector_ArgumentType {
    let ret = java_method!(self.env, self.object, "x", "()Lorg/spongepowered/api/text/selector/ArgumentType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentHolder$Vector3#x was null") }
    text_selector_ArgumentType { env: self.env, object: ret }
  }

  pub fn y(&self) -> text_selector_ArgumentType {
    let ret = java_method!(self.env, self.object, "y", "()Lorg/spongepowered/api/text/selector/ArgumentType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentHolder$Vector3#y was null") }
    text_selector_ArgumentType { env: self.env, object: ret }
  }

  pub fn z(&self) -> text_selector_ArgumentType {
    let ret = java_method!(self.env, self.object, "z", "()Lorg/spongepowered/api/text/selector/ArgumentType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentHolder$Vector3#z was null") }
    text_selector_ArgumentType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_selector_ArgumentHolder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_ArgumentHolder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_ArgumentHolder {
      env: env,
      object: object
    }
  }

  pub fn get_count(&self) -> i32 {
    java_method!(self.env, self.object, "getCount", "()I", CallIntMethod)
  }

  pub fn get_types(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTypes", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentHolder#getTypes was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_selector_ArgumentType_Invertible {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_ArgumentType_Invertible {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_ArgumentType_Invertible {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_selector_ArgumentType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_ArgumentType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_ArgumentType {
      env: env,
      object: object
    }
  }

  pub fn get_key(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKey", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentType#getKey was null") }
    ret
  }

  pub fn get_count(&self) -> i32 {
    java_method!(self.env, self.object, "getCount", "()I", CallIntMethod)
  }

  pub fn get_types(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTypes", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentType#getTypes was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_selector_ArgumentTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_ArgumentTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_ArgumentTypes {
      env: env,
      object: object
    }
  }

  pub fn score(param_1: jobject) -> text_selector_ArgumentHolder_Limit {
    let ret = java_method!(self.env, "score", "(Ljava/lang/String;)Lorg/spongepowered/api/text/selector/ArgumentHolder$Limit;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentTypes#score was null") }
    text_selector_ArgumentHolder_Limit { env: self.env, object: ret }
  }

  pub fn value_of(param_1: jobject) -> Option<text_selector_ArgumentType> {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentTypes#valueOf was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_selector_ArgumentType { env: self.env, object: unwrapped }) }
  }

  pub fn values() -> jobject {
    let ret = java_method!(self.env, "values", "()Ljava/util/Collection;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentTypes#values was null") }
    ret
  }

  pub fn create(param_1: jobject) -> text_selector_ArgumentType {
    let ret = java_method!(self.env, "create", "(Ljava/lang/String;)Lorg/spongepowered/api/text/selector/ArgumentType;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentTypes#create was null") }
    text_selector_ArgumentType { env: self.env, object: ret }
  }

  pub fn create_1(param_1: jobject, param_2: jobject) -> text_selector_ArgumentType {
    let ret = java_method!(self.env, "create", "(Ljava/lang/String;Ljava/lang/Class;)Lorg/spongepowered/api/text/selector/ArgumentType;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/ArgumentTypes#create was null") }
    text_selector_ArgumentType { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct text_selector_Selector_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_Selector_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_Selector_Builder {
      env: env,
      object: object
    }
  }

  pub fn type_(&self, param_1: text_selector_SelectorType) -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/text/selector/SelectorType;)Lorg/spongepowered/api/text/selector/Selector$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector$Builder#type was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

  pub fn add(&self, param_1: &[text_selector_Argument]) -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, self.object, "add", "([Lorg/spongepowered/api/text/selector/Argument;)Lorg/spongepowered/api/text/selector/Selector$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector$Builder#add was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

  pub fn add_1(&self, param_1: jobject) -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, self.object, "add", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/selector/Selector$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector$Builder#add was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

  pub fn add_2(&self, param_1: text_selector_ArgumentType, param_2: jobject) -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/text/selector/ArgumentType;Ljava/lang/Object;)Lorg/spongepowered/api/text/selector/Selector$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector$Builder#add was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: &[text_selector_Argument]) -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/selector/Argument;)Lorg/spongepowered/api/text/selector/Selector$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector$Builder#remove was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: jobject) -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/selector/Selector$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector$Builder#remove was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: &[text_selector_ArgumentType]) -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/selector/ArgumentType;)Lorg/spongepowered/api/text/selector/Selector$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector$Builder#remove was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> text_selector_Selector {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/selector/Selector;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector$Builder#build was null") }
    text_selector_Selector { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_selector_Selector {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_Selector {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_Selector {
      env: env,
      object: object
    }
  }

  pub fn builder() -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/text/selector/Selector$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#builder was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

  pub fn parse(param_1: jobject) -> text_selector_Selector {
    let ret = java_method!(self.env, "parse", "(Ljava/lang/String;)Lorg/spongepowered/api/text/selector/Selector;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#parse was null") }
    text_selector_Selector { env: self.env, object: ret }
  }

  pub fn complete(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "complete", "(Ljava/lang/String;)Ljava/util/List;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#complete was null") }
    ret
  }

  pub fn get_type(&self) -> text_selector_SelectorType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/text/selector/SelectorType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#getType was null") }
    text_selector_SelectorType { env: self.env, object: ret }
  }

  pub fn get(&self, param_1: text_selector_ArgumentType) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/text/selector/ArgumentType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_argument(&self, param_1: text_selector_ArgumentType) -> Option<text_selector_Argument> {
    let ret = java_method!(self.env, self.object, "getArgument", "(Lorg/spongepowered/api/text/selector/ArgumentType;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#getArgument was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_selector_Argument { env: self.env, object: unwrapped }) }
  }

  pub fn get_argument_1(&self, param_1: text_selector_ArgumentType_Invertible) -> Option<text_selector_Argument_Invertible> {
    let ret = java_method!(self.env, self.object, "getArgument", "(Lorg/spongepowered/api/text/selector/ArgumentType$Invertible;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#getArgument was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_selector_Argument_Invertible { env: self.env, object: unwrapped }) }
  }

  pub fn get_arguments(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getArguments", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#getArguments was null") }
    ret
  }

  pub fn has(&self, param_1: text_selector_ArgumentType) -> bool {
    java_method!(self.env, self.object, "has", "(Lorg/spongepowered/api/text/selector/ArgumentType;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_inverted(&self, param_1: text_selector_ArgumentType_Invertible) -> bool {
    java_method!(self.env, self.object, "isInverted", "(Lorg/spongepowered/api/text/selector/ArgumentType$Invertible;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn resolve(&self, param_1: command_CommandSource) -> jobject {
    let ret = java_method!(self.env, self.object, "resolve", "(Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#resolve was null") }
    ret
  }

  pub fn resolve_1(&self, param_1: &[world_extent_Extent]) -> jobject {
    let ret = java_method!(self.env, self.object, "resolve", "([Lorg/spongepowered/api/world/extent/Extent;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#resolve was null") }
    ret
  }

  pub fn resolve_2(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "resolve", "(Ljava/util/Collection;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#resolve was null") }
    ret
  }

  pub fn resolve_3(&self, param_1: world_Location) -> jobject {
    let ret = java_method!(self.env, self.object, "resolve", "(Lorg/spongepowered/api/world/Location;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#resolve was null") }
    ret
  }

  pub fn resolve_force(&self, param_1: command_CommandSource) -> jobject {
    let ret = java_method!(self.env, self.object, "resolveForce", "(Lorg/spongepowered/api/command/CommandSource;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#resolveForce was null") }
    ret
  }

  pub fn resolve_force_1(&self, param_1: &[world_extent_Extent]) -> jobject {
    let ret = java_method!(self.env, self.object, "resolveForce", "([Lorg/spongepowered/api/world/extent/Extent;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#resolveForce was null") }
    ret
  }

  pub fn resolve_force_2(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "resolveForce", "(Ljava/util/Collection;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#resolveForce was null") }
    ret
  }

  pub fn resolve_force_3(&self, param_1: world_Location) -> jobject {
    let ret = java_method!(self.env, self.object, "resolveForce", "(Lorg/spongepowered/api/world/Location;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#resolveForce was null") }
    ret
  }

  pub fn to_plain(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toPlain", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#toPlain was null") }
    ret
  }

  pub fn to_builder(&self) -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/selector/Selector$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/Selector#toBuilder was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_selector_SelectorFactory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_SelectorFactory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_SelectorFactory {
      env: env,
      object: object
    }
  }

  pub fn create_builder(&self) -> text_selector_Selector_Builder {
    let ret = java_method!(self.env, self.object, "createBuilder", "()Lorg/spongepowered/api/text/selector/Selector$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#createBuilder was null") }
    text_selector_Selector_Builder { env: self.env, object: ret }
  }

  pub fn parse_raw_selector(&self, param_1: jobject) -> text_selector_Selector {
    let ret = java_method!(self.env, self.object, "parseRawSelector", "(Ljava/lang/String;)Lorg/spongepowered/api/text/selector/Selector;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#parseRawSelector was null") }
    text_selector_Selector { env: self.env, object: ret }
  }

  pub fn create_score_argument_type(&self, param_1: jobject) -> text_selector_ArgumentHolder_Limit {
    let ret = java_method!(self.env, self.object, "createScoreArgumentType", "(Ljava/lang/String;)Lorg/spongepowered/api/text/selector/ArgumentHolder$Limit;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#createScoreArgumentType was null") }
    text_selector_ArgumentHolder_Limit { env: self.env, object: ret }
  }

  pub fn get_argument_type(&self, param_1: jobject) -> Option<text_selector_ArgumentType> {
    let ret = java_method!(self.env, self.object, "getArgumentType", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#getArgumentType was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_selector_ArgumentType { env: self.env, object: unwrapped }) }
  }

  pub fn get_argument_types(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getArgumentTypes", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#getArgumentTypes was null") }
    ret
  }

  pub fn create_argument_type(&self, param_1: jobject) -> text_selector_ArgumentType {
    let ret = java_method!(self.env, self.object, "createArgumentType", "(Ljava/lang/String;)Lorg/spongepowered/api/text/selector/ArgumentType;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#createArgumentType was null") }
    text_selector_ArgumentType { env: self.env, object: ret }
  }

  pub fn create_argument_type_1(&self, param_1: jobject, param_2: jobject) -> text_selector_ArgumentType {
    let ret = java_method!(self.env, self.object, "createArgumentType", "(Ljava/lang/String;Ljava/lang/Class;)Lorg/spongepowered/api/text/selector/ArgumentType;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#createArgumentType was null") }
    text_selector_ArgumentType { env: self.env, object: ret }
  }

  pub fn create_argument(&self, param_1: text_selector_ArgumentType, param_2: jobject) -> text_selector_Argument {
    let ret = java_method!(self.env, self.object, "createArgument", "(Lorg/spongepowered/api/text/selector/ArgumentType;Ljava/lang/Object;)Lorg/spongepowered/api/text/selector/Argument;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#createArgument was null") }
    text_selector_Argument { env: self.env, object: ret }
  }

  pub fn create_argument_1(&self, param_1: text_selector_ArgumentType_Invertible, param_2: jobject, param_3: bool) -> text_selector_Argument_Invertible {
    let ret = java_method!(self.env, self.object, "createArgument", "(Lorg/spongepowered/api/text/selector/ArgumentType$Invertible;Ljava/lang/Object;Z)Lorg/spongepowered/api/text/selector/Argument$Invertible;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#createArgument was null") }
    text_selector_Argument_Invertible { env: self.env, object: ret }
  }

  pub fn create_arguments(&self, param_1: text_selector_ArgumentHolder, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "createArguments", "(Lorg/spongepowered/api/text/selector/ArgumentHolder;Ljava/lang/Object;)Ljava/util/Set;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#createArguments was null") }
    ret
  }

  pub fn parse_argument(&self, param_1: jobject) -> text_selector_Argument {
    let ret = java_method!(self.env, self.object, "parseArgument", "(Ljava/lang/String;)Lorg/spongepowered/api/text/selector/Argument;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#parseArgument was null") }
    text_selector_Argument { env: self.env, object: ret }
  }

  pub fn complete(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "complete", "(Ljava/lang/String;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/selector/SelectorFactory#complete was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_selector_SelectorType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_SelectorType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_SelectorType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_selector_SelectorTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_selector_SelectorTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_selector_SelectorTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_SelectorText_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_SelectorText_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_SelectorText_Builder {
      env: env,
      object: object
    }
  }

  pub fn get_selector(&self) -> text_selector_Selector {
    let ret = java_method!(self.env, self.object, "getSelector", "()Lorg/spongepowered/api/text/selector/Selector;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#getSelector was null") }
    text_selector_Selector { env: self.env, object: ret }
  }

  pub fn selector(&self, param_1: text_selector_Selector) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "selector", "(Lorg/spongepowered/api/text/selector/Selector;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#selector was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> text_SelectorText {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/SelectorText;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#build was null") }
    text_SelectorText { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn format(&self, param_1: text_format_TextFormat) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#format was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: text_format_TextColor) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#color was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn style(&self, param_1: &[text_format_TextStyle]) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "style", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#style was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn on_click(&self, param_1: text_action_ClickAction) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "onClick", "(Lorg/spongepowered/api/text/action/ClickAction;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#onClick was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn on_hover(&self, param_1: text_action_HoverAction) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "onHover", "(Lorg/spongepowered/api/text/action/HoverAction;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#onHover was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn on_shift_click(&self, param_1: text_action_ShiftClickAction) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "onShiftClick", "(Lorg/spongepowered/api/text/action/ShiftClickAction;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#onShiftClick was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn append(&self, param_1: &[text_Text]) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "append", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#append was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn append_1(&self, param_1: jobject) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#append was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn append_2(&self, param_1: jobject) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#append was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn append_3(&self, param_1: jobject) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#append was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn insert(&self, param_1: i32, param_2: &[text_Text]) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#insert was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn insert_1(&self, param_1: i32, param_2: jobject) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#insert was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn insert_2(&self, param_1: i32, param_2: jobject) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#insert was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn insert_3(&self, param_1: i32, param_2: jobject) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#insert was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: &[text_Text]) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#remove was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: jobject) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#remove was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: jobject) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#remove was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn remove_3(&self, param_1: jobject) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#remove was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn remove_all(&self) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "removeAll", "()Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#removeAll was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn build_1(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#build was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn remove_all_1(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "removeAll", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#removeAll was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_4(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_5(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_6(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_7(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_4(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_5(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_6(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_7(&self, param_1: i32, param_2: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_4(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_5(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_6(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_7(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_shift_click_1(&self, param_1: text_action_ShiftClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onShiftClick", "(Lorg/spongepowered/api/text/action/ShiftClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#onShiftClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_hover_1(&self, param_1: text_action_HoverAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onHover", "(Lorg/spongepowered/api/text/action/HoverAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#onHover was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_click_1(&self, param_1: text_action_ClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onClick", "(Lorg/spongepowered/api/text/action/ClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#onClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn style_1(&self, param_1: &[text_format_TextStyle]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "style", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#style was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn color_1(&self, param_1: text_format_TextColor) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#color was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn format_1(&self, param_1: text_format_TextFormat) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText$Builder#format was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_SelectorText {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_SelectorText {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_SelectorText {
      env: env,
      object: object
    }
  }

  pub fn get_selector(&self) -> text_selector_Selector {
    let ret = java_method!(self.env, self.object, "getSelector", "()Lorg/spongepowered/api/text/selector/Selector;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText#getSelector was null") }
    text_selector_Selector { env: self.env, object: ret }
  }

  pub fn to_builder(&self) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/SelectorText$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText#toBuilder was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_builder_1(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/SelectorText#toBuilder was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_serializer_BookViewDataBuilder_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_BookViewDataBuilder_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_BookViewDataBuilder_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_serializer_BookViewDataBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_BookViewDataBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_BookViewDataBuilder {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> text_serializer_BookViewDataBuilder {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/serializer/BookViewDataBuilder", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/BookViewDataBuilder#<init> was null") }
    text_serializer_BookViewDataBuilder { env: self.env, object: ret }
  }

  pub fn deserialize(&self, param_1: jobject, param_2: jobject) -> text_BookView {
    let ret = java_method!(self.env, self.object, "deserialize", "(Lcom/google/common/reflect/TypeToken;Lninja/leaping/configurate/ConfigurationNode;)Lorg/spongepowered/api/text/BookView;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/BookViewDataBuilder#deserialize was null") }
    text_BookView { env: self.env, object: ret }
  }

  pub fn serialize(&self, param_1: jobject, param_2: text_BookView, param_3: jobject) {
    java_method!(self.env, self.object, "serialize", "(Lcom/google/common/reflect/TypeToken;Lorg/spongepowered/api/text/BookView;Lninja/leaping/configurate/ConfigurationNode;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn serialize_1(&self, param_1: jobject, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "serialize", "(Lcom/google/common/reflect/TypeToken;Ljava/lang/Object;Lninja/leaping/configurate/ConfigurationNode;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn deserialize_1(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "deserialize", "(Lcom/google/common/reflect/TypeToken;Lninja/leaping/configurate/ConfigurationNode;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/BookViewDataBuilder#deserialize was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_serializer_FormattingCodeTextSerializer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_FormattingCodeTextSerializer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_FormattingCodeTextSerializer {
      env: env,
      object: object
    }
  }

  pub fn get_character(&self) -> char {
    java_method!(self.env, self.object, "getCharacter", "()C", CallCharMethod) as u8 as char
  }

  pub fn strip_codes(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "stripCodes", "(Ljava/lang/String;)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/FormattingCodeTextSerializer#stripCodes was null") }
    ret
  }

  pub fn replace_codes(&self, param_1: jobject, param_2: char) -> jobject {
    let ret = java_method!(self.env, self.object, "replaceCodes", "(Ljava/lang/String;C)Ljava/lang/String;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/FormattingCodeTextSerializer#replaceCodes was null") }
    ret
  }

  pub fn replace_codes_1(&self, param_1: jobject, param_2: text_serializer_FormattingCodeTextSerializer) -> jobject {
    let ret = java_method!(self.env, self.object, "replaceCodes", "(Ljava/lang/String;Lorg/spongepowered/api/text/serializer/FormattingCodeTextSerializer;)Ljava/lang/String;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/FormattingCodeTextSerializer#replaceCodes was null") }
    ret
  }

}


#[derive(Debug)]
pub struct text_serializer_SafeTextSerializer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_SafeTextSerializer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_SafeTextSerializer {
      env: env,
      object: object
    }
  }

  pub fn deserialize(&self, param_1: jobject) -> text_Text {
    let ret = java_method!(self.env, self.object, "deserialize", "(Ljava/lang/String;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/SafeTextSerializer#deserialize was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn deserialize_unchecked(&self, param_1: jobject) -> text_Text {
    let ret = java_method!(self.env, self.object, "deserializeUnchecked", "(Ljava/lang/String;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/SafeTextSerializer#deserializeUnchecked was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_serializer_TextConfigSerializer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_TextConfigSerializer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_TextConfigSerializer {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> text_serializer_TextConfigSerializer {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/serializer/TextConfigSerializer", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextConfigSerializer#<init> was null") }
    text_serializer_TextConfigSerializer { env: self.env, object: ret }
  }

  pub fn deserialize(&self, param_1: jobject, param_2: jobject) -> text_Text {
    let ret = java_method!(self.env, self.object, "deserialize", "(Lcom/google/common/reflect/TypeToken;Lninja/leaping/configurate/ConfigurationNode;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextConfigSerializer#deserialize was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn serialize(&self, param_1: jobject, param_2: text_Text, param_3: jobject) {
    java_method!(self.env, self.object, "serialize", "(Lcom/google/common/reflect/TypeToken;Lorg/spongepowered/api/text/Text;Lninja/leaping/configurate/ConfigurationNode;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn serialize_1(&self, param_1: jobject, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "serialize", "(Lcom/google/common/reflect/TypeToken;Ljava/lang/Object;Lninja/leaping/configurate/ConfigurationNode;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn deserialize_1(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "deserialize", "(Lcom/google/common/reflect/TypeToken;Lninja/leaping/configurate/ConfigurationNode;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextConfigSerializer#deserialize was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_serializer_TextFormatConfigSerializer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_TextFormatConfigSerializer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_TextFormatConfigSerializer {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> text_serializer_TextFormatConfigSerializer {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/serializer/TextFormatConfigSerializer", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextFormatConfigSerializer#<init> was null") }
    text_serializer_TextFormatConfigSerializer { env: self.env, object: ret }
  }

  pub fn deserialize(&self, param_1: jobject, param_2: jobject) -> text_format_TextFormat {
    let ret = java_method!(self.env, self.object, "deserialize", "(Lcom/google/common/reflect/TypeToken;Lninja/leaping/configurate/ConfigurationNode;)Lorg/spongepowered/api/text/format/TextFormat;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextFormatConfigSerializer#deserialize was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn serialize(&self, param_1: jobject, param_2: text_format_TextFormat, param_3: jobject) {
    java_method!(self.env, self.object, "serialize", "(Lcom/google/common/reflect/TypeToken;Lorg/spongepowered/api/text/format/TextFormat;Lninja/leaping/configurate/ConfigurationNode;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn serialize_1(&self, param_1: jobject, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "serialize", "(Lcom/google/common/reflect/TypeToken;Ljava/lang/Object;Lninja/leaping/configurate/ConfigurationNode;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn deserialize_1(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "deserialize", "(Lcom/google/common/reflect/TypeToken;Lninja/leaping/configurate/ConfigurationNode;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextFormatConfigSerializer#deserialize was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_serializer_TextParseException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_TextParseException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_TextParseException {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> text_serializer_TextParseException {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/serializer/TextParseException", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextParseException#<init> was null") }
    text_serializer_TextParseException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> text_serializer_TextParseException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/text/serializer/TextParseException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextParseException#<init> was null") }
    text_serializer_TextParseException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject) -> text_serializer_TextParseException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/spongepowered/api/text/serializer/TextParseException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextParseException#<init> was null") }
    text_serializer_TextParseException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: jobject) -> text_serializer_TextParseException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Throwable;)Lorg/spongepowered/api/text/serializer/TextParseException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextParseException#<init> was null") }
    text_serializer_TextParseException { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_serializer_TextSerializer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_TextSerializer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_TextSerializer {
      env: env,
      object: object
    }
  }

  pub fn serialize(&self, param_1: text_Text) -> jobject {
    let ret = java_method!(self.env, self.object, "serialize", "(Lorg/spongepowered/api/text/Text;)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextSerializer#serialize was null") }
    ret
  }

  pub fn deserialize(&self, param_1: jobject) -> text_Text {
    let ret = java_method!(self.env, self.object, "deserialize", "(Ljava/lang/String;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextSerializer#deserialize was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn deserialize_unchecked(&self, param_1: jobject) -> text_Text {
    let ret = java_method!(self.env, self.object, "deserializeUnchecked", "(Ljava/lang/String;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextSerializer#deserializeUnchecked was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_serializer_TextSerializerFactory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_TextSerializerFactory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_TextSerializerFactory {
      env: env,
      object: object
    }
  }

  pub fn get_formatting_code_text_serializer(&self, param_1: char) -> text_serializer_FormattingCodeTextSerializer {
    let ret = java_method!(self.env, self.object, "getFormattingCodeTextSerializer", "(C)Lorg/spongepowered/api/text/serializer/FormattingCodeTextSerializer;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextSerializerFactory#getFormattingCodeTextSerializer was null") }
    text_serializer_FormattingCodeTextSerializer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_serializer_TextSerializers {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_TextSerializers {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_TextSerializers {
      env: env,
      object: object
    }
  }

  pub fn formatting_code(param_1: char) -> text_serializer_FormattingCodeTextSerializer {
    let ret = java_method!(self.env, "formattingCode", "(C)Lorg/spongepowered/api/text/serializer/FormattingCodeTextSerializer;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextSerializers#formattingCode was null") }
    text_serializer_FormattingCodeTextSerializer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_serializer_TextTemplateConfigSerializer_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_TextTemplateConfigSerializer_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_TextTemplateConfigSerializer_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_serializer_TextTemplateConfigSerializer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_serializer_TextTemplateConfigSerializer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_serializer_TextTemplateConfigSerializer {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> text_serializer_TextTemplateConfigSerializer {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/serializer/TextTemplateConfigSerializer", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextTemplateConfigSerializer#<init> was null") }
    text_serializer_TextTemplateConfigSerializer { env: self.env, object: ret }
  }

  pub fn deserialize(&self, param_1: jobject, param_2: jobject) -> text_TextTemplate {
    let ret = java_method!(self.env, self.object, "deserialize", "(Lcom/google/common/reflect/TypeToken;Lninja/leaping/configurate/ConfigurationNode;)Lorg/spongepowered/api/text/TextTemplate;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextTemplateConfigSerializer#deserialize was null") }
    text_TextTemplate { env: self.env, object: ret }
  }

  pub fn serialize(&self, param_1: jobject, param_2: text_TextTemplate, param_3: jobject) {
    java_method!(self.env, self.object, "serialize", "(Lcom/google/common/reflect/TypeToken;Lorg/spongepowered/api/text/TextTemplate;Lninja/leaping/configurate/ConfigurationNode;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn serialize_1(&self, param_1: jobject, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "serialize", "(Lcom/google/common/reflect/TypeToken;Ljava/lang/Object;Lninja/leaping/configurate/ConfigurationNode;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn deserialize_1(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "deserialize", "(Lcom/google/common/reflect/TypeToken;Lninja/leaping/configurate/ConfigurationNode;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/serializer/TextTemplateConfigSerializer#deserialize was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_Text_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_Text_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_Text_Builder {
      env: env,
      object: object
    }
  }

  pub fn get_format(&self) -> text_format_TextFormat {
    let ret = java_method!(self.env, self.object, "getFormat", "()Lorg/spongepowered/api/text/format/TextFormat;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#getFormat was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn format(&self, param_1: text_format_TextFormat) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#format was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn get_color(&self) -> text_format_TextColor {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/text/format/TextColor;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#getColor was null") }
    text_format_TextColor { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: text_format_TextColor) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#color was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn get_style(&self) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "getStyle", "()Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#getStyle was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn style(&self, param_1: &[text_format_TextStyle]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "style", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#style was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn get_click_action(&self) -> Option<text_action_ClickAction> {
    let ret = java_method!(self.env, self.object, "getClickAction", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#getClickAction was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_action_ClickAction { env: self.env, object: unwrapped }) }
  }

  pub fn on_click(&self, param_1: text_action_ClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onClick", "(Lorg/spongepowered/api/text/action/ClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#onClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn get_hover_action(&self) -> Option<text_action_HoverAction> {
    let ret = java_method!(self.env, self.object, "getHoverAction", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#getHoverAction was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_action_HoverAction { env: self.env, object: unwrapped }) }
  }

  pub fn on_hover(&self, param_1: text_action_HoverAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onHover", "(Lorg/spongepowered/api/text/action/HoverAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#onHover was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn get_shift_click_action(&self) -> Option<text_action_ShiftClickAction> {
    let ret = java_method!(self.env, self.object, "getShiftClickAction", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#getShiftClickAction was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_action_ShiftClickAction { env: self.env, object: unwrapped }) }
  }

  pub fn on_shift_click(&self, param_1: text_action_ShiftClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onShiftClick", "(Lorg/spongepowered/api/text/action/ShiftClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#onShiftClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn get_children(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getChildren", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#getChildren was null") }
    ret
  }

  pub fn append(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_1(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_2(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_3(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert(&self, param_1: i32, param_2: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_1(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_2(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_3(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_3(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_all(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "removeAll", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#removeAll was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn trim(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "trim", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#trim was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#build was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#toString was null") }
    ret
  }

  pub fn to_text(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "toText", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text$Builder#toText was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_Text {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_Text {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_Text {
      env: env,
      object: object
    }
  }

  pub fn get_format(&self) -> text_format_TextFormat {
    let ret = java_method!(self.env, self.object, "getFormat", "()Lorg/spongepowered/api/text/format/TextFormat;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#getFormat was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn get_color(&self) -> text_format_TextColor {
    let ret = java_method!(self.env, self.object, "getColor", "()Lorg/spongepowered/api/text/format/TextColor;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#getColor was null") }
    text_format_TextColor { env: self.env, object: ret }
  }

  pub fn get_style(&self) -> text_format_TextStyle {
    let ret = java_method!(self.env, self.object, "getStyle", "()Lorg/spongepowered/api/text/format/TextStyle;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#getStyle was null") }
    text_format_TextStyle { env: self.env, object: ret }
  }

  pub fn get_children(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getChildren", "()Lcom/google/common/collect/ImmutableList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#getChildren was null") }
    ret
  }

  pub fn with_children(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "withChildren", "()Ljava/lang/Iterable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#withChildren was null") }
    ret
  }

  pub fn get_click_action(&self) -> Option<text_action_ClickAction> {
    let ret = java_method!(self.env, self.object, "getClickAction", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#getClickAction was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_action_ClickAction { env: self.env, object: unwrapped }) }
  }

  pub fn get_hover_action(&self) -> Option<text_action_HoverAction> {
    let ret = java_method!(self.env, self.object, "getHoverAction", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#getHoverAction was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_action_HoverAction { env: self.env, object: unwrapped }) }
  }

  pub fn get_shift_click_action(&self) -> Option<text_action_ShiftClickAction> {
    let ret = java_method!(self.env, self.object, "getShiftClickAction", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#getShiftClickAction was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_action_ShiftClickAction { env: self.env, object: unwrapped }) }
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn to_builder(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#toBuilder was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn to_plain(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toPlain", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#toPlain was null") }
    ret
  }

  pub fn concat(&self, param_1: text_Text) -> text_Text {
    let ret = java_method!(self.env, self.object, "concat", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#concat was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn trim(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "trim", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#trim was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn compare_to(&self, param_1: text_Text) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Lorg/spongepowered/api/text/Text;)I", CallIntMethodA, param_1)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#toString was null") }
    ret
  }

  pub fn to_text(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "toText", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#toText was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn of() -> text_Text {
    let ret = java_method!(self.env, "of", "()Lorg/spongepowered/api/text/Text;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#of was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn of_1(param_1: jobject) -> text_LiteralText {
    let ret = java_method!(self.env, "of", "(Ljava/lang/String;)Lorg/spongepowered/api/text/LiteralText;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#of was null") }
    text_LiteralText { env: self.env, object: ret }
  }

  pub fn of_2(param_1: char) -> text_LiteralText {
    let ret = java_method!(self.env, "of", "(C)Lorg/spongepowered/api/text/LiteralText;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#of was null") }
    text_LiteralText { env: self.env, object: ret }
  }

  pub fn of_3(param_1: text_translation_Translation, param_2: &[jobject]) -> text_TranslatableText {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/text/translation/Translation;[Ljava/lang/Object;)Lorg/spongepowered/api/text/TranslatableText;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#of was null") }
    text_TranslatableText { env: self.env, object: ret }
  }

  pub fn of_4(param_1: text_translation_Translatable, param_2: &[jobject]) -> text_TranslatableText {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/text/translation/Translatable;[Ljava/lang/Object;)Lorg/spongepowered/api/text/TranslatableText;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#of was null") }
    text_TranslatableText { env: self.env, object: ret }
  }

  pub fn of_5(param_1: text_selector_Selector) -> text_SelectorText {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/text/selector/Selector;)Lorg/spongepowered/api/text/SelectorText;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#of was null") }
    text_SelectorText { env: self.env, object: ret }
  }

  pub fn of_6(param_1: scoreboard_Score) -> text_ScoreText {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/scoreboard/Score;)Lorg/spongepowered/api/text/ScoreText;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#of was null") }
    text_ScoreText { env: self.env, object: ret }
  }

  pub fn of_7(param_1: &[jobject]) -> text_Text {
    let ret = java_method!(self.env, "of", "([Ljava/lang/Object;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#of was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn builder() -> text_Text_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/text/Text$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn builder_1(param_1: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, "builder", "(Ljava/lang/String;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn builder_2(param_1: char) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, "builder", "(C)Lorg/spongepowered/api/text/LiteralText$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn builder_3(param_1: text_Text, param_2: jobject) -> text_LiteralText_Builder {
    let ret = java_method!(self.env, "builder", "(Lorg/spongepowered/api/text/Text;Ljava/lang/String;)Lorg/spongepowered/api/text/LiteralText$Builder;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_LiteralText_Builder { env: self.env, object: ret }
  }

  pub fn builder_4(param_1: text_translation_Translation, param_2: &[jobject]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, "builder", "(Lorg/spongepowered/api/text/translation/Translation;[Ljava/lang/Object;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn builder_5(param_1: text_translation_Translatable, param_2: &[jobject]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, "builder", "(Lorg/spongepowered/api/text/translation/Translatable;[Ljava/lang/Object;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn builder_6(param_1: text_Text, param_2: text_translation_Translation, param_3: &[jobject]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, "builder", "(Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/translation/Translation;[Ljava/lang/Object;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn builder_7(param_1: text_Text, param_2: text_translation_Translatable, param_3: &[jobject]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, "builder", "(Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/translation/Translatable;[Ljava/lang/Object;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn builder_8(param_1: text_selector_Selector) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, "builder", "(Lorg/spongepowered/api/text/selector/Selector;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn builder_9(param_1: text_Text, param_2: text_selector_Selector) -> text_SelectorText_Builder {
    let ret = java_method!(self.env, "builder", "(Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/selector/Selector;)Lorg/spongepowered/api/text/SelectorText$Builder;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_SelectorText_Builder { env: self.env, object: ret }
  }

  pub fn builder_1_0(param_1: scoreboard_Score) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, "builder", "(Lorg/spongepowered/api/scoreboard/Score;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn builder_1_1(param_1: text_Text, param_2: scoreboard_Score) -> text_ScoreText_Builder {
    let ret = java_method!(self.env, "builder", "(Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/scoreboard/Score;)Lorg/spongepowered/api/text/ScoreText$Builder;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#builder was null") }
    text_ScoreText_Builder { env: self.env, object: ret }
  }

  pub fn join(param_1: &[text_Text]) -> text_Text {
    let ret = java_method!(self.env, "join", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#join was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn join_1(param_1: jobject) -> text_Text {
    let ret = java_method!(self.env, "join", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#join was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn join_2(param_1: jobject) -> text_Text {
    let ret = java_method!(self.env, "join", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#join was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn join_with(param_1: text_Text, param_2: &[text_Text]) -> text_Text {
    let ret = java_method!(self.env, "joinWith", "(Lorg/spongepowered/api/text/Text;[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#joinWith was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn join_with_1(param_1: text_Text, param_2: jobject) -> text_Text {
    let ret = java_method!(self.env, "joinWith", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#joinWith was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn join_with_2(param_1: text_Text, param_2: jobject) -> text_Text {
    let ret = java_method!(self.env, "joinWith", "(Lorg/spongepowered/api/text/Text;Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/Text#joinWith was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn compare_to_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "compareTo", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

}

#[derive(Debug)]
pub struct text_TextElement {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_TextElement {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_TextElement {
      env: env,
      object: object
    }
  }

  pub fn apply_to(&self, param_1: text_Text_Builder) {
    java_method!(self.env, self.object, "applyTo", "(Lorg/spongepowered/api/text/Text$Builder;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct text_TextIterator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_TextIterator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_TextIterator {
      env: env,
      object: object
    }
  }

  pub fn has_next(&self) -> bool {
    java_method!(self.env, self.object, "hasNext", "()Z", CallBooleanMethod) == 1
  }

  pub fn next(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "next", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextIterator#next was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn next_1(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "next", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextIterator#next was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_TextRepresentable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_TextRepresentable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_TextRepresentable {
      env: env,
      object: object
    }
  }

  pub fn to_text(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "toText", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextRepresentable#toText was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn apply_to(&self, param_1: text_Text_Builder) {
    java_method!(self.env, self.object, "applyTo", "(Lorg/spongepowered/api/text/Text$Builder;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct text_TextTemplate_Arg_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_TextTemplate_Arg_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_TextTemplate_Arg_Builder {
      env: env,
      object: object
    }
  }

  pub fn build(&self) -> text_TextTemplate_Arg {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/TextTemplate$Arg;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg$Builder#build was null") }
    text_TextTemplate_Arg { env: self.env, object: ret }
  }

  pub fn optional(&self, param_1: bool) -> text_TextTemplate_Arg_Builder {
    let ret = java_method!(self.env, self.object, "optional", "(Z)Lorg/spongepowered/api/text/TextTemplate$Arg$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg$Builder#optional was null") }
    text_TextTemplate_Arg_Builder { env: self.env, object: ret }
  }

  pub fn optional_1(&self) -> text_TextTemplate_Arg_Builder {
    let ret = java_method!(self.env, self.object, "optional", "()Lorg/spongepowered/api/text/TextTemplate$Arg$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg$Builder#optional was null") }
    text_TextTemplate_Arg_Builder { env: self.env, object: ret }
  }

  pub fn default_value(&self, param_1: text_Text) -> text_TextTemplate_Arg_Builder {
    let ret = java_method!(self.env, self.object, "defaultValue", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/TextTemplate$Arg$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg$Builder#defaultValue was null") }
    text_TextTemplate_Arg_Builder { env: self.env, object: ret }
  }

  pub fn format(&self, param_1: text_format_TextFormat) -> text_TextTemplate_Arg_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/TextTemplate$Arg$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg$Builder#format was null") }
    text_TextTemplate_Arg_Builder { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: text_format_TextColor) -> text_TextTemplate_Arg_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/TextTemplate$Arg$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg$Builder#color was null") }
    text_TextTemplate_Arg_Builder { env: self.env, object: ret }
  }

  pub fn style(&self, param_1: text_format_TextStyle) -> text_TextTemplate_Arg_Builder {
    let ret = java_method!(self.env, self.object, "style", "(Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/TextTemplate$Arg$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg$Builder#style was null") }
    text_TextTemplate_Arg_Builder { env: self.env, object: ret }
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg$Builder#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_TextTemplate_Arg {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_TextTemplate_Arg {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_TextTemplate_Arg {
      env: env,
      object: object
    }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg#getName was null") }
    ret
  }

  pub fn is_optional(&self) -> bool {
    java_method!(self.env, self.object, "isOptional", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_default_value(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getDefaultValue", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg#getDefaultValue was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_format(&self) -> text_format_TextFormat {
    let ret = java_method!(self.env, self.object, "getFormat", "()Lorg/spongepowered/api/text/format/TextFormat;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg#getFormat was null") }
    text_format_TextFormat { env: self.env, object: ret }
  }

  pub fn get_open_arg_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOpenArgString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg#getOpenArgString was null") }
    ret
  }

  pub fn get_close_arg_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCloseArgString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg#getCloseArgString was null") }
    ret
  }

  pub fn to_text(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "toText", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg#toText was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate$Arg#toString was null") }
    ret
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct text_TextTemplate {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_TextTemplate {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_TextTemplate {
      env: env,
      object: object
    }
  }

  pub fn get_elements(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getElements", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#getElements was null") }
    ret
  }

  pub fn get_arguments(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getArguments", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#getArguments was null") }
    ret
  }

  pub fn get_open_arg_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getOpenArgString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#getOpenArgString was null") }
    ret
  }

  pub fn get_close_arg_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCloseArgString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#getCloseArgString was null") }
    ret
  }

  pub fn concat(&self, param_1: text_TextTemplate) -> text_TextTemplate {
    let ret = java_method!(self.env, self.object, "concat", "(Lorg/spongepowered/api/text/TextTemplate;)Lorg/spongepowered/api/text/TextTemplate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#concat was null") }
    text_TextTemplate { env: self.env, object: ret }
  }

  pub fn apply(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "apply", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#apply was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn apply_1(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "apply", "(Ljava/util/Map;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#apply was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn of(param_1: jobject, param_2: jobject, param_3: &[jobject]) -> text_TextTemplate {
    let ret = java_method!(self.env, "of", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)Lorg/spongepowered/api/text/TextTemplate;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#of was null") }
    text_TextTemplate { env: self.env, object: ret }
  }

  pub fn of_1(param_1: &[jobject]) -> text_TextTemplate {
    let ret = java_method!(self.env, "of", "([Ljava/lang/Object;)Lorg/spongepowered/api/text/TextTemplate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#of was null") }
    text_TextTemplate { env: self.env, object: ret }
  }

  pub fn of_2() -> text_TextTemplate {
    let ret = java_method!(self.env, "of", "()Lorg/spongepowered/api/text/TextTemplate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#of was null") }
    text_TextTemplate { env: self.env, object: ret }
  }

  pub fn arg(param_1: jobject) -> text_TextTemplate_Arg_Builder {
    let ret = java_method!(self.env, "arg", "(Ljava/lang/String;)Lorg/spongepowered/api/text/TextTemplate$Arg$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#arg was null") }
    text_TextTemplate_Arg_Builder { env: self.env, object: ret }
  }

  pub fn to_text(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "toText", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#toText was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn iterator(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "iterator", "()Ljava/util/Iterator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#iterator was null") }
    ret
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplate#toString was null") }
    ret
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct text_TextTemplateArgumentException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_TextTemplateArgumentException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_TextTemplateArgumentException {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> text_TextTemplateArgumentException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/text/TextTemplateArgumentException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TextTemplateArgumentException#<init> was null") }
    text_TextTemplateArgumentException { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct text_title_Title_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_title_Title_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_title_Title_Builder {
      env: env,
      object: object
    }
  }

  pub fn get_title(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getTitle", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#getTitle was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn title(&self, param_1: text_Text) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "title", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#title was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn get_subtitle(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getSubtitle", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#getSubtitle was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn subtitle(&self, param_1: text_Text) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "subtitle", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#subtitle was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn get_fade_in(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFadeIn", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#getFadeIn was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn fade_in(&self, param_1: jobject) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "fadeIn", "(Ljava/lang/Integer;)Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#fadeIn was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn get_stay(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getStay", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#getStay was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn stay(&self, param_1: jobject) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "stay", "(Ljava/lang/Integer;)Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#stay was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn get_fade_out(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFadeOut", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#getFadeOut was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn fade_out(&self, param_1: jobject) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "fadeOut", "(Ljava/lang/Integer;)Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#fadeOut was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn is_clear(&self) -> bool {
    java_method!(self.env, self.object, "isClear", "()Z", CallBooleanMethod) == 1
  }

  pub fn clear(&self) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "clear", "()Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#clear was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn clear_1(&self, param_1: bool) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "clear", "(Z)Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#clear was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn is_reset(&self) -> bool {
    java_method!(self.env, self.object, "isReset", "()Z", CallBooleanMethod) == 1
  }

  pub fn reset(&self) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#reset was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn reset_1(&self, param_1: bool) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "reset", "(Z)Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#reset was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> text_title_Title {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/title/Title;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#build was null") }
    text_title_Title { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title$Builder#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_title_Title {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_title_Title {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_title_Title {
      env: env,
      object: object
    }
  }

  pub fn get_title(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getTitle", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#getTitle was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_subtitle(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getSubtitle", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#getSubtitle was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_fade_in(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFadeIn", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#getFadeIn was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_stay(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getStay", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#getStay was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_fade_out(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getFadeOut", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#getFadeOut was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn is_clear(&self) -> bool {
    java_method!(self.env, self.object, "isClear", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_reset(&self) -> bool {
    java_method!(self.env, self.object, "isReset", "()Z", CallBooleanMethod) == 1
  }

  pub fn to_builder(&self) -> text_title_Title_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/title/Title$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#toBuilder was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#toString was null") }
    ret
  }

  pub fn of() -> text_title_Title {
    let ret = java_method!(self.env, "of", "()Lorg/spongepowered/api/text/title/Title;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#of was null") }
    text_title_Title { env: self.env, object: ret }
  }

  pub fn of_1(param_1: text_Text) -> text_title_Title {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/title/Title;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#of was null") }
    text_title_Title { env: self.env, object: ret }
  }

  pub fn of_2(param_1: text_Text, param_2: text_Text) -> text_title_Title {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/text/Text;Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/title/Title;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#of was null") }
    text_title_Title { env: self.env, object: ret }
  }

  pub fn clear() -> text_title_Title {
    let ret = java_method!(self.env, "clear", "()Lorg/spongepowered/api/text/title/Title;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#clear was null") }
    text_title_Title { env: self.env, object: ret }
  }

  pub fn reset() -> text_title_Title {
    let ret = java_method!(self.env, "reset", "()Lorg/spongepowered/api/text/title/Title;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#reset was null") }
    text_title_Title { env: self.env, object: ret }
  }

  pub fn builder() -> text_title_Title_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/text/title/Title$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#builder was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

  pub fn update() -> text_title_Title_Builder {
    let ret = java_method!(self.env, "update", "()Lorg/spongepowered/api/text/title/Title$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/title/Title#update was null") }
    text_title_Title_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_transform_DynamicPartitionedTextFormatter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_transform_DynamicPartitionedTextFormatter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_transform_DynamicPartitionedTextFormatter {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> text_transform_DynamicPartitionedTextFormatter {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/text/transform/DynamicPartitionedTextFormatter", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/DynamicPartitionedTextFormatter#<init> was null") }
    text_transform_DynamicPartitionedTextFormatter { env: self.env, object: ret }
  }

  pub fn new_1(&self) -> text_transform_DynamicPartitionedTextFormatter {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/transform/DynamicPartitionedTextFormatter", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/DynamicPartitionedTextFormatter#<init> was null") }
    text_transform_DynamicPartitionedTextFormatter { env: self.env, object: ret }
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Lcom/google/common/collect/ImmutableList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/DynamicPartitionedTextFormatter#getAll was null") }
    ret
  }

  pub fn get(&self, param_1: i32) -> text_transform_SimpleTextFormatter {
    let ret = java_method!(self.env, self.object, "get", "(I)Lorg/spongepowered/api/text/transform/SimpleTextFormatter;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/DynamicPartitionedTextFormatter#get was null") }
    text_transform_SimpleTextFormatter { env: self.env, object: ret }
  }

  pub fn set(&self, param_1: i32, param_2: text_transform_SimpleTextFormatter) -> text_transform_SimpleTextFormatter {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/text/transform/SimpleTextFormatter;)Lorg/spongepowered/api/text/transform/SimpleTextFormatter;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/DynamicPartitionedTextFormatter#set was null") }
    text_transform_SimpleTextFormatter { env: self.env, object: ret }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn contains(&self, param_1: text_transform_SimpleTextFormatter) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/text/transform/SimpleTextFormatter;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear(&self) {
    java_method!(self.env, self.object, "clear", "()V", CallVoidMethod);
  }

  pub fn add(&self, param_1: text_transform_SimpleTextFormatter) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/text/transform/SimpleTextFormatter;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn insert(&self, param_1: i32, param_2: text_transform_SimpleTextFormatter) {
    java_method!(self.env, self.object, "insert", "(ILorg/spongepowered/api/text/transform/SimpleTextFormatter;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn insert_1(&self, param_1: i32, param_2: jobject) {
    java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn remove(&self, param_1: text_transform_SimpleTextFormatter) -> bool {
    java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/text/transform/SimpleTextFormatter;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn retain(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "retain", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_2(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn insert_2(&self, param_1: i32, param_2: text_TextRepresentable) {
    java_method!(self.env, self.object, "insert", "(ILorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn add_2(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_1(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn set_1(&self, param_1: i32, param_2: text_TextRepresentable) -> text_TextRepresentable {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/text/TextRepresentable;)Lorg/spongepowered/api/text/TextRepresentable;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/DynamicPartitionedTextFormatter#set was null") }
    text_TextRepresentable { env: self.env, object: ret }
  }

  pub fn get_1(&self, param_1: i32) -> text_TextRepresentable {
    let ret = java_method!(self.env, self.object, "get", "(I)Lorg/spongepowered/api/text/TextRepresentable;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/DynamicPartitionedTextFormatter#get was null") }
    text_TextRepresentable { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_transform_FixedPartitionedTextFormatter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_transform_FixedPartitionedTextFormatter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_transform_FixedPartitionedTextFormatter {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> text_transform_FixedPartitionedTextFormatter {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/text/transform/FixedPartitionedTextFormatter", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/FixedPartitionedTextFormatter#<init> was null") }
    text_transform_FixedPartitionedTextFormatter { env: self.env, object: ret }
  }

  pub fn new_1(&self) -> text_transform_FixedPartitionedTextFormatter {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/transform/FixedPartitionedTextFormatter", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/FixedPartitionedTextFormatter#<init> was null") }
    text_transform_FixedPartitionedTextFormatter { env: self.env, object: ret }
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Lcom/google/common/collect/ImmutableList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/FixedPartitionedTextFormatter#getAll was null") }
    ret
  }

  pub fn get(&self, param_1: i32) -> text_transform_SimpleTextFormatter {
    let ret = java_method!(self.env, self.object, "get", "(I)Lorg/spongepowered/api/text/transform/SimpleTextFormatter;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/FixedPartitionedTextFormatter#get was null") }
    text_transform_SimpleTextFormatter { env: self.env, object: ret }
  }

  pub fn set(&self, param_1: i32, param_2: text_transform_SimpleTextFormatter) -> text_transform_SimpleTextFormatter {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/text/transform/SimpleTextFormatter;)Lorg/spongepowered/api/text/transform/SimpleTextFormatter;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/FixedPartitionedTextFormatter#set was null") }
    text_transform_SimpleTextFormatter { env: self.env, object: ret }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn contains(&self, param_1: text_transform_SimpleTextFormatter) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/text/transform/SimpleTextFormatter;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear(&self) {
    java_method!(self.env, self.object, "clear", "()V", CallVoidMethod);
  }

  pub fn add(&self, param_1: text_transform_SimpleTextFormatter) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/text/transform/SimpleTextFormatter;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn insert(&self, param_1: i32, param_2: text_transform_SimpleTextFormatter) {
    java_method!(self.env, self.object, "insert", "(ILorg/spongepowered/api/text/transform/SimpleTextFormatter;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn insert_1(&self, param_1: i32, param_2: jobject) {
    java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn remove(&self, param_1: text_transform_SimpleTextFormatter) -> bool {
    java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/text/transform/SimpleTextFormatter;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn retain(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "retain", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_2(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn insert_2(&self, param_1: i32, param_2: text_TextRepresentable) {
    java_method!(self.env, self.object, "insert", "(ILorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn add_2(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_1(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn set_1(&self, param_1: i32, param_2: text_TextRepresentable) -> text_TextRepresentable {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/text/TextRepresentable;)Lorg/spongepowered/api/text/TextRepresentable;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/FixedPartitionedTextFormatter#set was null") }
    text_TextRepresentable { env: self.env, object: ret }
  }

  pub fn get_1(&self, param_1: i32) -> text_TextRepresentable {
    let ret = java_method!(self.env, self.object, "get", "(I)Lorg/spongepowered/api/text/TextRepresentable;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/FixedPartitionedTextFormatter#get was null") }
    text_TextRepresentable { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_transform_PartitionedTextFormatter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_transform_PartitionedTextFormatter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_transform_PartitionedTextFormatter {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct text_transform_SimpleTextFormatter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_transform_SimpleTextFormatter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_transform_SimpleTextFormatter {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> text_transform_SimpleTextFormatter {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/text/transform/SimpleTextFormatter", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextFormatter#<init> was null") }
    text_transform_SimpleTextFormatter { env: self.env, object: ret }
  }

  pub fn new_1(&self) -> text_transform_SimpleTextFormatter {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/transform/SimpleTextFormatter", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextFormatter#<init> was null") }
    text_transform_SimpleTextFormatter { env: self.env, object: ret }
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Lcom/google/common/collect/ImmutableList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextFormatter#getAll was null") }
    ret
  }

  pub fn get(&self, param_1: i32) -> text_transform_SimpleTextTemplateApplier {
    let ret = java_method!(self.env, self.object, "get", "(I)Lorg/spongepowered/api/text/transform/SimpleTextTemplateApplier;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextFormatter#get was null") }
    text_transform_SimpleTextTemplateApplier { env: self.env, object: ret }
  }

  pub fn set(&self, param_1: i32, param_2: text_transform_SimpleTextTemplateApplier) -> text_transform_SimpleTextTemplateApplier {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/text/transform/SimpleTextTemplateApplier;)Lorg/spongepowered/api/text/transform/SimpleTextTemplateApplier;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextFormatter#set was null") }
    text_transform_SimpleTextTemplateApplier { env: self.env, object: ret }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn contains(&self, param_1: text_transform_SimpleTextTemplateApplier) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/text/transform/SimpleTextTemplateApplier;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear(&self) {
    java_method!(self.env, self.object, "clear", "()V", CallVoidMethod);
  }

  pub fn add(&self, param_1: text_transform_SimpleTextTemplateApplier) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/text/transform/SimpleTextTemplateApplier;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn insert(&self, param_1: i32, param_2: text_transform_SimpleTextTemplateApplier) {
    java_method!(self.env, self.object, "insert", "(ILorg/spongepowered/api/text/transform/SimpleTextTemplateApplier;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn insert_1(&self, param_1: i32, param_2: jobject) {
    java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn remove(&self, param_1: text_transform_SimpleTextTemplateApplier) -> bool {
    java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/text/transform/SimpleTextTemplateApplier;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn retain(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "retain", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_2(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn insert_2(&self, param_1: i32, param_2: text_TextRepresentable) {
    java_method!(self.env, self.object, "insert", "(ILorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn add_2(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_1(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn set_1(&self, param_1: i32, param_2: text_TextRepresentable) -> text_TextRepresentable {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/text/TextRepresentable;)Lorg/spongepowered/api/text/TextRepresentable;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextFormatter#set was null") }
    text_TextRepresentable { env: self.env, object: ret }
  }

  pub fn get_1(&self, param_1: i32) -> text_TextRepresentable {
    let ret = java_method!(self.env, self.object, "get", "(I)Lorg/spongepowered/api/text/TextRepresentable;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextFormatter#get was null") }
    text_TextRepresentable { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_transform_SimpleTextTemplateApplier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_transform_SimpleTextTemplateApplier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_transform_SimpleTextTemplateApplier {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: text_TextTemplate) -> text_transform_SimpleTextTemplateApplier {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/TextTemplate;)Lorg/spongepowered/api/text/transform/SimpleTextTemplateApplier", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextTemplateApplier#<init> was null") }
    text_transform_SimpleTextTemplateApplier { env: self.env, object: ret }
  }

  pub fn new_1(&self) -> text_transform_SimpleTextTemplateApplier {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/text/transform/SimpleTextTemplateApplier", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextTemplateApplier#<init> was null") }
    text_transform_SimpleTextTemplateApplier { env: self.env, object: ret }
  }

  pub fn get_parameters(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getParameters", "()Lcom/google/common/collect/ImmutableMap;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextTemplateApplier#getParameters was null") }
    ret
  }

  pub fn set_parameter(&self, param_1: jobject, param_2: text_TextElement) {
    java_method!(self.env, self.object, "setParameter", "(Ljava/lang/String;Lorg/spongepowered/api/text/TextElement;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_template(&self) -> text_TextTemplate {
    let ret = java_method!(self.env, self.object, "getTemplate", "()Lorg/spongepowered/api/text/TextTemplate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/SimpleTextTemplateApplier#getTemplate was null") }
    text_TextTemplate { env: self.env, object: ret }
  }

  pub fn set_template(&self, param_1: text_TextTemplate) {
    java_method!(self.env, self.object, "setTemplate", "(Lorg/spongepowered/api/text/TextTemplate;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct text_transform_TextFormatter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_transform_TextFormatter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_transform_TextFormatter {
      env: env,
      object: object
    }
  }

  pub fn get_all(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAll", "()Lcom/google/common/collect/ImmutableList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextFormatter#getAll was null") }
    ret
  }

  pub fn get(&self, param_1: i32) -> text_TextRepresentable {
    let ret = java_method!(self.env, self.object, "get", "(I)Lorg/spongepowered/api/text/TextRepresentable;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextFormatter#get was null") }
    text_TextRepresentable { env: self.env, object: ret }
  }

  pub fn first_after(&self, param_1: i32, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "firstAfter", "(ILjava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextFormatter#firstAfter was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn first(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "first", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextFormatter#first was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn for_each_after(&self, param_1: i32, param_2: jobject, param_3: jobject) {
    java_method!(self.env, self.object, "forEachAfter", "(ILjava/lang/Class;Ljava/util/function/Consumer;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn for_each(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "forEach", "(Ljava/lang/Class;Ljava/util/function/Consumer;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn set(&self, param_1: i32, param_2: text_TextRepresentable) -> text_TextRepresentable {
    let ret = java_method!(self.env, self.object, "set", "(ILorg/spongepowered/api/text/TextRepresentable;)Lorg/spongepowered/api/text/TextRepresentable;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextFormatter#set was null") }
    text_TextRepresentable { env: self.env, object: ret }
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn contains(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "contains", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear(&self) {
    java_method!(self.env, self.object, "clear", "()V", CallVoidMethod);
  }

  pub fn add(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_2(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/lang/Iterable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_3(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/util/Iterator;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn insert(&self, param_1: i32, param_2: text_TextRepresentable) {
    java_method!(self.env, self.object, "insert", "(ILorg/spongepowered/api/text/TextRepresentable;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn insert_1(&self, param_1: i32, param_2: jobject) {
    java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn insert_2(&self, param_1: i32, param_2: jobject) {
    java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn insert_3(&self, param_1: i32, param_2: jobject) {
    java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn remove(&self, param_1: text_TextRepresentable) -> bool {
    java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/text/TextRepresentable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_2(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_3(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn retain(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "retain", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn retain_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "retain", "(Ljava/lang/Iterable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn retain_2(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "retain", "(Ljava/util/Iterator;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn format(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "format", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextFormatter#format was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn iterator(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "iterator", "()Ljava/util/Iterator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextFormatter#iterator was null") }
    ret
  }

  pub fn to_text(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "toText", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextFormatter#toText was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_transform_TextTemplateApplier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_transform_TextTemplateApplier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_transform_TextTemplateApplier {
      env: env,
      object: object
    }
  }

  pub fn get_parameters(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getParameters", "()Lcom/google/common/collect/ImmutableMap;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextTemplateApplier#getParameters was null") }
    ret
  }

  pub fn get_parameter(&self, param_1: jobject) -> text_TextElement {
    let ret = java_method!(self.env, self.object, "getParameter", "(Ljava/lang/String;)Lorg/spongepowered/api/text/TextElement;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextTemplateApplier#getParameter was null") }
    text_TextElement { env: self.env, object: ret }
  }

  pub fn set_parameter(&self, param_1: jobject, param_2: text_TextElement) {
    java_method!(self.env, self.object, "setParameter", "(Ljava/lang/String;Lorg/spongepowered/api/text/TextElement;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_template(&self) -> text_TextTemplate {
    let ret = java_method!(self.env, self.object, "getTemplate", "()Lorg/spongepowered/api/text/TextTemplate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextTemplateApplier#getTemplate was null") }
    text_TextTemplate { env: self.env, object: ret }
  }

  pub fn set_template(&self, param_1: text_TextTemplate) {
    java_method!(self.env, self.object, "setTemplate", "(Lorg/spongepowered/api/text/TextTemplate;)V", CallVoidMethodA, param_1);
  }

  pub fn to_text(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "toText", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/transform/TextTemplateApplier#toText was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_TranslatableText_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_TranslatableText_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_TranslatableText_Builder {
      env: env,
      object: object
    }
  }

  pub fn get_translation(&self) -> text_translation_Translation {
    let ret = java_method!(self.env, self.object, "getTranslation", "()Lorg/spongepowered/api/text/translation/Translation;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#getTranslation was null") }
    text_translation_Translation { env: self.env, object: ret }
  }

  pub fn get_arguments(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getArguments", "()Lcom/google/common/collect/ImmutableList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#getArguments was null") }
    ret
  }

  pub fn translation(&self, param_1: text_translation_Translation, param_2: &[jobject]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "translation", "(Lorg/spongepowered/api/text/translation/Translation;[Ljava/lang/Object;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#translation was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn translation_1(&self, param_1: text_translation_Translatable, param_2: &[jobject]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "translation", "(Lorg/spongepowered/api/text/translation/Translatable;[Ljava/lang/Object;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#translation was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> text_TranslatableText {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/TranslatableText;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#build was null") }
    text_TranslatableText { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn format(&self, param_1: text_format_TextFormat) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#format was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn color(&self, param_1: text_format_TextColor) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#color was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn style(&self, param_1: &[text_format_TextStyle]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "style", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#style was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn on_click(&self, param_1: text_action_ClickAction) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "onClick", "(Lorg/spongepowered/api/text/action/ClickAction;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#onClick was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn on_hover(&self, param_1: text_action_HoverAction) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "onHover", "(Lorg/spongepowered/api/text/action/HoverAction;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#onHover was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn on_shift_click(&self, param_1: text_action_ShiftClickAction) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "onShiftClick", "(Lorg/spongepowered/api/text/action/ShiftClickAction;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#onShiftClick was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn append(&self, param_1: &[text_Text]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "append", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#append was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn append_1(&self, param_1: jobject) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#append was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn append_2(&self, param_1: jobject) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#append was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn append_3(&self, param_1: jobject) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#append was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn insert(&self, param_1: i32, param_2: &[text_Text]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#insert was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn insert_1(&self, param_1: i32, param_2: jobject) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#insert was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn insert_2(&self, param_1: i32, param_2: jobject) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#insert was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn insert_3(&self, param_1: i32, param_2: jobject) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#insert was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: &[text_Text]) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#remove was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: jobject) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#remove was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: jobject) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#remove was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn remove_3(&self, param_1: jobject) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#remove was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn remove_all(&self) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "removeAll", "()Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#removeAll was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn build_1(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#build was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn remove_all_1(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "removeAll", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#removeAll was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_4(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_5(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_6(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn remove_7(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "remove", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#remove was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_4(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_5(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_6(&self, param_1: i32, param_2: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(ILjava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn insert_7(&self, param_1: i32, param_2: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "insert", "(I[Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#insert was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_4(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Iterator;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_5(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_6(&self, param_1: jobject) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "(Ljava/util/Collection;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn append_7(&self, param_1: &[text_Text]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "append", "([Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#append was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_shift_click_1(&self, param_1: text_action_ShiftClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onShiftClick", "(Lorg/spongepowered/api/text/action/ShiftClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#onShiftClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_hover_1(&self, param_1: text_action_HoverAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onHover", "(Lorg/spongepowered/api/text/action/HoverAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#onHover was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn on_click_1(&self, param_1: text_action_ClickAction) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "onClick", "(Lorg/spongepowered/api/text/action/ClickAction;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#onClick was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn style_1(&self, param_1: &[text_format_TextStyle]) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "style", "([Lorg/spongepowered/api/text/format/TextStyle;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#style was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn color_1(&self, param_1: text_format_TextColor) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "color", "(Lorg/spongepowered/api/text/format/TextColor;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#color was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

  pub fn format_1(&self, param_1: text_format_TextFormat) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "format", "(Lorg/spongepowered/api/text/format/TextFormat;)Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText$Builder#format was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_TranslatableText {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_TranslatableText {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_TranslatableText {
      env: env,
      object: object
    }
  }

  pub fn get_translation(&self) -> text_translation_Translation {
    let ret = java_method!(self.env, self.object, "getTranslation", "()Lorg/spongepowered/api/text/translation/Translation;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText#getTranslation was null") }
    text_translation_Translation { env: self.env, object: ret }
  }

  pub fn get_arguments(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getArguments", "()Lcom/google/common/collect/ImmutableList;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText#getArguments was null") }
    ret
  }

  pub fn to_builder(&self) -> text_TranslatableText_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/TranslatableText$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText#toBuilder was null") }
    text_TranslatableText_Builder { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_builder_1(&self) -> text_Text_Builder {
    let ret = java_method!(self.env, self.object, "toBuilder", "()Lorg/spongepowered/api/text/Text$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/TranslatableText#toBuilder was null") }
    text_Text_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_translation_FixedTranslation {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_translation_FixedTranslation {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_translation_FixedTranslation {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> text_translation_FixedTranslation {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/text/translation/FixedTranslation", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/FixedTranslation#<init> was null") }
    text_translation_FixedTranslation { env: self.env, object: ret }
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/FixedTranslation#getId was null") }
    ret
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Locale;)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/FixedTranslation#get was null") }
    ret
  }

  pub fn get_1(&self, param_1: jobject, param_2: &[jobject]) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Locale;[Ljava/lang/Object;)Ljava/lang/String;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/FixedTranslation#get was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_translation_locale_Locales {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_translation_locale_Locales {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_translation_locale_Locales {
      env: env,
      object: object
    }
  }

  pub fn of(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "of", "(Ljava/lang/String;)Ljava/util/Locale;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/locale/Locales#of was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_translation_locale_NamedLocales {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_translation_locale_NamedLocales {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_translation_locale_NamedLocales {
      env: env,
      object: object
    }
  }

}



#[derive(Debug)]
pub struct text_translation_ResourceBundleTranslation {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_translation_ResourceBundleTranslation {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_translation_ResourceBundleTranslation {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject) -> text_translation_ResourceBundleTranslation {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/util/function/Function;)Lorg/spongepowered/api/text/translation/ResourceBundleTranslation", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/ResourceBundleTranslation#<init> was null") }
    text_translation_ResourceBundleTranslation { env: self.env, object: ret }
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/ResourceBundleTranslation#getId was null") }
    ret
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Locale;)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/ResourceBundleTranslation#get was null") }
    ret
  }

  pub fn get_1(&self, param_1: jobject, param_2: &[jobject]) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Locale;[Ljava/lang/Object;)Ljava/lang/String;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/ResourceBundleTranslation#get was null") }
    ret
  }

}

#[derive(Debug)]
pub struct text_translation_Translatable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_translation_Translatable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_translation_Translatable {
      env: env,
      object: object
    }
  }

  pub fn get_translation(&self) -> text_translation_Translation {
    let ret = java_method!(self.env, self.object, "getTranslation", "()Lorg/spongepowered/api/text/translation/Translation;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/Translatable#getTranslation was null") }
    text_translation_Translation { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct text_translation_Translation {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl text_translation_Translation {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    text_translation_Translation {
      env: env,
      object: object
    }
  }

  pub fn get_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getId", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/Translation#getId was null") }
    ret
  }

  pub fn get(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/Translation#get was null") }
    ret
  }

  pub fn get_1(&self, param_1: &[jobject]) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "([Ljava/lang/Object;)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/Translation#get was null") }
    ret
  }

  pub fn get_2(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Locale;)Ljava/lang/String;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/Translation#get was null") }
    ret
  }

  pub fn get_3(&self, param_1: jobject, param_2: &[jobject]) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Locale;[Ljava/lang/Object;)Ljava/lang/String;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/text/translation/Translation#get was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_AABB {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_AABB {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_AABB {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject) -> util_AABB {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/util/AABB", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#<init> was null") }
    util_AABB { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: f64, param_2: f64, param_3: f64, param_4: f64, param_5: f64, param_6: f64) -> util_AABB {
    let ret = java_method!(self.env, self.object, "<init>", "(DDDDDD)Lorg/spongepowered/api/util/AABB", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#<init> was null") }
    util_AABB { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject) -> util_AABB {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/AABB", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#<init> was null") }
    util_AABB { env: self.env, object: ret }
  }

  pub fn get_min(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMin", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#getMin was null") }
    ret
  }

  pub fn get_max(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMax", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#getMax was null") }
    ret
  }

  pub fn get_center(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCenter", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#getCenter was null") }
    ret
  }

  pub fn get_size(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSize", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#getSize was null") }
    ret
  }

  pub fn contains(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "contains", "(Lcom/flowpowered/math/vector/Vector3i;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "contains", "(Lcom/flowpowered/math/vector/Vector3d;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_2(&self, param_1: f64, param_2: f64, param_3: f64) -> bool {
    java_method!(self.env, self.object, "contains", "(DDD)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn intersects(&self, param_1: util_AABB) -> bool {
    java_method!(self.env, self.object, "intersects", "(Lorg/spongepowered/api/util/AABB;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn intersects_1(&self, param_1: jobject, param_2: jobject) -> Option<util_Tuple> {
    let ret = java_method!(self.env, self.object, "intersects", "(Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#intersects was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_Tuple { env: self.env, object: unwrapped }) }
  }

  pub fn offset(&self, param_1: jobject) -> util_AABB {
    let ret = java_method!(self.env, self.object, "offset", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/util/AABB;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#offset was null") }
    util_AABB { env: self.env, object: ret }
  }

  pub fn offset_1(&self, param_1: jobject) -> util_AABB {
    let ret = java_method!(self.env, self.object, "offset", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/AABB;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#offset was null") }
    util_AABB { env: self.env, object: ret }
  }

  pub fn offset_2(&self, param_1: f64, param_2: f64, param_3: f64) -> util_AABB {
    let ret = java_method!(self.env, self.object, "offset", "(DDD)Lorg/spongepowered/api/util/AABB;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#offset was null") }
    util_AABB { env: self.env, object: ret }
  }

  pub fn expand(&self, param_1: jobject) -> util_AABB {
    let ret = java_method!(self.env, self.object, "expand", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/util/AABB;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#expand was null") }
    util_AABB { env: self.env, object: ret }
  }

  pub fn expand_1(&self, param_1: jobject) -> util_AABB {
    let ret = java_method!(self.env, self.object, "expand", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/AABB;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#expand was null") }
    util_AABB { env: self.env, object: ret }
  }

  pub fn expand_2(&self, param_1: f64, param_2: f64, param_3: f64) -> util_AABB {
    let ret = java_method!(self.env, self.object, "expand", "(DDD)Lorg/spongepowered/api/util/AABB;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#expand was null") }
    util_AABB { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/AABB#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_annotation_CatalogedBy {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_annotation_CatalogedBy {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_annotation_CatalogedBy {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> &[jobject] {
    unimplemented!();
  }
}

#[derive(Debug)]
pub struct util_annotation_NonnullByDefault {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_annotation_NonnullByDefault {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_annotation_NonnullByDefault {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct util_annotation_TransformResult {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_annotation_TransformResult {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_annotation_TransformResult {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/annotation/TransformResult#value was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_annotation_TransformWith {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_annotation_TransformWith {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_annotation_TransformWith {
      env: env,
      object: object
    }
  }

  pub fn value(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "value", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/annotation/TransformWith#value was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_Axis_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Axis_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Axis_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct util_Axis {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Axis {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Axis {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[util_Axis] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> util_Axis {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/util/Axis;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Axis#valueOf was null") }
    util_Axis { env: self.env, object: ret }
  }

  pub fn get_closest(param_1: jobject) -> util_Axis {
    let ret = java_method!(self.env, "getClosest", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/Axis;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Axis#getClosest was null") }
    util_Axis { env: self.env, object: ret }
  }

  pub fn is_vector_along_axis(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "isVectorAlongAxis", "(Lcom/flowpowered/math/vector/Vector3d;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_component(&self, param_1: jobject) -> f64 {
    java_method!(self.env, self.object, "getComponent", "(Lcom/flowpowered/math/vector/Vector3d;)D", CallDoubleMethodA, param_1)
  }

  pub fn get_direction(&self, param_1: jobject) -> util_AxisDirection {
    let ret = java_method!(self.env, self.object, "getDirection", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/AxisDirection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Axis#getDirection was null") }
    util_AxisDirection { env: self.env, object: ret }
  }

  pub fn to_vector_3d(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toVector3d", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Axis#toVector3d was null") }
    ret
  }

  pub fn to_vector_3d_with_direction(&self, param_1: util_AxisDirection) -> jobject {
    let ret = java_method!(self.env, self.object, "toVector3dWithDirection", "(Lorg/spongepowered/api/util/AxisDirection;)Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Axis#toVector3dWithDirection was null") }
    ret
  }

  pub fn cycle_next(&self) -> util_Axis {
    let ret = java_method!(self.env, self.object, "cycleNext", "()Lorg/spongepowered/api/util/Axis;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Axis#cycleNext was null") }
    util_Axis { env: self.env, object: ret }
  }

  pub fn cycle_next_1(&self) -> util_Cycleable {
    let ret = java_method!(self.env, self.object, "cycleNext", "()Lorg/spongepowered/api/util/Cycleable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Axis#cycleNext was null") }
    util_Cycleable { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_AxisDirection {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_AxisDirection {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_AxisDirection {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[util_AxisDirection] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> util_AxisDirection {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/util/AxisDirection;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/AxisDirection#valueOf was null") }
    util_AxisDirection { env: self.env, object: ret }
  }

  pub fn get_signum(&self) -> i32 {
    java_method!(self.env, self.object, "getSignum", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct util_ban_Ban_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_ban_Ban_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_ban_Ban_Builder {
      env: env,
      object: object
    }
  }

  pub fn profile(&self, param_1: profile_GameProfile) -> util_ban_Ban_Builder {
    let ret = java_method!(self.env, self.object, "profile", "(Lorg/spongepowered/api/profile/GameProfile;)Lorg/spongepowered/api/util/ban/Ban$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Builder#profile was null") }
    util_ban_Ban_Builder { env: self.env, object: ret }
  }

  pub fn address(&self, param_1: jobject) -> util_ban_Ban_Builder {
    let ret = java_method!(self.env, self.object, "address", "(Ljava/net/InetAddress;)Lorg/spongepowered/api/util/ban/Ban$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Builder#address was null") }
    util_ban_Ban_Builder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: util_ban_BanType) -> util_ban_Ban_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/util/ban/BanType;)Lorg/spongepowered/api/util/ban/Ban$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Builder#type was null") }
    util_ban_Ban_Builder { env: self.env, object: ret }
  }

  pub fn reason(&self, param_1: text_Text) -> util_ban_Ban_Builder {
    let ret = java_method!(self.env, self.object, "reason", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/util/ban/Ban$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Builder#reason was null") }
    util_ban_Ban_Builder { env: self.env, object: ret }
  }

  pub fn start_date(&self, param_1: jobject) -> util_ban_Ban_Builder {
    let ret = java_method!(self.env, self.object, "startDate", "(Ljava/time/Instant;)Lorg/spongepowered/api/util/ban/Ban$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Builder#startDate was null") }
    util_ban_Ban_Builder { env: self.env, object: ret }
  }

  pub fn expiration_date(&self, param_1: jobject) -> util_ban_Ban_Builder {
    let ret = java_method!(self.env, self.object, "expirationDate", "(Ljava/time/Instant;)Lorg/spongepowered/api/util/ban/Ban$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Builder#expirationDate was null") }
    util_ban_Ban_Builder { env: self.env, object: ret }
  }

  pub fn source(&self, param_1: command_CommandSource) -> util_ban_Ban_Builder {
    let ret = java_method!(self.env, self.object, "source", "(Lorg/spongepowered/api/command/CommandSource;)Lorg/spongepowered/api/util/ban/Ban$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Builder#source was null") }
    util_ban_Ban_Builder { env: self.env, object: ret }
  }

  pub fn source_1(&self, param_1: text_Text) -> util_ban_Ban_Builder {
    let ret = java_method!(self.env, self.object, "source", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/util/ban/Ban$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Builder#source was null") }
    util_ban_Ban_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> util_ban_Ban {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/util/ban/Ban;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Builder#build was null") }
    util_ban_Ban { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_ban_Ban_Ip {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_ban_Ban_Ip {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_ban_Ban_Ip {
      env: env,
      object: object
    }
  }

  pub fn get_address(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getAddress", "()Ljava/net/InetAddress;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Ip#getAddress was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_ban_Ban_Profile {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_ban_Ban_Profile {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_ban_Ban_Profile {
      env: env,
      object: object
    }
  }

  pub fn get_profile(&self) -> profile_GameProfile {
    let ret = java_method!(self.env, self.object, "getProfile", "()Lorg/spongepowered/api/profile/GameProfile;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban$Profile#getProfile was null") }
    profile_GameProfile { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_ban_Ban {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_ban_Ban {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_ban_Ban {
      env: env,
      object: object
    }
  }

  pub fn builder() -> util_ban_Ban_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/util/ban/Ban$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban#builder was null") }
    util_ban_Ban_Builder { env: self.env, object: ret }
  }

  pub fn of(param_1: profile_GameProfile) -> util_ban_Ban {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/profile/GameProfile;)Lorg/spongepowered/api/util/ban/Ban;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban#of was null") }
    util_ban_Ban { env: self.env, object: ret }
  }

  pub fn of_1(param_1: profile_GameProfile, param_2: text_Text) -> util_ban_Ban {
    let ret = java_method!(self.env, "of", "(Lorg/spongepowered/api/profile/GameProfile;Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/util/ban/Ban;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban#of was null") }
    util_ban_Ban { env: self.env, object: ret }
  }

  pub fn get_type(&self) -> util_ban_BanType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/util/ban/BanType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban#getType was null") }
    util_ban_BanType { env: self.env, object: ret }
  }

  pub fn get_reason(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getReason", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban#getReason was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_creation_date(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCreationDate", "()Ljava/time/Instant;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban#getCreationDate was null") }
    ret
  }

  pub fn get_ban_source(&self) -> Option<text_Text> {
    let ret = java_method!(self.env, self.object, "getBanSource", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban#getBanSource was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(text_Text { env: self.env, object: unwrapped }) }
  }

  pub fn get_ban_command_source(&self) -> Option<command_CommandSource> {
    let ret = java_method!(self.env, self.object, "getBanCommandSource", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban#getBanCommandSource was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(command_CommandSource { env: self.env, object: unwrapped }) }
  }

  pub fn get_expiration_date(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getExpirationDate", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/Ban#getExpirationDate was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn is_indefinite(&self) -> bool {
    java_method!(self.env, self.object, "isIndefinite", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct util_ban_BanType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_ban_BanType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_ban_BanType {
      env: env,
      object: object
    }
  }

  pub fn get_ban_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBanClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ban/BanType#getBanClass was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_ban_BanTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_ban_BanTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_ban_BanTypes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct util_blockray_BlockRay_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_blockray_BlockRay_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_blockray_BlockRay_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct util_blockray_BlockRay_BlockRayBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_blockray_BlockRay_BlockRayBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_blockray_BlockRay_BlockRayBuilder {
      env: env,
      object: object
    }
  }

  pub fn filter(&self, param_1: jobject) -> util_blockray_BlockRay_BlockRayBuilder {
    let ret = java_method!(self.env, self.object, "filter", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#filter was null") }
    util_blockray_BlockRay_BlockRayBuilder { env: self.env, object: ret }
  }

  pub fn filter_1(&self, param_1: &[jobject]) -> util_blockray_BlockRay_BlockRayBuilder {
    let ret = java_method!(self.env, self.object, "filter", "([Ljava/util/function/Predicate;)Lorg/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#filter was null") }
    util_blockray_BlockRay_BlockRayBuilder { env: self.env, object: ret }
  }

  pub fn to(&self, param_1: jobject) -> util_blockray_BlockRay_BlockRayBuilder {
    let ret = java_method!(self.env, self.object, "to", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#to was null") }
    util_blockray_BlockRay_BlockRayBuilder { env: self.env, object: ret }
  }

  pub fn direction(&self, param_1: jobject) -> util_blockray_BlockRay_BlockRayBuilder {
    let ret = java_method!(self.env, self.object, "direction", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#direction was null") }
    util_blockray_BlockRay_BlockRayBuilder { env: self.env, object: ret }
  }

  pub fn block_limit(&self, param_1: i32) -> util_blockray_BlockRay_BlockRayBuilder {
    let ret = java_method!(self.env, self.object, "blockLimit", "(I)Lorg/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#blockLimit was null") }
    util_blockray_BlockRay_BlockRayBuilder { env: self.env, object: ret }
  }

  pub fn narrow_phase(&self, param_1: bool) -> util_blockray_BlockRay_BlockRayBuilder {
    let ret = java_method!(self.env, self.object, "narrowPhase", "(Z)Lorg/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#narrowPhase was null") }
    util_blockray_BlockRay_BlockRayBuilder { env: self.env, object: ret }
  }

  pub fn position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "position", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#position was null") }
    ret
  }

  pub fn build(&self) -> util_blockray_BlockRay {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/util/blockray/BlockRay;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#build was null") }
    util_blockray_BlockRay { env: self.env, object: ret }
  }

  pub fn iterator(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "iterator", "()Ljava/util/Iterator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#iterator was null") }
    ret
  }

  pub fn end(&self) -> Option<util_blockray_BlockRayHit> {
    let ret = java_method!(self.env, self.object, "end", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder#end was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_blockray_BlockRayHit { env: self.env, object: unwrapped }) }
  }

}

#[derive(Debug)]
pub struct util_blockray_BlockRay_ContinueAfterFilter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_blockray_BlockRay_ContinueAfterFilter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_blockray_BlockRay_ContinueAfterFilter {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: i32) -> util_blockray_BlockRay_ContinueAfterFilter {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/function/Predicate;I)Lorg/spongepowered/api/util/blockray/BlockRay$ContinueAfterFilter", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay$ContinueAfterFilter#<init> was null") }
    util_blockray_BlockRay_ContinueAfterFilter { env: self.env, object: ret }
  }

  pub fn test(&self, param_1: util_blockray_BlockRayHit) -> bool {
    java_method!(self.env, self.object, "test", "(Lorg/spongepowered/api/util/blockray/BlockRayHit;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn test_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "test", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct util_blockray_BlockRay_TargetBlockFilter {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_blockray_BlockRay_TargetBlockFilter {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_blockray_BlockRay_TargetBlockFilter {
      env: env,
      object: object
    }
  }

  pub fn test(&self, param_1: util_blockray_BlockRayHit) -> bool {
    java_method!(self.env, self.object, "test", "(Lorg/spongepowered/api/util/blockray/BlockRayHit;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn test_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "test", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct util_blockray_BlockRay {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_blockray_BlockRay {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_blockray_BlockRay {
      env: env,
      object: object
    }
  }

  pub fn set_block_limit(&self, param_1: i32) {
    java_method!(self.env, self.object, "setBlockLimit", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn reset(&self) {
    java_method!(self.env, self.object, "reset", "()V", CallVoidMethod);
  }

  pub fn has_next(&self) -> bool {
    java_method!(self.env, self.object, "hasNext", "()Z", CallBooleanMethod) == 1
  }

  pub fn next(&self) -> util_blockray_BlockRayHit {
    let ret = java_method!(self.env, self.object, "next", "()Lorg/spongepowered/api/util/blockray/BlockRayHit;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#next was null") }
    util_blockray_BlockRayHit { env: self.env, object: ret }
  }

  pub fn end(&self) -> Option<util_blockray_BlockRayHit> {
    let ret = java_method!(self.env, self.object, "end", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#end was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_blockray_BlockRayHit { env: self.env, object: unwrapped }) }
  }

  pub fn from_1(param_1: world_Location) -> util_blockray_BlockRay_BlockRayBuilder {
    let ret = java_method!(self.env, "from", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#from was null") }
    util_blockray_BlockRay_BlockRayBuilder { env: self.env, object: ret }
  }

  pub fn from_2(param_1: world_extent_Extent, param_2: jobject) -> util_blockray_BlockRay_BlockRayBuilder {
    let ret = java_method!(self.env, "from", "(Lorg/spongepowered/api/world/extent/Extent;Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#from was null") }
    util_blockray_BlockRay_BlockRayBuilder { env: self.env, object: ret }
  }

  pub fn from_3(param_1: entity_Entity) -> util_blockray_BlockRay_BlockRayBuilder {
    let ret = java_method!(self.env, "from", "(Lorg/spongepowered/api/entity/Entity;)Lorg/spongepowered/api/util/blockray/BlockRay$BlockRayBuilder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#from was null") }
    util_blockray_BlockRay_BlockRayBuilder { env: self.env, object: ret }
  }

  pub fn all_filter() -> jobject {
    let ret = java_method!(self.env, "allFilter", "()Ljava/util/function/Predicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#allFilter was null") }
    ret
  }

  pub fn only_air_filter() -> jobject {
    let ret = java_method!(self.env, "onlyAirFilter", "()Ljava/util/function/Predicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#onlyAirFilter was null") }
    ret
  }

  pub fn block_type_filter(param_1: block_BlockType) -> jobject {
    let ret = java_method!(self.env, "blockTypeFilter", "(Lorg/spongepowered/api/block/BlockType;)Ljava/util/function/Predicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#blockTypeFilter was null") }
    ret
  }

  pub fn max_distance_filter(param_1: jobject, param_2: f64) -> jobject {
    let ret = java_method!(self.env, "maxDistanceFilter", "(Lcom/flowpowered/math/vector/Vector3d;D)Ljava/util/function/Predicate;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#maxDistanceFilter was null") }
    ret
  }

  pub fn continue_after_filter(param_1: jobject, param_2: i32) -> jobject {
    let ret = java_method!(self.env, "continueAfterFilter", "(Ljava/util/function/Predicate;I)Ljava/util/function/Predicate;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#continueAfterFilter was null") }
    ret
  }

  pub fn next_1(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "next", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRay#next was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_blockray_BlockRayHit {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_blockray_BlockRayHit {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_blockray_BlockRayHit {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: world_extent_Extent, param_2: f64, param_3: f64, param_4: f64, param_5: jobject, param_6: jobject) -> util_blockray_BlockRayHit {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/extent/Extent;DDDLcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/blockray/BlockRayHit", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#<init> was null") }
    util_blockray_BlockRayHit { env: self.env, object: ret }
  }

  pub fn get_extent(&self) -> world_extent_Extent {
    let ret = java_method!(self.env, self.object, "getExtent", "()Lorg/spongepowered/api/world/extent/Extent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#getExtent was null") }
    world_extent_Extent { env: self.env, object: ret }
  }

  pub fn get_x(&self) -> f64 {
    java_method!(self.env, self.object, "getX", "()D", CallDoubleMethod)
  }

  pub fn get_y(&self) -> f64 {
    java_method!(self.env, self.object, "getY", "()D", CallDoubleMethod)
  }

  pub fn get_z(&self) -> f64 {
    java_method!(self.env, self.object, "getZ", "()D", CallDoubleMethod)
  }

  pub fn get_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPosition", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#getPosition was null") }
    ret
  }

  pub fn get_block_x(&self) -> i32 {
    java_method!(self.env, self.object, "getBlockX", "()I", CallIntMethod)
  }

  pub fn get_block_y(&self) -> i32 {
    java_method!(self.env, self.object, "getBlockY", "()I", CallIntMethod)
  }

  pub fn get_block_z(&self) -> i32 {
    java_method!(self.env, self.object, "getBlockZ", "()I", CallIntMethod)
  }

  pub fn get_block_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBlockPosition", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#getBlockPosition was null") }
    ret
  }

  pub fn get_location(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_direction(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDirection", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#getDirection was null") }
    ret
  }

  pub fn get_normal(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getNormal", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#getNormal was null") }
    ret
  }

  pub fn get_faces(&self) -> &[util_Direction] {
    unimplemented!();
  }
  pub fn map(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "map", "(Ljava/util/function/BiFunction;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#map was null") }
    ret
  }

  pub fn map_block(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "mapBlock", "(Ljava/util/function/BiFunction;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#mapBlock was null") }
    ret
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/blockray/BlockRayHit#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_Coerce {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Coerce {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Coerce {
      env: env,
      object: object
    }
  }

  pub fn to_string(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "toString", "(Ljava/lang/Object;)Ljava/lang/String;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#toString was null") }
    ret
  }

  pub fn as_string(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asString", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asString was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_list(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "toList", "(Ljava/lang/Object;)Ljava/util/List;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#toList was null") }
    ret
  }

  pub fn as_list(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asList", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asList was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_list_of(param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "toListOf", "(Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/List;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#toListOf was null") }
    ret
  }

  pub fn to_boolean(param_1: jobject) -> bool {
    java_method!(self.env, "toBoolean", "(Ljava/lang/Object;)Z", CallStaticBooleanMethod) == 1
  }

  pub fn as_boolean(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asBoolean", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asBoolean was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_integer(param_1: jobject) -> i32 {
    java_method!(self.env, "toInteger", "(Ljava/lang/Object;)I", CallStaticIntMethod)
  }

  pub fn as_integer(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asInteger", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asInteger was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_double(param_1: jobject) -> f64 {
    java_method!(self.env, "toDouble", "(Ljava/lang/Object;)D", CallStaticDoubleMethod)
  }

  pub fn as_double(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asDouble", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asDouble was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_float(param_1: jobject) -> f32 {
    java_method!(self.env, "toFloat", "(Ljava/lang/Object;)F", CallStaticFloatMethod)
  }

  pub fn as_float(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asFloat", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asFloat was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_short(param_1: jobject) -> i16 {
    java_method!(self.env, "toShort", "(Ljava/lang/Object;)S", CallStaticShortMethod)
  }

  pub fn as_short(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asShort", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asShort was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_byte(param_1: jobject) -> i8 {
    java_method!(self.env, "toByte", "(Ljava/lang/Object;)B", CallStaticByteMethod)
  }

  pub fn as_byte(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asByte", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asByte was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_long(param_1: jobject) -> i64 {
    java_method!(self.env, "toLong", "(Ljava/lang/Object;)J", CallStaticLongMethod)
  }

  pub fn as_long(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asLong", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asLong was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_char(param_1: jobject) -> char {
    java_method!(self.env, "toChar", "(Ljava/lang/Object;)C", CallStaticCharMethod) as u8 as char
  }

  pub fn as_char(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "asChar", "(Ljava/lang/Object;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#asChar was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_enum(param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "toEnum", "(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Enum;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#toEnum was null") }
    ret
  }

  pub fn to_enum_1(param_1: jobject, param_2: jobject, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, "toEnum", "(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Enum;)Ljava/lang/Enum;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#toEnum was null") }
    ret
  }

  pub fn to_pseudo_enum(param_1: jobject, param_2: jobject, param_3: jobject, param_4: jobject) -> jobject {
    let ret = java_method!(self.env, "toPseudoEnum", "(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#toPseudoEnum was null") }
    ret
  }

  pub fn to_vector_2i(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "toVector2i", "(Ljava/lang/Object;)Lcom/flowpowered/math/vector/Vector2i;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Coerce#toVector2i was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_CollectionUtils {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_CollectionUtils {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_CollectionUtils {
      env: env,
      object: object
    }
  }

  pub fn copy_map(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "copyMap", "(Ljava/util/Map;)Ljava/util/Map;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/CollectionUtils#copyMap was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_Color_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Color_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Color_Builder {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_Color_Builder {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/Color$Builder", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color$Builder#<init> was null") }
    util_Color_Builder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_Color {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Color {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Color {
      env: env,
      object: object
    }
  }

  pub fn of_rgb(param_1: i32) -> util_Color {
    let ret = java_method!(self.env, "ofRgb", "(I)Lorg/spongepowered/api/util/Color;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#ofRgb was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn of_rgb_1(param_1: i32, param_2: i32, param_3: i32) -> util_Color {
    let ret = java_method!(self.env, "ofRgb", "(III)Lorg/spongepowered/api/util/Color;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#ofRgb was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn of(param_1: jobject) -> util_Color {
    let ret = java_method!(self.env, "of", "(Ljava/awt/Color;)Lorg/spongepowered/api/util/Color;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#of was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn of_1(param_1: jobject) -> util_Color {
    let ret = java_method!(self.env, "of", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/util/Color;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#of was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn of_2(param_1: jobject) -> util_Color {
    let ret = java_method!(self.env, "of", "(Lcom/flowpowered/math/vector/Vector3f;)Lorg/spongepowered/api/util/Color;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#of was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn of_3(param_1: jobject) -> util_Color {
    let ret = java_method!(self.env, "of", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/Color;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#of was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn mix_dye_colors(param_1: &[data_type_DyeColor]) -> util_Color {
    let ret = java_method!(self.env, "mixDyeColors", "([Lorg/spongepowered/api/data/type/DyeColor;)Lorg/spongepowered/api/util/Color;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#mixDyeColors was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn mix_colors(param_1: &[util_Color]) -> util_Color {
    let ret = java_method!(self.env, "mixColors", "([Lorg/spongepowered/api/util/Color;)Lorg/spongepowered/api/util/Color;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#mixColors was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn get_red(&self) -> i32 {
    java_method!(self.env, self.object, "getRed", "()I", CallIntMethod)
  }

  pub fn with_red(&self, param_1: i32) -> util_Color {
    let ret = java_method!(self.env, self.object, "withRed", "(I)Lorg/spongepowered/api/util/Color;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#withRed was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn get_green(&self) -> i32 {
    java_method!(self.env, self.object, "getGreen", "()I", CallIntMethod)
  }

  pub fn with_green(&self, param_1: i32) -> util_Color {
    let ret = java_method!(self.env, self.object, "withGreen", "(I)Lorg/spongepowered/api/util/Color;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#withGreen was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn get_blue(&self) -> i32 {
    java_method!(self.env, self.object, "getBlue", "()I", CallIntMethod)
  }

  pub fn with_blue(&self, param_1: i32) -> util_Color {
    let ret = java_method!(self.env, self.object, "withBlue", "(I)Lorg/spongepowered/api/util/Color;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#withBlue was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn as_java_color(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asJavaColor", "()Ljava/awt/Color;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#asJavaColor was null") }
    ret
  }

  pub fn get_rgb(&self) -> i32 {
    java_method!(self.env, self.object, "getRgb", "()I", CallIntMethod)
  }

  pub fn mix_with_colors(&self, param_1: &[util_Color]) -> util_Color {
    let ret = java_method!(self.env, self.object, "mixWithColors", "([Lorg/spongepowered/api/util/Color;)Lorg/spongepowered/api/util/Color;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#mixWithColors was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn mix_with_dyes(&self, param_1: &[data_type_DyeColor]) -> util_Color {
    let ret = java_method!(self.env, self.object, "mixWithDyes", "([Lorg/spongepowered/api/data/type/DyeColor;)Lorg/spongepowered/api/util/Color;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#mixWithDyes was null") }
    util_Color { env: self.env, object: ret }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Color#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_Cycleable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Cycleable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Cycleable {
      env: env,
      object: object
    }
  }

  pub fn cycle_next(&self) -> util_Cycleable {
    let ret = java_method!(self.env, self.object, "cycleNext", "()Lorg/spongepowered/api/util/Cycleable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Cycleable#cycleNext was null") }
    util_Cycleable { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_Direction_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Direction_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Direction_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct util_Direction_C {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Direction_C {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Direction_C {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct util_Direction_Division {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Direction_Division {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Direction_Division {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[util_Direction_Division] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> util_Direction_Division {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/util/Direction$Division;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction$Division#valueOf was null") }
    util_Direction_Division { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_Direction {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Direction {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Direction {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[util_Direction] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> util_Direction {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/util/Direction;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#valueOf was null") }
    util_Direction { env: self.env, object: ret }
  }

  pub fn get_closest(param_1: jobject) -> util_Direction {
    let ret = java_method!(self.env, "getClosest", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/Direction;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#getClosest was null") }
    util_Direction { env: self.env, object: ret }
  }

  pub fn get_closest_1(param_1: jobject, param_2: util_Direction_Division) -> util_Direction {
    let ret = java_method!(self.env, "getClosest", "(Lcom/flowpowered/math/vector/Vector3d;Lorg/spongepowered/api/util/Direction$Division;)Lorg/spongepowered/api/util/Direction;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#getClosest was null") }
    util_Direction { env: self.env, object: ret }
  }

  pub fn get_closest_horizontal(param_1: jobject) -> util_Direction {
    let ret = java_method!(self.env, "getClosestHorizontal", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/Direction;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#getClosestHorizontal was null") }
    util_Direction { env: self.env, object: ret }
  }

  pub fn get_closest_horizontal_1(param_1: jobject, param_2: util_Direction_Division) -> util_Direction {
    let ret = java_method!(self.env, "getClosestHorizontal", "(Lcom/flowpowered/math/vector/Vector3d;Lorg/spongepowered/api/util/Direction$Division;)Lorg/spongepowered/api/util/Direction;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#getClosestHorizontal was null") }
    util_Direction { env: self.env, object: ret }
  }

  pub fn get_from_axis(param_1: util_Axis) -> util_Direction {
    let ret = java_method!(self.env, "getFromAxis", "(Lorg/spongepowered/api/util/Axis;)Lorg/spongepowered/api/util/Direction;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#getFromAxis was null") }
    util_Direction { env: self.env, object: ret }
  }

  pub fn get_from_axis_1(param_1: util_Axis, param_2: util_AxisDirection) -> util_Direction {
    let ret = java_method!(self.env, "getFromAxis", "(Lorg/spongepowered/api/util/Axis;Lorg/spongepowered/api/util/AxisDirection;)Lorg/spongepowered/api/util/Direction;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#getFromAxis was null") }
    util_Direction { env: self.env, object: ret }
  }

  pub fn get_opposite(&self) -> util_Direction {
    let ret = java_method!(self.env, self.object, "getOpposite", "()Lorg/spongepowered/api/util/Direction;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#getOpposite was null") }
    util_Direction { env: self.env, object: ret }
  }

  pub fn is_opposite(&self, param_1: util_Direction) -> bool {
    java_method!(self.env, self.object, "isOpposite", "(Lorg/spongepowered/api/util/Direction;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_cardinal(&self) -> bool {
    java_method!(self.env, self.object, "isCardinal", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_ordinal(&self) -> bool {
    java_method!(self.env, self.object, "isOrdinal", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_secondary_ordinal(&self) -> bool {
    java_method!(self.env, self.object, "isSecondaryOrdinal", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_upright(&self) -> bool {
    java_method!(self.env, self.object, "isUpright", "()Z", CallBooleanMethod) == 1
  }

  pub fn to_vector_3d(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toVector3d", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#toVector3d was null") }
    ret
  }

  pub fn as_offset(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asOffset", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#asOffset was null") }
    ret
  }

  pub fn as_block_offset(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "asBlockOffset", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Direction#asBlockOffset was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_DiscreteTransform2 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_DiscreteTransform2 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_DiscreteTransform2 {
      env: env,
      object: object
    }
  }

  pub fn get_matrix(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMatrix", "()Lcom/flowpowered/math/matrix/Matrix3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#getMatrix was null") }
    ret
  }

  pub fn transform(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "transform", "(Lcom/flowpowered/math/vector/Vector2i;)Lcom/flowpowered/math/vector/Vector2i;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#transform was null") }
    ret
  }

  pub fn transform_1(&self, param_1: i32, param_2: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "transform", "(II)Lcom/flowpowered/math/vector/Vector2i;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#transform was null") }
    ret
  }

  pub fn transform_x(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "transformX", "(Lcom/flowpowered/math/vector/Vector2i;)I", CallIntMethodA, param_1)
  }

  pub fn transform_x_1(&self, param_1: i32, param_2: i32) -> i32 {
    java_method!(self.env, self.object, "transformX", "(II)I", CallIntMethodA, param_1, param_2)
  }

  pub fn transform_y(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "transformY", "(Lcom/flowpowered/math/vector/Vector2i;)I", CallIntMethodA, param_1)
  }

  pub fn transform_y_1(&self, param_1: i32, param_2: i32) -> i32 {
    java_method!(self.env, self.object, "transformY", "(II)I", CallIntMethodA, param_1, param_2)
  }

  pub fn invert(&self) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "invert", "()Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#invert was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn compose(&self, param_1: util_DiscreteTransform2) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "compose", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#compose was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn and_then(&self, param_1: util_DiscreteTransform2) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "andThen", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#andThen was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn with_translation(&self, param_1: jobject) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "withTranslation", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#withTranslation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn with_translation_1(&self, param_1: i32, param_2: i32) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "withTranslation", "(II)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#withTranslation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn with_scale(&self, param_1: i32) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "withScale", "(I)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#withScale was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn with_scale_1(&self, param_1: jobject) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "withScale", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#withScale was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn with_scale_2(&self, param_1: i32, param_2: i32) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "withScale", "(II)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#withScale was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn with_rotation(&self, param_1: i32) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "withRotation", "(I)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#withRotation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn with_rotation_1(&self, param_1: i32, param_2: jobject, param_3: bool) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "withRotation", "(ILcom/flowpowered/math/vector/Vector2i;Z)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#withRotation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn with_rotation_2(&self, param_1: i32, param_2: jobject, param_3: bool, param_4: bool) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "withRotation", "(ILcom/flowpowered/math/vector/Vector2i;ZZ)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#withRotation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn with_transformation(&self, param_1: util_DiscreteTransform2) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, self.object, "withTransformation", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/util/DiscreteTransform2;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#withTransformation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn of(param_1: jobject) -> Option<util_DiscreteTransform2> {
    let ret = java_method!(self.env, "of", "(Lcom/flowpowered/math/matrix/Matrix3d;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#of was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_DiscreteTransform2 { env: self.env, object: unwrapped }) }
  }

  pub fn from_translation(param_1: jobject) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, "fromTranslation", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/util/DiscreteTransform2;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#fromTranslation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn from_translation_1(param_1: i32, param_2: i32) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, "fromTranslation", "(II)Lorg/spongepowered/api/util/DiscreteTransform2;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#fromTranslation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn from_scale(param_1: i32) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, "fromScale", "(I)Lorg/spongepowered/api/util/DiscreteTransform2;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#fromScale was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn from_scale_1(param_1: jobject) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, "fromScale", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/util/DiscreteTransform2;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#fromScale was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn from_scale_2(param_1: i32, param_2: i32) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, "fromScale", "(II)Lorg/spongepowered/api/util/DiscreteTransform2;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#fromScale was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn from_rotation(param_1: i32) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, "fromRotation", "(I)Lorg/spongepowered/api/util/DiscreteTransform2;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#fromRotation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn from_rotation_1(param_1: i32, param_2: jobject, param_3: bool) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, "fromRotation", "(ILcom/flowpowered/math/vector/Vector2i;Z)Lorg/spongepowered/api/util/DiscreteTransform2;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#fromRotation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn from_rotation_2(param_1: i32, param_2: jobject, param_3: bool, param_4: bool) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, "fromRotation", "(ILcom/flowpowered/math/vector/Vector2i;ZZ)Lorg/spongepowered/api/util/DiscreteTransform2;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#fromRotation was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

  pub fn rotation_around_center(param_1: i32, param_2: jobject) -> util_DiscreteTransform2 {
    let ret = java_method!(self.env, "rotationAroundCenter", "(ILcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/util/DiscreteTransform2;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform2#rotationAroundCenter was null") }
    util_DiscreteTransform2 { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_DiscreteTransform3_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_DiscreteTransform3_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_DiscreteTransform3_1 {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct util_DiscreteTransform3 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_DiscreteTransform3 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_DiscreteTransform3 {
      env: env,
      object: object
    }
  }

  pub fn get_matrix(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMatrix", "()Lcom/flowpowered/math/matrix/Matrix4d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#getMatrix was null") }
    ret
  }

  pub fn transform(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "transform", "(Lcom/flowpowered/math/vector/Vector3i;)Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#transform was null") }
    ret
  }

  pub fn transform_1(&self, param_1: i32, param_2: i32, param_3: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "transform", "(III)Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#transform was null") }
    ret
  }

  pub fn transform_x(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "transformX", "(Lcom/flowpowered/math/vector/Vector3i;)I", CallIntMethodA, param_1)
  }

  pub fn transform_x_1(&self, param_1: i32, param_2: i32, param_3: i32) -> i32 {
    java_method!(self.env, self.object, "transformX", "(III)I", CallIntMethodA, param_1, param_2, param_3)
  }

  pub fn transform_y(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "transformY", "(Lcom/flowpowered/math/vector/Vector3i;)I", CallIntMethodA, param_1)
  }

  pub fn transform_y_1(&self, param_1: i32, param_2: i32, param_3: i32) -> i32 {
    java_method!(self.env, self.object, "transformY", "(III)I", CallIntMethodA, param_1, param_2, param_3)
  }

  pub fn transform_z(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "transformZ", "(Lcom/flowpowered/math/vector/Vector3i;)I", CallIntMethodA, param_1)
  }

  pub fn transform_z_1(&self, param_1: i32, param_2: i32, param_3: i32) -> i32 {
    java_method!(self.env, self.object, "transformZ", "(III)I", CallIntMethodA, param_1, param_2, param_3)
  }

  pub fn invert(&self) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "invert", "()Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#invert was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn compose(&self, param_1: util_DiscreteTransform3) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "compose", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#compose was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn and_then(&self, param_1: util_DiscreteTransform3) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "andThen", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#andThen was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn with_translation(&self, param_1: jobject) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "withTranslation", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#withTranslation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn with_translation_1(&self, param_1: i32, param_2: i32, param_3: i32) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "withTranslation", "(III)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#withTranslation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn with_scale(&self, param_1: i32) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "withScale", "(I)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#withScale was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn with_scale_1(&self, param_1: jobject) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "withScale", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#withScale was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn with_scale_2(&self, param_1: i32, param_2: i32, param_3: i32) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "withScale", "(III)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#withScale was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn with_rotation(&self, param_1: i32, param_2: util_Axis) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "withRotation", "(ILorg/spongepowered/api/util/Axis;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#withRotation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn with_rotation_1(&self, param_1: i32, param_2: util_Axis, param_3: jobject, param_4: bool) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "withRotation", "(ILorg/spongepowered/api/util/Axis;Lcom/flowpowered/math/vector/Vector3i;Z)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#withRotation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn with_rotation_2(&self, param_1: i32, param_2: util_Axis, param_3: jobject, param_4: bool, param_5: bool, param_6: bool) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "withRotation", "(ILorg/spongepowered/api/util/Axis;Lcom/flowpowered/math/vector/Vector3i;ZZZ)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#withRotation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn with_transformation(&self, param_1: util_DiscreteTransform3) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, self.object, "withTransformation", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#withTransformation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn of(param_1: jobject) -> Option<util_DiscreteTransform3> {
    let ret = java_method!(self.env, "of", "(Lcom/flowpowered/math/matrix/Matrix4d;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#of was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_DiscreteTransform3 { env: self.env, object: unwrapped }) }
  }

  pub fn from_translation(param_1: jobject) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, "fromTranslation", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#fromTranslation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn from_translation_1(param_1: i32, param_2: i32, param_3: i32) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, "fromTranslation", "(III)Lorg/spongepowered/api/util/DiscreteTransform3;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#fromTranslation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn from_scale(param_1: i32) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, "fromScale", "(I)Lorg/spongepowered/api/util/DiscreteTransform3;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#fromScale was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn from_scale_1(param_1: jobject) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, "fromScale", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#fromScale was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn from_scale_2(param_1: i32, param_2: i32, param_3: i32) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, "fromScale", "(III)Lorg/spongepowered/api/util/DiscreteTransform3;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#fromScale was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn from_rotation(param_1: i32, param_2: util_Axis) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, "fromRotation", "(ILorg/spongepowered/api/util/Axis;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#fromRotation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn from_rotation_1(param_1: i32, param_2: util_Axis, param_3: jobject, param_4: bool) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, "fromRotation", "(ILorg/spongepowered/api/util/Axis;Lcom/flowpowered/math/vector/Vector3i;Z)Lorg/spongepowered/api/util/DiscreteTransform3;", CallStaticObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#fromRotation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn from_rotation_2(param_1: i32, param_2: util_Axis, param_3: jobject, param_4: bool, param_5: bool, param_6: bool) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, "fromRotation", "(ILorg/spongepowered/api/util/Axis;Lcom/flowpowered/math/vector/Vector3i;ZZZ)Lorg/spongepowered/api/util/DiscreteTransform3;", CallStaticObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#fromRotation was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

  pub fn rotation_around_center(param_1: i32, param_2: util_Axis, param_3: jobject) -> util_DiscreteTransform3 {
    let ret = java_method!(self.env, "rotationAroundCenter", "(ILorg/spongepowered/api/util/Axis;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/util/DiscreteTransform3;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/DiscreteTransform3#rotationAroundCenter was null") }
    util_DiscreteTransform3 { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_Functional {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Functional {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Functional {
      env: env,
      object: object
    }
  }

  pub fn predicate_and(param_1: &[jobject]) -> jobject {
    let ret = java_method!(self.env, "predicateAnd", "([Ljava/util/function/Predicate;)Ljava/util/function/Predicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#predicateAnd was null") }
    ret
  }

  pub fn predicate_and_1(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "predicateAnd", "(Ljava/lang/Iterable;)Ljava/util/function/Predicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#predicateAnd was null") }
    ret
  }

  pub fn bi_predicate_and(param_1: &[jobject]) -> jobject {
    let ret = java_method!(self.env, "biPredicateAnd", "([Ljava/util/function/BiPredicate;)Ljava/util/function/BiPredicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#biPredicateAnd was null") }
    ret
  }

  pub fn bi_predicate_and_1(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "biPredicateAnd", "(Ljava/lang/Iterable;)Ljava/util/function/BiPredicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#biPredicateAnd was null") }
    ret
  }

  pub fn predicate_in(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "predicateIn", "(Ljava/util/Collection;)Ljava/util/function/Predicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#predicateIn was null") }
    ret
  }

  pub fn java_8_to_guava(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "java8ToGuava", "(Ljava/util/function/Predicate;)Lcom/google/common/base/Predicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#java8ToGuava was null") }
    ret
  }

  pub fn guava_to_java_8(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "guavaToJava8", "(Lcom/google/common/base/Predicate;)Ljava/util/function/Predicate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#guavaToJava8 was null") }
    ret
  }

  pub fn optional_as_set(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "optionalAsSet", "(Ljava/util/Optional;)Ljava/util/Set;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#optionalAsSet was null") }
    ret
  }

  pub fn failable_future(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "failableFuture", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/CompletableFuture;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#failableFuture was null") }
    ret
  }

  pub fn async_failable_future(param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "asyncFailableFuture", "(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Functional#asyncFailableFuture was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_generator_dummy_DummyClassGenerator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_dummy_DummyClassGenerator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_dummy_DummyClassGenerator {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_generator_dummy_DummyClassGenerator {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/generator/dummy/DummyClassGenerator", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/dummy/DummyClassGenerator#<init> was null") }
    util_generator_dummy_DummyClassGenerator { env: self.env, object: ret }
  }

  pub fn create_class(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> &[i8] {
    java_method!(self.env, self.object, "createClass", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)[B", CryInsideA, param_1, param_2, param_3)
  }

}

#[derive(Debug)]
pub struct util_generator_dummy_DummyClassGeneratorProvider {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_dummy_DummyClassGeneratorProvider {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_dummy_DummyClassGeneratorProvider {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> util_generator_dummy_DummyClassGeneratorProvider {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/util/generator/dummy/DummyClassGeneratorProvider", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/dummy/DummyClassGeneratorProvider#<init> was null") }
    util_generator_dummy_DummyClassGeneratorProvider { env: self.env, object: ret }
  }

  pub fn create(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "create", "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Class;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/dummy/DummyClassGeneratorProvider#create was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_generator_dummy_DummyObjectProvider_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_dummy_DummyObjectProvider_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_dummy_DummyObjectProvider_1 {
      env: env,
      object: object
    }
  }

  pub fn load(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "load", "(Ljava/lang/Class;)Ljava/lang/Class;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/dummy/DummyObjectProvider$1#load was null") }
    ret
  }

  pub fn load_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "load", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/dummy/DummyObjectProvider$1#load was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_generator_dummy_DummyObjectProvider {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_dummy_DummyObjectProvider {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_dummy_DummyObjectProvider {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_generator_dummy_DummyObjectProvider {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/generator/dummy/DummyObjectProvider", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/dummy/DummyObjectProvider#<init> was null") }
    util_generator_dummy_DummyObjectProvider { env: self.env, object: ret }
  }

  pub fn create_for(param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "createFor", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/dummy/DummyObjectProvider#createFor was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_generator_event_factory_ClassGenerator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_event_factory_ClassGenerator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_event_factory_ClassGenerator {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_generator_event_factory_ClassGenerator {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/generator/event/factory/ClassGenerator", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/ClassGenerator#<init> was null") }
    util_generator_event_factory_ClassGenerator { env: self.env, object: ret }
  }

  pub fn visit_boxing_method(param_1: jobject, param_2: jobject) {
    java_method!(self.env, "visitBoxingMethod", "(Lorg/objectweb/asm/MethodVisitor;Lorg/objectweb/asm/Type;)V", CallStaticVoidMethodA, param_1);
  }

  pub fn visit_unboxing_method(param_1: jobject, param_2: jobject) {
    java_method!(self.env, "visitUnboxingMethod", "(Lorg/objectweb/asm/MethodVisitor;Lorg/objectweb/asm/Type;)V", CallStaticVoidMethodA, param_1);
  }

  pub fn has_declared_method(param_1: jobject, param_2: jobject, param_3: &[jobject]) -> bool {
    java_method!(self.env, "hasDeclaredMethod", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Z", CallStaticBooleanMethodA, param_1, param_2) == 1
  }

  pub fn get_field(param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, "getField", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/ClassGenerator#getField was null") }
    ret
  }

  pub fn get_null_policy(&self) -> util_generator_event_factory_NullPolicy {
    let ret = java_method!(self.env, self.object, "getNullPolicy", "()Lorg/spongepowered/api/util/generator/event/factory/NullPolicy;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/ClassGenerator#getNullPolicy was null") }
    util_generator_event_factory_NullPolicy { env: self.env, object: ret }
  }

  pub fn set_null_policy(&self, param_1: util_generator_event_factory_NullPolicy) {
    java_method!(self.env, self.object, "setNullPolicy", "(Lorg/spongepowered/api/util/generator/event/factory/NullPolicy;)V", CallVoidMethodA, param_1);
  }

  pub fn generate_field(param_1: jobject, param_2: jobject) {
    java_method!(self.env, "generateField", "(Lorg/objectweb/asm/ClassWriter;Lorg/spongepowered/api/eventgencore/Property;)V", CallStaticVoidMethodA, param_1);
  }

  pub fn generate_mutator(param_1: jobject, param_2: jobject, param_3: jobject, param_4: jobject, param_5: jobject, param_6: jobject) {
    java_method!(self.env, "generateMutator", "(Lorg/objectweb/asm/ClassWriter;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;Lorg/spongepowered/api/eventgencore/Property;)V", CallStaticVoidMethodA, param_1, param_2, param_3, param_4, param_5);
  }

  pub fn get_internal_name(param_1: jobject) -> jobject {
    let ret = java_method!(self.env, "getInternalName", "(Ljava/lang/String;)Ljava/lang/String;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/ClassGenerator#getInternalName was null") }
    ret
  }

  pub fn create_class(&self, param_1: jobject, param_2: jobject, param_3: jobject, param_4: jobject) -> &[i8] {
    java_method!(self.env, self.object, "createClass", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;Ljava/util/List;)[B", CryInsideA, param_1, param_2, param_3, param_4)
  }

  pub fn create_factory(&self, param_1: jobject, param_2: jobject) -> &[i8] {
    java_method!(self.env, self.object, "createFactory", "(Ljava/lang/Class;Ljava/lang/String;)[B", CryInsideA, param_1, param_2)
  }

}

#[derive(Debug)]
pub struct util_generator_event_factory_ClassGeneratorProvider {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_event_factory_ClassGeneratorProvider {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_event_factory_ClassGeneratorProvider {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> util_generator_event_factory_ClassGeneratorProvider {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/util/generator/event/factory/ClassGeneratorProvider", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/ClassGeneratorProvider#<init> was null") }
    util_generator_event_factory_ClassGeneratorProvider { env: self.env, object: ret }
  }

  pub fn get_null_policy(&self) -> util_generator_event_factory_NullPolicy {
    let ret = java_method!(self.env, self.object, "getNullPolicy", "()Lorg/spongepowered/api/util/generator/event/factory/NullPolicy;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/ClassGeneratorProvider#getNullPolicy was null") }
    util_generator_event_factory_NullPolicy { env: self.env, object: ret }
  }

  pub fn set_null_policy(&self, param_1: util_generator_event_factory_NullPolicy) {
    java_method!(self.env, self.object, "setNullPolicy", "(Lorg/spongepowered/api/util/generator/event/factory/NullPolicy;)V", CallVoidMethodA, param_1);
  }

  pub fn create(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> util_generator_event_factory_EventFactory {
    let ret = java_method!(self.env, self.object, "create", "(Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;)Lorg/spongepowered/api/util/generator/event/factory/EventFactory;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/ClassGeneratorProvider#create was null") }
    util_generator_event_factory_EventFactory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_generator_event_factory_EventFactory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_event_factory_EventFactory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_event_factory_EventFactory {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct util_generator_event_factory_FactoryProvider {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_event_factory_FactoryProvider {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_event_factory_FactoryProvider {
      env: env,
      object: object
    }
  }

  pub fn get_null_policy(&self) -> util_generator_event_factory_NullPolicy {
    let ret = java_method!(self.env, self.object, "getNullPolicy", "()Lorg/spongepowered/api/util/generator/event/factory/NullPolicy;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/FactoryProvider#getNullPolicy was null") }
    util_generator_event_factory_NullPolicy { env: self.env, object: ret }
  }

  pub fn set_null_policy(&self, param_1: util_generator_event_factory_NullPolicy) {
    java_method!(self.env, self.object, "setNullPolicy", "(Lorg/spongepowered/api/util/generator/event/factory/NullPolicy;)V", CallVoidMethodA, param_1);
  }

  pub fn create(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> util_generator_event_factory_EventFactory {
    let ret = java_method!(self.env, self.object, "create", "(Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;)Lorg/spongepowered/api/util/generator/event/factory/EventFactory;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/FactoryProvider#create was null") }
    util_generator_event_factory_EventFactory { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_generator_event_factory_NullPolicy {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_event_factory_NullPolicy {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_event_factory_NullPolicy {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[util_generator_event_factory_NullPolicy] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> util_generator_event_factory_NullPolicy {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/util/generator/event/factory/NullPolicy;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/NullPolicy#valueOf was null") }
    util_generator_event_factory_NullPolicy { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin_MethodPair {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin_MethodPair {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin_MethodPair {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject, param_3: jobject, param_4: jobject) -> util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin_MethodPair {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Lorg/spongepowered/api/eventgencore/Property;)Lorg/spongepowered/api/util/generator/event/factory/plugin/AccessorModifierEventFactoryPlugin$MethodPair", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/plugin/AccessorModifierEventFactoryPlugin$MethodPair#<init> was null") }
    util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin_MethodPair { env: self.env, object: ret }
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/plugin/AccessorModifierEventFactoryPlugin$MethodPair#getName was null") }
    ret
  }

  pub fn get_transformer_method(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTransformerMethod", "()Ljava/lang/reflect/Method;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/plugin/AccessorModifierEventFactoryPlugin$MethodPair#getTransformerMethod was null") }
    ret
  }

  pub fn get_property(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getProperty", "()Lorg/spongepowered/api/eventgencore/Property;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/plugin/AccessorModifierEventFactoryPlugin$MethodPair#getProperty was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/generator/event/factory/plugin/AccessorModifierEventFactoryPlugin", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/event/factory/plugin/AccessorModifierEventFactoryPlugin#<init> was null") }
    util_generator_event_factory_plugin_AccessorModifierEventFactoryPlugin { env: self.env, object: ret }
  }

  pub fn contribute_property(&self, param_1: jobject, param_2: jobject, param_3: jobject, param_4: jobject) -> bool {
    java_method!(self.env, self.object, "contributeProperty", "(Ljava/lang/Class;Ljava/lang/String;Lorg/objectweb/asm/ClassWriter;Lorg/spongepowered/api/eventgencore/Property;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

}

#[derive(Debug)]
pub struct util_generator_event_factory_plugin_EventFactoryPlugin {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_event_factory_plugin_EventFactoryPlugin {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_event_factory_plugin_EventFactoryPlugin {
      env: env,
      object: object
    }
  }

  pub fn contribute_property(&self, param_1: jobject, param_2: jobject, param_3: jobject, param_4: jobject) -> bool {
    java_method!(self.env, self.object, "contributeProperty", "(Ljava/lang/Class;Ljava/lang/String;Lorg/objectweb/asm/ClassWriter;Lorg/spongepowered/api/eventgencore/Property;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

}



#[derive(Debug)]
pub struct util_generator_GeneratorUtils_LocalClassLoader {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_GeneratorUtils_LocalClassLoader {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_GeneratorUtils_LocalClassLoader {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> util_generator_GeneratorUtils_LocalClassLoader {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/ClassLoader;)Lorg/spongepowered/api/util/generator/GeneratorUtils$LocalClassLoader", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/GeneratorUtils$LocalClassLoader#<init> was null") }
    util_generator_GeneratorUtils_LocalClassLoader { env: self.env, object: ret }
  }

  pub fn define_class(&self, param_1: jobject, param_2: i8) -> jobject {
    let ret = java_method!(self.env, self.object, "defineClass", "(Ljava/lang/String;[B)Ljava/lang/Class;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/GeneratorUtils$LocalClassLoader#defineClass was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_generator_GeneratorUtils {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_generator_GeneratorUtils {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_generator_GeneratorUtils {
      env: env,
      object: object
    }
  }

  pub fn get_class_name(param_1: jobject, param_2: jobject, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, "getClassName", "(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/String;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/generator/GeneratorUtils#getClassName was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_GuavaCollectors {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_GuavaCollectors {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_GuavaCollectors {
      env: env,
      object: object
    }
  }

  pub fn to_immutable_list() -> jobject {
    let ret = java_method!(self.env, "toImmutableList", "()Ljava/util/stream/Collector;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/GuavaCollectors#toImmutableList was null") }
    ret
  }

  pub fn to_immutable_set() -> jobject {
    let ret = java_method!(self.env, "toImmutableSet", "()Ljava/util/stream/Collector;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/GuavaCollectors#toImmutableSet was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_Identifiable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Identifiable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Identifiable {
      env: env,
      object: object
    }
  }

  pub fn get_unique_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getUniqueId", "()Ljava/util/UUID;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Identifiable#getUniqueId was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_InformativeMain {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_InformativeMain {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_InformativeMain {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_InformativeMain {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/InformativeMain", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/InformativeMain#<init> was null") }
    util_InformativeMain { env: self.env, object: ret }
  }

  pub fn main(param_1: &[jobject]) {
    java_method!(self.env, "main", "([Ljava/lang/String;)V", CallStaticVoidMethod);
  }

}

#[derive(Debug)]
pub struct util_OptBool {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_OptBool {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_OptBool {
      env: env,
      object: object
    }
  }

  pub fn of(param_1: bool) -> Option<jobject> {
    let ret = java_method!(self.env, "of", "(Z)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/OptBool#of was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn of_1(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Boolean;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/OptBool#of was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn of_2(param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, "of", "(Ljava/util/Optional;)Ljava/util/Optional;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/OptBool#of was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}


#[derive(Debug)]
pub struct util_PEBKACException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_PEBKACException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_PEBKACException {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_PEBKACException {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/PEBKACException", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/PEBKACException#<init> was null") }
    util_PEBKACException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject) -> util_PEBKACException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/util/PEBKACException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/PEBKACException#<init> was null") }
    util_PEBKACException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject) -> util_PEBKACException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/spongepowered/api/util/PEBKACException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/PEBKACException#<init> was null") }
    util_PEBKACException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: jobject) -> util_PEBKACException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Throwable;)Lorg/spongepowered/api/util/PEBKACException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/PEBKACException#<init> was null") }
    util_PEBKACException { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_PositionOutOfBoundsException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_PositionOutOfBoundsException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_PositionOutOfBoundsException {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> util_PositionOutOfBoundsException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vectori;Lcom/flowpowered/math/vector/Vectori;Lcom/flowpowered/math/vector/Vectori;)Lorg/spongepowered/api/util/PositionOutOfBoundsException", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/PositionOutOfBoundsException#<init> was null") }
    util_PositionOutOfBoundsException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> util_PositionOutOfBoundsException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vectorf;Lcom/flowpowered/math/vector/Vectorf;Lcom/flowpowered/math/vector/Vectorf;)Lorg/spongepowered/api/util/PositionOutOfBoundsException", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/PositionOutOfBoundsException#<init> was null") }
    util_PositionOutOfBoundsException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> util_PositionOutOfBoundsException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lcom/flowpowered/math/vector/Vectord;Lcom/flowpowered/math/vector/Vectord;Lcom/flowpowered/math/vector/Vectord;)Lorg/spongepowered/api/util/PositionOutOfBoundsException", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/util/PositionOutOfBoundsException#<init> was null") }
    util_PositionOutOfBoundsException { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_RelativePositions {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_RelativePositions {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_RelativePositions {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[util_RelativePositions] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> util_RelativePositions {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/util/RelativePositions;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RelativePositions#valueOf was null") }
    util_RelativePositions { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_ResettableBuilder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_ResettableBuilder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_ResettableBuilder {
      env: env,
      object: object
    }
  }

  pub fn from_1(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/ResettableBuilder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/ResettableBuilder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_RespawnLocation_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_RespawnLocation_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_RespawnLocation_Builder {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_RespawnLocation_Builder {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/RespawnLocation$Builder", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#<init> was null") }
    util_RespawnLocation_Builder { env: self.env, object: ret }
  }

  pub fn world(&self, param_1: world_World) -> util_RespawnLocation_Builder {
    let ret = java_method!(self.env, self.object, "world", "(Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/util/RespawnLocation$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#world was null") }
    util_RespawnLocation_Builder { env: self.env, object: ret }
  }

  pub fn world_1(&self, param_1: jobject) -> util_RespawnLocation_Builder {
    let ret = java_method!(self.env, self.object, "world", "(Ljava/util/UUID;)Lorg/spongepowered/api/util/RespawnLocation$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#world was null") }
    util_RespawnLocation_Builder { env: self.env, object: ret }
  }

  pub fn location(&self, param_1: world_Location) -> util_RespawnLocation_Builder {
    let ret = java_method!(self.env, self.object, "location", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/util/RespawnLocation$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#location was null") }
    util_RespawnLocation_Builder { env: self.env, object: ret }
  }

  pub fn position(&self, param_1: jobject) -> util_RespawnLocation_Builder {
    let ret = java_method!(self.env, self.object, "position", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/util/RespawnLocation$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#position was null") }
    util_RespawnLocation_Builder { env: self.env, object: ret }
  }

  pub fn force_spawn(&self, param_1: bool) -> util_RespawnLocation_Builder {
    let ret = java_method!(self.env, self.object, "forceSpawn", "(Z)Lorg/spongepowered/api/util/RespawnLocation$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#forceSpawn was null") }
    util_RespawnLocation_Builder { env: self.env, object: ret }
  }

  pub fn reset(&self) -> util_RespawnLocation_Builder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/RespawnLocation$Builder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#reset was null") }
    util_RespawnLocation_Builder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: util_RespawnLocation) -> util_RespawnLocation_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/util/RespawnLocation;)Lorg/spongepowered/api/util/RespawnLocation$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#from was null") }
    util_RespawnLocation_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> util_RespawnLocation {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/util/RespawnLocation;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#build was null") }
    util_RespawnLocation { env: self.env, object: ret }
  }

  pub fn from_2(&self, param_1: data_DataSerializable) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/data/DataSerializable;)Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#from was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_1(&self) -> data_persistence_DataBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/data/persistence/DataBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#reset was null") }
    data_persistence_DataBuilder { env: self.env, object: ret }
  }

  pub fn reset_2(&self) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "reset", "()Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#reset was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

  pub fn from_3(&self, param_1: jobject) -> util_ResettableBuilder {
    let ret = java_method!(self.env, self.object, "from", "(Ljava/lang/Object;)Lorg/spongepowered/api/util/ResettableBuilder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation$Builder#from was null") }
    util_ResettableBuilder { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_RespawnLocation {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_RespawnLocation {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_RespawnLocation {
      env: env,
      object: object
    }
  }

  pub fn builder() -> util_RespawnLocation_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/util/RespawnLocation$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation#builder was null") }
    util_RespawnLocation_Builder { env: self.env, object: ret }
  }

  pub fn get_world_unique_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getWorldUniqueId", "()Ljava/util/UUID;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation#getWorldUniqueId was null") }
    ret
  }

  pub fn get_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPosition", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation#getPosition was null") }
    ret
  }

  pub fn is_forced(&self) -> bool {
    java_method!(self.env, self.object, "isForced", "()Z", CallBooleanMethod) == 1
  }

  pub fn as_location(&self) -> Option<world_Location> {
    let ret = java_method!(self.env, self.object, "asLocation", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation#asLocation was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Location { env: self.env, object: unwrapped }) }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/RespawnLocation#toString was null") }
    ret
  }

}


#[derive(Debug)]
pub struct util_rotation_Rotation {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_rotation_Rotation {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_rotation_Rotation {
      env: env,
      object: object
    }
  }

  pub fn get_angle(&self) -> i32 {
    java_method!(self.env, self.object, "getAngle", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct util_rotation_Rotations {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_rotation_Rotations {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_rotation_Rotations {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct util_SpongeApiTranslationHelper {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_SpongeApiTranslationHelper {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_SpongeApiTranslationHelper {
      env: env,
      object: object
    }
  }

  pub fn t(param_1: jobject, param_2: &[jobject]) -> text_Text {
    let ret = java_method!(self.env, "t", "(Ljava/lang/String;[Ljava/lang/Object;)Lorg/spongepowered/api/text/Text;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/SpongeApiTranslationHelper#t was null") }
    text_Text { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_StartsWithPredicate {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_StartsWithPredicate {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_StartsWithPredicate {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject) -> util_StartsWithPredicate {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/String;)Lorg/spongepowered/api/util/StartsWithPredicate", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/StartsWithPredicate#<init> was null") }
    util_StartsWithPredicate { env: self.env, object: ret }
  }

  pub fn test(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "test", "(Ljava/lang/String;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn test_1(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "test", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct util_TextMessageException {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_TextMessageException {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_TextMessageException {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_TextMessageException {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/TextMessageException", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/TextMessageException#<init> was null") }
    util_TextMessageException { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: text_Text) -> util_TextMessageException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;)Lorg/spongepowered/api/util/TextMessageException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/TextMessageException#<init> was null") }
    util_TextMessageException { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: text_Text, param_2: jobject) -> util_TextMessageException {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/text/Text;Ljava/lang/Throwable;)Lorg/spongepowered/api/util/TextMessageException", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/TextMessageException#<init> was null") }
    util_TextMessageException { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: jobject) -> util_TextMessageException {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Throwable;)Lorg/spongepowered/api/util/TextMessageException", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/TextMessageException#<init> was null") }
    util_TextMessageException { env: self.env, object: ret }
  }

  pub fn get_message(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getMessage", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/TextMessageException#getMessage was null") }
    ret
  }

  pub fn get_text(&self) -> text_Text {
    let ret = java_method!(self.env, self.object, "getText", "()Lorg/spongepowered/api/text/Text;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/TextMessageException#getText was null") }
    text_Text { env: self.env, object: ret }
  }

  pub fn get_localized_message(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getLocalizedMessage", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/TextMessageException#getLocalizedMessage was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_Tristate_1 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Tristate_1 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Tristate_1 {
      env: env,
      object: object
    }
  }

  pub fn and(&self, param_1: util_Tristate) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "and", "(Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate$1#and was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn or(&self, param_1: util_Tristate) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "or", "(Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate$1#or was null") }
    util_Tristate { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_Tristate_2 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Tristate_2 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Tristate_2 {
      env: env,
      object: object
    }
  }

  pub fn and(&self, param_1: util_Tristate) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "and", "(Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate$2#and was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn or(&self, param_1: util_Tristate) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "or", "(Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate$2#or was null") }
    util_Tristate { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_Tristate_3 {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Tristate_3 {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Tristate_3 {
      env: env,
      object: object
    }
  }

  pub fn and(&self, param_1: util_Tristate) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "and", "(Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate$3#and was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn or(&self, param_1: util_Tristate) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "or", "(Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate$3#or was null") }
    util_Tristate { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_Tristate {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Tristate {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Tristate {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[util_Tristate] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> util_Tristate {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/util/Tristate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate#valueOf was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn from_boolean(param_1: bool) -> util_Tristate {
    let ret = java_method!(self.env, "fromBoolean", "(Z)Lorg/spongepowered/api/util/Tristate;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate#fromBoolean was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn and(&self, param_1: util_Tristate) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "and", "(Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate#and was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn or(&self, param_1: util_Tristate) -> util_Tristate {
    let ret = java_method!(self.env, self.object, "or", "(Lorg/spongepowered/api/util/Tristate;)Lorg/spongepowered/api/util/Tristate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tristate#or was null") }
    util_Tristate { env: self.env, object: ret }
  }

  pub fn as_boolean(&self) -> bool {
    java_method!(self.env, self.object, "asBoolean", "()Z", CallBooleanMethod) == 1
  }

}

#[derive(Debug)]
pub struct util_Tuple {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Tuple {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Tuple {
      env: env,
      object: object
    }
  }

  pub fn of(param_1: jobject, param_2: jobject) -> util_Tuple {
    let ret = java_method!(self.env, "of", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/util/Tuple;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tuple#of was null") }
    util_Tuple { env: self.env, object: ret }
  }

  pub fn new(&self, param_1: jobject, param_2: jobject) -> util_Tuple {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/spongepowered/api/util/Tuple", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tuple#<init> was null") }
    util_Tuple { env: self.env, object: ret }
  }

  pub fn get_first(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getFirst", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tuple#getFirst was null") }
    ret
  }

  pub fn get_second(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSecond", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tuple#getSecond was null") }
    ret
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/Tuple#toString was null") }
    ret
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct util_Updater {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_Updater {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_Updater {
      env: env,
      object: object
    }
  }

  pub fn get_input_version(&self) -> i32 {
    java_method!(self.env, self.object, "getInputVersion", "()I", CallIntMethod)
  }

  pub fn get_output_version(&self) -> i32 {
    java_method!(self.env, self.object, "getOutputVersion", "()I", CallIntMethod)
  }

  pub fn update(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "update", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/Updater#update was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_weighted_ChanceTable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_ChanceTable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_ChanceTable {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_weighted_ChanceTable {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/weighted/ChanceTable", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/ChanceTable#<init> was null") }
    util_weighted_ChanceTable { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32) -> util_weighted_ChanceTable {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/util/weighted/ChanceTable", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/ChanceTable#<init> was null") }
    util_weighted_ChanceTable { env: self.env, object: ret }
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Random;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/ChanceTable#get was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/ChanceTable#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_weighted_EmptyObject {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_EmptyObject {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_EmptyObject {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> util_weighted_EmptyObject {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/util/weighted/EmptyObject", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/EmptyObject#<init> was null") }
    util_weighted_EmptyObject { env: self.env, object: ret }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/EmptyObject#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/EmptyObject#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_weighted_LootTable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_LootTable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_LootTable {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_weighted_LootTable {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/weighted/LootTable", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/LootTable#<init> was null") }
    util_weighted_LootTable { env: self.env, object: ret }
  }

  pub fn add_table(&self, param_1: util_weighted_RandomObjectTable) {
    java_method!(self.env, self.object, "addTable", "(Lorg/spongepowered/api/util/weighted/RandomObjectTable;)V", CallVoidMethodA, param_1);
  }

  pub fn add_all(&self, param_1: util_weighted_LootTable) {
    java_method!(self.env, self.object, "addAll", "(Lorg/spongepowered/api/util/weighted/LootTable;)V", CallVoidMethodA, param_1);
  }

  pub fn remove_table(&self, param_1: util_weighted_RandomObjectTable) -> bool {
    java_method!(self.env, self.object, "removeTable", "(Lorg/spongepowered/api/util/weighted/RandomObjectTable;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_tables(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTables", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/LootTable#getTables was null") }
    ret
  }

  pub fn clear_pool(&self) {
    java_method!(self.env, self.object, "clearPool", "()V", CallVoidMethod);
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Random;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/LootTable#get was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/LootTable#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_weighted_NestedTableEntry {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_NestedTableEntry {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_NestedTableEntry {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64, param_2: util_weighted_RandomObjectTable) -> util_weighted_NestedTableEntry {
    let ret = java_method!(self.env, self.object, "<init>", "(DLorg/spongepowered/api/util/weighted/RandomObjectTable;)Lorg/spongepowered/api/util/weighted/NestedTableEntry", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/NestedTableEntry#<init> was null") }
    util_weighted_NestedTableEntry { env: self.env, object: ret }
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Random;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/NestedTableEntry#get was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/NestedTableEntry#toString was null") }
    ret
  }

}


#[derive(Debug)]
pub struct util_weighted_RandomObjectTable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_RandomObjectTable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_RandomObjectTable {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: i32) -> util_weighted_RandomObjectTable {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/util/weighted/RandomObjectTable", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/RandomObjectTable#<init> was null") }
    util_weighted_RandomObjectTable { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: util_weighted_VariableAmount) -> util_weighted_RandomObjectTable {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/util/weighted/RandomObjectTable", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/RandomObjectTable#<init> was null") }
    util_weighted_RandomObjectTable { env: self.env, object: ret }
  }

  pub fn get_rolls(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getRolls", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/RandomObjectTable#getRolls was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_rolls(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setRolls", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_rolls_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setRolls", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn add(&self, param_1: util_weighted_TableEntry) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/util/weighted/TableEntry;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_1(&self, param_1: jobject, param_2: f64) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/lang/Object;D)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn add_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "addAll", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "contains", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_object(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsObject", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsAll", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_all_objects(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsAllObjects", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_empty(&self) -> bool {
    java_method!(self.env, self.object, "isEmpty", "()Z", CallBooleanMethod) == 1
  }

  pub fn remove(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "remove", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_object(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "removeObject", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "removeAll", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn retain_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "retainAll", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear(&self) {
    java_method!(self.env, self.object, "clear", "()V", CallVoidMethod);
  }

  pub fn size(&self) -> i32 {
    java_method!(self.env, self.object, "size", "()I", CallIntMethod)
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Random;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/RandomObjectTable#get was null") }
    ret
  }

  pub fn get_entries(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getEntries", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/RandomObjectTable#getEntries was null") }
    ret
  }

  pub fn iterator(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "iterator", "()Ljava/util/Iterator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/RandomObjectTable#iterator was null") }
    ret
  }

  pub fn to_array(&self) -> &[jobject] {
    unimplemented!();
  }
  pub fn to_array_1(&self, param_1: &[jobject]) -> &[jobject] {
    java_method!(self.env, self.object, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;", CryInsideA, param_1)
  }

  pub fn add_2(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct util_weighted_SeededVariableAmount_WrappedVariableAmount {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_SeededVariableAmount_WrappedVariableAmount {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_SeededVariableAmount_WrappedVariableAmount {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: util_weighted_VariableAmount) -> util_weighted_SeededVariableAmount_WrappedVariableAmount {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/util/weighted/SeededVariableAmount$WrappedVariableAmount", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/SeededVariableAmount$WrappedVariableAmount#<init> was null") }
    util_weighted_SeededVariableAmount_WrappedVariableAmount { env: self.env, object: ret }
  }

  pub fn get_amount(&self, param_1: jobject, param_2: jobject) -> f64 {
    java_method!(self.env, self.object, "getAmount", "(Ljava/util/Random;Ljava/lang/Object;)D", CallDoubleMethodA, param_1, param_2)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/SeededVariableAmount$WrappedVariableAmount#toString was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct util_weighted_SeededVariableAmount {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_SeededVariableAmount {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_SeededVariableAmount {
      env: env,
      object: object
    }
  }

  pub fn fixed(param_1: f64) -> util_weighted_SeededVariableAmount {
    let ret = java_method!(self.env, "fixed", "(D)Lorg/spongepowered/api/util/weighted/SeededVariableAmount;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/SeededVariableAmount#fixed was null") }
    util_weighted_SeededVariableAmount { env: self.env, object: ret }
  }

  pub fn wrapped(param_1: util_weighted_VariableAmount) -> util_weighted_SeededVariableAmount {
    let ret = java_method!(self.env, "wrapped", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/util/weighted/SeededVariableAmount;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/SeededVariableAmount#wrapped was null") }
    util_weighted_SeededVariableAmount { env: self.env, object: ret }
  }

  pub fn get_amount(&self, param_1: jobject, param_2: jobject) -> f64 {
    java_method!(self.env, self.object, "getAmount", "(Ljava/util/Random;Ljava/lang/Object;)D", CallDoubleMethodA, param_1, param_2)
  }

  pub fn get_floored_amount(&self, param_1: jobject, param_2: jobject) -> i32 {
    java_method!(self.env, self.object, "getFlooredAmount", "(Ljava/util/Random;Ljava/lang/Object;)I", CallIntMethodA, param_1, param_2)
  }

}

#[derive(Debug)]
pub struct util_weighted_TableEntry {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_TableEntry {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_TableEntry {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: f64) -> util_weighted_TableEntry {
    let ret = java_method!(self.env, self.object, "<init>", "(D)Lorg/spongepowered/api/util/weighted/TableEntry", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/TableEntry#<init> was null") }
    util_weighted_TableEntry { env: self.env, object: ret }
  }

  pub fn get_weight(&self) -> f64 {
    java_method!(self.env, self.object, "getWeight", "()D", CallDoubleMethod)
  }

}

#[derive(Debug)]
pub struct util_weighted_VariableAmount_BaseAndAddition {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_VariableAmount_BaseAndAddition {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_VariableAmount_BaseAndAddition {
      env: env,
      object: object
    }
  }

  pub fn get_amount(&self, param_1: jobject) -> f64 {
    java_method!(self.env, self.object, "getAmount", "(Ljava/util/Random;)D", CallDoubleMethodA, param_1)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount$BaseAndAddition#toString was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount$BaseAndAddition#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct util_weighted_VariableAmount_BaseAndVariance {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_VariableAmount_BaseAndVariance {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_VariableAmount_BaseAndVariance {
      env: env,
      object: object
    }
  }

  pub fn get_amount(&self, param_1: jobject) -> f64 {
    java_method!(self.env, self.object, "getAmount", "(Ljava/util/Random;)D", CallDoubleMethodA, param_1)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount$BaseAndVariance#toString was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount$BaseAndVariance#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct util_weighted_VariableAmount_Fixed {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_VariableAmount_Fixed {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_VariableAmount_Fixed {
      env: env,
      object: object
    }
  }

  pub fn get_amount(&self, param_1: jobject) -> f64 {
    java_method!(self.env, self.object, "getAmount", "(Ljava/util/Random;)D", CallDoubleMethodA, param_1)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount$Fixed#toString was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount$Fixed#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct util_weighted_VariableAmount_OptionalAmount {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_VariableAmount_OptionalAmount {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_VariableAmount_OptionalAmount {
      env: env,
      object: object
    }
  }

  pub fn get_amount(&self, param_1: jobject) -> f64 {
    java_method!(self.env, self.object, "getAmount", "(Ljava/util/Random;)D", CallDoubleMethodA, param_1)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount$OptionalAmount#toString was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount$OptionalAmount#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct util_weighted_VariableAmount {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_VariableAmount {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_VariableAmount {
      env: env,
      object: object
    }
  }

  pub fn fixed(param_1: f64) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, "fixed", "(D)Lorg/spongepowered/api/util/weighted/VariableAmount;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#fixed was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn base_with_variance(param_1: f64, param_2: f64) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, "baseWithVariance", "(DD)Lorg/spongepowered/api/util/weighted/VariableAmount;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#baseWithVariance was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn base_with_variance_1(param_1: f64, param_2: util_weighted_VariableAmount) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, "baseWithVariance", "(DLorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/util/weighted/VariableAmount;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#baseWithVariance was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn base_with_random_addition(param_1: f64, param_2: f64) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, "baseWithRandomAddition", "(DD)Lorg/spongepowered/api/util/weighted/VariableAmount;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#baseWithRandomAddition was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn base_with_random_addition_1(param_1: f64, param_2: util_weighted_VariableAmount) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, "baseWithRandomAddition", "(DLorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/util/weighted/VariableAmount;", CallStaticObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#baseWithRandomAddition was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn base_with_optional_variance(param_1: f64, param_2: f64, param_3: f64) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, "baseWithOptionalVariance", "(DDD)Lorg/spongepowered/api/util/weighted/VariableAmount;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#baseWithOptionalVariance was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn base_with_optional_variance_1(param_1: f64, param_2: util_weighted_VariableAmount, param_3: f64) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, "baseWithOptionalVariance", "(DLorg/spongepowered/api/util/weighted/VariableAmount;D)Lorg/spongepowered/api/util/weighted/VariableAmount;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#baseWithOptionalVariance was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn base_with_optional_addition(param_1: f64, param_2: f64, param_3: f64) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, "baseWithOptionalAddition", "(DDD)Lorg/spongepowered/api/util/weighted/VariableAmount;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#baseWithOptionalAddition was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn base_with_optional_addition_1(param_1: f64, param_2: util_weighted_VariableAmount, param_3: f64) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, "baseWithOptionalAddition", "(DLorg/spongepowered/api/util/weighted/VariableAmount;D)Lorg/spongepowered/api/util/weighted/VariableAmount;", CallStaticObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#baseWithOptionalAddition was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn get_amount(&self, param_1: jobject) -> f64 {
    java_method!(self.env, self.object, "getAmount", "(Ljava/util/Random;)D", CallDoubleMethodA, param_1)
  }

  pub fn get_floored_amount(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "getFlooredAmount", "(Ljava/util/Random;)I", CallIntMethodA, param_1)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/VariableAmount#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct util_weighted_WeightedObject {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_WeightedObject {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_WeightedObject {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: jobject, param_2: f64) -> util_weighted_WeightedObject {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/lang/Object;D)Lorg/spongepowered/api/util/weighted/WeightedObject", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedObject#<init> was null") }
    util_weighted_WeightedObject { env: self.env, object: ret }
  }

  pub fn get(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedObject#get was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedObject#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_weighted_WeightedSerializableObject {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_WeightedSerializableObject {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_WeightedSerializableObject {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: data_DataSerializable, param_2: i32) -> util_weighted_WeightedSerializableObject {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/data/DataSerializable;I)Lorg/spongepowered/api/util/weighted/WeightedSerializableObject", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedSerializableObject#<init> was null") }
    util_weighted_WeightedSerializableObject { env: self.env, object: ret }
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedSerializableObject#toString was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedSerializableObject#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct util_weighted_WeightedTable_Itr {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_WeightedTable_Itr {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_WeightedTable_Itr {
      env: env,
      object: object
    }
  }

  pub fn has_next(&self) -> bool {
    java_method!(self.env, self.object, "hasNext", "()Z", CallBooleanMethod) == 1
  }

  pub fn next(&self) -> util_weighted_TableEntry {
    let ret = java_method!(self.env, self.object, "next", "()Lorg/spongepowered/api/util/weighted/TableEntry;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedTable$Itr#next was null") }
    util_weighted_TableEntry { env: self.env, object: ret }
  }

  pub fn remove(&self) {
    java_method!(self.env, self.object, "remove", "()V", CallVoidMethod);
  }

  pub fn next_1(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "next", "()Ljava/lang/Object;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedTable$Itr#next was null") }
    ret
  }

}

#[derive(Debug)]
pub struct util_weighted_WeightedTable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl util_weighted_WeightedTable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    util_weighted_WeightedTable {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> util_weighted_WeightedTable {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/util/weighted/WeightedTable", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedTable#<init> was null") }
    util_weighted_WeightedTable { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: i32) -> util_weighted_WeightedTable {
    let ret = java_method!(self.env, self.object, "<init>", "(I)Lorg/spongepowered/api/util/weighted/WeightedTable", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedTable#<init> was null") }
    util_weighted_WeightedTable { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: util_weighted_VariableAmount) -> util_weighted_WeightedTable {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/util/weighted/WeightedTable", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedTable#<init> was null") }
    util_weighted_WeightedTable { env: self.env, object: ret }
  }

  pub fn add(&self, param_1: util_weighted_TableEntry) -> bool {
    java_method!(self.env, self.object, "add", "(Lorg/spongepowered/api/util/weighted/TableEntry;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn add_1(&self, param_1: jobject, param_2: f64) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/lang/Object;D)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn add_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "addAll", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "remove", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_object(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "removeObject", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "removeAll", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn retain_all(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "retainAll", "(Ljava/util/Collection;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn clear(&self) {
    java_method!(self.env, self.object, "clear", "()V", CallVoidMethod);
  }

  pub fn get(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/util/Random;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedTable#get was null") }
    ret
  }

  pub fn iterator(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "iterator", "()Ljava/util/Iterator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedTable#iterator was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/util/weighted/WeightedTable#toString was null") }
    ret
  }

  pub fn add_2(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "add", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

}

#[derive(Debug)]
pub struct world_biome_BiomeGenerationSettings {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_biome_BiomeGenerationSettings {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_biome_BiomeGenerationSettings {
      env: env,
      object: object
    }
  }

  pub fn get_min_height(&self) -> f32 {
    java_method!(self.env, self.object, "getMinHeight", "()F", CallFloatMethod)
  }

  pub fn set_min_height(&self, param_1: f32) {
    java_method!(self.env, self.object, "setMinHeight", "(F)V", CallVoidMethodA, param_1);
  }

  pub fn get_max_height(&self) -> f32 {
    java_method!(self.env, self.object, "getMaxHeight", "()F", CallFloatMethod)
  }

  pub fn set_max_height(&self, param_1: f32) {
    java_method!(self.env, self.object, "setMaxHeight", "(F)V", CallVoidMethodA, param_1);
  }

  pub fn get_ground_cover_layers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGroundCoverLayers", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/BiomeGenerationSettings#getGroundCoverLayers was null") }
    ret
  }

  pub fn get_generation_populators(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGenerationPopulators", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/BiomeGenerationSettings#getGenerationPopulators was null") }
    ret
  }

  pub fn get_generation_populators_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getGenerationPopulators", "(Ljava/lang/Class;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/BiomeGenerationSettings#getGenerationPopulators was null") }
    ret
  }

  pub fn get_populators(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPopulators", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/BiomeGenerationSettings#getPopulators was null") }
    ret
  }

  pub fn get_populators_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getPopulators", "(Ljava/lang/Class;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/BiomeGenerationSettings#getPopulators was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_biome_BiomeType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_biome_BiomeType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_biome_BiomeType {
      env: env,
      object: object
    }
  }

  pub fn get_temperature(&self) -> f64 {
    java_method!(self.env, self.object, "getTemperature", "()D", CallDoubleMethod)
  }

  pub fn get_humidity(&self) -> f64 {
    java_method!(self.env, self.object, "getHumidity", "()D", CallDoubleMethod)
  }

}

#[derive(Debug)]
pub struct world_biome_BiomeTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_biome_BiomeTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_biome_BiomeTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_biome_GroundCoverLayer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_biome_GroundCoverLayer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_biome_GroundCoverLayer {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: block_BlockState, param_2: util_weighted_SeededVariableAmount) -> world_biome_GroundCoverLayer {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/util/weighted/SeededVariableAmount;)Lorg/spongepowered/api/world/biome/GroundCoverLayer", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/GroundCoverLayer#<init> was null") }
    world_biome_GroundCoverLayer { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: jobject, param_2: util_weighted_SeededVariableAmount) -> world_biome_GroundCoverLayer {
    let ret = java_method!(self.env, self.object, "<init>", "(Ljava/util/function/Function;Lorg/spongepowered/api/util/weighted/SeededVariableAmount;)Lorg/spongepowered/api/world/biome/GroundCoverLayer", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/GroundCoverLayer#<init> was null") }
    world_biome_GroundCoverLayer { env: self.env, object: ret }
  }

  pub fn get_block_state(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBlockState", "()Ljava/util/function/Function;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/GroundCoverLayer#getBlockState was null") }
    ret
  }

  pub fn set_block_state(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setBlockState", "(Ljava/util/function/Function;)V", CallVoidMethodA, param_1);
  }

  pub fn set_block_state_1(&self, param_1: block_BlockState) {
    java_method!(self.env, self.object, "setBlockState", "(Lorg/spongepowered/api/block/BlockState;)V", CallVoidMethodA, param_1);
  }

  pub fn get_depth(&self) -> util_weighted_SeededVariableAmount {
    let ret = java_method!(self.env, self.object, "getDepth", "()Lorg/spongepowered/api/util/weighted/SeededVariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/GroundCoverLayer#getDepth was null") }
    util_weighted_SeededVariableAmount { env: self.env, object: ret }
  }

  pub fn set_depth(&self, param_1: util_weighted_SeededVariableAmount) {
    java_method!(self.env, self.object, "setDepth", "(Lorg/spongepowered/api/util/weighted/SeededVariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_depth_1(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setDepth", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_depth_2(&self, param_1: f64) {
    java_method!(self.env, self.object, "setDepth", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/biome/GroundCoverLayer#toString was null") }
    ret
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

}


#[derive(Debug)]
pub struct world_BlockChangeFlag_Flags {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_BlockChangeFlag_Flags {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_BlockChangeFlag_Flags {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_BlockChangeFlag {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_BlockChangeFlag {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_BlockChangeFlag {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[world_BlockChangeFlag] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> world_BlockChangeFlag {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/world/BlockChangeFlag;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/BlockChangeFlag#valueOf was null") }
    world_BlockChangeFlag { env: self.env, object: ret }
  }

  pub fn update_neighbors(&self) -> bool {
    java_method!(self.env, self.object, "updateNeighbors", "()Z", CallBooleanMethod) == 1
  }

  pub fn perform_block_physics(&self) -> bool {
    java_method!(self.env, self.object, "performBlockPhysics", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_update_neighbors(&self, param_1: bool) -> world_BlockChangeFlag {
    let ret = java_method!(self.env, self.object, "setUpdateNeighbors", "(Z)Lorg/spongepowered/api/world/BlockChangeFlag;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/BlockChangeFlag#setUpdateNeighbors was null") }
    world_BlockChangeFlag { env: self.env, object: ret }
  }

  pub fn set_perform_block_physics(&self, param_1: bool) -> world_BlockChangeFlag {
    let ret = java_method!(self.env, self.object, "setPerformBlockPhysics", "(Z)Lorg/spongepowered/api/world/BlockChangeFlag;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/BlockChangeFlag#setPerformBlockPhysics was null") }
    world_BlockChangeFlag { env: self.env, object: ret }
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/BlockChangeFlag#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_Chunk {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_Chunk {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_Chunk {
      env: env,
      object: object
    }
  }

  pub fn get_location(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_location_1(&self, param_1: i32, param_2: i32, param_3: i32) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(III)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_location_2(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_location_3(&self, param_1: f64, param_2: f64, param_3: f64) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(DDD)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPosition", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getPosition was null") }
    ret
  }

  pub fn get_world(&self) -> world_World {
    let ret = java_method!(self.env, self.object, "getWorld", "()Lorg/spongepowered/api/world/World;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getWorld was null") }
    world_World { env: self.env, object: ret }
  }

  pub fn is_populated(&self) -> bool {
    java_method!(self.env, self.object, "isPopulated", "()Z", CallBooleanMethod) == 1
  }

  pub fn load_chunk(&self, param_1: bool) -> bool {
    java_method!(self.env, self.object, "loadChunk", "(Z)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn unload_chunk(&self) -> bool {
    java_method!(self.env, self.object, "unloadChunk", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_inhabitted_time(&self) -> i32 {
    java_method!(self.env, self.object, "getInhabittedTime", "()I", CallIntMethod)
  }

  pub fn get_regional_difficulty_factor(&self) -> f64 {
    java_method!(self.env, self.object, "getRegionalDifficultyFactor", "()D", CallDoubleMethod)
  }

  pub fn get_regional_difficulty_percentage(&self) -> f64 {
    java_method!(self.env, self.object, "getRegionalDifficultyPercentage", "()D", CallDoubleMethod)
  }

  pub fn get_neighbor(&self, param_1: util_Direction) -> Option<world_Chunk> {
    let ret = java_method!(self.env, self.object, "getNeighbor", "(Lorg/spongepowered/api/util/Direction;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getNeighbor was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Chunk { env: self.env, object: unwrapped }) }
  }

  pub fn get_neighbor_1(&self, param_1: util_Direction, param_2: bool) -> Option<world_Chunk> {
    let ret = java_method!(self.env, self.object, "getNeighbor", "(Lorg/spongepowered/api/util/Direction;Z)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getNeighbor was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Chunk { env: self.env, object: unwrapped }) }
  }

  pub fn get_biome_worker(&self) -> world_extent_worker_MutableBiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/MutableBiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getBiomeWorker was null") }
    world_extent_worker_MutableBiomeAreaWorker { env: self.env, object: ret }
  }

  pub fn get_block_worker(&self, param_1: event_cause_Cause) -> world_extent_worker_MutableBlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/MutableBlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getBlockWorker was null") }
    world_extent_worker_MutableBlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_block_worker_1(&self, param_1: event_cause_Cause) -> world_extent_worker_BlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/BlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getBlockWorker was null") }
    world_extent_worker_BlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_biome_worker_1(&self) -> world_extent_worker_BiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/BiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Chunk#getBiomeWorker was null") }
    world_extent_worker_BiomeAreaWorker { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_ChunkState {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_ChunkState {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_ChunkState {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[world_ChunkState] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> world_ChunkState {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/world/ChunkState;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkState#valueOf was null") }
    world_ChunkState { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_ChunkTicketManager_Callback {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_ChunkTicketManager_Callback {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_ChunkTicketManager_Callback {
      env: env,
      object: object
    }
  }

  pub fn on_loaded(&self, param_1: jobject, param_2: world_World) {
    java_method!(self.env, self.object, "onLoaded", "(Lcom/google/common/collect/ImmutableList;Lorg/spongepowered/api/world/World;)V", CallVoidMethodA, param_1, param_2);
  }

}

#[derive(Debug)]
pub struct world_ChunkTicketManager_EntityLoadingTicket {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_ChunkTicketManager_EntityLoadingTicket {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_ChunkTicketManager_EntityLoadingTicket {
      env: env,
      object: object
    }
  }

  pub fn bind_to_entity(&self, param_1: entity_Entity) {
    java_method!(self.env, self.object, "bindToEntity", "(Lorg/spongepowered/api/entity/Entity;)V", CallVoidMethodA, param_1);
  }

  pub fn get_bound_entity(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getBoundEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager$EntityLoadingTicket#getBoundEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_ChunkTicketManager_LoadingTicket {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_ChunkTicketManager_LoadingTicket {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_ChunkTicketManager_LoadingTicket {
      env: env,
      object: object
    }
  }

  pub fn set_num_chunks(&self, param_1: i32) -> bool {
    java_method!(self.env, self.object, "setNumChunks", "(I)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_num_chunks(&self) -> i32 {
    java_method!(self.env, self.object, "getNumChunks", "()I", CallIntMethod)
  }

  pub fn get_max_num_chunks(&self) -> i32 {
    java_method!(self.env, self.object, "getMaxNumChunks", "()I", CallIntMethod)
  }

  pub fn get_plugin(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPlugin", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager$LoadingTicket#getPlugin was null") }
    ret
  }

  pub fn get_chunk_list(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getChunkList", "()Lcom/google/common/collect/ImmutableSet;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager$LoadingTicket#getChunkList was null") }
    ret
  }

  pub fn force_chunk(&self, param_1: jobject) {
    java_method!(self.env, self.object, "forceChunk", "(Lcom/flowpowered/math/vector/Vector3i;)V", CallVoidMethodA, param_1);
  }

  pub fn unforce_chunk(&self, param_1: jobject) {
    java_method!(self.env, self.object, "unforceChunk", "(Lcom/flowpowered/math/vector/Vector3i;)V", CallVoidMethodA, param_1);
  }

  pub fn prioritize_chunk(&self, param_1: jobject) {
    java_method!(self.env, self.object, "prioritizeChunk", "(Lcom/flowpowered/math/vector/Vector3i;)V", CallVoidMethodA, param_1);
  }

  pub fn release(&self) {
    java_method!(self.env, self.object, "release", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct world_ChunkTicketManager_OrderedCallback {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_ChunkTicketManager_OrderedCallback {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_ChunkTicketManager_OrderedCallback {
      env: env,
      object: object
    }
  }

  pub fn on_loaded(&self, param_1: jobject, param_2: world_World, param_3: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "onLoaded", "(Lcom/google/common/collect/ImmutableList;Lorg/spongepowered/api/world/World;I)Ljava/util/List;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager$OrderedCallback#onLoaded was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_ChunkTicketManager_PlayerEntityLoadingTicket {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_ChunkTicketManager_PlayerEntityLoadingTicket {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_ChunkTicketManager_PlayerEntityLoadingTicket {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_ChunkTicketManager_PlayerLoadingTicket {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_ChunkTicketManager_PlayerLoadingTicket {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_ChunkTicketManager_PlayerLoadingTicket {
      env: env,
      object: object
    }
  }

  pub fn get_player_unique_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPlayerUniqueId", "()Ljava/util/UUID;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager$PlayerLoadingTicket#getPlayerUniqueId was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_ChunkTicketManager_PlayerOrderedCallback {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_ChunkTicketManager_PlayerOrderedCallback {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_ChunkTicketManager_PlayerOrderedCallback {
      env: env,
      object: object
    }
  }

  pub fn on_player_loaded(&self, param_1: jobject, param_2: world_World) -> jobject {
    let ret = java_method!(self.env, self.object, "onPlayerLoaded", "(Lcom/google/common/collect/ImmutableListMultimap;Lorg/spongepowered/api/world/World;)Lcom/google/common/collect/ListMultimap;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager$PlayerOrderedCallback#onPlayerLoaded was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_ChunkTicketManager {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_ChunkTicketManager {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_ChunkTicketManager {
      env: env,
      object: object
    }
  }

  pub fn register_callback(&self, param_1: jobject, param_2: world_ChunkTicketManager_Callback) {
    java_method!(self.env, self.object, "registerCallback", "(Ljava/lang/Object;Lorg/spongepowered/api/world/ChunkTicketManager$Callback;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn create_ticket(&self, param_1: jobject, param_2: world_World) -> Option<world_ChunkTicketManager_LoadingTicket> {
    let ret = java_method!(self.env, self.object, "createTicket", "(Ljava/lang/Object;Lorg/spongepowered/api/world/World;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager#createTicket was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_ChunkTicketManager_LoadingTicket { env: self.env, object: unwrapped }) }
  }

  pub fn create_entity_ticket(&self, param_1: jobject, param_2: world_World) -> Option<world_ChunkTicketManager_EntityLoadingTicket> {
    let ret = java_method!(self.env, self.object, "createEntityTicket", "(Ljava/lang/Object;Lorg/spongepowered/api/world/World;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager#createEntityTicket was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_ChunkTicketManager_EntityLoadingTicket { env: self.env, object: unwrapped }) }
  }

  pub fn create_player_ticket(&self, param_1: jobject, param_2: world_World, param_3: jobject) -> Option<world_ChunkTicketManager_PlayerLoadingTicket> {
    let ret = java_method!(self.env, self.object, "createPlayerTicket", "(Ljava/lang/Object;Lorg/spongepowered/api/world/World;Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager#createPlayerTicket was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_ChunkTicketManager_PlayerLoadingTicket { env: self.env, object: unwrapped }) }
  }

  pub fn create_player_entity_ticket(&self, param_1: jobject, param_2: world_World, param_3: jobject) -> Option<world_ChunkTicketManager_PlayerEntityLoadingTicket> {
    let ret = java_method!(self.env, self.object, "createPlayerEntityTicket", "(Ljava/lang/Object;Lorg/spongepowered/api/world/World;Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager#createPlayerEntityTicket was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_ChunkTicketManager_PlayerEntityLoadingTicket { env: self.env, object: unwrapped }) }
  }

  pub fn get_max_tickets(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "getMaxTickets", "(Ljava/lang/Object;)I", CallIntMethodA, param_1)
  }

  pub fn get_available_tickets(&self, param_1: jobject, param_2: world_World) -> i32 {
    java_method!(self.env, self.object, "getAvailableTickets", "(Ljava/lang/Object;Lorg/spongepowered/api/world/World;)I", CallIntMethodA, param_1, param_2)
  }

  pub fn get_available_tickets_1(&self, param_1: jobject) -> i32 {
    java_method!(self.env, self.object, "getAvailableTickets", "(Ljava/util/UUID;)I", CallIntMethodA, param_1)
  }

  pub fn get_forced_chunks(&self, param_1: world_World) -> jobject {
    let ret = java_method!(self.env, self.object, "getForcedChunks", "(Lorg/spongepowered/api/world/World;)Lcom/google/common/collect/ImmutableSetMultimap;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/ChunkTicketManager#getForcedChunks was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_difficulty_Difficulties {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_difficulty_Difficulties {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_difficulty_Difficulties {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_difficulty_Difficulty {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_difficulty_Difficulty {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_difficulty_Difficulty {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct world_Dimension {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_Dimension {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_Dimension {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> world_DimensionType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/world/DimensionType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Dimension#getType was null") }
    world_DimensionType { env: self.env, object: ret }
  }

  pub fn get_generator_type(&self) -> world_GeneratorType {
    let ret = java_method!(self.env, self.object, "getGeneratorType", "()Lorg/spongepowered/api/world/GeneratorType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Dimension#getGeneratorType was null") }
    world_GeneratorType { env: self.env, object: ret }
  }

  pub fn allows_player_respawns(&self) -> bool {
    java_method!(self.env, self.object, "allowsPlayerRespawns", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_minimum_spawn_height(&self) -> i32 {
    java_method!(self.env, self.object, "getMinimumSpawnHeight", "()I", CallIntMethod)
  }

  pub fn does_water_evaporate(&self) -> bool {
    java_method!(self.env, self.object, "doesWaterEvaporate", "()Z", CallBooleanMethod) == 1
  }

  pub fn has_sky(&self) -> bool {
    java_method!(self.env, self.object, "hasSky", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_height(&self) -> i32 {
    java_method!(self.env, self.object, "getHeight", "()I", CallIntMethod)
  }

  pub fn get_build_height(&self) -> i32 {
    java_method!(self.env, self.object, "getBuildHeight", "()I", CallIntMethod)
  }

}

#[derive(Debug)]
pub struct world_DimensionType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_DimensionType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_DimensionType {
      env: env,
      object: object
    }
  }

  pub fn get_dimension_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDimensionClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/DimensionType#getDimensionClass was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_DimensionTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_DimensionTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_DimensionTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_explosion_Explosion_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_explosion_Explosion_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_explosion_Explosion_Builder {
      env: env,
      object: object
    }
  }

  pub fn location(&self, param_1: world_Location) -> world_explosion_Explosion_Builder {
    let ret = java_method!(self.env, self.object, "location", "(Lorg/spongepowered/api/world/Location;)Lorg/spongepowered/api/world/explosion/Explosion$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion$Builder#location was null") }
    world_explosion_Explosion_Builder { env: self.env, object: ret }
  }

  pub fn source_explosive(&self, param_1: entity_explosive_Explosive) -> world_explosion_Explosion_Builder {
    let ret = java_method!(self.env, self.object, "sourceExplosive", "(Lorg/spongepowered/api/entity/explosive/Explosive;)Lorg/spongepowered/api/world/explosion/Explosion$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion$Builder#sourceExplosive was null") }
    world_explosion_Explosion_Builder { env: self.env, object: ret }
  }

  pub fn radius(&self, param_1: f32) -> world_explosion_Explosion_Builder {
    let ret = java_method!(self.env, self.object, "radius", "(F)Lorg/spongepowered/api/world/explosion/Explosion$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion$Builder#radius was null") }
    world_explosion_Explosion_Builder { env: self.env, object: ret }
  }

  pub fn can_cause_fire(&self, param_1: bool) -> world_explosion_Explosion_Builder {
    let ret = java_method!(self.env, self.object, "canCauseFire", "(Z)Lorg/spongepowered/api/world/explosion/Explosion$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion$Builder#canCauseFire was null") }
    world_explosion_Explosion_Builder { env: self.env, object: ret }
  }

  pub fn should_damage_entities(&self, param_1: bool) -> world_explosion_Explosion_Builder {
    let ret = java_method!(self.env, self.object, "shouldDamageEntities", "(Z)Lorg/spongepowered/api/world/explosion/Explosion$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion$Builder#shouldDamageEntities was null") }
    world_explosion_Explosion_Builder { env: self.env, object: ret }
  }

  pub fn should_play_smoke(&self, param_1: bool) -> world_explosion_Explosion_Builder {
    let ret = java_method!(self.env, self.object, "shouldPlaySmoke", "(Z)Lorg/spongepowered/api/world/explosion/Explosion$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion$Builder#shouldPlaySmoke was null") }
    world_explosion_Explosion_Builder { env: self.env, object: ret }
  }

  pub fn should_break_blocks(&self, param_1: bool) -> world_explosion_Explosion_Builder {
    let ret = java_method!(self.env, self.object, "shouldBreakBlocks", "(Z)Lorg/spongepowered/api/world/explosion/Explosion$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion$Builder#shouldBreakBlocks was null") }
    world_explosion_Explosion_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_explosion_Explosion {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/explosion/Explosion;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion$Builder#build was null") }
    world_explosion_Explosion { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_explosion_Explosion {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_explosion_Explosion {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_explosion_Explosion {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_explosion_Explosion_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/explosion/Explosion$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion#builder was null") }
    world_explosion_Explosion_Builder { env: self.env, object: ret }
  }

  pub fn get_source_explosive(&self) -> Option<entity_explosive_Explosive> {
    let ret = java_method!(self.env, self.object, "getSourceExplosive", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/explosion/Explosion#getSourceExplosive was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_explosive_Explosive { env: self.env, object: unwrapped }) }
  }

  pub fn get_radius(&self) -> f32 {
    java_method!(self.env, self.object, "getRadius", "()F", CallFloatMethod)
  }

  pub fn can_cause_fire(&self) -> bool {
    java_method!(self.env, self.object, "canCauseFire", "()Z", CallBooleanMethod) == 1
  }

  pub fn should_play_smoke(&self) -> bool {
    java_method!(self.env, self.object, "shouldPlaySmoke", "()Z", CallBooleanMethod) == 1
  }

  pub fn should_break_blocks(&self) -> bool {
    java_method!(self.env, self.object, "shouldBreakBlocks", "()Z", CallBooleanMethod) == 1
  }

  pub fn should_damage_entities(&self) -> bool {
    java_method!(self.env, self.object, "shouldDamageEntities", "()Z", CallBooleanMethod) == 1
  }

}


#[derive(Debug)]
pub struct world_extent_BiomeArea {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_BiomeArea {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_BiomeArea {
      env: env,
      object: object
    }
  }

  pub fn get_biome_min(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBiomeMin", "()Lcom/flowpowered/math/vector/Vector2i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiomeMin was null") }
    ret
  }

  pub fn get_biome_max(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBiomeMax", "()Lcom/flowpowered/math/vector/Vector2i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiomeMax was null") }
    ret
  }

  pub fn get_biome_size(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBiomeSize", "()Lcom/flowpowered/math/vector/Vector2i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiomeSize was null") }
    ret
  }

  pub fn contains_biome(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsBiome", "(Lcom/flowpowered/math/vector/Vector2i;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_biome_1(&self, param_1: i32, param_2: i32) -> bool {
    java_method!(self.env, self.object, "containsBiome", "(II)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn get_biome(&self, param_1: jobject) -> world_biome_BiomeType {
    let ret = java_method!(self.env, self.object, "getBiome", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/biome/BiomeType;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiome was null") }
    world_biome_BiomeType { env: self.env, object: ret }
  }

  pub fn get_biome_1(&self, param_1: i32, param_2: i32) -> world_biome_BiomeType {
    let ret = java_method!(self.env, self.object, "getBiome", "(II)Lorg/spongepowered/api/world/biome/BiomeType;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiome was null") }
    world_biome_BiomeType { env: self.env, object: ret }
  }

  pub fn get_biome_view(&self, param_1: jobject, param_2: jobject) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lcom/flowpowered/math/vector/Vector2i;Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_1(&self, param_1: util_DiscreteTransform2) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn get_relative_biome_view(&self) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getRelativeBiomeView", "()Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getRelativeBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn get_unmodifiable_biome_view(&self) -> world_extent_UnmodifiableBiomeArea {
    let ret = java_method!(self.env, self.object, "getUnmodifiableBiomeView", "()Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getUnmodifiableBiomeView was null") }
    world_extent_UnmodifiableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_copy(&self) -> world_extent_MutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeCopy", "()Lorg/spongepowered/api/world/extent/MutableBiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiomeCopy was null") }
    world_extent_MutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_copy_1(&self, param_1: world_extent_StorageType) -> world_extent_MutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeCopy", "(Lorg/spongepowered/api/world/extent/StorageType;)Lorg/spongepowered/api/world/extent/MutableBiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiomeCopy was null") }
    world_extent_MutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_immutable_biome_copy(&self) -> world_extent_ImmutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getImmutableBiomeCopy", "()Lorg/spongepowered/api/world/extent/ImmutableBiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getImmutableBiomeCopy was null") }
    world_extent_ImmutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_worker(&self) -> world_extent_worker_BiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/BiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BiomeArea#getBiomeWorker was null") }
    world_extent_worker_BiomeAreaWorker { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_BlockVolume {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_BlockVolume {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_BlockVolume {
      env: env,
      object: object
    }
  }

  pub fn get_block_min(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBlockMin", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockMin was null") }
    ret
  }

  pub fn get_block_max(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBlockMax", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockMax was null") }
    ret
  }

  pub fn get_block_size(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBlockSize", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockSize was null") }
    ret
  }

  pub fn contains_block(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "containsBlock", "(Lcom/flowpowered/math/vector/Vector3i;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn contains_block_1(&self, param_1: i32, param_2: i32, param_3: i32) -> bool {
    java_method!(self.env, self.object, "containsBlock", "(III)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn get_block(&self, param_1: jobject) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getBlock", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/block/BlockState;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn get_block_1(&self, param_1: i32, param_2: i32, param_3: i32) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getBlock", "(III)Lorg/spongepowered/api/block/BlockState;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn get_block_type(&self, param_1: jobject) -> block_BlockType {
    let ret = java_method!(self.env, self.object, "getBlockType", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/block/BlockType;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockType was null") }
    block_BlockType { env: self.env, object: ret }
  }

  pub fn get_block_type_1(&self, param_1: i32, param_2: i32, param_3: i32) -> block_BlockType {
    let ret = java_method!(self.env, self.object, "getBlockType", "(III)Lorg/spongepowered/api/block/BlockType;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockType was null") }
    block_BlockType { env: self.env, object: ret }
  }

  pub fn get_block_view(&self, param_1: jobject, param_2: jobject) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_1(&self, param_1: util_DiscreteTransform3) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn get_relative_block_view(&self) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getRelativeBlockView", "()Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getRelativeBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn get_unmodifiable_block_view(&self) -> world_extent_UnmodifiableBlockVolume {
    let ret = java_method!(self.env, self.object, "getUnmodifiableBlockView", "()Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getUnmodifiableBlockView was null") }
    world_extent_UnmodifiableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_copy(&self) -> world_extent_MutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockCopy", "()Lorg/spongepowered/api/world/extent/MutableBlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockCopy was null") }
    world_extent_MutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_copy_1(&self, param_1: world_extent_StorageType) -> world_extent_MutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockCopy", "(Lorg/spongepowered/api/world/extent/StorageType;)Lorg/spongepowered/api/world/extent/MutableBlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockCopy was null") }
    world_extent_MutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_immutable_block_copy(&self) -> world_extent_ImmutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getImmutableBlockCopy", "()Lorg/spongepowered/api/world/extent/ImmutableBlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getImmutableBlockCopy was null") }
    world_extent_ImmutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_worker(&self, param_1: event_cause_Cause) -> world_extent_worker_BlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/BlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/BlockVolume#getBlockWorker was null") }
    world_extent_worker_BlockVolumeWorker { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_EntityUniverse_EntityHit {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_EntityUniverse_EntityHit {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_EntityUniverse_EntityHit {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: entity_Entity, param_2: jobject, param_3: jobject, param_4: f64) -> world_extent_EntityUniverse_EntityHit {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/entity/Entity;Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;D)Lorg/spongepowered/api/world/extent/EntityUniverse$EntityHit", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse$EntityHit#<init> was null") }
    world_extent_EntityUniverse_EntityHit { env: self.env, object: ret }
  }

  pub fn get_entity(&self) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "getEntity", "()Lorg/spongepowered/api/entity/Entity;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse$EntityHit#getEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

  pub fn get_intersection(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersection", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse$EntityHit#getIntersection was null") }
    ret
  }

  pub fn get_normal(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getNormal", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse$EntityHit#getNormal was null") }
    ret
  }

  pub fn get_distance(&self) -> f64 {
    java_method!(self.env, self.object, "getDistance", "()D", CallDoubleMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse$EntityHit#toString was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_extent_EntityUniverse {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_EntityUniverse {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_EntityUniverse {
      env: env,
      object: object
    }
  }

  pub fn get_entity(&self, param_1: jobject) -> Option<entity_Entity> {
    let ret = java_method!(self.env, self.object, "getEntity", "(Ljava/util/UUID;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getEntity was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Entity { env: self.env, object: unwrapped }) }
  }

  pub fn get_entities(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getEntities", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getEntities was null") }
    ret
  }

  pub fn get_entities_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getEntities", "(Ljava/util/function/Predicate;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getEntities was null") }
    ret
  }

  pub fn create_entity(&self, param_1: entity_EntityType, param_2: jobject) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "createEntity", "(Lorg/spongepowered/api/entity/EntityType;Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/entity/Entity;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#createEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

  pub fn create_entity_1(&self, param_1: entity_EntityType, param_2: jobject) -> entity_Entity {
    let ret = java_method!(self.env, self.object, "createEntity", "(Lorg/spongepowered/api/entity/EntityType;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/entity/Entity;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#createEntity was null") }
    entity_Entity { env: self.env, object: ret }
  }

  pub fn create_entity_2(&self, param_1: data_DataContainer) -> Option<entity_Entity> {
    let ret = java_method!(self.env, self.object, "createEntity", "(Lorg/spongepowered/api/data/DataContainer;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#createEntity was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Entity { env: self.env, object: unwrapped }) }
  }

  pub fn create_entity_3(&self, param_1: data_DataContainer, param_2: jobject) -> Option<entity_Entity> {
    let ret = java_method!(self.env, self.object, "createEntity", "(Lorg/spongepowered/api/data/DataContainer;Lcom/flowpowered/math/vector/Vector3d;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#createEntity was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Entity { env: self.env, object: unwrapped }) }
  }

  pub fn restore_snapshot(&self, param_1: entity_EntitySnapshot, param_2: jobject) -> Option<entity_Entity> {
    let ret = java_method!(self.env, self.object, "restoreSnapshot", "(Lorg/spongepowered/api/entity/EntitySnapshot;Lcom/flowpowered/math/vector/Vector3d;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#restoreSnapshot was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(entity_Entity { env: self.env, object: unwrapped }) }
  }

  pub fn spawn_entity(&self, param_1: entity_Entity, param_2: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "spawnEntity", "(Lorg/spongepowered/api/entity/Entity;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn spawn_entities(&self, param_1: jobject, param_2: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "spawnEntities", "(Ljava/lang/Iterable;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn get_intersecting_entities(&self, param_1: util_AABB) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingEntities", "(Lorg/spongepowered/api/util/AABB;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getIntersectingEntities was null") }
    ret
  }

  pub fn get_intersecting_entities_1(&self, param_1: util_AABB, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingEntities", "(Lorg/spongepowered/api/util/AABB;Ljava/util/function/Predicate;)Ljava/util/Set;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getIntersectingEntities was null") }
    ret
  }

  pub fn get_intersecting_entities_2(&self, param_1: jobject, param_2: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingEntities", "(Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;)Ljava/util/Set;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getIntersectingEntities was null") }
    ret
  }

  pub fn get_intersecting_entities_3(&self, param_1: jobject, param_2: jobject, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingEntities", "(Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;Ljava/util/function/Predicate;)Ljava/util/Set;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getIntersectingEntities was null") }
    ret
  }

  pub fn get_intersecting_entities_4(&self, param_1: entity_Entity, param_2: f64) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingEntities", "(Lorg/spongepowered/api/entity/Entity;D)Ljava/util/Set;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getIntersectingEntities was null") }
    ret
  }

  pub fn get_intersecting_entities_5(&self, param_1: entity_Entity, param_2: f64, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingEntities", "(Lorg/spongepowered/api/entity/Entity;DLjava/util/function/Predicate;)Ljava/util/Set;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getIntersectingEntities was null") }
    ret
  }

  pub fn get_intersecting_entities_6(&self, param_1: jobject, param_2: jobject, param_3: f64) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingEntities", "(Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;D)Ljava/util/Set;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getIntersectingEntities was null") }
    ret
  }

  pub fn get_intersecting_entities_7(&self, param_1: jobject, param_2: jobject, param_3: f64, param_4: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingEntities", "(Lcom/flowpowered/math/vector/Vector3d;Lcom/flowpowered/math/vector/Vector3d;DLjava/util/function/Predicate;)Ljava/util/Set;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/EntityUniverse#getIntersectingEntities was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_extent_Extent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_Extent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_Extent {
      env: env,
      object: object
    }
  }

  pub fn get_location(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_location_1(&self, param_1: i32, param_2: i32, param_3: i32) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(III)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_location_2(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_location_3(&self, param_1: f64, param_2: f64, param_3: f64) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(DDD)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn set_block(&self, param_1: jobject, param_2: block_BlockState, param_3: world_BlockChangeFlag, param_4: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlock", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn set_block_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: block_BlockState, param_5: world_BlockChangeFlag, param_6: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlock", "(IIILorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5, param_6) == 1
  }

  pub fn set_block_type(&self, param_1: jobject, param_2: block_BlockType, param_3: world_BlockChangeFlag, param_4: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlockType", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/block/BlockType;Lorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn set_block_type_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: block_BlockType, param_5: world_BlockChangeFlag, param_6: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlockType", "(IIILorg/spongepowered/api/block/BlockType;Lorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5, param_6) == 1
  }

  pub fn create_snapshot(&self, param_1: jobject) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "createSnapshot", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#createSnapshot was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

  pub fn create_snapshot_1(&self, param_1: i32, param_2: i32, param_3: i32) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "createSnapshot", "(III)Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#createSnapshot was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

  pub fn restore_snapshot(&self, param_1: block_BlockSnapshot, param_2: bool, param_3: world_BlockChangeFlag, param_4: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "restoreSnapshot", "(Lorg/spongepowered/api/block/BlockSnapshot;ZLorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn restore_snapshot_1(&self, param_1: jobject, param_2: block_BlockSnapshot, param_3: bool, param_4: world_BlockChangeFlag, param_5: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "restoreSnapshot", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/block/BlockSnapshot;ZLorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5) == 1
  }

  pub fn restore_snapshot_2(&self, param_1: i32, param_2: i32, param_3: i32, param_4: block_BlockSnapshot, param_5: bool, param_6: world_BlockChangeFlag, param_7: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "restoreSnapshot", "(IIILorg/spongepowered/api/block/BlockSnapshot;ZLorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5, param_6, param_7) == 1
  }

  pub fn get_scheduled_updates(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getScheduledUpdates", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getScheduledUpdates was null") }
    ret
  }

  pub fn get_scheduled_updates_1(&self, param_1: i32, param_2: i32, param_3: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "getScheduledUpdates", "(III)Ljava/util/Collection;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getScheduledUpdates was null") }
    ret
  }

  pub fn add_scheduled_update(&self, param_1: jobject, param_2: i32, param_3: i32) -> block_ScheduledBlockUpdate {
    let ret = java_method!(self.env, self.object, "addScheduledUpdate", "(Lcom/flowpowered/math/vector/Vector3i;II)Lorg/spongepowered/api/block/ScheduledBlockUpdate;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#addScheduledUpdate was null") }
    block_ScheduledBlockUpdate { env: self.env, object: ret }
  }

  pub fn add_scheduled_update_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: i32, param_5: i32) -> block_ScheduledBlockUpdate {
    let ret = java_method!(self.env, self.object, "addScheduledUpdate", "(IIIII)Lorg/spongepowered/api/block/ScheduledBlockUpdate;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#addScheduledUpdate was null") }
    block_ScheduledBlockUpdate { env: self.env, object: ret }
  }

  pub fn remove_scheduled_update(&self, param_1: jobject, param_2: block_ScheduledBlockUpdate) {
    java_method!(self.env, self.object, "removeScheduledUpdate", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/block/ScheduledBlockUpdate;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn remove_scheduled_update_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: block_ScheduledBlockUpdate) {
    java_method!(self.env, self.object, "removeScheduledUpdate", "(IIILorg/spongepowered/api/block/ScheduledBlockUpdate;)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

  pub fn is_loaded(&self) -> bool {
    java_method!(self.env, self.object, "isLoaded", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_extent_view(&self, param_1: jobject, param_2: jobject) -> world_extent_Extent {
    let ret = java_method!(self.env, self.object, "getExtentView", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/Extent;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getExtentView was null") }
    world_extent_Extent { env: self.env, object: ret }
  }

  pub fn get_extent_view_1(&self, param_1: util_DiscreteTransform3) -> world_extent_Extent {
    let ret = java_method!(self.env, self.object, "getExtentView", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/world/extent/Extent;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getExtentView was null") }
    world_extent_Extent { env: self.env, object: ret }
  }

  pub fn get_relative_extent_view(&self) -> world_extent_Extent {
    let ret = java_method!(self.env, self.object, "getRelativeExtentView", "()Lorg/spongepowered/api/world/extent/Extent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getRelativeExtentView was null") }
    world_extent_Extent { env: self.env, object: ret }
  }

  pub fn get_biome_worker(&self) -> world_extent_worker_MutableBiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/MutableBiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getBiomeWorker was null") }
    world_extent_worker_MutableBiomeAreaWorker { env: self.env, object: ret }
  }

  pub fn get_block_worker(&self, param_1: event_cause_Cause) -> world_extent_worker_MutableBlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/MutableBlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getBlockWorker was null") }
    world_extent_worker_MutableBlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_creator(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCreator", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getCreator was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_creator_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getCreator", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getCreator was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_notifier(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getNotifier", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getNotifier was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_notifier_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getNotifier", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getNotifier was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set_creator(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "setCreator", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/util/UUID;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn set_creator_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: jobject) {
    java_method!(self.env, self.object, "setCreator", "(IIILjava/util/UUID;)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

  pub fn set_notifier(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "setNotifier", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/util/UUID;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn set_notifier_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: jobject) {
    java_method!(self.env, self.object, "setNotifier", "(IIILjava/util/UUID;)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

  pub fn get_block_selection_box(&self, param_1: jobject) -> Option<util_AABB> {
    let ret = java_method!(self.env, self.object, "getBlockSelectionBox", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getBlockSelectionBox was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_AABB { env: self.env, object: unwrapped }) }
  }

  pub fn get_block_selection_box_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<util_AABB> {
    let ret = java_method!(self.env, self.object, "getBlockSelectionBox", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getBlockSelectionBox was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(util_AABB { env: self.env, object: unwrapped }) }
  }

  pub fn get_intersecting_block_collision_boxes(&self, param_1: util_AABB) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingBlockCollisionBoxes", "(Lorg/spongepowered/api/util/AABB;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getIntersectingBlockCollisionBoxes was null") }
    ret
  }

  pub fn get_intersecting_collision_boxes(&self, param_1: entity_Entity) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingCollisionBoxes", "(Lorg/spongepowered/api/entity/Entity;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getIntersectingCollisionBoxes was null") }
    ret
  }

  pub fn get_intersecting_collision_boxes_1(&self, param_1: entity_Entity, param_2: util_AABB) -> jobject {
    let ret = java_method!(self.env, self.object, "getIntersectingCollisionBoxes", "(Lorg/spongepowered/api/entity/Entity;Lorg/spongepowered/api/util/AABB;)Ljava/util/Set;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getIntersectingCollisionBoxes was null") }
    ret
  }

  pub fn get_block_worker_1(&self, param_1: event_cause_Cause) -> world_extent_worker_BlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/BlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getBlockWorker was null") }
    world_extent_worker_BlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_biome_worker_1(&self) -> world_extent_worker_BiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/BiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/Extent#getBiomeWorker was null") }
    world_extent_worker_BiomeAreaWorker { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_ExtentBufferFactory {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_ExtentBufferFactory {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_ExtentBufferFactory {
      env: env,
      object: object
    }
  }

  pub fn create_biome_buffer(&self, param_1: jobject) -> world_extent_MutableBiomeArea {
    let ret = java_method!(self.env, self.object, "createBiomeBuffer", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/MutableBiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ExtentBufferFactory#createBiomeBuffer was null") }
    world_extent_MutableBiomeArea { env: self.env, object: ret }
  }

  pub fn create_biome_buffer_1(&self, param_1: i32, param_2: i32) -> world_extent_MutableBiomeArea {
    let ret = java_method!(self.env, self.object, "createBiomeBuffer", "(II)Lorg/spongepowered/api/world/extent/MutableBiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ExtentBufferFactory#createBiomeBuffer was null") }
    world_extent_MutableBiomeArea { env: self.env, object: ret }
  }

  pub fn create_thread_safe_biome_buffer(&self, param_1: jobject) -> world_extent_MutableBiomeArea {
    let ret = java_method!(self.env, self.object, "createThreadSafeBiomeBuffer", "(Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/MutableBiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ExtentBufferFactory#createThreadSafeBiomeBuffer was null") }
    world_extent_MutableBiomeArea { env: self.env, object: ret }
  }

  pub fn create_thread_safe_biome_buffer_1(&self, param_1: i32, param_2: i32) -> world_extent_MutableBiomeArea {
    let ret = java_method!(self.env, self.object, "createThreadSafeBiomeBuffer", "(II)Lorg/spongepowered/api/world/extent/MutableBiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ExtentBufferFactory#createThreadSafeBiomeBuffer was null") }
    world_extent_MutableBiomeArea { env: self.env, object: ret }
  }

  pub fn create_block_buffer(&self, param_1: jobject) -> world_extent_MutableBlockVolume {
    let ret = java_method!(self.env, self.object, "createBlockBuffer", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/MutableBlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ExtentBufferFactory#createBlockBuffer was null") }
    world_extent_MutableBlockVolume { env: self.env, object: ret }
  }

  pub fn create_block_buffer_1(&self, param_1: i32, param_2: i32, param_3: i32) -> world_extent_MutableBlockVolume {
    let ret = java_method!(self.env, self.object, "createBlockBuffer", "(III)Lorg/spongepowered/api/world/extent/MutableBlockVolume;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ExtentBufferFactory#createBlockBuffer was null") }
    world_extent_MutableBlockVolume { env: self.env, object: ret }
  }

  pub fn create_thread_safe_block_buffer(&self, param_1: jobject) -> world_extent_MutableBlockVolume {
    let ret = java_method!(self.env, self.object, "createThreadSafeBlockBuffer", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/MutableBlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ExtentBufferFactory#createThreadSafeBlockBuffer was null") }
    world_extent_MutableBlockVolume { env: self.env, object: ret }
  }

  pub fn create_thread_safe_block_buffer_1(&self, param_1: i32, param_2: i32, param_3: i32) -> world_extent_MutableBlockVolume {
    let ret = java_method!(self.env, self.object, "createThreadSafeBlockBuffer", "(III)Lorg/spongepowered/api/world/extent/MutableBlockVolume;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ExtentBufferFactory#createThreadSafeBlockBuffer was null") }
    world_extent_MutableBlockVolume { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_ImmutableBiomeArea {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_ImmutableBiomeArea {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_ImmutableBiomeArea {
      env: env,
      object: object
    }
  }

  pub fn get_biome_view(&self, param_1: jobject, param_2: jobject) -> world_extent_ImmutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lcom/flowpowered/math/vector/Vector2i;Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/ImmutableBiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getBiomeView was null") }
    world_extent_ImmutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_1(&self, param_1: util_DiscreteTransform2) -> world_extent_ImmutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/world/extent/ImmutableBiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getBiomeView was null") }
    world_extent_ImmutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_relative_biome_view(&self) -> world_extent_ImmutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getRelativeBiomeView", "()Lorg/spongepowered/api/world/extent/ImmutableBiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getRelativeBiomeView was null") }
    world_extent_ImmutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_immutable_biome_copy(&self) -> world_extent_ImmutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getImmutableBiomeCopy", "()Lorg/spongepowered/api/world/extent/ImmutableBiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getImmutableBiomeCopy was null") }
    world_extent_ImmutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_worker(&self) -> world_extent_worker_BiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/BiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getBiomeWorker was null") }
    world_extent_worker_BiomeAreaWorker { env: self.env, object: ret }
  }

  pub fn get_relative_biome_view_1(&self) -> world_extent_UnmodifiableBiomeArea {
    let ret = java_method!(self.env, self.object, "getRelativeBiomeView", "()Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getRelativeBiomeView was null") }
    world_extent_UnmodifiableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_2(&self, param_1: util_DiscreteTransform2) -> world_extent_UnmodifiableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getBiomeView was null") }
    world_extent_UnmodifiableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_3(&self, param_1: jobject, param_2: jobject) -> world_extent_UnmodifiableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lcom/flowpowered/math/vector/Vector2i;Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getBiomeView was null") }
    world_extent_UnmodifiableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_relative_biome_view_2(&self) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getRelativeBiomeView", "()Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getRelativeBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_4(&self, param_1: util_DiscreteTransform2) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_5(&self, param_1: jobject, param_2: jobject) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lcom/flowpowered/math/vector/Vector2i;Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBiomeArea#getBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_ImmutableBlockVolume {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_ImmutableBlockVolume {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_ImmutableBlockVolume {
      env: env,
      object: object
    }
  }

  pub fn get_block_view(&self, param_1: jobject, param_2: jobject) -> world_extent_ImmutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/ImmutableBlockVolume;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getBlockView was null") }
    world_extent_ImmutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_1(&self, param_1: util_DiscreteTransform3) -> world_extent_ImmutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/world/extent/ImmutableBlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getBlockView was null") }
    world_extent_ImmutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_relative_block_view(&self) -> world_extent_ImmutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getRelativeBlockView", "()Lorg/spongepowered/api/world/extent/ImmutableBlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getRelativeBlockView was null") }
    world_extent_ImmutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_immutable_block_copy(&self) -> world_extent_ImmutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getImmutableBlockCopy", "()Lorg/spongepowered/api/world/extent/ImmutableBlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getImmutableBlockCopy was null") }
    world_extent_ImmutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_worker(&self, param_1: event_cause_Cause) -> world_extent_worker_BlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/BlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getBlockWorker was null") }
    world_extent_worker_BlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_relative_block_view_1(&self) -> world_extent_UnmodifiableBlockVolume {
    let ret = java_method!(self.env, self.object, "getRelativeBlockView", "()Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getRelativeBlockView was null") }
    world_extent_UnmodifiableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_2(&self, param_1: util_DiscreteTransform3) -> world_extent_UnmodifiableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getBlockView was null") }
    world_extent_UnmodifiableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_3(&self, param_1: jobject, param_2: jobject) -> world_extent_UnmodifiableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getBlockView was null") }
    world_extent_UnmodifiableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_relative_block_view_2(&self) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getRelativeBlockView", "()Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getRelativeBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_4(&self, param_1: util_DiscreteTransform3) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_5(&self, param_1: jobject, param_2: jobject) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/ImmutableBlockVolume#getBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_InteractableVolume {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_InteractableVolume {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_InteractableVolume {
      env: env,
      object: object
    }
  }

  pub fn hit_block(&self, param_1: jobject, param_2: util_Direction, param_3: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "hitBlock", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/util/Direction;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn hit_block_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: util_Direction, param_5: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "hitBlock", "(IIILorg/spongepowered/api/util/Direction;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5) == 1
  }

  pub fn interact_block(&self, param_1: jobject, param_2: util_Direction, param_3: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "interactBlock", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/util/Direction;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn interact_block_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: util_Direction, param_5: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "interactBlock", "(IIILorg/spongepowered/api/util/Direction;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5) == 1
  }

  pub fn interact_block_with(&self, param_1: jobject, param_2: item_inventory_ItemStack, param_3: util_Direction, param_4: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "interactBlockWith", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/util/Direction;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn interact_block_with_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: item_inventory_ItemStack, param_5: util_Direction, param_6: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "interactBlockWith", "(IIILorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/util/Direction;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5, param_6) == 1
  }

  pub fn place_block(&self, param_1: jobject, param_2: block_BlockState, param_3: util_Direction, param_4: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "placeBlock", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/util/Direction;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn place_block_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: block_BlockState, param_5: util_Direction, param_6: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "placeBlock", "(IIILorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/util/Direction;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5, param_6) == 1
  }

  pub fn dig_block(&self, param_1: jobject, param_2: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "digBlock", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn dig_block_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "digBlock", "(IIILorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn dig_block_with(&self, param_1: jobject, param_2: item_inventory_ItemStack, param_3: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "digBlockWith", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn dig_block_with_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: item_inventory_ItemStack, param_5: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "digBlockWith", "(IIILorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5) == 1
  }

  pub fn get_block_dig_time_with(&self, param_1: jobject, param_2: item_inventory_ItemStack, param_3: event_cause_Cause) -> i32 {
    java_method!(self.env, self.object, "getBlockDigTimeWith", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/event/cause/Cause;)I", CallIntMethodA, param_1, param_2, param_3)
  }

  pub fn get_block_dig_time_with_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: item_inventory_ItemStack, param_5: event_cause_Cause) -> i32 {
    java_method!(self.env, self.object, "getBlockDigTimeWith", "(IIILorg/spongepowered/api/item/inventory/ItemStack;Lorg/spongepowered/api/event/cause/Cause;)I", CallIntMethodA, param_1, param_2, param_3, param_4, param_5)
  }

  pub fn get_block_worker(&self, param_1: event_cause_Cause) -> world_extent_worker_MutableBlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/MutableBlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/InteractableVolume#getBlockWorker was null") }
    world_extent_worker_MutableBlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_block_worker_1(&self, param_1: event_cause_Cause) -> world_extent_worker_BlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/BlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/InteractableVolume#getBlockWorker was null") }
    world_extent_worker_BlockVolumeWorker { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_LocationCompositeValueStore {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_LocationCompositeValueStore {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_LocationCompositeValueStore {
      env: env,
      object: object
    }
  }

  pub fn get(&self, param_1: jobject, param_2: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(IIILorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_2(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_3(&self, param_1: i32, param_2: i32, param_3: i32, param_4: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(IIILjava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_or_create(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOrCreate", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getOrCreate was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_or_create_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOrCreate", "(IIILjava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getOrCreate was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_or_null(&self, param_1: jobject, param_2: data_key_Key) -> jobject {
    let ret = java_method!(self.env, self.object, "getOrNull", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/key/Key;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getOrNull was null") }
    ret
  }

  pub fn get_or_null_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_key_Key) -> jobject {
    let ret = java_method!(self.env, self.object, "getOrNull", "(IIILorg/spongepowered/api/data/key/Key;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getOrNull was null") }
    ret
  }

  pub fn get_or_else(&self, param_1: jobject, param_2: data_key_Key, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getOrElse", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getOrElse was null") }
    ret
  }

  pub fn get_or_else_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_key_Key, param_5: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getOrElse", "(IIILorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getOrElse was null") }
    ret
  }

  pub fn get_value(&self, param_1: jobject, param_2: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getValue", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getValue was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_value_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getValue", "(IIILorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getValue was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn supports(&self, param_1: jobject, param_2: data_key_Key) -> bool {
    java_method!(self.env, self.object, "supports", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn supports_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_key_Key) -> bool {
    java_method!(self.env, self.object, "supports", "(IIILorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn supports_2(&self, param_1: jobject, param_2: data_value_BaseValue) -> bool {
    java_method!(self.env, self.object, "supports", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/value/BaseValue;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn supports_3(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_value_BaseValue) -> bool {
    java_method!(self.env, self.object, "supports", "(IIILorg/spongepowered/api/data/value/BaseValue;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn supports_4(&self, param_1: jobject, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "supports", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/lang/Class;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn supports_5(&self, param_1: i32, param_2: i32, param_3: i32, param_4: jobject) -> bool {
    java_method!(self.env, self.object, "supports", "(IIILjava/lang/Class;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn supports_6(&self, param_1: jobject, param_2: data_manipulator_DataManipulator) -> bool {
    java_method!(self.env, self.object, "supports", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/manipulator/DataManipulator;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn supports_7(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_manipulator_DataManipulator) -> bool {
    java_method!(self.env, self.object, "supports", "(IIILorg/spongepowered/api/data/manipulator/DataManipulator;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn get_keys(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getKeys", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getKeys was null") }
    ret
  }

  pub fn get_keys_1(&self, param_1: i32, param_2: i32, param_3: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "getKeys", "(III)Ljava/util/Set;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getKeys was null") }
    ret
  }

  pub fn get_values(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getValues", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Set;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getValues was null") }
    ret
  }

  pub fn get_values_1(&self, param_1: i32, param_2: i32, param_3: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "getValues", "(III)Ljava/util/Set;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getValues was null") }
    ret
  }

  pub fn transform(&self, param_1: jobject, param_2: data_key_Key, param_3: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "transform", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/key/Key;Ljava/util/function/Function;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#transform was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn transform_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_key_Key, param_5: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "transform", "(IIILorg/spongepowered/api/data/key/Key;Ljava/util/function/Function;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#transform was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer(&self, param_1: jobject, param_2: data_key_Key, param_3: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_key_Key, param_5: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(IIILorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_2(&self, param_1: jobject, param_2: data_key_Key, param_3: jobject, param_4: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_3(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_key_Key, param_5: jobject, param_6: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(IIILorg/spongepowered/api/data/key/Key;Ljava/lang/Object;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_4(&self, param_1: jobject, param_2: data_value_BaseValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/value/BaseValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_5(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_value_BaseValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(IIILorg/spongepowered/api/data/value/BaseValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_6(&self, param_1: jobject, param_2: data_value_BaseValue, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/value/BaseValue;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_7(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_value_BaseValue, param_5: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(IIILorg/spongepowered/api/data/value/BaseValue;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_8(&self, param_1: jobject, param_2: data_manipulator_DataManipulator) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/manipulator/DataManipulator;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_9(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_manipulator_DataManipulator) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(IIILorg/spongepowered/api/data/manipulator/DataManipulator;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_0(&self, param_1: jobject, param_2: data_manipulator_DataManipulator, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/manipulator/DataManipulator;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_manipulator_DataManipulator, param_5: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(IIILorg/spongepowered/api/data/manipulator/DataManipulator;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_2(&self, param_1: jobject, param_2: data_manipulator_DataManipulator, param_3: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/manipulator/DataManipulator;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_3(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_manipulator_DataManipulator, param_5: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(IIILorg/spongepowered/api/data/manipulator/DataManipulator;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_4(&self, param_1: jobject, param_2: data_manipulator_DataManipulator, param_3: data_merge_MergeFunction, param_4: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/manipulator/DataManipulator;Lorg/spongepowered/api/data/merge/MergeFunction;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_5(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_manipulator_DataManipulator, param_5: data_merge_MergeFunction, param_6: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(IIILorg/spongepowered/api/data/manipulator/DataManipulator;Lorg/spongepowered/api/data/merge/MergeFunction;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_6(&self, param_1: jobject, param_2: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/lang/Iterable;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_7(&self, param_1: i32, param_2: i32, param_3: i32, param_4: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(IIILjava/lang/Iterable;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_8(&self, param_1: jobject, param_2: jobject, param_3: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/lang/Iterable;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove(&self, param_1: jobject, param_2: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(Lcom/flowpowered/math/vector/Vector3i;Ljava/lang/Class;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(IIILjava/lang/Class;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: jobject, param_2: data_key_Key) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/key/Key;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove_3(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_key_Key) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(IIILorg/spongepowered/api/data/key/Key;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn undo(&self, param_1: jobject, param_2: data_DataTransactionResult) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "undo", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/DataTransactionResult;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#undo was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn undo_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_DataTransactionResult) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "undo", "(IIILorg/spongepowered/api/data/DataTransactionResult;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#undo was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from(&self, param_1: jobject, param_2: data_DataHolder) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/DataHolder;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_DataHolder) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(IIILorg/spongepowered/api/data/DataHolder;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_2(&self, param_1: jobject, param_2: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_3(&self, param_1: i32, param_2: i32, param_3: i32, param_4: i32, param_5: i32, param_6: i32) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(IIIIII)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_4(&self, param_1: jobject, param_2: data_DataHolder, param_3: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/DataHolder;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_5(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_DataHolder, param_5: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(IIILorg/spongepowered/api/data/DataHolder;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_6(&self, param_1: jobject, param_2: jobject, param_3: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_7(&self, param_1: i32, param_2: i32, param_3: i32, param_4: i32, param_5: i32, param_6: i32, param_7: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(IIIIIILorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6, param_7);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn get_manipulators(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getManipulators", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getManipulators was null") }
    ret
  }

  pub fn get_manipulators_1(&self, param_1: i32, param_2: i32, param_3: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "getManipulators", "(III)Ljava/util/Collection;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/LocationCompositeValueStore#getManipulators was null") }
    ret
  }

  pub fn validate_raw_data(&self, param_1: jobject, param_2: data_DataView) -> bool {
    java_method!(self.env, self.object, "validateRawData", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/DataView;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn validate_raw_data_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_DataView) -> bool {
    java_method!(self.env, self.object, "validateRawData", "(IIILorg/spongepowered/api/data/DataView;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn set_raw_data(&self, param_1: jobject, param_2: data_DataView) {
    java_method!(self.env, self.object, "setRawData", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/data/DataView;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn set_raw_data_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: data_DataView) {
    java_method!(self.env, self.object, "setRawData", "(IIILorg/spongepowered/api/data/DataView;)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

}

#[derive(Debug)]
pub struct world_extent_MutableBiomeArea {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_MutableBiomeArea {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_MutableBiomeArea {
      env: env,
      object: object
    }
  }

  pub fn set_biome(&self, param_1: jobject, param_2: world_biome_BiomeType) {
    java_method!(self.env, self.object, "setBiome", "(Lcom/flowpowered/math/vector/Vector2i;Lorg/spongepowered/api/world/biome/BiomeType;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn set_biome_1(&self, param_1: i32, param_2: i32, param_3: world_biome_BiomeType) {
    java_method!(self.env, self.object, "setBiome", "(IILorg/spongepowered/api/world/biome/BiomeType;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_biome_view(&self, param_1: jobject, param_2: jobject) -> world_extent_MutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lcom/flowpowered/math/vector/Vector2i;Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/MutableBiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBiomeArea#getBiomeView was null") }
    world_extent_MutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_1(&self, param_1: util_DiscreteTransform2) -> world_extent_MutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/world/extent/MutableBiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBiomeArea#getBiomeView was null") }
    world_extent_MutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_relative_biome_view(&self) -> world_extent_MutableBiomeArea {
    let ret = java_method!(self.env, self.object, "getRelativeBiomeView", "()Lorg/spongepowered/api/world/extent/MutableBiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBiomeArea#getRelativeBiomeView was null") }
    world_extent_MutableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_worker(&self) -> world_extent_worker_MutableBiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/MutableBiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBiomeArea#getBiomeWorker was null") }
    world_extent_worker_MutableBiomeAreaWorker { env: self.env, object: ret }
  }

  pub fn get_biome_worker_1(&self) -> world_extent_worker_BiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/BiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBiomeArea#getBiomeWorker was null") }
    world_extent_worker_BiomeAreaWorker { env: self.env, object: ret }
  }

  pub fn get_relative_biome_view_1(&self) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getRelativeBiomeView", "()Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBiomeArea#getRelativeBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_2(&self, param_1: util_DiscreteTransform2) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBiomeArea#getBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_3(&self, param_1: jobject, param_2: jobject) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lcom/flowpowered/math/vector/Vector2i;Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBiomeArea#getBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_MutableBlockVolume {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_MutableBlockVolume {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_MutableBlockVolume {
      env: env,
      object: object
    }
  }

  pub fn set_block(&self, param_1: jobject, param_2: block_BlockState, param_3: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlock", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn set_block_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: block_BlockState, param_5: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlock", "(IIILorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5) == 1
  }

  pub fn set_block_type(&self, param_1: jobject, param_2: block_BlockType, param_3: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlockType", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/block/BlockType;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn set_block_type_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: block_BlockType, param_5: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlockType", "(IIILorg/spongepowered/api/block/BlockType;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5) == 1
  }

  pub fn get_block_view(&self, param_1: jobject, param_2: jobject) -> world_extent_MutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/MutableBlockVolume;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBlockVolume#getBlockView was null") }
    world_extent_MutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_1(&self, param_1: util_DiscreteTransform3) -> world_extent_MutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/world/extent/MutableBlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBlockVolume#getBlockView was null") }
    world_extent_MutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_relative_block_view(&self) -> world_extent_MutableBlockVolume {
    let ret = java_method!(self.env, self.object, "getRelativeBlockView", "()Lorg/spongepowered/api/world/extent/MutableBlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBlockVolume#getRelativeBlockView was null") }
    world_extent_MutableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_worker(&self, param_1: event_cause_Cause) -> world_extent_worker_MutableBlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/MutableBlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBlockVolume#getBlockWorker was null") }
    world_extent_worker_MutableBlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_block_worker_1(&self, param_1: event_cause_Cause) -> world_extent_worker_BlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/BlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBlockVolume#getBlockWorker was null") }
    world_extent_worker_BlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_relative_block_view_1(&self) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getRelativeBlockView", "()Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBlockVolume#getRelativeBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_2(&self, param_1: util_DiscreteTransform3) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBlockVolume#getBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_3(&self, param_1: jobject, param_2: jobject) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/MutableBlockVolume#getBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct world_extent_StorageType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_StorageType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_StorageType {
      env: env,
      object: object
    }
  }

  pub fn values() -> &[world_extent_StorageType] {
    unimplemented!();
  }
  pub fn value_of(param_1: jobject) -> world_extent_StorageType {
    let ret = java_method!(self.env, "valueOf", "(Ljava/lang/String;)Lorg/spongepowered/api/world/extent/StorageType;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/StorageType#valueOf was null") }
    world_extent_StorageType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_TileEntityVolume {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_TileEntityVolume {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_TileEntityVolume {
      env: env,
      object: object
    }
  }

  pub fn get_tile_entities(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getTileEntities", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/TileEntityVolume#getTileEntities was null") }
    ret
  }

  pub fn get_tile_entities_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getTileEntities", "(Ljava/util/function/Predicate;)Ljava/util/Collection;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/TileEntityVolume#getTileEntities was null") }
    ret
  }

  pub fn get_tile_entity(&self, param_1: jobject) -> Option<block_tileentity_TileEntity> {
    let ret = java_method!(self.env, self.object, "getTileEntity", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/TileEntityVolume#getTileEntity was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(block_tileentity_TileEntity { env: self.env, object: unwrapped }) }
  }

  pub fn get_tile_entity_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<block_tileentity_TileEntity> {
    let ret = java_method!(self.env, self.object, "getTileEntity", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/TileEntityVolume#getTileEntity was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(block_tileentity_TileEntity { env: self.env, object: unwrapped }) }
  }

  pub fn get_block_worker(&self, param_1: event_cause_Cause) -> world_extent_worker_MutableBlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/MutableBlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/TileEntityVolume#getBlockWorker was null") }
    world_extent_worker_MutableBlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_block_worker_1(&self, param_1: event_cause_Cause) -> world_extent_worker_BlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/BlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/TileEntityVolume#getBlockWorker was null") }
    world_extent_worker_BlockVolumeWorker { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_UnmodifiableBiomeArea {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_UnmodifiableBiomeArea {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_UnmodifiableBiomeArea {
      env: env,
      object: object
    }
  }

  pub fn get_biome_view(&self, param_1: jobject, param_2: jobject) -> world_extent_UnmodifiableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lcom/flowpowered/math/vector/Vector2i;Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBiomeArea#getBiomeView was null") }
    world_extent_UnmodifiableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_1(&self, param_1: util_DiscreteTransform2) -> world_extent_UnmodifiableBiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBiomeArea#getBiomeView was null") }
    world_extent_UnmodifiableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_relative_biome_view(&self) -> world_extent_UnmodifiableBiomeArea {
    let ret = java_method!(self.env, self.object, "getRelativeBiomeView", "()Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBiomeArea#getRelativeBiomeView was null") }
    world_extent_UnmodifiableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_unmodifiable_biome_view(&self) -> world_extent_UnmodifiableBiomeArea {
    let ret = java_method!(self.env, self.object, "getUnmodifiableBiomeView", "()Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBiomeArea#getUnmodifiableBiomeView was null") }
    world_extent_UnmodifiableBiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_worker(&self) -> world_extent_worker_BiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/BiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBiomeArea#getBiomeWorker was null") }
    world_extent_worker_BiomeAreaWorker { env: self.env, object: ret }
  }

  pub fn get_relative_biome_view_1(&self) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getRelativeBiomeView", "()Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBiomeArea#getRelativeBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_2(&self, param_1: util_DiscreteTransform2) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lorg/spongepowered/api/util/DiscreteTransform2;)Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBiomeArea#getBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn get_biome_view_3(&self, param_1: jobject, param_2: jobject) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getBiomeView", "(Lcom/flowpowered/math/vector/Vector2i;Lcom/flowpowered/math/vector/Vector2i;)Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBiomeArea#getBiomeView was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_UnmodifiableBlockVolume {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_UnmodifiableBlockVolume {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_UnmodifiableBlockVolume {
      env: env,
      object: object
    }
  }

  pub fn get_block_view(&self, param_1: jobject, param_2: jobject) -> world_extent_UnmodifiableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBlockVolume#getBlockView was null") }
    world_extent_UnmodifiableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_1(&self, param_1: util_DiscreteTransform3) -> world_extent_UnmodifiableBlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBlockVolume#getBlockView was null") }
    world_extent_UnmodifiableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_relative_block_view(&self) -> world_extent_UnmodifiableBlockVolume {
    let ret = java_method!(self.env, self.object, "getRelativeBlockView", "()Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBlockVolume#getRelativeBlockView was null") }
    world_extent_UnmodifiableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_unmodifiable_block_view(&self) -> world_extent_UnmodifiableBlockVolume {
    let ret = java_method!(self.env, self.object, "getUnmodifiableBlockView", "()Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBlockVolume#getUnmodifiableBlockView was null") }
    world_extent_UnmodifiableBlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_worker(&self, param_1: event_cause_Cause) -> world_extent_worker_BlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/BlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBlockVolume#getBlockWorker was null") }
    world_extent_worker_BlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_relative_block_view_1(&self) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getRelativeBlockView", "()Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBlockVolume#getRelativeBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_2(&self, param_1: util_DiscreteTransform3) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lorg/spongepowered/api/util/DiscreteTransform3;)Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBlockVolume#getBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn get_block_view_3(&self, param_1: jobject, param_2: jobject) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getBlockView", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/UnmodifiableBlockVolume#getBlockView was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_worker_BiomeAreaWorker {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_BiomeAreaWorker {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_BiomeAreaWorker {
      env: env,
      object: object
    }
  }

  pub fn get_area(&self) -> world_extent_BiomeArea {
    let ret = java_method!(self.env, self.object, "getArea", "()Lorg/spongepowered/api/world/extent/BiomeArea;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/BiomeAreaWorker#getArea was null") }
    world_extent_BiomeArea { env: self.env, object: ret }
  }

  pub fn map(&self, param_1: world_extent_worker_procedure_BiomeAreaMapper, param_2: world_extent_MutableBiomeArea) {
    java_method!(self.env, self.object, "map", "(Lorg/spongepowered/api/world/extent/worker/procedure/BiomeAreaMapper;Lorg/spongepowered/api/world/extent/MutableBiomeArea;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn merge(&self, param_1: world_extent_BiomeArea, param_2: world_extent_worker_procedure_BiomeAreaMerger, param_3: world_extent_MutableBiomeArea) {
    java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/world/extent/BiomeArea;Lorg/spongepowered/api/world/extent/worker/procedure/BiomeAreaMerger;Lorg/spongepowered/api/world/extent/MutableBiomeArea;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn iterate(&self, param_1: world_extent_worker_procedure_BiomeAreaVisitor) {
    java_method!(self.env, self.object, "iterate", "(Lorg/spongepowered/api/world/extent/worker/procedure/BiomeAreaVisitor;)V", CallVoidMethodA, param_1);
  }

  pub fn reduce(&self, param_1: world_extent_worker_procedure_BiomeAreaReducer, param_2: jobject, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "reduce", "(Lorg/spongepowered/api/world/extent/worker/procedure/BiomeAreaReducer;Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/BiomeAreaWorker#reduce was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_extent_worker_BlockVolumeWorker {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_BlockVolumeWorker {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_BlockVolumeWorker {
      env: env,
      object: object
    }
  }

  pub fn get_volume(&self) -> world_extent_BlockVolume {
    let ret = java_method!(self.env, self.object, "getVolume", "()Lorg/spongepowered/api/world/extent/BlockVolume;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/BlockVolumeWorker#getVolume was null") }
    world_extent_BlockVolume { env: self.env, object: ret }
  }

  pub fn map(&self, param_1: world_extent_worker_procedure_BlockVolumeMapper, param_2: world_extent_MutableBlockVolume) {
    java_method!(self.env, self.object, "map", "(Lorg/spongepowered/api/world/extent/worker/procedure/BlockVolumeMapper;Lorg/spongepowered/api/world/extent/MutableBlockVolume;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn merge(&self, param_1: world_extent_BlockVolume, param_2: world_extent_worker_procedure_BlockVolumeMerger, param_3: world_extent_MutableBlockVolume) {
    java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/world/extent/BlockVolume;Lorg/spongepowered/api/world/extent/worker/procedure/BlockVolumeMerger;Lorg/spongepowered/api/world/extent/MutableBlockVolume;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn iterate(&self, param_1: world_extent_worker_procedure_BlockVolumeVisitor) {
    java_method!(self.env, self.object, "iterate", "(Lorg/spongepowered/api/world/extent/worker/procedure/BlockVolumeVisitor;)V", CallVoidMethodA, param_1);
  }

  pub fn reduce(&self, param_1: world_extent_worker_procedure_BlockVolumeReducer, param_2: jobject, param_3: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "reduce", "(Lorg/spongepowered/api/world/extent/worker/procedure/BlockVolumeReducer;Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/BlockVolumeWorker#reduce was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_extent_worker_MutableBiomeAreaWorker {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_MutableBiomeAreaWorker {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_MutableBiomeAreaWorker {
      env: env,
      object: object
    }
  }

  pub fn map(&self, param_1: world_extent_worker_procedure_BiomeAreaMapper) {
    java_method!(self.env, self.object, "map", "(Lorg/spongepowered/api/world/extent/worker/procedure/BiomeAreaMapper;)V", CallVoidMethodA, param_1);
  }

  pub fn merge(&self, param_1: world_extent_BiomeArea, param_2: world_extent_worker_procedure_BiomeAreaMerger) {
    java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/world/extent/BiomeArea;Lorg/spongepowered/api/world/extent/worker/procedure/BiomeAreaMerger;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn fill(&self, param_1: world_extent_worker_procedure_BiomeAreaFiller) {
    java_method!(self.env, self.object, "fill", "(Lorg/spongepowered/api/world/extent/worker/procedure/BiomeAreaFiller;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_extent_worker_MutableBlockVolumeWorker {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_MutableBlockVolumeWorker {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_MutableBlockVolumeWorker {
      env: env,
      object: object
    }
  }

  pub fn map(&self, param_1: world_extent_worker_procedure_BlockVolumeMapper) {
    java_method!(self.env, self.object, "map", "(Lorg/spongepowered/api/world/extent/worker/procedure/BlockVolumeMapper;)V", CallVoidMethodA, param_1);
  }

  pub fn merge(&self, param_1: world_extent_BlockVolume, param_2: world_extent_worker_procedure_BlockVolumeMerger) {
    java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/world/extent/BlockVolume;Lorg/spongepowered/api/world/extent/worker/procedure/BlockVolumeMerger;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn fill(&self, param_1: world_extent_worker_procedure_BlockVolumeFiller, param_2: event_cause_Cause) {
    java_method!(self.env, self.object, "fill", "(Lorg/spongepowered/api/world/extent/worker/procedure/BlockVolumeFiller;Lorg/spongepowered/api/event/cause/Cause;)V", CallVoidMethodA, param_1, param_2);
  }

}


#[derive(Debug)]
pub struct world_extent_worker_procedure_BiomeAreaFiller {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BiomeAreaFiller {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BiomeAreaFiller {
      env: env,
      object: object
    }
  }

  pub fn produce(&self, param_1: i32, param_2: i32) -> world_biome_BiomeType {
    let ret = java_method!(self.env, self.object, "produce", "(II)Lorg/spongepowered/api/world/biome/BiomeType;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/procedure/BiomeAreaFiller#produce was null") }
    world_biome_BiomeType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_worker_procedure_BiomeAreaMapper {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BiomeAreaMapper {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BiomeAreaMapper {
      env: env,
      object: object
    }
  }

  pub fn map(&self, param_1: world_extent_UnmodifiableBiomeArea, param_2: i32, param_3: i32) -> world_biome_BiomeType {
    let ret = java_method!(self.env, self.object, "map", "(Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;II)Lorg/spongepowered/api/world/biome/BiomeType;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/procedure/BiomeAreaMapper#map was null") }
    world_biome_BiomeType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_worker_procedure_BiomeAreaMerger {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BiomeAreaMerger {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BiomeAreaMerger {
      env: env,
      object: object
    }
  }

  pub fn merge(&self, param_1: world_extent_UnmodifiableBiomeArea, param_2: i32, param_3: i32, param_4: world_extent_UnmodifiableBiomeArea, param_5: i32, param_6: i32) -> world_biome_BiomeType {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;IILorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;II)Lorg/spongepowered/api/world/biome/BiomeType;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/procedure/BiomeAreaMerger#merge was null") }
    world_biome_BiomeType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_worker_procedure_BiomeAreaReducer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BiomeAreaReducer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BiomeAreaReducer {
      env: env,
      object: object
    }
  }

  pub fn reduce(&self, param_1: world_extent_UnmodifiableBiomeArea, param_2: i32, param_3: i32, param_4: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "reduce", "(Lorg/spongepowered/api/world/extent/UnmodifiableBiomeArea;IILjava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/procedure/BiomeAreaReducer#reduce was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_extent_worker_procedure_BiomeAreaVisitor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BiomeAreaVisitor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BiomeAreaVisitor {
      env: env,
      object: object
    }
  }

  pub fn visit(&self, param_1: world_extent_BiomeArea, param_2: i32, param_3: i32) {
    java_method!(self.env, self.object, "visit", "(Lorg/spongepowered/api/world/extent/BiomeArea;II)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}

#[derive(Debug)]
pub struct world_extent_worker_procedure_BlockVolumeFiller {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BlockVolumeFiller {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BlockVolumeFiller {
      env: env,
      object: object
    }
  }

  pub fn produce(&self, param_1: i32, param_2: i32, param_3: i32) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "produce", "(III)Lorg/spongepowered/api/block/BlockState;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/procedure/BlockVolumeFiller#produce was null") }
    block_BlockState { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_worker_procedure_BlockVolumeMapper {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BlockVolumeMapper {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BlockVolumeMapper {
      env: env,
      object: object
    }
  }

  pub fn map(&self, param_1: world_extent_UnmodifiableBlockVolume, param_2: i32, param_3: i32, param_4: i32) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "map", "(Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;III)Lorg/spongepowered/api/block/BlockState;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/procedure/BlockVolumeMapper#map was null") }
    block_BlockState { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_worker_procedure_BlockVolumeMerger {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BlockVolumeMerger {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BlockVolumeMerger {
      env: env,
      object: object
    }
  }

  pub fn merge(&self, param_1: world_extent_UnmodifiableBlockVolume, param_2: i32, param_3: i32, param_4: i32, param_5: world_extent_UnmodifiableBlockVolume, param_6: i32, param_7: i32, param_8: i32) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "merge", "(Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;IIILorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;III)Lorg/spongepowered/api/block/BlockState;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/procedure/BlockVolumeMerger#merge was null") }
    block_BlockState { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_extent_worker_procedure_BlockVolumeReducer {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BlockVolumeReducer {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BlockVolumeReducer {
      env: env,
      object: object
    }
  }

  pub fn reduce(&self, param_1: world_extent_UnmodifiableBlockVolume, param_2: i32, param_3: i32, param_4: i32, param_5: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "reduce", "(Lorg/spongepowered/api/world/extent/UnmodifiableBlockVolume;IIILjava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/extent/worker/procedure/BlockVolumeReducer#reduce was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_extent_worker_procedure_BlockVolumeVisitor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_extent_worker_procedure_BlockVolumeVisitor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_extent_worker_procedure_BlockVolumeVisitor {
      env: env,
      object: object
    }
  }

  pub fn visit(&self, param_1: world_extent_BlockVolume, param_2: i32, param_3: i32, param_4: i32) {
    java_method!(self.env, self.object, "visit", "(Lorg/spongepowered/api/world/extent/BlockVolume;III)V", CallVoidMethodA, param_1, param_2, param_3, param_4);
  }

}


#[derive(Debug)]
pub struct world_gamerule_DefaultGameRules {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gamerule_DefaultGameRules {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gamerule_DefaultGameRules {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> world_gamerule_DefaultGameRules {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/world/gamerule/DefaultGameRules", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gamerule/DefaultGameRules#<init> was null") }
    world_gamerule_DefaultGameRules { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct world_gen_BiomeGenerator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_BiomeGenerator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_BiomeGenerator {
      env: env,
      object: object
    }
  }

  pub fn generate_biomes(&self, param_1: world_extent_MutableBiomeArea) {
    java_method!(self.env, self.object, "generateBiomes", "(Lorg/spongepowered/api/world/extent/MutableBiomeArea;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_GenerationPopulator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_GenerationPopulator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_GenerationPopulator {
      env: env,
      object: object
    }
  }

  pub fn populate(&self, param_1: world_World, param_2: world_extent_MutableBlockVolume, param_3: world_extent_ImmutableBiomeArea) {
    java_method!(self.env, self.object, "populate", "(Lorg/spongepowered/api/world/World;Lorg/spongepowered/api/world/extent/MutableBlockVolume;Lorg/spongepowered/api/world/extent/ImmutableBiomeArea;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}


#[derive(Debug)]
pub struct world_gen_populator_BigMushroom_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_BigMushroom_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_BigMushroom_Builder {
      env: env,
      object: object
    }
  }

  pub fn types(&self, param_1: util_weighted_WeightedTable) -> world_gen_populator_BigMushroom_Builder {
    let ret = java_method!(self.env, self.object, "types", "(Lorg/spongepowered/api/util/weighted/WeightedTable;)Lorg/spongepowered/api/world/gen/populator/BigMushroom$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom$Builder#types was null") }
    world_gen_populator_BigMushroom_Builder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: world_gen_PopulatorObject, param_2: f64) -> world_gen_populator_BigMushroom_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/world/gen/PopulatorObject;D)Lorg/spongepowered/api/world/gen/populator/BigMushroom$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom$Builder#type was null") }
    world_gen_populator_BigMushroom_Builder { env: self.env, object: ret }
  }

  pub fn mushrooms_per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_BigMushroom_Builder {
    let ret = java_method!(self.env, self.object, "mushroomsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/BigMushroom$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom$Builder#mushroomsPerChunk was null") }
    world_gen_populator_BigMushroom_Builder { env: self.env, object: ret }
  }

  pub fn mushrooms_per_chunk_1(&self, param_1: i32) -> world_gen_populator_BigMushroom_Builder {
    let ret = java_method!(self.env, self.object, "mushroomsPerChunk", "(I)Lorg/spongepowered/api/world/gen/populator/BigMushroom$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom$Builder#mushroomsPerChunk was null") }
    world_gen_populator_BigMushroom_Builder { env: self.env, object: ret }
  }

  pub fn supplier(&self, param_1: jobject) -> world_gen_populator_BigMushroom_Builder {
    let ret = java_method!(self.env, self.object, "supplier", "(Ljava/util/function/Function;)Lorg/spongepowered/api/world/gen/populator/BigMushroom$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom$Builder#supplier was null") }
    world_gen_populator_BigMushroom_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_BigMushroom {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/BigMushroom;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom$Builder#build was null") }
    world_gen_populator_BigMushroom { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_BigMushroom {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_BigMushroom {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_BigMushroom {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_BigMushroom_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/BigMushroom$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom#builder was null") }
    world_gen_populator_BigMushroom_Builder { env: self.env, object: ret }
  }

  pub fn get_types(&self) -> util_weighted_WeightedTable {
    let ret = java_method!(self.env, self.object, "getTypes", "()Lorg/spongepowered/api/util/weighted/WeightedTable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom#getTypes was null") }
    util_weighted_WeightedTable { env: self.env, object: ret }
  }

  pub fn get_mushrooms_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getMushroomsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom#getMushroomsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_mushrooms_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setMushroomsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_mushrooms_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setMushroomsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_supplier_override(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSupplierOverride", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BigMushroom#getSupplierOverride was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set_supplier_override(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setSupplierOverride", "(Ljava/util/function/Function;)V", CallVoidMethodA, param_1);
  }

  pub fn clear_supplier_override(&self) {
    java_method!(self.env, self.object, "clearSupplierOverride", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_BlockBlob_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_BlockBlob_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_BlockBlob_Builder {
      env: env,
      object: object
    }
  }

  pub fn block(&self, param_1: block_BlockState) -> world_gen_populator_BlockBlob_Builder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/world/gen/populator/BlockBlob$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob$Builder#block was null") }
    world_gen_populator_BlockBlob_Builder { env: self.env, object: ret }
  }

  pub fn radius(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_BlockBlob_Builder {
    let ret = java_method!(self.env, self.object, "radius", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/BlockBlob$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob$Builder#radius was null") }
    world_gen_populator_BlockBlob_Builder { env: self.env, object: ret }
  }

  pub fn radius_1(&self, param_1: f64) -> world_gen_populator_BlockBlob_Builder {
    let ret = java_method!(self.env, self.object, "radius", "(D)Lorg/spongepowered/api/world/gen/populator/BlockBlob$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob$Builder#radius was null") }
    world_gen_populator_BlockBlob_Builder { env: self.env, object: ret }
  }

  pub fn blob_count(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_BlockBlob_Builder {
    let ret = java_method!(self.env, self.object, "blobCount", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/BlockBlob$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob$Builder#blobCount was null") }
    world_gen_populator_BlockBlob_Builder { env: self.env, object: ret }
  }

  pub fn blob_count_1(&self, param_1: i32) -> world_gen_populator_BlockBlob_Builder {
    let ret = java_method!(self.env, self.object, "blobCount", "(I)Lorg/spongepowered/api/world/gen/populator/BlockBlob$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob$Builder#blobCount was null") }
    world_gen_populator_BlockBlob_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_BlockBlob {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/BlockBlob;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob$Builder#build was null") }
    world_gen_populator_BlockBlob { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_BlockBlob {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_BlockBlob {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_BlockBlob {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_BlockBlob_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/BlockBlob$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob#builder was null") }
    world_gen_populator_BlockBlob_Builder { env: self.env, object: ret }
  }

  pub fn get_block(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getBlock", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob#getBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn set_block(&self, param_1: block_BlockState) {
    java_method!(self.env, self.object, "setBlock", "(Lorg/spongepowered/api/block/BlockState;)V", CallVoidMethodA, param_1);
  }

  pub fn get_radius(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getRadius", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob#getRadius was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_radius(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setRadius", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_radius_1(&self, param_1: f64) {
    java_method!(self.env, self.object, "setRadius", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_count(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getCount", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/BlockBlob#getCount was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_count(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setCount", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_count_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setCount", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Cactus_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Cactus_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Cactus_Builder {
      env: env,
      object: object
    }
  }

  pub fn cacti_per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Cactus_Builder {
    let ret = java_method!(self.env, self.object, "cactiPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Cactus$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Cactus$Builder#cactiPerChunk was null") }
    world_gen_populator_Cactus_Builder { env: self.env, object: ret }
  }

  pub fn cacti_per_chunk_1(&self, param_1: i32) -> world_gen_populator_Cactus_Builder {
    let ret = java_method!(self.env, self.object, "cactiPerChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Cactus$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Cactus$Builder#cactiPerChunk was null") }
    world_gen_populator_Cactus_Builder { env: self.env, object: ret }
  }

  pub fn height(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Cactus_Builder {
    let ret = java_method!(self.env, self.object, "height", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Cactus$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Cactus$Builder#height was null") }
    world_gen_populator_Cactus_Builder { env: self.env, object: ret }
  }

  pub fn height_1(&self, param_1: i32) -> world_gen_populator_Cactus_Builder {
    let ret = java_method!(self.env, self.object, "height", "(I)Lorg/spongepowered/api/world/gen/populator/Cactus$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Cactus$Builder#height was null") }
    world_gen_populator_Cactus_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Cactus {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Cactus;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Cactus$Builder#build was null") }
    world_gen_populator_Cactus { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Cactus {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Cactus {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Cactus {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Cactus_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Cactus$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Cactus#builder was null") }
    world_gen_populator_Cactus_Builder { env: self.env, object: ret }
  }

  pub fn get_cacti_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getCactiPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Cactus#getCactiPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_cacti_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setCactiPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_cacti_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setCactiPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_height(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getHeight", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Cactus#getHeight was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_height(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setHeight", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_height_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setHeight", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_ChorusFlower_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_ChorusFlower_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_ChorusFlower_Builder {
      env: env,
      object: object
    }
  }

  pub fn exclusion_radius(&self, param_1: i32) -> world_gen_populator_ChorusFlower_Builder {
    let ret = java_method!(self.env, self.object, "exclusionRadius", "(I)Lorg/spongepowered/api/world/gen/populator/ChorusFlower$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/ChorusFlower$Builder#exclusionRadius was null") }
    world_gen_populator_ChorusFlower_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_ChorusFlower {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/ChorusFlower;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/ChorusFlower$Builder#build was null") }
    world_gen_populator_ChorusFlower { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_ChorusFlower {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_ChorusFlower {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_ChorusFlower {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_ChorusFlower_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/ChorusFlower$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/ChorusFlower#builder was null") }
    world_gen_populator_ChorusFlower_Builder { env: self.env, object: ret }
  }

  pub fn get_exclusion_radius(&self) -> i32 {
    java_method!(self.env, self.object, "getExclusionRadius", "()I", CallIntMethod)
  }

  pub fn set_exclusion_radius(&self, param_1: i32) {
    java_method!(self.env, self.object, "setExclusionRadius", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_DeadBush_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_DeadBush_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_DeadBush_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_DeadBush_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/DeadBush$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DeadBush$Builder#perChunk was null") }
    world_gen_populator_DeadBush_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_DeadBush_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/DeadBush$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DeadBush$Builder#perChunk was null") }
    world_gen_populator_DeadBush_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_DeadBush {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/DeadBush;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DeadBush$Builder#build was null") }
    world_gen_populator_DeadBush { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_DeadBush {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_DeadBush {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_DeadBush {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_DeadBush_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/DeadBush$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DeadBush#builder was null") }
    world_gen_populator_DeadBush_Builder { env: self.env, object: ret }
  }

  pub fn get_shrubs_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getShrubsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DeadBush#getShrubsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_shrubs_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setShrubsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_shrubs_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setShrubsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_DesertWell_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_DesertWell_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_DesertWell_Builder {
      env: env,
      object: object
    }
  }

  pub fn probability(&self, param_1: f64) -> world_gen_populator_DesertWell_Builder {
    let ret = java_method!(self.env, self.object, "probability", "(D)Lorg/spongepowered/api/world/gen/populator/DesertWell$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DesertWell$Builder#probability was null") }
    world_gen_populator_DesertWell_Builder { env: self.env, object: ret }
  }

  pub fn well_object(&self, param_1: world_gen_PopulatorObject) -> world_gen_populator_DesertWell_Builder {
    let ret = java_method!(self.env, self.object, "wellObject", "(Lorg/spongepowered/api/world/gen/PopulatorObject;)Lorg/spongepowered/api/world/gen/populator/DesertWell$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DesertWell$Builder#wellObject was null") }
    world_gen_populator_DesertWell_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_DesertWell {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/DesertWell;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DesertWell$Builder#build was null") }
    world_gen_populator_DesertWell { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_DesertWell {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_DesertWell {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_DesertWell {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_DesertWell_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/DesertWell$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DesertWell#builder was null") }
    world_gen_populator_DesertWell_Builder { env: self.env, object: ret }
  }

  pub fn get_spawn_probability(&self) -> f64 {
    java_method!(self.env, self.object, "getSpawnProbability", "()D", CallDoubleMethod)
  }

  pub fn set_spawn_probability(&self, param_1: f64) {
    java_method!(self.env, self.object, "setSpawnProbability", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_well_object(&self) -> world_gen_PopulatorObject {
    let ret = java_method!(self.env, self.object, "getWellObject", "()Lorg/spongepowered/api/world/gen/PopulatorObject;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DesertWell#getWellObject was null") }
    world_gen_PopulatorObject { env: self.env, object: ret }
  }

  pub fn set_well_object(&self, param_1: world_gen_PopulatorObject) {
    java_method!(self.env, self.object, "setWellObject", "(Lorg/spongepowered/api/world/gen/PopulatorObject;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_DoublePlant_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_DoublePlant_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_DoublePlant_Builder {
      env: env,
      object: object
    }
  }

  pub fn types(&self, param_1: util_weighted_WeightedTable) -> world_gen_populator_DoublePlant_Builder {
    let ret = java_method!(self.env, self.object, "types", "(Lorg/spongepowered/api/util/weighted/WeightedTable;)Lorg/spongepowered/api/world/gen/populator/DoublePlant$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant$Builder#types was null") }
    world_gen_populator_DoublePlant_Builder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: data_type_DoublePlantType, param_2: f64) -> world_gen_populator_DoublePlant_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/data/type/DoublePlantType;D)Lorg/spongepowered/api/world/gen/populator/DoublePlant$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant$Builder#type was null") }
    world_gen_populator_DoublePlant_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_DoublePlant_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/DoublePlant$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant$Builder#perChunk was null") }
    world_gen_populator_DoublePlant_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_DoublePlant_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/DoublePlant$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant$Builder#perChunk was null") }
    world_gen_populator_DoublePlant_Builder { env: self.env, object: ret }
  }

  pub fn supplier(&self, param_1: jobject) -> world_gen_populator_DoublePlant_Builder {
    let ret = java_method!(self.env, self.object, "supplier", "(Ljava/util/function/Function;)Lorg/spongepowered/api/world/gen/populator/DoublePlant$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant$Builder#supplier was null") }
    world_gen_populator_DoublePlant_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_DoublePlant {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/DoublePlant;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant$Builder#build was null") }
    world_gen_populator_DoublePlant { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_DoublePlant {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_DoublePlant {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_DoublePlant {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_DoublePlant_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/DoublePlant$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant#builder was null") }
    world_gen_populator_DoublePlant_Builder { env: self.env, object: ret }
  }

  pub fn get_possible_types(&self) -> util_weighted_WeightedTable {
    let ret = java_method!(self.env, self.object, "getPossibleTypes", "()Lorg/spongepowered/api/util/weighted/WeightedTable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant#getPossibleTypes was null") }
    util_weighted_WeightedTable { env: self.env, object: ret }
  }

  pub fn get_plants_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getPlantsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant#getPlantsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_plants_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setPlantsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_plants_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setPlantsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_supplier_override(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSupplierOverride", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/DoublePlant#getSupplierOverride was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set_supplier_override(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setSupplierOverride", "(Ljava/util/function/Function;)V", CallVoidMethodA, param_1);
  }

  pub fn clear_supplier_override(&self) {
    java_method!(self.env, self.object, "clearSupplierOverride", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Dungeon_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Dungeon_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Dungeon_Builder {
      env: env,
      object: object
    }
  }

  pub fn attempts(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "attempts", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#attempts was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn attempts_1(&self, param_1: i32) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "attempts", "(I)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#attempts was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn mob_spawner_data(&self, param_1: data_manipulator_mutable_MobSpawnerData) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "mobSpawnerData", "(Lorg/spongepowered/api/data/manipulator/mutable/MobSpawnerData;)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#mobSpawnerData was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn minimum_spawn_delay(&self, param_1: i16) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "minimumSpawnDelay", "(S)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#minimumSpawnDelay was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn maximum_spawn_delay(&self, param_1: i16) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "maximumSpawnDelay", "(S)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#maximumSpawnDelay was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn spawn_count(&self, param_1: i16) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "spawnCount", "(S)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#spawnCount was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn maximum_nearby_entities(&self, param_1: i16) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "maximumNearbyEntities", "(S)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#maximumNearbyEntities was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn required_player_range(&self, param_1: i16) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "requiredPlayerRange", "(S)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#requiredPlayerRange was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn spawn_range(&self, param_1: i16) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "spawnRange", "(S)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#spawnRange was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn possible_entities(&self, param_1: util_weighted_WeightedTable) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "possibleEntities", "(Lorg/spongepowered/api/util/weighted/WeightedTable;)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#possibleEntities was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn possible_items(&self, param_1: util_weighted_LootTable) -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, self.object, "possibleItems", "(Lorg/spongepowered/api/util/weighted/LootTable;)Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#possibleItems was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Dungeon {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Dungeon;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon$Builder#build was null") }
    world_gen_populator_Dungeon { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Dungeon {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Dungeon {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Dungeon {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Dungeon_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Dungeon$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon#builder was null") }
    world_gen_populator_Dungeon_Builder { env: self.env, object: ret }
  }

  pub fn get_attempts_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getAttemptsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon#getAttemptsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_attempts_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setAttemptsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_attempts_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setAttemptsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_spawner_data(&self) -> data_manipulator_mutable_MobSpawnerData {
    let ret = java_method!(self.env, self.object, "getSpawnerData", "()Lorg/spongepowered/api/data/manipulator/mutable/MobSpawnerData;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon#getSpawnerData was null") }
    data_manipulator_mutable_MobSpawnerData { env: self.env, object: ret }
  }

  pub fn get_possible_contents(&self) -> util_weighted_LootTable {
    let ret = java_method!(self.env, self.object, "getPossibleContents", "()Lorg/spongepowered/api/util/weighted/LootTable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Dungeon#getPossibleContents was null") }
    util_weighted_LootTable { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_EndIsland_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_EndIsland_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_EndIsland_Builder {
      env: env,
      object: object
    }
  }

  pub fn starting_radius(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_EndIsland_Builder {
    let ret = java_method!(self.env, self.object, "startingRadius", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/EndIsland$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland$Builder#startingRadius was null") }
    world_gen_populator_EndIsland_Builder { env: self.env, object: ret }
  }

  pub fn starting_radius_1(&self, param_1: f64) -> world_gen_populator_EndIsland_Builder {
    let ret = java_method!(self.env, self.object, "startingRadius", "(D)Lorg/spongepowered/api/world/gen/populator/EndIsland$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland$Builder#startingRadius was null") }
    world_gen_populator_EndIsland_Builder { env: self.env, object: ret }
  }

  pub fn radius_decrement(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_EndIsland_Builder {
    let ret = java_method!(self.env, self.object, "radiusDecrement", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/EndIsland$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland$Builder#radiusDecrement was null") }
    world_gen_populator_EndIsland_Builder { env: self.env, object: ret }
  }

  pub fn radius_decrement_1(&self, param_1: f64) -> world_gen_populator_EndIsland_Builder {
    let ret = java_method!(self.env, self.object, "radiusDecrement", "(D)Lorg/spongepowered/api/world/gen/populator/EndIsland$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland$Builder#radiusDecrement was null") }
    world_gen_populator_EndIsland_Builder { env: self.env, object: ret }
  }

  pub fn island_block(&self, param_1: block_BlockState) -> world_gen_populator_EndIsland_Builder {
    let ret = java_method!(self.env, self.object, "islandBlock", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/world/gen/populator/EndIsland$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland$Builder#islandBlock was null") }
    world_gen_populator_EndIsland_Builder { env: self.env, object: ret }
  }

  pub fn exclusion_radius(&self, param_1: i32) -> world_gen_populator_EndIsland_Builder {
    let ret = java_method!(self.env, self.object, "exclusionRadius", "(I)Lorg/spongepowered/api/world/gen/populator/EndIsland$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland$Builder#exclusionRadius was null") }
    world_gen_populator_EndIsland_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_EndIsland {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/EndIsland;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland$Builder#build was null") }
    world_gen_populator_EndIsland { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_EndIsland {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_EndIsland {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_EndIsland {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_EndIsland_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/EndIsland$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland#builder was null") }
    world_gen_populator_EndIsland_Builder { env: self.env, object: ret }
  }

  pub fn get_starting_radius(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getStartingRadius", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland#getStartingRadius was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_starting_radius(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setStartingRadius", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_starting_radius_1(&self, param_1: f64) {
    java_method!(self.env, self.object, "setStartingRadius", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_radius_decrement(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getRadiusDecrement", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland#getRadiusDecrement was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_radius_decrement(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setRadiusDecrement", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_radius_decrement_1(&self, param_1: f64) {
    java_method!(self.env, self.object, "setRadiusDecrement", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_island_block(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getIslandBlock", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/EndIsland#getIslandBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn set_island_block(&self, param_1: block_BlockState) {
    java_method!(self.env, self.object, "setIslandBlock", "(Lorg/spongepowered/api/block/BlockState;)V", CallVoidMethodA, param_1);
  }

  pub fn get_exclusion_radius(&self) -> i32 {
    java_method!(self.env, self.object, "getExclusionRadius", "()I", CallIntMethod)
  }

  pub fn set_exclusion_radius(&self, param_1: i32) {
    java_method!(self.env, self.object, "setExclusionRadius", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Flower_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Flower_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Flower_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Flower_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Flower$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower$Builder#perChunk was null") }
    world_gen_populator_Flower_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_Flower_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Flower$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower$Builder#perChunk was null") }
    world_gen_populator_Flower_Builder { env: self.env, object: ret }
  }

  pub fn types(&self, param_1: util_weighted_WeightedTable) -> world_gen_populator_Flower_Builder {
    let ret = java_method!(self.env, self.object, "types", "(Lorg/spongepowered/api/util/weighted/WeightedTable;)Lorg/spongepowered/api/world/gen/populator/Flower$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower$Builder#types was null") }
    world_gen_populator_Flower_Builder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: data_type_PlantType, param_2: f64) -> world_gen_populator_Flower_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/data/type/PlantType;D)Lorg/spongepowered/api/world/gen/populator/Flower$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower$Builder#type was null") }
    world_gen_populator_Flower_Builder { env: self.env, object: ret }
  }

  pub fn supplier(&self, param_1: jobject) -> world_gen_populator_Flower_Builder {
    let ret = java_method!(self.env, self.object, "supplier", "(Ljava/util/function/Function;)Lorg/spongepowered/api/world/gen/populator/Flower$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower$Builder#supplier was null") }
    world_gen_populator_Flower_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Flower {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Flower;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower$Builder#build was null") }
    world_gen_populator_Flower { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Flower {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Flower {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Flower {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Flower_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Flower$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower#builder was null") }
    world_gen_populator_Flower_Builder { env: self.env, object: ret }
  }

  pub fn get_flowers_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getFlowersPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower#getFlowersPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_flowers_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setFlowersPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_flowers_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setFlowersPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_flower_types(&self) -> util_weighted_WeightedTable {
    let ret = java_method!(self.env, self.object, "getFlowerTypes", "()Lorg/spongepowered/api/util/weighted/WeightedTable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower#getFlowerTypes was null") }
    util_weighted_WeightedTable { env: self.env, object: ret }
  }

  pub fn get_supplier_override(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSupplierOverride", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Flower#getSupplierOverride was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set_supplier_override(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setSupplierOverride", "(Ljava/util/function/Function;)V", CallVoidMethodA, param_1);
  }

  pub fn clear_supplier_override(&self) {
    java_method!(self.env, self.object, "clearSupplierOverride", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Forest_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Forest_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Forest_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Forest_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Forest$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest$Builder#perChunk was null") }
    world_gen_populator_Forest_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_Forest_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Forest$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest$Builder#perChunk was null") }
    world_gen_populator_Forest_Builder { env: self.env, object: ret }
  }

  pub fn types(&self, param_1: util_weighted_WeightedTable) -> world_gen_populator_Forest_Builder {
    let ret = java_method!(self.env, self.object, "types", "(Lorg/spongepowered/api/util/weighted/WeightedTable;)Lorg/spongepowered/api/world/gen/populator/Forest$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest$Builder#types was null") }
    world_gen_populator_Forest_Builder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: world_gen_PopulatorObject, param_2: f64) -> world_gen_populator_Forest_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/world/gen/PopulatorObject;D)Lorg/spongepowered/api/world/gen/populator/Forest$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest$Builder#type was null") }
    world_gen_populator_Forest_Builder { env: self.env, object: ret }
  }

  pub fn supplier(&self, param_1: jobject) -> world_gen_populator_Forest_Builder {
    let ret = java_method!(self.env, self.object, "supplier", "(Ljava/util/function/Function;)Lorg/spongepowered/api/world/gen/populator/Forest$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest$Builder#supplier was null") }
    world_gen_populator_Forest_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Forest {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Forest;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest$Builder#build was null") }
    world_gen_populator_Forest { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Forest {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Forest {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Forest {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Forest_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Forest$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest#builder was null") }
    world_gen_populator_Forest_Builder { env: self.env, object: ret }
  }

  pub fn get_trees_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getTreesPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest#getTreesPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_trees_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setTreesPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_trees_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setTreesPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_types(&self) -> util_weighted_WeightedTable {
    let ret = java_method!(self.env, self.object, "getTypes", "()Lorg/spongepowered/api/util/weighted/WeightedTable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest#getTypes was null") }
    util_weighted_WeightedTable { env: self.env, object: ret }
  }

  pub fn get_supplier_override(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSupplierOverride", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Forest#getSupplierOverride was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set_supplier_override(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setSupplierOverride", "(Ljava/util/function/Function;)V", CallVoidMethodA, param_1);
  }

  pub fn clear_supplier_override(&self) {
    java_method!(self.env, self.object, "clearSupplierOverride", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Glowstone_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Glowstone_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Glowstone_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Glowstone_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Glowstone$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone$Builder#perChunk was null") }
    world_gen_populator_Glowstone_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_Glowstone_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Glowstone$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone$Builder#perChunk was null") }
    world_gen_populator_Glowstone_Builder { env: self.env, object: ret }
  }

  pub fn blocks_per_cluster(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Glowstone_Builder {
    let ret = java_method!(self.env, self.object, "blocksPerCluster", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Glowstone$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone$Builder#blocksPerCluster was null") }
    world_gen_populator_Glowstone_Builder { env: self.env, object: ret }
  }

  pub fn blocks_per_cluster_1(&self, param_1: i32) -> world_gen_populator_Glowstone_Builder {
    let ret = java_method!(self.env, self.object, "blocksPerCluster", "(I)Lorg/spongepowered/api/world/gen/populator/Glowstone$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone$Builder#blocksPerCluster was null") }
    world_gen_populator_Glowstone_Builder { env: self.env, object: ret }
  }

  pub fn cluster_height(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Glowstone_Builder {
    let ret = java_method!(self.env, self.object, "clusterHeight", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Glowstone$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone$Builder#clusterHeight was null") }
    world_gen_populator_Glowstone_Builder { env: self.env, object: ret }
  }

  pub fn cluster_height_1(&self, param_1: i32) -> world_gen_populator_Glowstone_Builder {
    let ret = java_method!(self.env, self.object, "clusterHeight", "(I)Lorg/spongepowered/api/world/gen/populator/Glowstone$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone$Builder#clusterHeight was null") }
    world_gen_populator_Glowstone_Builder { env: self.env, object: ret }
  }

  pub fn height(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Glowstone_Builder {
    let ret = java_method!(self.env, self.object, "height", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Glowstone$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone$Builder#height was null") }
    world_gen_populator_Glowstone_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Glowstone {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Glowstone;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone$Builder#build was null") }
    world_gen_populator_Glowstone { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Glowstone {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Glowstone {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Glowstone {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Glowstone_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Glowstone$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone#builder was null") }
    world_gen_populator_Glowstone_Builder { env: self.env, object: ret }
  }

  pub fn get_clusters_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getClustersPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone#getClustersPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_clusters_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setClustersPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_clusters_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setClustersPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_attempts_per_cluster(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getAttemptsPerCluster", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone#getAttemptsPerCluster was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_attempts_per_cluster(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setAttemptsPerCluster", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_attempts_per_cluster_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setAttemptsPerCluster", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_cluster_height(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getClusterHeight", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone#getClusterHeight was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_cluster_height(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setClusterHeight", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_cluster_height_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setClusterHeight", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_height(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getHeight", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Glowstone#getHeight was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_height(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setHeight", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_IcePath_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_IcePath_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_IcePath_Builder {
      env: env,
      object: object
    }
  }

  pub fn radius(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_IcePath_Builder {
    let ret = java_method!(self.env, self.object, "radius", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/IcePath$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IcePath$Builder#radius was null") }
    world_gen_populator_IcePath_Builder { env: self.env, object: ret }
  }

  pub fn radius_1(&self, param_1: f64) -> world_gen_populator_IcePath_Builder {
    let ret = java_method!(self.env, self.object, "radius", "(D)Lorg/spongepowered/api/world/gen/populator/IcePath$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IcePath$Builder#radius was null") }
    world_gen_populator_IcePath_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_IcePath_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/IcePath$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IcePath$Builder#perChunk was null") }
    world_gen_populator_IcePath_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_IcePath_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/IcePath$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IcePath$Builder#perChunk was null") }
    world_gen_populator_IcePath_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_IcePath {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/IcePath;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IcePath$Builder#build was null") }
    world_gen_populator_IcePath { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_IcePath {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_IcePath {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_IcePath {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_IcePath_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/IcePath$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IcePath#builder was null") }
    world_gen_populator_IcePath_Builder { env: self.env, object: ret }
  }

  pub fn get_radius(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getRadius", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IcePath#getRadius was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_radius(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setRadius", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_radius_1(&self, param_1: f64) {
    java_method!(self.env, self.object, "setRadius", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_sections_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getSectionsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IcePath#getSectionsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_sections_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setSectionsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_sections_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setSectionsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_IceSpike_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_IceSpike_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_IceSpike_Builder {
      env: env,
      object: object
    }
  }

  pub fn spikes_per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_IceSpike_Builder {
    let ret = java_method!(self.env, self.object, "spikesPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/IceSpike$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike$Builder#spikesPerChunk was null") }
    world_gen_populator_IceSpike_Builder { env: self.env, object: ret }
  }

  pub fn spikes_per_chunk_1(&self, param_1: i32) -> world_gen_populator_IceSpike_Builder {
    let ret = java_method!(self.env, self.object, "spikesPerChunk", "(I)Lorg/spongepowered/api/world/gen/populator/IceSpike$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike$Builder#spikesPerChunk was null") }
    world_gen_populator_IceSpike_Builder { env: self.env, object: ret }
  }

  pub fn height(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_IceSpike_Builder {
    let ret = java_method!(self.env, self.object, "height", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/IceSpike$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike$Builder#height was null") }
    world_gen_populator_IceSpike_Builder { env: self.env, object: ret }
  }

  pub fn height_1(&self, param_1: i32) -> world_gen_populator_IceSpike_Builder {
    let ret = java_method!(self.env, self.object, "height", "(I)Lorg/spongepowered/api/world/gen/populator/IceSpike$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike$Builder#height was null") }
    world_gen_populator_IceSpike_Builder { env: self.env, object: ret }
  }

  pub fn extreme_spike_probability(&self, param_1: f64) -> world_gen_populator_IceSpike_Builder {
    let ret = java_method!(self.env, self.object, "extremeSpikeProbability", "(D)Lorg/spongepowered/api/world/gen/populator/IceSpike$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike$Builder#extremeSpikeProbability was null") }
    world_gen_populator_IceSpike_Builder { env: self.env, object: ret }
  }

  pub fn extreme_spike_increase(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_IceSpike_Builder {
    let ret = java_method!(self.env, self.object, "extremeSpikeIncrease", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/IceSpike$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike$Builder#extremeSpikeIncrease was null") }
    world_gen_populator_IceSpike_Builder { env: self.env, object: ret }
  }

  pub fn extreme_spike_increase_1(&self, param_1: i32) -> world_gen_populator_IceSpike_Builder {
    let ret = java_method!(self.env, self.object, "extremeSpikeIncrease", "(I)Lorg/spongepowered/api/world/gen/populator/IceSpike$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike$Builder#extremeSpikeIncrease was null") }
    world_gen_populator_IceSpike_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_IceSpike {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/IceSpike;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike$Builder#build was null") }
    world_gen_populator_IceSpike { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_IceSpike {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_IceSpike {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_IceSpike {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_IceSpike_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/IceSpike$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike#builder was null") }
    world_gen_populator_IceSpike_Builder { env: self.env, object: ret }
  }

  pub fn get_spikes_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getSpikesPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike#getSpikesPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_spikes_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setSpikesPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_spikes_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setSpikesPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_height(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getHeight", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike#getHeight was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_height(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setHeight", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_height_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setHeight", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_extreme_spike_probability(&self) -> f64 {
    java_method!(self.env, self.object, "getExtremeSpikeProbability", "()D", CallDoubleMethod)
  }

  pub fn set_extreme_spike_probability(&self, param_1: f64) {
    java_method!(self.env, self.object, "setExtremeSpikeProbability", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_extreme_spike_increase(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getExtremeSpikeIncrease", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/IceSpike#getExtremeSpikeIncrease was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_extreme_spike_increase(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setExtremeSpikeIncrease", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_extreme_spike_increase_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setExtremeSpikeIncrease", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Lake_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Lake_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Lake_Builder {
      env: env,
      object: object
    }
  }

  pub fn liquid_type(&self, param_1: block_BlockState) -> world_gen_populator_Lake_Builder {
    let ret = java_method!(self.env, self.object, "liquidType", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/world/gen/populator/Lake$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Lake$Builder#liquidType was null") }
    world_gen_populator_Lake_Builder { env: self.env, object: ret }
  }

  pub fn chance(&self, param_1: f64) -> world_gen_populator_Lake_Builder {
    let ret = java_method!(self.env, self.object, "chance", "(D)Lorg/spongepowered/api/world/gen/populator/Lake$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Lake$Builder#chance was null") }
    world_gen_populator_Lake_Builder { env: self.env, object: ret }
  }

  pub fn height(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Lake_Builder {
    let ret = java_method!(self.env, self.object, "height", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Lake$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Lake$Builder#height was null") }
    world_gen_populator_Lake_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Lake {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Lake;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Lake$Builder#build was null") }
    world_gen_populator_Lake { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Lake {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Lake {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Lake {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Lake_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Lake$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Lake#builder was null") }
    world_gen_populator_Lake_Builder { env: self.env, object: ret }
  }

  pub fn get_liquid_type(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getLiquidType", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Lake#getLiquidType was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn set_liquid_type(&self, param_1: block_BlockState) {
    java_method!(self.env, self.object, "setLiquidType", "(Lorg/spongepowered/api/block/BlockState;)V", CallVoidMethodA, param_1);
  }

  pub fn get_lake_probability(&self) -> f64 {
    java_method!(self.env, self.object, "getLakeProbability", "()D", CallDoubleMethod)
  }

  pub fn set_lake_probability(&self, param_1: f64) {
    java_method!(self.env, self.object, "setLakeProbability", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_height(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getHeight", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Lake#getHeight was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_height(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setHeight", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Melon_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Melon_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Melon_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Melon_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Melon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Melon$Builder#perChunk was null") }
    world_gen_populator_Melon_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_Melon_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Melon$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Melon$Builder#perChunk was null") }
    world_gen_populator_Melon_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Melon {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Melon;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Melon$Builder#build was null") }
    world_gen_populator_Melon { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Melon {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Melon {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Melon {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Melon_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Melon$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Melon#builder was null") }
    world_gen_populator_Melon_Builder { env: self.env, object: ret }
  }

  pub fn get_melons_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getMelonsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Melon#getMelonsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_melons_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setMelonsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_melons_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setMelonsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Mushroom_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Mushroom_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Mushroom_Builder {
      env: env,
      object: object
    }
  }

  pub fn types(&self, param_1: util_weighted_ChanceTable) -> world_gen_populator_Mushroom_Builder {
    let ret = java_method!(self.env, self.object, "types", "(Lorg/spongepowered/api/util/weighted/ChanceTable;)Lorg/spongepowered/api/world/gen/populator/Mushroom$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom$Builder#types was null") }
    world_gen_populator_Mushroom_Builder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: world_gen_type_MushroomType, param_2: f64) -> world_gen_populator_Mushroom_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/world/gen/type/MushroomType;D)Lorg/spongepowered/api/world/gen/populator/Mushroom$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom$Builder#type was null") }
    world_gen_populator_Mushroom_Builder { env: self.env, object: ret }
  }

  pub fn mushrooms_per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Mushroom_Builder {
    let ret = java_method!(self.env, self.object, "mushroomsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Mushroom$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom$Builder#mushroomsPerChunk was null") }
    world_gen_populator_Mushroom_Builder { env: self.env, object: ret }
  }

  pub fn mushrooms_per_chunk_1(&self, param_1: i32) -> world_gen_populator_Mushroom_Builder {
    let ret = java_method!(self.env, self.object, "mushroomsPerChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Mushroom$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom$Builder#mushroomsPerChunk was null") }
    world_gen_populator_Mushroom_Builder { env: self.env, object: ret }
  }

  pub fn supplier(&self, param_1: jobject) -> world_gen_populator_Mushroom_Builder {
    let ret = java_method!(self.env, self.object, "supplier", "(Ljava/util/function/Function;)Lorg/spongepowered/api/world/gen/populator/Mushroom$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom$Builder#supplier was null") }
    world_gen_populator_Mushroom_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Mushroom {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Mushroom;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom$Builder#build was null") }
    world_gen_populator_Mushroom { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Mushroom {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Mushroom {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Mushroom {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Mushroom_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Mushroom$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom#builder was null") }
    world_gen_populator_Mushroom_Builder { env: self.env, object: ret }
  }

  pub fn get_types(&self) -> util_weighted_ChanceTable {
    let ret = java_method!(self.env, self.object, "getTypes", "()Lorg/spongepowered/api/util/weighted/ChanceTable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom#getTypes was null") }
    util_weighted_ChanceTable { env: self.env, object: ret }
  }

  pub fn get_mushrooms_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getMushroomsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom#getMushroomsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_mushrooms_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setMushroomsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_mushrooms_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setMushroomsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_supplier_override(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSupplierOverride", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Mushroom#getSupplierOverride was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set_supplier_override(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setSupplierOverride", "(Ljava/util/function/Function;)V", CallVoidMethodA, param_1);
  }

  pub fn clear_supplier_override(&self) {
    java_method!(self.env, self.object, "clearSupplierOverride", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_NetherFire_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_NetherFire_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_NetherFire_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_NetherFire_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/NetherFire$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/NetherFire$Builder#perChunk was null") }
    world_gen_populator_NetherFire_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_NetherFire_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/NetherFire$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/NetherFire$Builder#perChunk was null") }
    world_gen_populator_NetherFire_Builder { env: self.env, object: ret }
  }

  pub fn per_cluster(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_NetherFire_Builder {
    let ret = java_method!(self.env, self.object, "perCluster", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/NetherFire$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/NetherFire$Builder#perCluster was null") }
    world_gen_populator_NetherFire_Builder { env: self.env, object: ret }
  }

  pub fn per_cluster_1(&self, param_1: i32) -> world_gen_populator_NetherFire_Builder {
    let ret = java_method!(self.env, self.object, "perCluster", "(I)Lorg/spongepowered/api/world/gen/populator/NetherFire$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/NetherFire$Builder#perCluster was null") }
    world_gen_populator_NetherFire_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_NetherFire {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/NetherFire;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/NetherFire$Builder#build was null") }
    world_gen_populator_NetherFire { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_NetherFire {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_NetherFire {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_NetherFire {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_NetherFire_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/NetherFire$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/NetherFire#builder was null") }
    world_gen_populator_NetherFire_Builder { env: self.env, object: ret }
  }

  pub fn get_clusters_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getClustersPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/NetherFire#getClustersPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_clusters_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setClustersPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_clusters_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setClustersPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_fire_per_cluster(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getFirePerCluster", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/NetherFire#getFirePerCluster was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_fire_per_cluster(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setFirePerCluster", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_fire_per_cluster_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setFirePerCluster", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Ore_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Ore_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Ore_Builder {
      env: env,
      object: object
    }
  }

  pub fn ore(&self, param_1: block_BlockState) -> world_gen_populator_Ore_Builder {
    let ret = java_method!(self.env, self.object, "ore", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/world/gen/populator/Ore$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore$Builder#ore was null") }
    world_gen_populator_Ore_Builder { env: self.env, object: ret }
  }

  pub fn size(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Ore_Builder {
    let ret = java_method!(self.env, self.object, "size", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Ore$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore$Builder#size was null") }
    world_gen_populator_Ore_Builder { env: self.env, object: ret }
  }

  pub fn size_1(&self, param_1: i32) -> world_gen_populator_Ore_Builder {
    let ret = java_method!(self.env, self.object, "size", "(I)Lorg/spongepowered/api/world/gen/populator/Ore$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore$Builder#size was null") }
    world_gen_populator_Ore_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Ore_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Ore$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore$Builder#perChunk was null") }
    world_gen_populator_Ore_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_Ore_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Ore$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore$Builder#perChunk was null") }
    world_gen_populator_Ore_Builder { env: self.env, object: ret }
  }

  pub fn height(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Ore_Builder {
    let ret = java_method!(self.env, self.object, "height", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Ore$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore$Builder#height was null") }
    world_gen_populator_Ore_Builder { env: self.env, object: ret }
  }

  pub fn placement_condition(&self, param_1: jobject) -> world_gen_populator_Ore_Builder {
    let ret = java_method!(self.env, self.object, "placementCondition", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/world/gen/populator/Ore$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore$Builder#placementCondition was null") }
    world_gen_populator_Ore_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Ore {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Ore;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore$Builder#build was null") }
    world_gen_populator_Ore { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Ore {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Ore {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Ore {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Ore_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Ore$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore#builder was null") }
    world_gen_populator_Ore_Builder { env: self.env, object: ret }
  }

  pub fn get_ore_block(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getOreBlock", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore#getOreBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn set_ore_block(&self, param_1: block_BlockState) {
    java_method!(self.env, self.object, "setOreBlock", "(Lorg/spongepowered/api/block/BlockState;)V", CallVoidMethodA, param_1);
  }

  pub fn get_deposit_size(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getDepositSize", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore#getDepositSize was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_deposit_size(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setDepositSize", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_deposit_size_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setDepositSize", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_deposits_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getDepositsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore#getDepositsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_deposits_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setDepositsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_deposits_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setDepositsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_height(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getHeight", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore#getHeight was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_height(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setHeight", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn get_placement_condition(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPlacementCondition", "()Ljava/util/function/Predicate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Ore#getPlacementCondition was null") }
    ret
  }

  pub fn set_placement_condition(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setPlacementCondition", "(Ljava/util/function/Predicate;)V", CallVoidMethodA, param_1);
  }

}


#[derive(Debug)]
pub struct world_gen_populator_Pumpkin_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Pumpkin_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Pumpkin_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Pumpkin_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Pumpkin$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Pumpkin$Builder#perChunk was null") }
    world_gen_populator_Pumpkin_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_Pumpkin_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Pumpkin$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Pumpkin$Builder#perChunk was null") }
    world_gen_populator_Pumpkin_Builder { env: self.env, object: ret }
  }

  pub fn chance(&self, param_1: f64) -> world_gen_populator_Pumpkin_Builder {
    let ret = java_method!(self.env, self.object, "chance", "(D)Lorg/spongepowered/api/world/gen/populator/Pumpkin$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Pumpkin$Builder#chance was null") }
    world_gen_populator_Pumpkin_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Pumpkin {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Pumpkin;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Pumpkin$Builder#build was null") }
    world_gen_populator_Pumpkin { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Pumpkin {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Pumpkin {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Pumpkin {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Pumpkin_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Pumpkin$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Pumpkin#builder was null") }
    world_gen_populator_Pumpkin_Builder { env: self.env, object: ret }
  }

  pub fn get_pumpkins_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getPumpkinsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Pumpkin#getPumpkinsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_pumpkins_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setPumpkinsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_pumpkins_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setPumpkinsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_pumpkin_chance(&self) -> f64 {
    java_method!(self.env, self.object, "getPumpkinChance", "()D", CallDoubleMethod)
  }

  pub fn set_pumpkin_chance(&self, param_1: f64) {
    java_method!(self.env, self.object, "setPumpkinChance", "(D)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_RandomBlock_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_RandomBlock_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_RandomBlock_Builder {
      env: env,
      object: object
    }
  }

  pub fn block(&self, param_1: block_BlockState) -> world_gen_populator_RandomBlock_Builder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/world/gen/populator/RandomBlock$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock$Builder#block was null") }
    world_gen_populator_RandomBlock_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_RandomBlock_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/RandomBlock$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock$Builder#perChunk was null") }
    world_gen_populator_RandomBlock_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_RandomBlock_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/RandomBlock$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock$Builder#perChunk was null") }
    world_gen_populator_RandomBlock_Builder { env: self.env, object: ret }
  }

  pub fn placement_target(&self, param_1: jobject) -> world_gen_populator_RandomBlock_Builder {
    let ret = java_method!(self.env, self.object, "placementTarget", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/world/gen/populator/RandomBlock$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock$Builder#placementTarget was null") }
    world_gen_populator_RandomBlock_Builder { env: self.env, object: ret }
  }

  pub fn height(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_RandomBlock_Builder {
    let ret = java_method!(self.env, self.object, "height", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/RandomBlock$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock$Builder#height was null") }
    world_gen_populator_RandomBlock_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_RandomBlock {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/RandomBlock;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock$Builder#build was null") }
    world_gen_populator_RandomBlock { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_RandomBlock {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_RandomBlock {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_RandomBlock {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_RandomBlock_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/RandomBlock$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock#builder was null") }
    world_gen_populator_RandomBlock_Builder { env: self.env, object: ret }
  }

  pub fn get_block(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getBlock", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock#getBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn set_block(&self, param_1: block_BlockState) {
    java_method!(self.env, self.object, "setBlock", "(Lorg/spongepowered/api/block/BlockState;)V", CallVoidMethodA, param_1);
  }

  pub fn get_attempts_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getAttemptsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock#getAttemptsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_attempts_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setAttemptsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_attempts_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setAttemptsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_height_range(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getHeightRange", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock#getHeightRange was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_height_range(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setHeightRange", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn get_placement_target(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPlacementTarget", "()Ljava/util/function/Predicate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomBlock#getPlacementTarget was null") }
    ret
  }

  pub fn get_placement_target_1(&self, param_1: jobject) {
    java_method!(self.env, self.object, "getPlacementTarget", "(Ljava/util/function/Predicate;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_RandomObject_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_RandomObject_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_RandomObject_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_RandomObject_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/RandomObject$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject$Builder#perChunk was null") }
    world_gen_populator_RandomObject_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_RandomObject_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/RandomObject$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject$Builder#perChunk was null") }
    world_gen_populator_RandomObject_Builder { env: self.env, object: ret }
  }

  pub fn height(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_RandomObject_Builder {
    let ret = java_method!(self.env, self.object, "height", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/RandomObject$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject$Builder#height was null") }
    world_gen_populator_RandomObject_Builder { env: self.env, object: ret }
  }

  pub fn object(&self, param_1: world_gen_PopulatorObject) -> world_gen_populator_RandomObject_Builder {
    let ret = java_method!(self.env, self.object, "object", "(Lorg/spongepowered/api/world/gen/PopulatorObject;)Lorg/spongepowered/api/world/gen/populator/RandomObject$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject$Builder#object was null") }
    world_gen_populator_RandomObject_Builder { env: self.env, object: ret }
  }

  pub fn spawn_chance(&self, param_1: f64) -> world_gen_populator_RandomObject_Builder {
    let ret = java_method!(self.env, self.object, "spawnChance", "(D)Lorg/spongepowered/api/world/gen/populator/RandomObject$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject$Builder#spawnChance was null") }
    world_gen_populator_RandomObject_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_RandomObject {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/RandomObject;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject$Builder#build was null") }
    world_gen_populator_RandomObject { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_RandomObject {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_RandomObject {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_RandomObject {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_RandomObject_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/RandomObject$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject#builder was null") }
    world_gen_populator_RandomObject_Builder { env: self.env, object: ret }
  }

  pub fn get_attempts_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getAttemptsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject#getAttemptsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_attempts_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setAttemptsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_attempts_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setAttemptsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_height_range(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getHeightRange", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject#getHeightRange was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_height_range(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setHeightRange", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn get_object(&self) -> world_gen_PopulatorObject {
    let ret = java_method!(self.env, self.object, "getObject", "()Lorg/spongepowered/api/world/gen/PopulatorObject;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/RandomObject#getObject was null") }
    world_gen_PopulatorObject { env: self.env, object: ret }
  }

  pub fn set_object(&self, param_1: world_gen_PopulatorObject) {
    java_method!(self.env, self.object, "setObject", "(Lorg/spongepowered/api/world/gen/PopulatorObject;)V", CallVoidMethodA, param_1);
  }

  pub fn get_spawn_chance(&self) -> f64 {
    java_method!(self.env, self.object, "getSpawnChance", "()D", CallDoubleMethod)
  }

  pub fn set_spawn_chance(&self, param_1: f64) {
    java_method!(self.env, self.object, "setSpawnChance", "(D)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Reed_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Reed_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Reed_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Reed_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Reed$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Reed$Builder#perChunk was null") }
    world_gen_populator_Reed_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_Reed_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Reed$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Reed$Builder#perChunk was null") }
    world_gen_populator_Reed_Builder { env: self.env, object: ret }
  }

  pub fn reed_height(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Reed_Builder {
    let ret = java_method!(self.env, self.object, "reedHeight", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Reed$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Reed$Builder#reedHeight was null") }
    world_gen_populator_Reed_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Reed {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Reed;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Reed$Builder#build was null") }
    world_gen_populator_Reed { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Reed {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Reed {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Reed {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Reed_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Reed$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Reed#builder was null") }
    world_gen_populator_Reed_Builder { env: self.env, object: ret }
  }

  pub fn get_reeds_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getReedsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Reed#getReedsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_reeds_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setReedsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_reeds_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setReedsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_reed_height(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getReedHeight", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Reed#getReedHeight was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_reed_height(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setReedHeight", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_SeaFloor_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_SeaFloor_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_SeaFloor_Builder {
      env: env,
      object: object
    }
  }

  pub fn block(&self, param_1: block_BlockState) -> world_gen_populator_SeaFloor_Builder {
    let ret = java_method!(self.env, self.object, "block", "(Lorg/spongepowered/api/block/BlockState;)Lorg/spongepowered/api/world/gen/populator/SeaFloor$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor$Builder#block was null") }
    world_gen_populator_SeaFloor_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_SeaFloor_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/SeaFloor$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor$Builder#perChunk was null") }
    world_gen_populator_SeaFloor_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_SeaFloor_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/SeaFloor$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor$Builder#perChunk was null") }
    world_gen_populator_SeaFloor_Builder { env: self.env, object: ret }
  }

  pub fn radius(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_SeaFloor_Builder {
    let ret = java_method!(self.env, self.object, "radius", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/SeaFloor$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor$Builder#radius was null") }
    world_gen_populator_SeaFloor_Builder { env: self.env, object: ret }
  }

  pub fn radius_1(&self, param_1: f64) -> world_gen_populator_SeaFloor_Builder {
    let ret = java_method!(self.env, self.object, "radius", "(D)Lorg/spongepowered/api/world/gen/populator/SeaFloor$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor$Builder#radius was null") }
    world_gen_populator_SeaFloor_Builder { env: self.env, object: ret }
  }

  pub fn depth(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_SeaFloor_Builder {
    let ret = java_method!(self.env, self.object, "depth", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/SeaFloor$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor$Builder#depth was null") }
    world_gen_populator_SeaFloor_Builder { env: self.env, object: ret }
  }

  pub fn depth_1(&self, param_1: i32) -> world_gen_populator_SeaFloor_Builder {
    let ret = java_method!(self.env, self.object, "depth", "(I)Lorg/spongepowered/api/world/gen/populator/SeaFloor$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor$Builder#depth was null") }
    world_gen_populator_SeaFloor_Builder { env: self.env, object: ret }
  }

  pub fn replace(&self, param_1: jobject) -> world_gen_populator_SeaFloor_Builder {
    let ret = java_method!(self.env, self.object, "replace", "(Ljava/util/function/Predicate;)Lorg/spongepowered/api/world/gen/populator/SeaFloor$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor$Builder#replace was null") }
    world_gen_populator_SeaFloor_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_SeaFloor {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/SeaFloor;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor$Builder#build was null") }
    world_gen_populator_SeaFloor { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_SeaFloor {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_SeaFloor {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_SeaFloor {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_SeaFloor_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/SeaFloor$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor#builder was null") }
    world_gen_populator_SeaFloor_Builder { env: self.env, object: ret }
  }

  pub fn get_block(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getBlock", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor#getBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn set_block(&self, param_1: block_BlockState) {
    java_method!(self.env, self.object, "setBlock", "(Lorg/spongepowered/api/block/BlockState;)V", CallVoidMethodA, param_1);
  }

  pub fn get_discs_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getDiscsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor#getDiscsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_discs_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setDiscsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_discs_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setDiscsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_radius(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getRadius", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor#getRadius was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_radius(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setRadius", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_radius_1(&self, param_1: f64) {
    java_method!(self.env, self.object, "setRadius", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_depth(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getDepth", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor#getDepth was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_depth(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setDepth", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_depth_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setDepth", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_valid_blocks_to_replace(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValidBlocksToReplace", "()Ljava/util/function/Predicate;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/SeaFloor#getValidBlocksToReplace was null") }
    ret
  }

  pub fn set_valid_blocks_to_replace(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setValidBlocksToReplace", "(Ljava/util/function/Predicate;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Shrub_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Shrub_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Shrub_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Shrub_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Shrub$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub$Builder#perChunk was null") }
    world_gen_populator_Shrub_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_Shrub_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Shrub$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub$Builder#perChunk was null") }
    world_gen_populator_Shrub_Builder { env: self.env, object: ret }
  }

  pub fn types(&self, param_1: util_weighted_WeightedTable) -> world_gen_populator_Shrub_Builder {
    let ret = java_method!(self.env, self.object, "types", "(Lorg/spongepowered/api/util/weighted/WeightedTable;)Lorg/spongepowered/api/world/gen/populator/Shrub$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub$Builder#types was null") }
    world_gen_populator_Shrub_Builder { env: self.env, object: ret }
  }

  pub fn type_(&self, param_1: data_type_ShrubType, param_2: i32) -> world_gen_populator_Shrub_Builder {
    let ret = java_method!(self.env, self.object, "type", "(Lorg/spongepowered/api/data/type/ShrubType;I)Lorg/spongepowered/api/world/gen/populator/Shrub$Builder;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub$Builder#type was null") }
    world_gen_populator_Shrub_Builder { env: self.env, object: ret }
  }

  pub fn supplier(&self, param_1: jobject) -> world_gen_populator_Shrub_Builder {
    let ret = java_method!(self.env, self.object, "supplier", "(Ljava/util/function/Function;)Lorg/spongepowered/api/world/gen/populator/Shrub$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub$Builder#supplier was null") }
    world_gen_populator_Shrub_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Shrub {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Shrub;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub$Builder#build was null") }
    world_gen_populator_Shrub { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Shrub {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Shrub {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Shrub {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Shrub_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Shrub$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub#builder was null") }
    world_gen_populator_Shrub_Builder { env: self.env, object: ret }
  }

  pub fn get_types(&self) -> util_weighted_WeightedTable {
    let ret = java_method!(self.env, self.object, "getTypes", "()Lorg/spongepowered/api/util/weighted/WeightedTable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub#getTypes was null") }
    util_weighted_WeightedTable { env: self.env, object: ret }
  }

  pub fn get_shrubs_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getShrubsPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub#getShrubsPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_shrubs_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setShrubsPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_shrubs_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setShrubsPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_supplier_override(&self) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getSupplierOverride", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Shrub#getSupplierOverride was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn set_supplier_override(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setSupplierOverride", "(Ljava/util/function/Function;)V", CallVoidMethodA, param_1);
  }

  pub fn clear_supplier_override(&self) {
    java_method!(self.env, self.object, "clearSupplierOverride", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Vine_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Vine_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Vine_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_Vine_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/Vine$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Vine$Builder#perChunk was null") }
    world_gen_populator_Vine_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_Vine_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/Vine$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Vine$Builder#perChunk was null") }
    world_gen_populator_Vine_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_Vine {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/Vine;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Vine$Builder#build was null") }
    world_gen_populator_Vine { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_Vine {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_Vine {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_Vine {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_Vine_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/Vine$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Vine#builder was null") }
    world_gen_populator_Vine_Builder { env: self.env, object: ret }
  }

  pub fn get_vines_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getVinesPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/Vine#getVinesPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_vines_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setVinesPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_vines_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setVinesPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_populator_WaterLily_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_WaterLily_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_WaterLily_Builder {
      env: env,
      object: object
    }
  }

  pub fn per_chunk(&self, param_1: util_weighted_VariableAmount) -> world_gen_populator_WaterLily_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)Lorg/spongepowered/api/world/gen/populator/WaterLily$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/WaterLily$Builder#perChunk was null") }
    world_gen_populator_WaterLily_Builder { env: self.env, object: ret }
  }

  pub fn per_chunk_1(&self, param_1: i32) -> world_gen_populator_WaterLily_Builder {
    let ret = java_method!(self.env, self.object, "perChunk", "(I)Lorg/spongepowered/api/world/gen/populator/WaterLily$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/WaterLily$Builder#perChunk was null") }
    world_gen_populator_WaterLily_Builder { env: self.env, object: ret }
  }

  pub fn build(&self) -> world_gen_populator_WaterLily {
    let ret = java_method!(self.env, self.object, "build", "()Lorg/spongepowered/api/world/gen/populator/WaterLily;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/WaterLily$Builder#build was null") }
    world_gen_populator_WaterLily { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_populator_WaterLily {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_populator_WaterLily {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_populator_WaterLily {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_gen_populator_WaterLily_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/gen/populator/WaterLily$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/WaterLily#builder was null") }
    world_gen_populator_WaterLily_Builder { env: self.env, object: ret }
  }

  pub fn get_water_lily_per_chunk(&self) -> util_weighted_VariableAmount {
    let ret = java_method!(self.env, self.object, "getWaterLilyPerChunk", "()Lorg/spongepowered/api/util/weighted/VariableAmount;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/populator/WaterLily#getWaterLilyPerChunk was null") }
    util_weighted_VariableAmount { env: self.env, object: ret }
  }

  pub fn set_water_lily_per_chunk(&self, param_1: util_weighted_VariableAmount) {
    java_method!(self.env, self.object, "setWaterLilyPerChunk", "(Lorg/spongepowered/api/util/weighted/VariableAmount;)V", CallVoidMethodA, param_1);
  }

  pub fn set_water_lily_per_chunk_1(&self, param_1: i32) {
    java_method!(self.env, self.object, "setWaterLilyPerChunk", "(I)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_Populator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_Populator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_Populator {
      env: env,
      object: object
    }
  }

  pub fn get_type(&self) -> world_gen_PopulatorType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/world/gen/PopulatorType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/Populator#getType was null") }
    world_gen_PopulatorType { env: self.env, object: ret }
  }

  pub fn populate(&self, param_1: world_World, param_2: world_extent_Extent, param_3: jobject) {
    java_method!(self.env, self.object, "populate", "(Lorg/spongepowered/api/world/World;Lorg/spongepowered/api/world/extent/Extent;Ljava/util/Random;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}

#[derive(Debug)]
pub struct world_gen_PopulatorObject {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_PopulatorObject {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_PopulatorObject {
      env: env,
      object: object
    }
  }

  pub fn can_place_at(&self, param_1: world_World, param_2: i32, param_3: i32, param_4: i32) -> bool {
    java_method!(self.env, self.object, "canPlaceAt", "(Lorg/spongepowered/api/world/World;III)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn place_object(&self, param_1: world_World, param_2: jobject, param_3: i32, param_4: i32, param_5: i32) {
    java_method!(self.env, self.object, "placeObject", "(Lorg/spongepowered/api/world/World;Ljava/util/Random;III)V", CallVoidMethodA, param_1, param_2, param_3, param_4, param_5);
  }

}

#[derive(Debug)]
pub struct world_gen_PopulatorObjects {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_PopulatorObjects {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_PopulatorObjects {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_gen_PopulatorType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_PopulatorType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_PopulatorType {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_gen_PopulatorTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_PopulatorTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_PopulatorTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_gen_type_BiomeTreeType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_type_BiomeTreeType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_type_BiomeTreeType {
      env: env,
      object: object
    }
  }

  pub fn get_populator_object(&self) -> world_gen_PopulatorObject {
    let ret = java_method!(self.env, self.object, "getPopulatorObject", "()Lorg/spongepowered/api/world/gen/PopulatorObject;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/type/BiomeTreeType#getPopulatorObject was null") }
    world_gen_PopulatorObject { env: self.env, object: ret }
  }

  pub fn set_populator_object(&self, param_1: world_gen_PopulatorObject) {
    java_method!(self.env, self.object, "setPopulatorObject", "(Lorg/spongepowered/api/world/gen/PopulatorObject;)V", CallVoidMethodA, param_1);
  }

  pub fn has_large_equivalent(&self) -> bool {
    java_method!(self.env, self.object, "hasLargeEquivalent", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_large_populator_object(&self) -> Option<world_gen_PopulatorObject> {
    let ret = java_method!(self.env, self.object, "getLargePopulatorObject", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/type/BiomeTreeType#getLargePopulatorObject was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_gen_PopulatorObject { env: self.env, object: unwrapped }) }
  }

  pub fn set_large_populator_object(&self, param_1: world_gen_PopulatorObject) {
    java_method!(self.env, self.object, "setLargePopulatorObject", "(Lorg/spongepowered/api/world/gen/PopulatorObject;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_type_BiomeTreeTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_type_BiomeTreeTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_type_BiomeTreeTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_gen_type_MushroomType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_type_MushroomType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_type_MushroomType {
      env: env,
      object: object
    }
  }

  pub fn get_populator_object(&self) -> world_gen_PopulatorObject {
    let ret = java_method!(self.env, self.object, "getPopulatorObject", "()Lorg/spongepowered/api/world/gen/PopulatorObject;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/type/MushroomType#getPopulatorObject was null") }
    world_gen_PopulatorObject { env: self.env, object: ret }
  }

  pub fn set_populator_object(&self, param_1: world_gen_PopulatorObject) {
    java_method!(self.env, self.object, "setPopulatorObject", "(Lorg/spongepowered/api/world/gen/PopulatorObject;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_gen_type_MushroomTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_type_MushroomTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_type_MushroomTypes {
      env: env,
      object: object
    }
  }

}


#[derive(Debug)]
pub struct world_gen_WorldGenerator {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_WorldGenerator {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_WorldGenerator {
      env: env,
      object: object
    }
  }

  pub fn get_base_generation_populator(&self) -> world_gen_GenerationPopulator {
    let ret = java_method!(self.env, self.object, "getBaseGenerationPopulator", "()Lorg/spongepowered/api/world/gen/GenerationPopulator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/WorldGenerator#getBaseGenerationPopulator was null") }
    world_gen_GenerationPopulator { env: self.env, object: ret }
  }

  pub fn set_base_generation_populator(&self, param_1: world_gen_GenerationPopulator) {
    java_method!(self.env, self.object, "setBaseGenerationPopulator", "(Lorg/spongepowered/api/world/gen/GenerationPopulator;)V", CallVoidMethodA, param_1);
  }

  pub fn get_generation_populators(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGenerationPopulators", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/WorldGenerator#getGenerationPopulators was null") }
    ret
  }

  pub fn get_generation_populators_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getGenerationPopulators", "(Ljava/lang/Class;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/WorldGenerator#getGenerationPopulators was null") }
    ret
  }

  pub fn get_populators(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPopulators", "()Ljava/util/List;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/WorldGenerator#getPopulators was null") }
    ret
  }

  pub fn get_populators_1(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getPopulators", "(Ljava/lang/Class;)Ljava/util/List;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/WorldGenerator#getPopulators was null") }
    ret
  }

  pub fn get_biome_generator(&self) -> world_gen_BiomeGenerator {
    let ret = java_method!(self.env, self.object, "getBiomeGenerator", "()Lorg/spongepowered/api/world/gen/BiomeGenerator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/WorldGenerator#getBiomeGenerator was null") }
    world_gen_BiomeGenerator { env: self.env, object: ret }
  }

  pub fn set_biome_generator(&self, param_1: world_gen_BiomeGenerator) {
    java_method!(self.env, self.object, "setBiomeGenerator", "(Lorg/spongepowered/api/world/gen/BiomeGenerator;)V", CallVoidMethodA, param_1);
  }

  pub fn get_biome_settings(&self, param_1: world_biome_BiomeType) -> world_biome_BiomeGenerationSettings {
    let ret = java_method!(self.env, self.object, "getBiomeSettings", "(Lorg/spongepowered/api/world/biome/BiomeType;)Lorg/spongepowered/api/world/biome/BiomeGenerationSettings;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/gen/WorldGenerator#getBiomeSettings was null") }
    world_biome_BiomeGenerationSettings { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_gen_WorldGeneratorModifier {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_WorldGeneratorModifier {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_WorldGeneratorModifier {
      env: env,
      object: object
    }
  }

  pub fn modify_world_generator(&self, param_1: world_storage_WorldProperties, param_2: data_DataContainer, param_3: world_gen_WorldGenerator) {
    java_method!(self.env, self.object, "modifyWorldGenerator", "(Lorg/spongepowered/api/world/storage/WorldProperties;Lorg/spongepowered/api/data/DataContainer;Lorg/spongepowered/api/world/gen/WorldGenerator;)V", CallVoidMethodA, param_1, param_2, param_3);
  }

}

#[derive(Debug)]
pub struct world_gen_WorldGeneratorModifiers {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_gen_WorldGeneratorModifiers {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_gen_WorldGeneratorModifiers {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_GeneratorType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_GeneratorType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_GeneratorType {
      env: env,
      object: object
    }
  }

  pub fn get_generator_settings(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "getGeneratorSettings", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/GeneratorType#getGeneratorSettings was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn create_generator(&self, param_1: world_World) -> world_gen_WorldGenerator {
    let ret = java_method!(self.env, self.object, "createGenerator", "(Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/world/gen/WorldGenerator;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/GeneratorType#createGenerator was null") }
    world_gen_WorldGenerator { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_GeneratorTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_GeneratorTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_GeneratorTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_Locatable {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_Locatable {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_Locatable {
      env: env,
      object: object
    }
  }

  pub fn get_location(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Locatable#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_world(&self) -> world_World {
    let ret = java_method!(self.env, self.object, "getWorld", "()Lorg/spongepowered/api/world/World;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Locatable#getWorld was null") }
    world_World { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_Location {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_Location {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_Location {
      env: env,
      object: object
    }
  }

  pub fn new(&self, param_1: world_extent_Extent, param_2: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/extent/Extent;Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/world/Location", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#<init> was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn new_1(&self, param_1: world_extent_Extent, param_2: f64, param_3: f64, param_4: f64) -> world_Location {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/extent/Extent;DDD)Lorg/spongepowered/api/world/Location", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#<init> was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn new_2(&self, param_1: world_extent_Extent, param_2: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/extent/Extent;Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/Location", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#<init> was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn new_3(&self, param_1: world_extent_Extent, param_2: i32, param_3: i32, param_4: i32) -> world_Location {
    let ret = java_method!(self.env, self.object, "<init>", "(Lorg/spongepowered/api/world/extent/Extent;III)Lorg/spongepowered/api/world/Location", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#<init> was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_extent(&self) -> world_extent_Extent {
    let ret = java_method!(self.env, self.object, "getExtent", "()Lorg/spongepowered/api/world/extent/Extent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getExtent was null") }
    world_extent_Extent { env: self.env, object: ret }
  }

  pub fn get_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPosition", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getPosition was null") }
    ret
  }

  pub fn get_block_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBlockPosition", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getBlockPosition was null") }
    ret
  }

  pub fn get_chunk_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getChunkPosition", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getChunkPosition was null") }
    ret
  }

  pub fn get_biome_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getBiomePosition", "()Lcom/flowpowered/math/vector/Vector2i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getBiomePosition was null") }
    ret
  }

  pub fn get_x(&self) -> f64 {
    java_method!(self.env, self.object, "getX", "()D", CallDoubleMethod)
  }

  pub fn get_y(&self) -> f64 {
    java_method!(self.env, self.object, "getY", "()D", CallDoubleMethod)
  }

  pub fn get_z(&self) -> f64 {
    java_method!(self.env, self.object, "getZ", "()D", CallDoubleMethod)
  }

  pub fn get_block_x(&self) -> i32 {
    java_method!(self.env, self.object, "getBlockX", "()I", CallIntMethod)
  }

  pub fn get_block_y(&self) -> i32 {
    java_method!(self.env, self.object, "getBlockY", "()I", CallIntMethod)
  }

  pub fn get_block_z(&self) -> i32 {
    java_method!(self.env, self.object, "getBlockZ", "()I", CallIntMethod)
  }

  pub fn in_extent(&self, param_1: world_extent_Extent) -> bool {
    java_method!(self.env, self.object, "inExtent", "(Lorg/spongepowered/api/world/extent/Extent;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn has_biome(&self) -> bool {
    java_method!(self.env, self.object, "hasBiome", "()Z", CallBooleanMethod) == 1
  }

  pub fn has_block(&self) -> bool {
    java_method!(self.env, self.object, "hasBlock", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_extent(&self, param_1: world_extent_Extent) -> world_Location {
    let ret = java_method!(self.env, self.object, "setExtent", "(Lorg/spongepowered/api/world/extent/Extent;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#setExtent was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn set_position(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "setPosition", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#setPosition was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn sub(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "sub", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#sub was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn sub_1(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "sub", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#sub was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn sub_2(&self, param_1: f64, param_2: f64, param_3: f64) -> world_Location {
    let ret = java_method!(self.env, self.object, "sub", "(DDD)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#sub was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn add(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "add", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#add was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn add_1(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "add", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#add was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn add_2(&self, param_1: f64, param_2: f64, param_3: f64) -> world_Location {
    let ret = java_method!(self.env, self.object, "add", "(DDD)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#add was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn map(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "map", "(Ljava/util/function/BiFunction;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#map was null") }
    ret
  }

  pub fn map_block(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "mapBlock", "(Ljava/util/function/BiFunction;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#mapBlock was null") }
    ret
  }

  pub fn map_chunk(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "mapChunk", "(Ljava/util/function/BiFunction;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#mapChunk was null") }
    ret
  }

  pub fn map_biome(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "mapBiome", "(Ljava/util/function/BiFunction;)Ljava/lang/Object;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#mapBiome was null") }
    ret
  }

  pub fn get_relative(&self, param_1: util_Direction) -> world_Location {
    let ret = java_method!(self.env, self.object, "getRelative", "(Lorg/spongepowered/api/util/Direction;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getRelative was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_block_relative(&self, param_1: util_Direction) -> world_Location {
    let ret = java_method!(self.env, self.object, "getBlockRelative", "(Lorg/spongepowered/api/util/Direction;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getBlockRelative was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_biome(&self) -> world_biome_BiomeType {
    let ret = java_method!(self.env, self.object, "getBiome", "()Lorg/spongepowered/api/world/biome/BiomeType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getBiome was null") }
    world_biome_BiomeType { env: self.env, object: ret }
  }

  pub fn get_block_type(&self) -> block_BlockType {
    let ret = java_method!(self.env, self.object, "getBlockType", "()Lorg/spongepowered/api/block/BlockType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getBlockType was null") }
    block_BlockType { env: self.env, object: ret }
  }

  pub fn get_block(&self) -> block_BlockState {
    let ret = java_method!(self.env, self.object, "getBlock", "()Lorg/spongepowered/api/block/BlockState;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getBlock was null") }
    block_BlockState { env: self.env, object: ret }
  }

  pub fn has_tile_entity(&self) -> bool {
    java_method!(self.env, self.object, "hasTileEntity", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_tile_entity(&self) -> Option<block_tileentity_TileEntity> {
    let ret = java_method!(self.env, self.object, "getTileEntity", "()Ljava/util/Optional;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getTileEntity was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(block_tileentity_TileEntity { env: self.env, object: unwrapped }) }
  }

  pub fn set_block(&self, param_1: block_BlockState, param_2: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlock", "(Lorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn set_block_1(&self, param_1: block_BlockState, param_2: world_BlockChangeFlag, param_3: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlock", "(Lorg/spongepowered/api/block/BlockState;Lorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn set_block_type(&self, param_1: block_BlockType, param_2: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlockType", "(Lorg/spongepowered/api/block/BlockType;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn set_block_type_1(&self, param_1: block_BlockType, param_2: world_BlockChangeFlag, param_3: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "setBlockType", "(Lorg/spongepowered/api/block/BlockType;Lorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn restore_snapshot(&self, param_1: block_BlockSnapshot, param_2: bool, param_3: world_BlockChangeFlag, param_4: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "restoreSnapshot", "(Lorg/spongepowered/api/block/BlockSnapshot;ZLorg/spongepowered/api/world/BlockChangeFlag;Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4) == 1
  }

  pub fn remove_block(&self, param_1: event_cause_Cause) -> bool {
    java_method!(self.env, self.object, "removeBlock", "(Lorg/spongepowered/api/event/cause/Cause;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn remove(&self, param_1: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(Ljava/lang/Class;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove_1(&self, param_1: data_value_BaseValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/value/BaseValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn remove_2(&self, param_1: data_key_Key) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "remove", "(Lorg/spongepowered/api/data/key/Key;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#remove was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn create_snapshot(&self) -> block_BlockSnapshot {
    let ret = java_method!(self.env, self.object, "createSnapshot", "()Lorg/spongepowered/api/block/BlockSnapshot;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#createSnapshot was null") }
    block_BlockSnapshot { env: self.env, object: ret }
  }

  pub fn get_scheduled_updates(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getScheduledUpdates", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getScheduledUpdates was null") }
    ret
  }

  pub fn add_scheduled_update(&self, param_1: i32, param_2: i32) -> block_ScheduledBlockUpdate {
    let ret = java_method!(self.env, self.object, "addScheduledUpdate", "(II)Lorg/spongepowered/api/block/ScheduledBlockUpdate;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#addScheduledUpdate was null") }
    block_ScheduledBlockUpdate { env: self.env, object: ret }
  }

  pub fn remove_scheduled_update(&self, param_1: block_ScheduledBlockUpdate) {
    java_method!(self.env, self.object, "removeScheduledUpdate", "(Lorg/spongepowered/api/block/ScheduledBlockUpdate;)V", CallVoidMethodA, param_1);
  }

  pub fn get_property(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getProperty", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getProperty was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_applicable_properties(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getApplicableProperties", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getApplicableProperties was null") }
    ret
  }

  pub fn validate_raw_data(&self, param_1: data_DataContainer) -> bool {
    java_method!(self.env, self.object, "validateRawData", "(Lorg/spongepowered/api/data/DataContainer;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn set_raw_data(&self, param_1: data_DataContainer) {
    java_method!(self.env, self.object, "setRawData", "(Lorg/spongepowered/api/data/DataContainer;)V", CallVoidMethodA, param_1);
  }

  pub fn get_content_version(&self) -> i32 {
    java_method!(self.env, self.object, "getContentVersion", "()I", CallIntMethod)
  }

  pub fn to_container(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "toContainer", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#toContainer was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_1(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "get", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#get was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_or_create(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getOrCreate", "(Ljava/lang/Class;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getOrCreate was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn offer(&self, param_1: data_key_Key, param_2: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1(&self, param_1: data_key_Key, param_2: jobject, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/key/Key;Ljava/lang/Object;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_2(&self, param_1: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Ljava/lang/Iterable;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_3(&self, param_1: jobject, param_2: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Ljava/lang/Iterable;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_4(&self, param_1: data_value_BaseValue) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/BaseValue;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_5(&self, param_1: data_manipulator_DataManipulator) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_6(&self, param_1: data_manipulator_DataManipulator, param_2: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_7(&self, param_1: data_manipulator_DataManipulator, param_2: data_merge_MergeFunction, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/manipulator/DataManipulator;Lorg/spongepowered/api/data/merge/MergeFunction;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn undo(&self, param_1: data_DataTransactionResult) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "undo", "(Lorg/spongepowered/api/data/DataTransactionResult;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#undo was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn supports(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "supports", "(Ljava/lang/Class;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn supports_1(&self, param_1: data_key_Key) -> bool {
    java_method!(self.env, self.object, "supports", "(Lorg/spongepowered/api/data/key/Key;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn transform(&self, param_1: data_key_Key, param_2: jobject) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "transform", "(Lorg/spongepowered/api/data/key/Key;Ljava/util/function/Function;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#transform was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from(&self, param_1: data_DataHolder) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lorg/spongepowered/api/data/DataHolder;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_1(&self, param_1: data_DataHolder, param_2: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lorg/spongepowered/api/data/DataHolder;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn get_containers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getContainers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getContainers was null") }
    ret
  }

  pub fn get_value(&self, param_1: data_key_Key) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getValue", "(Lorg/spongepowered/api/data/key/Key;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getValue was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn copy(&self) -> data_DataHolder {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/DataHolder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#copy was null") }
    data_DataHolder { env: self.env, object: ret }
  }

  pub fn get_keys(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getKeys", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getKeys was null") }
    ret
  }

  pub fn get_values(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getValues", "()Ljava/util/Set;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#getValues was null") }
    ret
  }

  pub fn to_string(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "toString", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#toString was null") }
    ret
  }

  pub fn hash_code(&self) -> i32 {
    java_method!(self.env, self.object, "hashCode", "()I", CallIntMethod)
  }

  pub fn equals(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "equals", "(Ljava/lang/Object;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn copy_from_2(&self, param_1: data_value_mutable_CompositeValueStore, param_2: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lorg/spongepowered/api/data/value/mutable/CompositeValueStore;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_from_3(&self, param_1: data_value_mutable_CompositeValueStore) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "copyFrom", "(Lorg/spongepowered/api/data/value/mutable/CompositeValueStore;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#copyFrom was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_8(&self, param_1: data_value_ValueContainer, param_2: data_merge_MergeFunction, param_3: event_cause_Cause) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/merge/MergeFunction;Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_9(&self, param_1: data_value_ValueContainer, param_2: data_merge_MergeFunction) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/ValueContainer;Lorg/spongepowered/api/data/merge/MergeFunction;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn offer_1_0(&self, param_1: data_value_ValueContainer) -> data_DataTransactionResult {
    let ret = java_method!(self.env, self.object, "offer", "(Lorg/spongepowered/api/data/value/ValueContainer;)Lorg/spongepowered/api/data/DataTransactionResult;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#offer was null") }
    data_DataTransactionResult { env: self.env, object: ret }
  }

  pub fn copy_1(&self) -> data_value_ValueContainer {
    let ret = java_method!(self.env, self.object, "copy", "()Lorg/spongepowered/api/data/value/ValueContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/Location#copy was null") }
    data_value_ValueContainer { env: self.env, object: ret }
  }

}


#[derive(Debug)]
pub struct world_PortalAgent {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_PortalAgent {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_PortalAgent {
      env: env,
      object: object
    }
  }

  pub fn get_search_radius(&self) -> i32 {
    java_method!(self.env, self.object, "getSearchRadius", "()I", CallIntMethod)
  }

  pub fn set_search_radius(&self, param_1: i32) -> world_PortalAgent {
    let ret = java_method!(self.env, self.object, "setSearchRadius", "(I)Lorg/spongepowered/api/world/PortalAgent;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/PortalAgent#setSearchRadius was null") }
    world_PortalAgent { env: self.env, object: ret }
  }

  pub fn get_creation_radius(&self) -> i32 {
    java_method!(self.env, self.object, "getCreationRadius", "()I", CallIntMethod)
  }

  pub fn set_creation_radius(&self, param_1: i32) -> world_PortalAgent {
    let ret = java_method!(self.env, self.object, "setCreationRadius", "(I)Lorg/spongepowered/api/world/PortalAgent;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/PortalAgent#setCreationRadius was null") }
    world_PortalAgent { env: self.env, object: ret }
  }

  pub fn find_or_create_portal(&self, param_1: world_Location) -> Option<world_Location> {
    let ret = java_method!(self.env, self.object, "findOrCreatePortal", "(Lorg/spongepowered/api/world/Location;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/PortalAgent#findOrCreatePortal was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Location { env: self.env, object: unwrapped }) }
  }

  pub fn find_portal(&self, param_1: world_Location) -> Option<world_Location> {
    let ret = java_method!(self.env, self.object, "findPortal", "(Lorg/spongepowered/api/world/Location;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/PortalAgent#findPortal was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Location { env: self.env, object: unwrapped }) }
  }

  pub fn create_portal(&self, param_1: world_Location) -> Option<world_Location> {
    let ret = java_method!(self.env, self.object, "createPortal", "(Lorg/spongepowered/api/world/Location;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/PortalAgent#createPortal was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Location { env: self.env, object: unwrapped }) }
  }

  pub fn get_type(&self) -> world_PortalAgentType {
    let ret = java_method!(self.env, self.object, "getType", "()Lorg/spongepowered/api/world/PortalAgentType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/PortalAgent#getType was null") }
    world_PortalAgentType { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_PortalAgentType {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_PortalAgentType {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_PortalAgentType {
      env: env,
      object: object
    }
  }

  pub fn get_portal_agent_class(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPortalAgentClass", "()Ljava/lang/Class;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/PortalAgentType#getPortalAgentClass was null") }
    ret
  }

}

#[derive(Debug)]
pub struct world_PortalAgentTypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_PortalAgentTypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_PortalAgentTypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_SerializationBehavior {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_SerializationBehavior {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_SerializationBehavior {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_SerializationBehaviors {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_SerializationBehaviors {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_SerializationBehaviors {
      env: env,
      object: object
    }
  }

  pub fn new(&self) -> world_SerializationBehaviors {
    let ret = java_method!(self.env, self.object, "<init>", "()Lorg/spongepowered/api/world/SerializationBehaviors", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/SerializationBehaviors#<init> was null") }
    world_SerializationBehaviors { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_storage_ChunkDataStream {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_storage_ChunkDataStream {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_storage_ChunkDataStream {
      env: env,
      object: object
    }
  }

  pub fn next(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "next", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkDataStream#next was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn has_next(&self) -> bool {
    java_method!(self.env, self.object, "hasNext", "()Z", CallBooleanMethod) == 1
  }

  pub fn available(&self) -> i32 {
    java_method!(self.env, self.object, "available", "()I", CallIntMethod)
  }

  pub fn reset(&self) {
    java_method!(self.env, self.object, "reset", "()V", CallVoidMethod);
  }

}

#[derive(Debug)]
pub struct world_storage_ChunkLayout {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_storage_ChunkLayout {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_storage_ChunkLayout {
      env: env,
      object: object
    }
  }

  pub fn get_chunk_size(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getChunkSize", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#getChunkSize was null") }
    ret
  }

  pub fn get_space_max(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSpaceMax", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#getSpaceMax was null") }
    ret
  }

  pub fn get_space_min(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSpaceMin", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#getSpaceMin was null") }
    ret
  }

  pub fn get_space_size(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSpaceSize", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#getSpaceSize was null") }
    ret
  }

  pub fn get_space_origin(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSpaceOrigin", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#getSpaceOrigin was null") }
    ret
  }

  pub fn is_valid_chunk(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "isValidChunk", "(Lcom/flowpowered/math/vector/Vector3i;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_valid_chunk_1(&self, param_1: i32, param_2: i32, param_3: i32) -> bool {
    java_method!(self.env, self.object, "isValidChunk", "(III)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn is_in_chunk(&self, param_1: jobject) -> bool {
    java_method!(self.env, self.object, "isInChunk", "(Lcom/flowpowered/math/vector/Vector3i;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn is_in_chunk_1(&self, param_1: i32, param_2: i32, param_3: i32) -> bool {
    java_method!(self.env, self.object, "isInChunk", "(III)Z", CallBooleanMethodA, param_1, param_2, param_3) == 1
  }

  pub fn is_in_chunk_2(&self, param_1: jobject, param_2: jobject) -> bool {
    java_method!(self.env, self.object, "isInChunk", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Z", CallBooleanMethodA, param_1, param_2) == 1
  }

  pub fn is_in_chunk_3(&self, param_1: i32, param_2: i32, param_3: i32, param_4: i32, param_5: i32, param_6: i32) -> bool {
    java_method!(self.env, self.object, "isInChunk", "(IIIIII)Z", CallBooleanMethodA, param_1, param_2, param_3, param_4, param_5, param_6) == 1
  }

  pub fn to_chunk(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "toChunk", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#toChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_chunk_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "toChunk", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#toChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_world(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "toWorld", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#toWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn to_world_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "toWorld", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#toWorld was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn force_to_chunk(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "forceToChunk", "(Lcom/flowpowered/math/vector/Vector3i;)Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#forceToChunk was null") }
    ret
  }

  pub fn force_to_chunk_1(&self, param_1: i32, param_2: i32, param_3: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "forceToChunk", "(III)Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#forceToChunk was null") }
    ret
  }

  pub fn force_to_world(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "forceToWorld", "(Lcom/flowpowered/math/vector/Vector3i;)Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#forceToWorld was null") }
    ret
  }

  pub fn force_to_world_1(&self, param_1: i32, param_2: i32, param_3: i32) -> jobject {
    let ret = java_method!(self.env, self.object, "forceToWorld", "(III)Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#forceToWorld was null") }
    ret
  }

  pub fn add_to_chunk(&self, param_1: jobject, param_2: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "addToChunk", "(Lcom/flowpowered/math/vector/Vector3i;Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#addToChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn add_to_chunk_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: i32, param_5: i32, param_6: i32) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "addToChunk", "(IIIIII)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5, param_6);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#addToChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn move_to_chunk(&self, param_1: jobject, param_2: util_Direction) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "moveToChunk", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/util/Direction;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#moveToChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn move_to_chunk_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: util_Direction) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "moveToChunk", "(IIILorg/spongepowered/api/util/Direction;)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#moveToChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn move_to_chunk_2(&self, param_1: jobject, param_2: util_Direction, param_3: i32) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "moveToChunk", "(Lcom/flowpowered/math/vector/Vector3i;Lorg/spongepowered/api/util/Direction;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#moveToChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn move_to_chunk_3(&self, param_1: i32, param_2: i32, param_3: i32, param_4: util_Direction, param_5: i32) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "moveToChunk", "(IIILorg/spongepowered/api/util/Direction;I)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4, param_5);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/ChunkLayout#moveToChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

}


#[derive(Debug)]
pub struct world_storage_WorldProperties {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_storage_WorldProperties {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_storage_WorldProperties {
      env: env,
      object: object
    }
  }

  pub fn is_initialized(&self) -> bool {
    java_method!(self.env, self.object, "isInitialized", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_world_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getWorldName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getWorldName was null") }
    ret
  }

  pub fn get_unique_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getUniqueId", "()Ljava/util/UUID;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getUniqueId was null") }
    ret
  }

  pub fn is_enabled(&self) -> bool {
    java_method!(self.env, self.object, "isEnabled", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_enabled(&self, param_1: bool) {
    java_method!(self.env, self.object, "setEnabled", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn load_on_startup(&self) -> bool {
    java_method!(self.env, self.object, "loadOnStartup", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_load_on_startup(&self, param_1: bool) {
    java_method!(self.env, self.object, "setLoadOnStartup", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn does_keep_spawn_loaded(&self) -> bool {
    java_method!(self.env, self.object, "doesKeepSpawnLoaded", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_keep_spawn_loaded(&self, param_1: bool) {
    java_method!(self.env, self.object, "setKeepSpawnLoaded", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn does_generate_spawn_on_load(&self) -> bool {
    java_method!(self.env, self.object, "doesGenerateSpawnOnLoad", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_generate_spawn_on_load(&self, param_1: bool) {
    java_method!(self.env, self.object, "setGenerateSpawnOnLoad", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_spawn_position(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getSpawnPosition", "()Lcom/flowpowered/math/vector/Vector3i;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getSpawnPosition was null") }
    ret
  }

  pub fn set_spawn_position(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setSpawnPosition", "(Lcom/flowpowered/math/vector/Vector3i;)V", CallVoidMethodA, param_1);
  }

  pub fn get_generator_type(&self) -> world_GeneratorType {
    let ret = java_method!(self.env, self.object, "getGeneratorType", "()Lorg/spongepowered/api/world/GeneratorType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getGeneratorType was null") }
    world_GeneratorType { env: self.env, object: ret }
  }

  pub fn set_generator_type(&self, param_1: world_GeneratorType) {
    java_method!(self.env, self.object, "setGeneratorType", "(Lorg/spongepowered/api/world/GeneratorType;)V", CallVoidMethodA, param_1);
  }

  pub fn get_seed(&self) -> i64 {
    java_method!(self.env, self.object, "getSeed", "()J", CallLongMethod)
  }

  pub fn get_total_time(&self) -> i64 {
    java_method!(self.env, self.object, "getTotalTime", "()J", CallLongMethod)
  }

  pub fn get_world_time(&self) -> i64 {
    java_method!(self.env, self.object, "getWorldTime", "()J", CallLongMethod)
  }

  pub fn set_world_time(&self, param_1: i64) {
    java_method!(self.env, self.object, "setWorldTime", "(J)V", CallVoidMethodA, param_1);
  }

  pub fn get_dimension_type(&self) -> world_DimensionType {
    let ret = java_method!(self.env, self.object, "getDimensionType", "()Lorg/spongepowered/api/world/DimensionType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getDimensionType was null") }
    world_DimensionType { env: self.env, object: ret }
  }

  pub fn get_portal_agent_type(&self) -> world_PortalAgentType {
    let ret = java_method!(self.env, self.object, "getPortalAgentType", "()Lorg/spongepowered/api/world/PortalAgentType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getPortalAgentType was null") }
    world_PortalAgentType { env: self.env, object: ret }
  }

  pub fn is_p_v_p_enabled(&self) -> bool {
    java_method!(self.env, self.object, "isPVPEnabled", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_p_v_p_enabled(&self, param_1: bool) {
    java_method!(self.env, self.object, "setPVPEnabled", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn is_raining(&self) -> bool {
    java_method!(self.env, self.object, "isRaining", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_raining(&self, param_1: bool) {
    java_method!(self.env, self.object, "setRaining", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_rain_time(&self) -> i32 {
    java_method!(self.env, self.object, "getRainTime", "()I", CallIntMethod)
  }

  pub fn set_rain_time(&self, param_1: i32) {
    java_method!(self.env, self.object, "setRainTime", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn is_thundering(&self) -> bool {
    java_method!(self.env, self.object, "isThundering", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_thundering(&self, param_1: bool) {
    java_method!(self.env, self.object, "setThundering", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_thunder_time(&self) -> i32 {
    java_method!(self.env, self.object, "getThunderTime", "()I", CallIntMethod)
  }

  pub fn set_thunder_time(&self, param_1: i32) {
    java_method!(self.env, self.object, "setThunderTime", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_game_mode(&self) -> entity_living_player_gamemode_GameMode {
    let ret = java_method!(self.env, self.object, "getGameMode", "()Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getGameMode was null") }
    entity_living_player_gamemode_GameMode { env: self.env, object: ret }
  }

  pub fn set_game_mode(&self, param_1: entity_living_player_gamemode_GameMode) {
    java_method!(self.env, self.object, "setGameMode", "(Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;)V", CallVoidMethodA, param_1);
  }

  pub fn uses_map_features(&self) -> bool {
    java_method!(self.env, self.object, "usesMapFeatures", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_map_features_enabled(&self, param_1: bool) {
    java_method!(self.env, self.object, "setMapFeaturesEnabled", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn is_hardcore(&self) -> bool {
    java_method!(self.env, self.object, "isHardcore", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_hardcore(&self, param_1: bool) {
    java_method!(self.env, self.object, "setHardcore", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn are_commands_allowed(&self) -> bool {
    java_method!(self.env, self.object, "areCommandsAllowed", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_commands_allowed(&self, param_1: bool) {
    java_method!(self.env, self.object, "setCommandsAllowed", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_difficulty(&self) -> world_difficulty_Difficulty {
    let ret = java_method!(self.env, self.object, "getDifficulty", "()Lorg/spongepowered/api/world/difficulty/Difficulty;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getDifficulty was null") }
    world_difficulty_Difficulty { env: self.env, object: ret }
  }

  pub fn set_difficulty(&self, param_1: world_difficulty_Difficulty) {
    java_method!(self.env, self.object, "setDifficulty", "(Lorg/spongepowered/api/world/difficulty/Difficulty;)V", CallVoidMethodA, param_1);
  }

  pub fn does_generate_bonus_chest(&self) -> bool {
    java_method!(self.env, self.object, "doesGenerateBonusChest", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_world_border_center(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getWorldBorderCenter", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getWorldBorderCenter was null") }
    ret
  }

  pub fn set_world_border_center(&self, param_1: f64, param_2: f64) {
    java_method!(self.env, self.object, "setWorldBorderCenter", "(DD)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_world_border_diameter(&self) -> f64 {
    java_method!(self.env, self.object, "getWorldBorderDiameter", "()D", CallDoubleMethod)
  }

  pub fn set_world_border_diameter(&self, param_1: f64) {
    java_method!(self.env, self.object, "setWorldBorderDiameter", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_world_border_time_remaining(&self) -> i64 {
    java_method!(self.env, self.object, "getWorldBorderTimeRemaining", "()J", CallLongMethod)
  }

  pub fn set_world_border_time_remaining(&self, param_1: i64) {
    java_method!(self.env, self.object, "setWorldBorderTimeRemaining", "(J)V", CallVoidMethodA, param_1);
  }

  pub fn get_world_border_target_diameter(&self) -> f64 {
    java_method!(self.env, self.object, "getWorldBorderTargetDiameter", "()D", CallDoubleMethod)
  }

  pub fn set_world_border_target_diameter(&self, param_1: f64) {
    java_method!(self.env, self.object, "setWorldBorderTargetDiameter", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_world_border_damage_threshold(&self) -> f64 {
    java_method!(self.env, self.object, "getWorldBorderDamageThreshold", "()D", CallDoubleMethod)
  }

  pub fn set_world_border_damage_threshold(&self, param_1: f64) {
    java_method!(self.env, self.object, "setWorldBorderDamageThreshold", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_world_border_damage_amount(&self) -> f64 {
    java_method!(self.env, self.object, "getWorldBorderDamageAmount", "()D", CallDoubleMethod)
  }

  pub fn set_world_border_damage_amount(&self, param_1: f64) {
    java_method!(self.env, self.object, "setWorldBorderDamageAmount", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_world_border_warning_time(&self) -> i32 {
    java_method!(self.env, self.object, "getWorldBorderWarningTime", "()I", CallIntMethod)
  }

  pub fn set_world_border_warning_time(&self, param_1: i32) {
    java_method!(self.env, self.object, "setWorldBorderWarningTime", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_world_border_warning_distance(&self) -> i32 {
    java_method!(self.env, self.object, "getWorldBorderWarningDistance", "()I", CallIntMethod)
  }

  pub fn set_world_border_warning_distance(&self, param_1: i32) {
    java_method!(self.env, self.object, "setWorldBorderWarningDistance", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_game_rule(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getGameRule", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getGameRule was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_game_rules(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGameRules", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getGameRules was null") }
    ret
  }

  pub fn set_game_rule(&self, param_1: jobject, param_2: jobject) {
    java_method!(self.env, self.object, "setGameRule", "(Ljava/lang/String;Ljava/lang/String;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_additional_properties(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "getAdditionalProperties", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getAdditionalProperties was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_property_section(&self, param_1: data_DataQuery) -> Option<data_DataView> {
    let ret = java_method!(self.env, self.object, "getPropertySection", "(Lorg/spongepowered/api/data/DataQuery;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getPropertySection was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(data_DataView { env: self.env, object: unwrapped }) }
  }

  pub fn set_property_section(&self, param_1: data_DataQuery, param_2: data_DataView) {
    java_method!(self.env, self.object, "setPropertySection", "(Lorg/spongepowered/api/data/DataQuery;Lorg/spongepowered/api/data/DataView;)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_generator_modifiers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGeneratorModifiers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getGeneratorModifiers was null") }
    ret
  }

  pub fn set_generator_modifiers(&self, param_1: jobject) {
    java_method!(self.env, self.object, "setGeneratorModifiers", "(Ljava/util/Collection;)V", CallVoidMethodA, param_1);
  }

  pub fn get_generator_settings(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "getGeneratorSettings", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getGeneratorSettings was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_serialization_behavior(&self) -> world_SerializationBehavior {
    let ret = java_method!(self.env, self.object, "getSerializationBehavior", "()Lorg/spongepowered/api/world/SerializationBehavior;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldProperties#getSerializationBehavior was null") }
    world_SerializationBehavior { env: self.env, object: ret }
  }

  pub fn set_serialization_behavior(&self, param_1: world_SerializationBehavior) {
    java_method!(self.env, self.object, "setSerializationBehavior", "(Lorg/spongepowered/api/world/SerializationBehavior;)V", CallVoidMethodA, param_1);
  }

}

#[derive(Debug)]
pub struct world_storage_WorldStorage {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_storage_WorldStorage {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_storage_WorldStorage {
      env: env,
      object: object
    }
  }

  pub fn get_generated_chunks(&self) -> world_storage_ChunkDataStream {
    let ret = java_method!(self.env, self.object, "getGeneratedChunks", "()Lorg/spongepowered/api/world/storage/ChunkDataStream;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldStorage#getGeneratedChunks was null") }
    world_storage_ChunkDataStream { env: self.env, object: ret }
  }

  pub fn does_chunk_exist(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "doesChunkExist", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldStorage#doesChunkExist was null") }
    ret
  }

  pub fn get_chunk_data(&self, param_1: jobject) -> jobject {
    let ret = java_method!(self.env, self.object, "getChunkData", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/concurrent/CompletableFuture;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldStorage#getChunkData was null") }
    ret
  }

  pub fn get_world_properties(&self) -> world_storage_WorldProperties {
    let ret = java_method!(self.env, self.object, "getWorldProperties", "()Lorg/spongepowered/api/world/storage/WorldProperties;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/storage/WorldStorage#getWorldProperties was null") }
    world_storage_WorldProperties { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_TeleportHelper {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_TeleportHelper {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_TeleportHelper {
      env: env,
      object: object
    }
  }

  pub fn get_safe_location(&self, param_1: world_Location) -> Option<world_Location> {
    let ret = java_method!(self.env, self.object, "getSafeLocation", "(Lorg/spongepowered/api/world/Location;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/TeleportHelper#getSafeLocation was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Location { env: self.env, object: unwrapped }) }
  }

  pub fn get_safe_location_1(&self, param_1: world_Location, param_2: i32, param_3: i32) -> Option<world_Location> {
    let ret = java_method!(self.env, self.object, "getSafeLocation", "(Lorg/spongepowered/api/world/Location;II)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/TeleportHelper#getSafeLocation was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Location { env: self.env, object: unwrapped }) }
  }

}


#[derive(Debug)]
pub struct world_weather_Weather {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_weather_Weather {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_weather_Weather {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_weather_Weathers {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_weather_Weathers {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_weather_Weathers {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_weather_WeatherUniverse {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_weather_WeatherUniverse {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_weather_WeatherUniverse {
      env: env,
      object: object
    }
  }

  pub fn get_weather(&self) -> world_weather_Weather {
    let ret = java_method!(self.env, self.object, "getWeather", "()Lorg/spongepowered/api/world/weather/Weather;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/weather/WeatherUniverse#getWeather was null") }
    world_weather_Weather { env: self.env, object: ret }
  }

  pub fn get_remaining_duration(&self) -> i64 {
    java_method!(self.env, self.object, "getRemainingDuration", "()J", CallLongMethod)
  }

  pub fn get_running_duration(&self) -> i64 {
    java_method!(self.env, self.object, "getRunningDuration", "()J", CallLongMethod)
  }

  pub fn set_weather(&self, param_1: world_weather_Weather) {
    java_method!(self.env, self.object, "setWeather", "(Lorg/spongepowered/api/world/weather/Weather;)V", CallVoidMethodA, param_1);
  }

  pub fn set_weather_1(&self, param_1: world_weather_Weather, param_2: i64) {
    java_method!(self.env, self.object, "setWeather", "(Lorg/spongepowered/api/world/weather/Weather;J)V", CallVoidMethodA, param_1, param_2);
  }

}

#[derive(Debug)]
pub struct world_World {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_World {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_World {
      env: env,
      object: object
    }
  }

  pub fn get_players(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getPlayers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getPlayers was null") }
    ret
  }

  pub fn get_location(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(Lcom/flowpowered/math/vector/Vector3i;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_location_1(&self, param_1: i32, param_2: i32, param_3: i32) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(III)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_location_2(&self, param_1: jobject) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(Lcom/flowpowered/math/vector/Vector3d;)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_location_3(&self, param_1: f64, param_2: f64, param_3: f64) -> world_Location {
    let ret = java_method!(self.env, self.object, "getLocation", "(DDD)Lorg/spongepowered/api/world/Location;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_chunk_at_block(&self, param_1: jobject) -> Option<world_Chunk> {
    let ret = java_method!(self.env, self.object, "getChunkAtBlock", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getChunkAtBlock was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Chunk { env: self.env, object: unwrapped }) }
  }

  pub fn get_chunk_at_block_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<world_Chunk> {
    let ret = java_method!(self.env, self.object, "getChunkAtBlock", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getChunkAtBlock was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Chunk { env: self.env, object: unwrapped }) }
  }

  pub fn get_chunk(&self, param_1: jobject) -> Option<world_Chunk> {
    let ret = java_method!(self.env, self.object, "getChunk", "(Lcom/flowpowered/math/vector/Vector3i;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Chunk { env: self.env, object: unwrapped }) }
  }

  pub fn get_chunk_1(&self, param_1: i32, param_2: i32, param_3: i32) -> Option<world_Chunk> {
    let ret = java_method!(self.env, self.object, "getChunk", "(III)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Chunk { env: self.env, object: unwrapped }) }
  }

  pub fn load_chunk(&self, param_1: jobject, param_2: bool) -> Option<world_Chunk> {
    let ret = java_method!(self.env, self.object, "loadChunk", "(Lcom/flowpowered/math/vector/Vector3i;Z)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#loadChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Chunk { env: self.env, object: unwrapped }) }
  }

  pub fn load_chunk_1(&self, param_1: i32, param_2: i32, param_3: i32, param_4: bool) -> Option<world_Chunk> {
    let ret = java_method!(self.env, self.object, "loadChunk", "(IIIZ)Ljava/util/Optional;", CallObjectMethodA, param_1, param_2, param_3, param_4);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#loadChunk was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(world_Chunk { env: self.env, object: unwrapped }) }
  }

  pub fn unload_chunk(&self, param_1: world_Chunk) -> bool {
    java_method!(self.env, self.object, "unloadChunk", "(Lorg/spongepowered/api/world/Chunk;)Z", CallBooleanMethodA, param_1) == 1
  }

  pub fn get_loaded_chunks(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getLoadedChunks", "()Ljava/lang/Iterable;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getLoadedChunks was null") }
    ret
  }

  pub fn get_world_border(&self) -> world_WorldBorder {
    let ret = java_method!(self.env, self.object, "getWorldBorder", "()Lorg/spongepowered/api/world/WorldBorder;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getWorldBorder was null") }
    world_WorldBorder { env: self.env, object: ret }
  }

  pub fn new_chunk_pre_generate(&self, param_1: jobject, param_2: f64) -> world_WorldBorder_ChunkPreGenerate {
    let ret = java_method!(self.env, self.object, "newChunkPreGenerate", "(Lcom/flowpowered/math/vector/Vector3d;D)Lorg/spongepowered/api/world/WorldBorder$ChunkPreGenerate;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#newChunkPreGenerate was null") }
    world_WorldBorder_ChunkPreGenerate { env: self.env, object: ret }
  }

  pub fn get_dimension(&self) -> world_Dimension {
    let ret = java_method!(self.env, self.object, "getDimension", "()Lorg/spongepowered/api/world/Dimension;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getDimension was null") }
    world_Dimension { env: self.env, object: ret }
  }

  pub fn get_world_generator(&self) -> world_gen_WorldGenerator {
    let ret = java_method!(self.env, self.object, "getWorldGenerator", "()Lorg/spongepowered/api/world/gen/WorldGenerator;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getWorldGenerator was null") }
    world_gen_WorldGenerator { env: self.env, object: ret }
  }

  pub fn get_properties(&self) -> world_storage_WorldProperties {
    let ret = java_method!(self.env, self.object, "getProperties", "()Lorg/spongepowered/api/world/storage/WorldProperties;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getProperties was null") }
    world_storage_WorldProperties { env: self.env, object: ret }
  }

  pub fn get_directory(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getDirectory", "()Ljava/nio/file/Path;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getDirectory was null") }
    ret
  }

  pub fn get_unique_id(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getUniqueId", "()Ljava/util/UUID;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getUniqueId was null") }
    ret
  }

  pub fn get_name(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getName", "()Ljava/lang/String;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getName was null") }
    ret
  }

  pub fn get_difficulty(&self) -> world_difficulty_Difficulty {
    let ret = java_method!(self.env, self.object, "getDifficulty", "()Lorg/spongepowered/api/world/difficulty/Difficulty;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getDifficulty was null") }
    world_difficulty_Difficulty { env: self.env, object: ret }
  }

  pub fn get_game_rule(&self, param_1: jobject) -> Option<jobject> {
    let ret = java_method!(self.env, self.object, "getGameRule", "(Ljava/lang/String;)Ljava/util/Optional;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getGameRule was null") }
    let unwrapped = java_method!(self.env, ret, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", CallObjectMethodA, ::std::ptr::null() as *const jobject);
    if unwrapped.is_null() { None } else { Some(unwrapped) }
  }

  pub fn get_game_rules(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGameRules", "()Ljava/util/Map;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getGameRules was null") }
    ret
  }

  pub fn does_keep_spawn_loaded(&self) -> bool {
    java_method!(self.env, self.object, "doesKeepSpawnLoaded", "()Z", CallBooleanMethod) == 1
  }

  pub fn set_keep_spawn_loaded(&self, param_1: bool) {
    java_method!(self.env, self.object, "setKeepSpawnLoaded", "(Z)V", CallVoidMethodA, param_1);
  }

  pub fn get_spawn_location(&self) -> world_Location {
    let ret = java_method!(self.env, self.object, "getSpawnLocation", "()Lorg/spongepowered/api/world/Location;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getSpawnLocation was null") }
    world_Location { env: self.env, object: ret }
  }

  pub fn get_serialization_behavior(&self) -> world_SerializationBehavior {
    let ret = java_method!(self.env, self.object, "getSerializationBehavior", "()Lorg/spongepowered/api/world/SerializationBehavior;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getSerializationBehavior was null") }
    world_SerializationBehavior { env: self.env, object: ret }
  }

  pub fn set_serialization_behavior(&self, param_1: world_SerializationBehavior) {
    java_method!(self.env, self.object, "setSerializationBehavior", "(Lorg/spongepowered/api/world/SerializationBehavior;)V", CallVoidMethodA, param_1);
  }

  pub fn get_world_storage(&self) -> world_storage_WorldStorage {
    let ret = java_method!(self.env, self.object, "getWorldStorage", "()Lorg/spongepowered/api/world/storage/WorldStorage;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getWorldStorage was null") }
    world_storage_WorldStorage { env: self.env, object: ret }
  }

  pub fn trigger_explosion(&self, param_1: world_explosion_Explosion) {
    java_method!(self.env, self.object, "triggerExplosion", "(Lorg/spongepowered/api/world/explosion/Explosion;)V", CallVoidMethodA, param_1);
  }

  pub fn get_portal_agent(&self) -> world_PortalAgent {
    let ret = java_method!(self.env, self.object, "getPortalAgent", "()Lorg/spongepowered/api/world/PortalAgent;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getPortalAgent was null") }
    world_PortalAgent { env: self.env, object: ret }
  }

  pub fn get_biome_worker(&self) -> world_extent_worker_MutableBiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/MutableBiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getBiomeWorker was null") }
    world_extent_worker_MutableBiomeAreaWorker { env: self.env, object: ret }
  }

  pub fn get_block_worker(&self, param_1: event_cause_Cause) -> world_extent_worker_MutableBlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/MutableBlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getBlockWorker was null") }
    world_extent_worker_MutableBlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn save(&self) -> bool {
    java_method!(self.env, self.object, "save", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_block_worker_1(&self, param_1: event_cause_Cause) -> world_extent_worker_BlockVolumeWorker {
    let ret = java_method!(self.env, self.object, "getBlockWorker", "(Lorg/spongepowered/api/event/cause/Cause;)Lorg/spongepowered/api/world/extent/worker/BlockVolumeWorker;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getBlockWorker was null") }
    world_extent_worker_BlockVolumeWorker { env: self.env, object: ret }
  }

  pub fn get_biome_worker_1(&self) -> world_extent_worker_BiomeAreaWorker {
    let ret = java_method!(self.env, self.object, "getBiomeWorker", "()Lorg/spongepowered/api/world/extent/worker/BiomeAreaWorker;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/World#getBiomeWorker was null") }
    world_extent_worker_BiomeAreaWorker { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_WorldArchetype_Builder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_WorldArchetype_Builder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_WorldArchetype_Builder {
      env: env,
      object: object
    }
  }

  pub fn enabled(&self, param_1: bool) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "enabled", "(Z)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#enabled was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn loads_on_startup(&self, param_1: bool) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "loadsOnStartup", "(Z)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#loadsOnStartup was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn keeps_spawn_loaded(&self, param_1: bool) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "keepsSpawnLoaded", "(Z)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#keepsSpawnLoaded was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn generate_spawn_on_load(&self, param_1: bool) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "generateSpawnOnLoad", "(Z)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#generateSpawnOnLoad was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn seed(&self, param_1: i64) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "seed", "(J)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#seed was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn game_mode(&self, param_1: entity_living_player_gamemode_GameMode) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "gameMode", "(Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#gameMode was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn generator(&self, param_1: world_GeneratorType) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "generator", "(Lorg/spongepowered/api/world/GeneratorType;)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#generator was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn generator_modifiers(&self, param_1: &[world_gen_WorldGeneratorModifier]) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "generatorModifiers", "([Lorg/spongepowered/api/world/gen/WorldGeneratorModifier;)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#generatorModifiers was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn dimension(&self, param_1: world_DimensionType) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "dimension", "(Lorg/spongepowered/api/world/DimensionType;)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#dimension was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn difficulty(&self, param_1: world_difficulty_Difficulty) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "difficulty", "(Lorg/spongepowered/api/world/difficulty/Difficulty;)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#difficulty was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn uses_map_features(&self, param_1: bool) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "usesMapFeatures", "(Z)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#usesMapFeatures was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn hardcore(&self, param_1: bool) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "hardcore", "(Z)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#hardcore was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn generator_settings(&self, param_1: data_DataContainer) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "generatorSettings", "(Lorg/spongepowered/api/data/DataContainer;)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#generatorSettings was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn portal_agent(&self, param_1: world_PortalAgentType) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "portalAgent", "(Lorg/spongepowered/api/world/PortalAgentType;)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#portalAgent was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn pvp(&self, param_1: bool) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "pvp", "(Z)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#pvp was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn commands_allowed(&self, param_1: bool) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "commandsAllowed", "(Z)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#commandsAllowed was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn generate_bonus_chest(&self, param_1: bool) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "generateBonusChest", "(Z)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#generateBonusChest was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn serialization_behavior(&self, param_1: world_SerializationBehavior) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "serializationBehavior", "(Lorg/spongepowered/api/world/SerializationBehavior;)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#serializationBehavior was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn from_1(&self, param_1: world_storage_WorldProperties) -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, self.object, "from", "(Lorg/spongepowered/api/world/storage/WorldProperties;)Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#from was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn build(&self, param_1: jobject, param_2: jobject) -> world_WorldArchetype {
    let ret = java_method!(self.env, self.object, "build", "(Ljava/lang/String;Ljava/lang/String;)Lorg/spongepowered/api/world/WorldArchetype;", CallObjectMethodA, param_1, param_2);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype$Builder#build was null") }
    world_WorldArchetype { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_WorldArchetype {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_WorldArchetype {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_WorldArchetype {
      env: env,
      object: object
    }
  }

  pub fn builder() -> world_WorldArchetype_Builder {
    let ret = java_method!(self.env, "builder", "()Lorg/spongepowered/api/world/WorldArchetype$Builder;", CallStaticObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype#builder was null") }
    world_WorldArchetype_Builder { env: self.env, object: ret }
  }

  pub fn is_enabled(&self) -> bool {
    java_method!(self.env, self.object, "isEnabled", "()Z", CallBooleanMethod) == 1
  }

  pub fn load_on_startup(&self) -> bool {
    java_method!(self.env, self.object, "loadOnStartup", "()Z", CallBooleanMethod) == 1
  }

  pub fn does_keep_spawn_loaded(&self) -> bool {
    java_method!(self.env, self.object, "doesKeepSpawnLoaded", "()Z", CallBooleanMethod) == 1
  }

  pub fn does_generate_spawn_on_load(&self) -> bool {
    java_method!(self.env, self.object, "doesGenerateSpawnOnLoad", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_seed(&self) -> i64 {
    java_method!(self.env, self.object, "getSeed", "()J", CallLongMethod)
  }

  pub fn get_game_mode(&self) -> entity_living_player_gamemode_GameMode {
    let ret = java_method!(self.env, self.object, "getGameMode", "()Lorg/spongepowered/api/entity/living/player/gamemode/GameMode;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype#getGameMode was null") }
    entity_living_player_gamemode_GameMode { env: self.env, object: ret }
  }

  pub fn get_generator_type(&self) -> world_GeneratorType {
    let ret = java_method!(self.env, self.object, "getGeneratorType", "()Lorg/spongepowered/api/world/GeneratorType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype#getGeneratorType was null") }
    world_GeneratorType { env: self.env, object: ret }
  }

  pub fn get_generator_modifiers(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getGeneratorModifiers", "()Ljava/util/Collection;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype#getGeneratorModifiers was null") }
    ret
  }

  pub fn uses_map_features(&self) -> bool {
    java_method!(self.env, self.object, "usesMapFeatures", "()Z", CallBooleanMethod) == 1
  }

  pub fn is_hardcore(&self) -> bool {
    java_method!(self.env, self.object, "isHardcore", "()Z", CallBooleanMethod) == 1
  }

  pub fn are_commands_allowed(&self) -> bool {
    java_method!(self.env, self.object, "areCommandsAllowed", "()Z", CallBooleanMethod) == 1
  }

  pub fn does_generate_bonus_chest(&self) -> bool {
    java_method!(self.env, self.object, "doesGenerateBonusChest", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_dimension_type(&self) -> world_DimensionType {
    let ret = java_method!(self.env, self.object, "getDimensionType", "()Lorg/spongepowered/api/world/DimensionType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype#getDimensionType was null") }
    world_DimensionType { env: self.env, object: ret }
  }

  pub fn get_portal_agent_type(&self) -> world_PortalAgentType {
    let ret = java_method!(self.env, self.object, "getPortalAgentType", "()Lorg/spongepowered/api/world/PortalAgentType;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype#getPortalAgentType was null") }
    world_PortalAgentType { env: self.env, object: ret }
  }

  pub fn get_difficulty(&self) -> world_difficulty_Difficulty {
    let ret = java_method!(self.env, self.object, "getDifficulty", "()Lorg/spongepowered/api/world/difficulty/Difficulty;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype#getDifficulty was null") }
    world_difficulty_Difficulty { env: self.env, object: ret }
  }

  pub fn is_p_v_p_enabled(&self) -> bool {
    java_method!(self.env, self.object, "isPVPEnabled", "()Z", CallBooleanMethod) == 1
  }

  pub fn get_generator_settings(&self) -> data_DataContainer {
    let ret = java_method!(self.env, self.object, "getGeneratorSettings", "()Lorg/spongepowered/api/data/DataContainer;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype#getGeneratorSettings was null") }
    data_DataContainer { env: self.env, object: ret }
  }

  pub fn get_serialization_behavior(&self) -> world_SerializationBehavior {
    let ret = java_method!(self.env, self.object, "getSerializationBehavior", "()Lorg/spongepowered/api/world/SerializationBehavior;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldArchetype#getSerializationBehavior was null") }
    world_SerializationBehavior { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_WorldArchetypes {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_WorldArchetypes {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_WorldArchetypes {
      env: env,
      object: object
    }
  }

}

#[derive(Debug)]
pub struct world_WorldBorder_ChunkPreGenerate {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_WorldBorder_ChunkPreGenerate {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_WorldBorder_ChunkPreGenerate {
      env: env,
      object: object
    }
  }

  pub fn owner(&self, param_1: jobject) -> world_WorldBorder_ChunkPreGenerate {
    let ret = java_method!(self.env, self.object, "owner", "(Ljava/lang/Object;)Lorg/spongepowered/api/world/WorldBorder$ChunkPreGenerate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldBorder$ChunkPreGenerate#owner was null") }
    world_WorldBorder_ChunkPreGenerate { env: self.env, object: ret }
  }

  pub fn logger(&self, param_1: jobject) -> world_WorldBorder_ChunkPreGenerate {
    let ret = java_method!(self.env, self.object, "logger", "(Lorg/slf4j/Logger;)Lorg/spongepowered/api/world/WorldBorder$ChunkPreGenerate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldBorder$ChunkPreGenerate#logger was null") }
    world_WorldBorder_ChunkPreGenerate { env: self.env, object: ret }
  }

  pub fn tick_interval(&self, param_1: i32) -> world_WorldBorder_ChunkPreGenerate {
    let ret = java_method!(self.env, self.object, "tickInterval", "(I)Lorg/spongepowered/api/world/WorldBorder$ChunkPreGenerate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldBorder$ChunkPreGenerate#tickInterval was null") }
    world_WorldBorder_ChunkPreGenerate { env: self.env, object: ret }
  }

  pub fn chunks_per_tick(&self, param_1: i32) -> world_WorldBorder_ChunkPreGenerate {
    let ret = java_method!(self.env, self.object, "chunksPerTick", "(I)Lorg/spongepowered/api/world/WorldBorder$ChunkPreGenerate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldBorder$ChunkPreGenerate#chunksPerTick was null") }
    world_WorldBorder_ChunkPreGenerate { env: self.env, object: ret }
  }

  pub fn tick_percent_limit(&self, param_1: f32) -> world_WorldBorder_ChunkPreGenerate {
    let ret = java_method!(self.env, self.object, "tickPercentLimit", "(F)Lorg/spongepowered/api/world/WorldBorder$ChunkPreGenerate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldBorder$ChunkPreGenerate#tickPercentLimit was null") }
    world_WorldBorder_ChunkPreGenerate { env: self.env, object: ret }
  }

  pub fn start(&self) -> scheduler_Task {
    let ret = java_method!(self.env, self.object, "start", "()Lorg/spongepowered/api/scheduler/Task;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldBorder$ChunkPreGenerate#start was null") }
    scheduler_Task { env: self.env, object: ret }
  }

}

#[derive(Debug)]
pub struct world_WorldBorder {
  pub env: *mut JNIEnv,
  pub object: jobject
}

impl world_WorldBorder {
  pub unsafe fn from(env: *mut JNIEnv, object: jobject) -> Self {
    world_WorldBorder {
      env: env,
      object: object
    }
  }

  pub fn get_new_diameter(&self) -> f64 {
    java_method!(self.env, self.object, "getNewDiameter", "()D", CallDoubleMethod)
  }

  pub fn get_diameter(&self) -> f64 {
    java_method!(self.env, self.object, "getDiameter", "()D", CallDoubleMethod)
  }

  pub fn set_diameter(&self, param_1: f64) {
    java_method!(self.env, self.object, "setDiameter", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn set_diameter_1(&self, param_1: f64, param_2: i64) {
    java_method!(self.env, self.object, "setDiameter", "(DJ)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn set_diameter_2(&self, param_1: f64, param_2: f64, param_3: i64) {
    java_method!(self.env, self.object, "setDiameter", "(DDJ)V", CallVoidMethodA, param_1, param_2, param_3);
  }

  pub fn get_time_remaining(&self) -> i64 {
    java_method!(self.env, self.object, "getTimeRemaining", "()J", CallLongMethod)
  }

  pub fn set_center(&self, param_1: f64, param_2: f64) {
    java_method!(self.env, self.object, "setCenter", "(DD)V", CallVoidMethodA, param_1, param_2);
  }

  pub fn get_center(&self) -> jobject {
    let ret = java_method!(self.env, self.object, "getCenter", "()Lcom/flowpowered/math/vector/Vector3d;", CallObjectMethod);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldBorder#getCenter was null") }
    ret
  }

  pub fn get_warning_time(&self) -> i32 {
    java_method!(self.env, self.object, "getWarningTime", "()I", CallIntMethod)
  }

  pub fn set_warning_time(&self, param_1: i32) {
    java_method!(self.env, self.object, "setWarningTime", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_warning_distance(&self) -> i32 {
    java_method!(self.env, self.object, "getWarningDistance", "()I", CallIntMethod)
  }

  pub fn set_warning_distance(&self, param_1: i32) {
    java_method!(self.env, self.object, "setWarningDistance", "(I)V", CallVoidMethodA, param_1);
  }

  pub fn get_damage_threshold(&self) -> f64 {
    java_method!(self.env, self.object, "getDamageThreshold", "()D", CallDoubleMethod)
  }

  pub fn set_damage_threshold(&self, param_1: f64) {
    java_method!(self.env, self.object, "setDamageThreshold", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn get_damage_amount(&self) -> f64 {
    java_method!(self.env, self.object, "getDamageAmount", "()D", CallDoubleMethod)
  }

  pub fn set_damage_amount(&self, param_1: f64) {
    java_method!(self.env, self.object, "setDamageAmount", "(D)V", CallVoidMethodA, param_1);
  }

  pub fn new_chunk_pre_generate(&self, param_1: world_World) -> world_WorldBorder_ChunkPreGenerate {
    let ret = java_method!(self.env, self.object, "newChunkPreGenerate", "(Lorg/spongepowered/api/world/World;)Lorg/spongepowered/api/world/WorldBorder$ChunkPreGenerate;", CallObjectMethodA, param_1);
    if ret.is_null() { panic!("org/spongepowered/api/world/WorldBorder#newChunkPreGenerate was null") }
    world_WorldBorder_ChunkPreGenerate { env: self.env, object: ret }
  }

}

